package com.focus.Pages;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.FieldPosition;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Month;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.print.DocFlavor.STRING;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;

import com.focus.base.BaseEngine;
import com.focus.supporters.ExcelReader;
import com.focus.utilities.POJOUtility;
import com.sun.tools.rngom.parse.Parseable;

public class AccountMasterPage extends BaseEngine
{


	@FindBy(xpath="//*[@id='btnCancel']/i")
	public static WebElement CreateView_CloseBtn; 

	@FindBy(xpath="//*[@id='ctrlCreateMasterViewH']")
	public static WebElement CreateView_CreateViewTxt; 

	@FindBy(xpath="//*[@id='ctrlCreateMasterViewH_input_image']/span")
	public static WebElement CreateView_ExpansionBtn; 

	@FindBy(xpath="//*[@id='ctrlCreateMasterViewH_input_settings']/span")
	public static WebElement CreateView_SettingBtn; 

	@FindBy(xpath="//input[@id='chkAvailbleonMobileApp']")
	public static WebElement CreateView_AvailbleonMobileAppCheckbox; 

	@FindBy(xpath="//*[@id='1104_0_AdvanceFilter']/table/tbody/tr/td[1]/select")
	public static WebElement CreateView_Conjuction1Dropdown; 

	@FindBy(xpath="//*[@id='1104_0_AdvanceFilter']/table/tbody/tr/td[2]/select")
	public static WebElement CreateView_AccountType1Dropdown; 

	@FindBy(xpath="//*[@id='1104_0_AdvanceFilter']/table/tbody/tr/td[3]/select")
	public static WebElement CreateView_EqaulTo1Dropdown; 

	@FindBy(xpath="//*[@id='1104_0_AdvanceFilter']/table/tbody/tr/td[4]/select")
	public static WebElement CreateView_Value1Dropdown; 

	@FindBy(xpath="//*[@id='1104_0_AdvanceFilter']/table/tbody/tr/td[5]/input")
	public static WebElement CreateView_Customer1Dropdown; 

	@FindBy(xpath="//*[@id='1104_0_AdvanceFilter']/table/tbody/tr/td[6]/span")
	public static WebElement CreateView_CloseFirstrow; 

	@FindBy(xpath="//*[@id='1104_0_AdvanceFilter']/table/tbody/tr/td[7]/span")
	public static WebElement CreateView_AddRowBtn; 				

	////Creation For Second Row

	@FindBy(xpath="//*[@id='1104_0_AdvanceFilter']/table/tbody/tr/td[1]/select")
	public static WebElement CreateView_Conjuction2Dropdown; 

	@FindBy(xpath="//*[@id='1104_0_AdvanceFilter']/table/tbody/tr[2]/td[2]/select")
	public static WebElement CreateView_AccountType2Dropdown; 

	@FindBy(xpath="//*[@id='1104_0_AdvanceFilter']/table/tbody/tr[2]/td[3]/select")
	public static WebElement CreateView_EqaulTo2Dropdown; 

	@FindBy(xpath="//*[@id='1104_0_AdvanceFilter']/table/tbody/tr[2]/td[4]/select")
	public static WebElement CreateView_Value2Dropdown; 

	@FindBy(xpath="//*[@id='1104_0_AdvanceFilter']/table/tbody/tr[2]/td[5]/input")
	public static WebElement CreateView_Customer2Dropdown; 

	@FindBy(xpath="//*[@id='1104_0_AdvanceFilter']/table/tbody/tr[2]/td[6]/span")
	public static WebElement CreateView_CloseSecondrow; 

	@FindBy(xpath="//button[@id='btnMasterViewDelete']")
	public static WebElement CreateView_DeleteBtn; 

	@FindBy(xpath="//button[@id='btnSave']")
	public static WebElement CreateView_SaveBtn; 

	@FindBy(xpath="//*[@id='btnCancel']")
	public static WebElement CreateView_CancelBtn; 

	@FindBy(xpath="//*[@id='spnhiererchy']/div/div[2]/div/div/ul/li[2]/a")
	public static WebElement masterTreeeViewIdEditBtn; 

	@FindBy(xpath="//*[@id='spnhiererchy']/div/div[2]/div/div/ul/li[3]/a")
	public static WebElement masterTreeViewIdDeleteBtn; 

	@FindBy(xpath="//div[@id='divTreeMenu']")
	public static WebElement masterTreeDisplayMenuAccountGroups; 		


	@FindBy(xpath="//a[contains(text(),'Search on')]")
	public static WebElement masterSearchTxtBtn_SearchOnBtn; 

	@FindBy(xpath="//label[@class='form-group']")
	public static WebElement searchOn_SelectFilterLabel; 

	@FindBy(xpath="//select[@id='ddlSelectFilter']")
	public static WebElement searchOn_SelectFilterDropdown; 

	@FindBy(xpath="//input[@id='chkSearchSelectAll']")
	public static WebElement searchOn_SelectAllCheckBox; 

	@FindBy(xpath="//*[@id='0']")
	public static WebElement searchOn_NameCheckbox; 

	@FindBy(xpath="//input[@id='1']")
	public static WebElement searchOn_AliasCheckbox; 

	@FindBy(xpath="//input[@id='2']")
	public static WebElement searchOn_COdeCheckbox; 

	@FindBy(xpath="//input[@id='3']")
	public static WebElement searchOn_AccountTypeCheckbox; 

	@FindBy(xpath="//input[@id='4']")
	public static WebElement searchOn_CreditLimitCheckbox; 

	@FindBy(xpath="//input[@id='5']")
	public static WebElement searchOn_CreditDaysCheckbox; 

	@FindBy(xpath="//input[@id='6']")
	public static WebElement searchOn_CreatedByCheckbox; 

	@FindBy(xpath="//input[@id='7']")
	public static WebElement searchOn_ModifiedByCheckbox; 

	@FindBy(xpath="//input[@id='8']")
	public static WebElement searchOn_CreatedDateCheckbox; 

	@FindBy(xpath="//input[@id='9']")
	public static WebElement searchOn_ModifiedDate; 

	@FindBy(xpath="//input[@id='10']")
	public static WebElement searchOn_AllowOtherCompaniesToViewTheRecordCheckbox; 

	@FindBy(xpath="//input[@id='11']")
	public static WebElement searchOn_SyscReceiverDateCheckbox; 

	@FindBy(xpath="//input[@id='12']")
	public static WebElement searchOn_EditingLocationCheckbox; 

	@FindBy(xpath="//input[@id='13']")
	public static WebElement searchOn_ChequeDiscountLimitCheckbox; 

	@FindBy(xpath="//input[@id='14']")
	public static WebElement searchOn_RateOfInterestCheckbox; 

	@FindBy(xpath="//input[@id='15']")
	public static WebElement searchOn_BankACCheckbox; 

	@FindBy(xpath="//input[@id='16']")
	public static WebElement searchOn_PDCDIscountedAC; 

	@FindBy(xpath="//input[@id='17']")
	public static WebElement searchOn_DebitCreditProposalCheckbox; 

	@FindBy(xpath="//input[@id='18']")
	public static WebElement searchOn_DebitCreditRequiredCheckbox; 

	@FindBy(xpath="//input[@id='19']")
	public static WebElement searchOn_ExchangeAdjustmentGainACCheckbox; 

	@FindBy(xpath="//input[@id='20']")
	public static WebElement searchOn_ExchangeAdjustmentLossACCheckbox; 

	@FindBy(xpath="//input[@id='21']")
	public static WebElement searchOn_PrimaryAccountCheckbox; 

	@FindBy(xpath="//input[@id='22']")
	public static WebElement searchOn_DefaultCurrencyCheckbox; 

	@FindBy(xpath="//input[@id='23']")
	public static WebElement searchOn_ConsolidationMethodCheckbox; 

	@FindBy(xpath="//input[@id='24']")
	public static WebElement searchOn_PaymentTermsCheckbox; 

	@FindBy(xpath="//input[@id='25']")
	public static WebElement searchOn_RemainderTermsCheckbox; 

	@FindBy(xpath="//input[@id='26']")
	public static WebElement searchOn_FinanceChargeTermsCheckbox; 

	@FindBy(xpath="//input[@id='27']")
	public static WebElement searchOn_AddressCheckbox; 

	@FindBy(xpath="//input[@id='28']")
	public static WebElement searchOn_City1Checkbox; 

	@FindBy(xpath="//input[@id='29']")
	public static WebElement searchOn_Pin1Checkbox; 

	@FindBy(xpath="//input[@id='30']")
	public static WebElement searchOn_DeliveryAddreddCheckbox; 

	@FindBy(xpath="//input[@id='31']")
	public static WebElement searchOn_City2Checkbox; 

	@FindBy(xpath="//input[@id='32']")
	public static WebElement searchOn_Pin2Checkbox; 

	@FindBy(xpath="//input[@id='33']")
	public static WebElement searchOn_SendEmailToCustomerCheckbox; 

	@FindBy(xpath="//input[@id='34']")
	public static WebElement searchOn_AllowCustomerPortalCheckbox; 

	@FindBy(xpath="//input[@id='35']")
	public static WebElement searchOn_EmailCheckbox; 

	@FindBy(xpath="//input[@id='36']")
	public static WebElement searchOn_PasswordCheckbox; 

	@FindBy(xpath="//input[@id='37']")
	public static WebElement searchOn_TelNOCheckbox; 

	@FindBy(xpath="//input[@id='38']")
	public static WebElement searchOn_FaxNoCheckbox; 

	@FindBy(xpath="//input[@id='39']")
	public static WebElement searchOn_BankAccountNameCheckbox; 

	@FindBy(xpath="//input[@id='40']")
	public static WebElement searchOn_BankAccountNumberCheckbox; 

	@FindBy(xpath="//input[@id='41']")
	public static WebElement searchOn_IFSCCodeCheckbox; 

	@FindBy(xpath="//input[@id='42']")
	public static WebElement searchOn_PaymentTypeCheckbox; 

	@FindBy(xpath="//input[@id='43']")
	public static WebElement searchOn_FinanceEmailCheckbox; 

	@FindBy(xpath="//input[@id='44']")
	public static WebElement searchOn_PortalEmailCheckbox; 

	@FindBy(xpath="//input[@id='45']")
	public static WebElement searchOn_NetbalanceCheckbox; 

	@FindBy(xpath="//input[@id='46']")
	public static WebElement searchOn_DRBalanceCheckbox; 

	@FindBy(xpath="//input[@id='47']")
	public static WebElement searchOn_CRbalanceCheckbox; 

	@FindBy(xpath="//*[@id='divSearchMenu']/div[4]/button")
	public static WebElement searchOn_OkBtn;

	@FindBy(xpath="//a[contains(text(),'Advance Search')]")
	public static WebElement masterSearchTxtBtn_AdvanceSearchBtn; 


	//First Row Fields

	@FindBy(xpath="//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[1]/td[1]/select")
	public static WebElement advanceSearch_Conjuction1Dropdown;

	@FindBy(xpath="//tbody//input[@placeholder='Select Field']")
	public static WebElement advanceSearch_SelectField1Dropdown;

	@FindBy(xpath="//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[1]/td[3]/select")
	public static WebElement advanceSearch_SelectOperator1Dropdown;

	@FindBy(xpath="//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[1]/td[4]/select")
	public static WebElement advanceSearch_CompareWith1Dropdown;

	@FindBy(xpath="//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[1]/td[5]/input")
	public static WebElement advanceSearch_Value1Txt;

	@FindBy(xpath="//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[1]/td[6]/span")
	public static WebElement advanceSearch_CloseRow1Btn;

	@FindBy(xpath="//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[1]/td[7]/span")
	public static WebElement advanceSearch_AddRowBtn;

	//Second Row Fields
	@FindBy(xpath="//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[2]/td[1]/select")
	public static WebElement advanceSearch_ConjuctionDropdown;

	@FindBy(xpath="//tbody//input[@placeholder='Select Field']")
	public static WebElement advanceSearch_SelectFieldDropdown;

	@FindBy(xpath="//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[2]/td[3]/select")
	public static WebElement advanceSearch_SelectOperatorDropdown;

	@FindBy(xpath="//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[2]/td[4]/select")
	public static WebElement advanceSearch_CompareWithDropdown;

	@FindBy(xpath="//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[2]/td[5]/input")
	public static WebElement advanceSearch_ValueTxt;

	@FindBy(xpath="//*[@id='1104_1_AdvanceFilter']/table/tbody/tr[2]/td[6]/span")
	public static WebElement advanceSearch_CloseRow2Btn;

	@FindBy(xpath="//*[@id='divCreateNewTreeModalBody']/div[2]/div[2]/input")
	public static WebElement advanceSearch_GenerateQueryBtn;

	@FindBy(xpath="//div[@id='divStrQuery']")
	public static WebElement advanceSearch_QueryDescriptionTxt;

	@FindBy(xpath="//button[@id='btnOk']")
	public static WebElement advanceSearch_OkBtn;

	@FindBy(xpath="//*[@id='btnCancel']")
	public static WebElement advanceSearch_CancelBtn;

	@FindBy(xpath="//*[@id='btnCancel']/i")///Both Has Same ID But But Different in Fields 
	public static WebElement advanceSearch_CloseBtn;							

	@FindBy(xpath="//input[@id='cmbUserTypeMaster']")
	public static WebElement mastercmbMasterTxt; 

	@FindBy(xpath="//*[@id='cmbUserTypeMaster_input_image']/span")
	public static WebElement masterCmbMasterExpansionBtn; 

	@FindBy(xpath="//*[@id='cmbUserTypeMaster_input_settings']/span")
	public static WebElement masterCumMasterSettingBtn; 

	@FindBy(xpath="//*[@id='cmbUserTypeMaster_customize_popup_container']")
	public static WebElement masterCumMaster_Pop_sNameTxt;

	@FindBy(xpath="//*[@id='cmbUserTypeMaster_customize_popup_footer']/div/div/input[1]")
	public static WebElement masterCumMaster_StandardFieldsBtn;

	@FindBy(xpath="//*[@id='cmbUserTypeMaster_customize_popup_heading']")
	public static WebElement masterCumMaster_PopCustomizeDispalyColumnsLabel; 		

	@FindBy(xpath="//*[@id='cmbUserTypeMaster_customize_popup_standardfields_list']")
	public static WebElement masterCumMaster_Pop_StandardFields_Filedsdropdown;

	@FindBy(xpath="//*[@id='cmbUserTypeMaster_customize_popup_standardfields_header']")
	public static WebElement masterCumMaster_Pop_StandardFields_HeaderTxt;

	@FindBy(xpath="//*[@id='cmbUserTypeMaster_customize_popup_standardfields_alignment']")
	public static WebElement masterCumMaster_Pop_StandardFields_Allignmentdropdown;

	@FindBy(xpath="//*[@id='cmbUserTypeMaster_customize_popup_standardfields_width']")
	public static WebElement masterCumMaster_Pop_StandardFields_WidthTxt;

	@FindBy(xpath="//*[@id='cmbUserTypeMaster_customize_popup_footer']/div/div/input[3]")
	public static WebElement masterCumMaster_Pop_StandardFields_OkBtn;

	@FindBy(xpath="//*[@id='cmbUserTypeMaster_customize_popup_footer']/div/div/input[4]")
	public static WebElement masterCumMaster_Pop_StandardFields_CancelBtn;

	@FindBy(xpath="//*[@id='cmbUserTypeMaster_customize_popup_footer']/div/div/input[2]")
	public static WebElement masterCumMaster_Pop_DeleteColumnBtn;

	@FindBy(xpath="//*[@id='cmbUserTypeMaster_customize_popup_footer']/div/div/input[3]")
	public static WebElement masterCumMaster_Pop_OkBtn;

	@FindBy(xpath="//*[@id='cmbUserTypeMaster_customize_popup_footer']/div/div/input[4]")
	public static WebElement masterCumMaster_Pop_CancelBtn;


	@FindBy(xpath="//*[@id='li_moveup']/div/div[1]/a[1]/span")
	public static WebElement masterMoveTheSelectionToNextBookMarkBtn; 

	@FindBy(xpath="//span[@class='icon-font6 icon-bookmarkdown theme_icon-color']")
	public static WebElement masterMoveTheSelectionToPrevoiusBookmarkBtn; 

	@FindBy(xpath="//span[@class='theme_icon-color icon-font6 icon-show-all-records']")
	public static WebElement masterShowAllRecordsBtn; 

	@FindBy(xpath="//span[@class='icon-font6 icon-missmatched-entries theme_icon-color']")
	public static WebElement masterShowAllUnauthorisedRecords; 


	@FindBy(xpath="//span[@class='icon-font6 icon-closed-records theme_icon-color']")
	public static WebElement masterShowAllClosedRecordsBtn; 

	@FindBy(xpath="//span[@class='icon-font6 icon-external-module theme_icon-color']")
	public static WebElement masterAutoAdjustColoumnsBtn; 

	@FindBy(xpath="//input[@id='chkRetainSelection']")
	public static WebElement masterRetainSelectionCheckBox; 

	@FindBy(xpath="//*[@id='btnsideBar']")
	public static WebElement masterSideBarBtn; 

	//InfoPanel


	@FindBy(xpath="//label[contains(text(),'Info Panel')]")
	public static WebElement masterInfoPanelLabel; 

	@FindBy(xpath="//i[@class='icon-custamize theme_icon-color']")
	public static WebElement masterInfoPanelCustammizeBtn;


	@FindBy(xpath="//h4[contains(text(),'Customize InfoPanel')]")
	public static WebElement infoPanel_CustomizeInfoPanelLabel;

	@FindBy(xpath="//*[@id='Customize_AddNew_InfoPanel']/div[1]/span")
	public static WebElement infoPanel_PopAddBtn;

	@FindBy(xpath="//*[@id='Customize_RemoveOne_InfoPanel']/div[1]/span")
	public static WebElement infoPanel_PopRemoveBtn;

	@FindBy(xpath="//*[@id='btnShowPanelNames_CustomizeInfoPanel']/div/span")
	public static WebElement infoPanel_PopAllIcon;

	@FindBy(xpath="//*[@id='btnShowPanelDetails_CustomizeInfoPanel']/div/span")
	public static WebElement infoPanel_PopDetailsIcon;

	@FindBy(xpath="//*[@id='tbl_infoPanel_names']/tbody/tr[1]/td[4]/i")
	public static WebElement infoPane_PopGridCreditHistoryAddBtn;

	@FindBy(xpath="//*[@id='tbl_infoPanel_names']/tbody/tr[2]/td[4]/i")
	public static WebElement infoPane_PopGridAgingAnalysisAddBtn;

	@FindBy(xpath="//*[@id='tbl_infoPanel_names']/tbody/tr[3]/td[4]/i")
	public static WebElement infoPane_PopGridAgingAnlaysisBaseAddBtn;

	@FindBy(xpath="//*[@id='tbl_infoPanel_names']/tbody/tr[4]/td[4]/i")
	public static WebElement infoPane_PopGridAuthorizationAddBtn;

	@FindBy(xpath="//a[@class='Fbutton previous_link']")
	public static WebElement infoPane_PopDetailsPreviousBtn;

	@FindBy(xpath="//*[@id='page_navigation']/a[2]")
	public static WebElement infoPane_PopDeailsOneBtn;

	@FindBy(xpath="//*[@id='customize_InfoPanel_btnSave']")
	public static WebElement infoPane_PopDeatilsSaveBtn;

	@FindBy(xpath="//*[@id='customize_InfoPanel_btnCancel']")
	public static WebElement infoPane_PopDetailsCloseBtn;

	@FindBy(xpath="//*[@id='btnCancel']/i")
	public static WebElement infoPane_PopCloseBtn;


	@FindBy(xpath="//i[@id='id_InfoPanelEdit']")
	public static WebElement masterInfoPanelEditBtn;

	@FindBy(xpath="//i[@id='infopanelCloseButton']")
	public static WebElement masterInfoPanelCloseBtn;


	//////Grid Elements ---------->Body Field******************

	@FindBy(xpath="//th[2]//span[1]")
	public static WebElement masterGrid_Header_SelectTxt;

	@FindBy(xpath="//input[@id='liSelectAllMasters']")
	public static WebElement masterGridHeader_SelectAllRowsCheckBox;

	@FindBy(xpath="//section[@id='page_Content']//th[3]")
	public static WebElement masterGridHeader_MasterId;

	@FindBy(xpath="//section[@id='page_Content']//th[4]]")
	public static WebElement masterGridHeader_Name;

	@FindBy(xpath="//td[contains(text(),'ASSETS')]")
	public static WebElement masterAssets;

	@FindBy(xpath="//td[contains(text(),'EXPENSES')]")
	public static WebElement masterExpenses;

	@FindBy(xpath="//td[contains(text(),'CONTROL ACCOUNTS')]")
	public static WebElement masterControlAccounts;

	@FindBy(xpath="//td[contains(text(),'REVENUE')]")
	public static WebElement masterRevenue;

	@FindBy(xpath="//td[contains(text(),'EQUITIES')]")
	public static WebElement masterEquities;

	@FindBy(xpath="//td[contains(text(),'LIABILITIES')]")
	public static WebElement masterLiabilities;


	@FindBy(xpath="//section[@id='page_Content']//th[6]")
	public static WebElement masterGridHeader_ReorderLevel;

	@FindBy(xpath="//section[@id='page_Content']//th[7]")
	public static WebElement masterGridHeader_BinCapacity;

	@FindBy(xpath="//section[@id='page_Content']//th[8]")
	public static WebElement masterGridHeader_ISAttribute;

	@FindBy(xpath="//section[@id='page_Content']//th[9]")
	public static WebElement masterGridHeader_ProducyType;

	@FindBy(xpath="//th[contains(text(),'Valuation Method')]")
	public static WebElement masterGridHeader_ValuationMethod;

	@FindBy(xpath="//th[@class='OverFlowHidden text-center']//span[contains(text(),'No of decimals')]")
	public static WebElement masterGridHeader_NoOfDecimals;

	@FindBy(xpath="//section[@id='page_Content']//th[7]")
	public static WebElement masterGridHeader_RoundingType;

	@FindBy(xpath="//td[contains(text(),'Customer A')]")
	public static WebElement masterCustomerA;

	@FindBy(xpath="//td[contains(text(),'Customer B')]")
	public static WebElement masterCustomerB;

	@FindBy(xpath="//td[contains(text(),'Customer B')]")
	public static WebElement masterCustomerC;





	//Row Selecting


	@FindBy(xpath="//*[@id='lblnchecked']/input")
	public static WebElement masterGrid_SelectFirstRow;

	//Footer Fields
	@FindBy(xpath="//*[@id='id_PageButtonsMasterLanding']/div/div[1]/div/input")
	public static WebElement masterFirstBtn;

	@FindBy(xpath="//*[@id='id_PageButtonsMasterLanding']/div/div[2]/div/input")
	public static WebElement masterPreviousBtn;

	@FindBy(xpath="//*[@id='btn1']")
	public static WebElement masterOneBtn;

	@FindBy(xpath="//*[@id='id_PageButtonsMasterLanding']/div/div[4]/div/input")
	public static WebElement masterNextBtn;

	@FindBy(xpath="//*[@id='id_PageButtonsMasterLanding']/div/div[5]/div/input")
	public static WebElement masterEndBtn;


	//Accounts Creation Page 

	//Header tab Fields

	@FindBy(xpath="//*[@id='divBtnGroup0']")
	public static WebElement headerGeneralTab;

	@FindBy(xpath="//*[@id='divBtnGroup1']/div/a")
	public static WebElement headerAccountSettingTab;

	@FindBy(xpath="//*[@id='divBtnGroup2']/div/a")
	public static WebElement headerDetailsTab;

	@FindBy(xpath="//*[@id='divBtnGroup3']/div/a")
	public static WebElement headerPrintLayoutTab;

	@FindBy(xpath="//*[@id='divBtnGroup1']/div/a")
	public static WebElement headerUnitsTab;

	@FindBy(xpath="//*[@id='divBtnGroup2']/div/a")
	public static WebElement headerItemSettingsTab;

	@FindBy(xpath="//*[@id='divBtnGroup3']/div/a")
	public static WebElement headerClassificationTab;

	@FindBy(xpath="//*[@id='divBtnGroup4']/div/a")
	public static WebElement headerOtherDetailsTab;

	@FindBy(xpath="//*[@id='divBtnGroup5']/div/a")
	public static WebElement headerReplenishmentTab;

	@FindBy(xpath="//*[@id='divBtnGroup6']/div/a")
	public static WebElement headerOutletTab;



	//Header Section Fields




	//Item General Elements


	@FindBy(xpath="//select[@id='iProductType']")
	public static WebElement itemTypeDropdown;

	@FindBy(xpath="//input[@id='fReorderLevel']")
	public static WebElement reorderLevelTxt;

	@FindBy(xpath="//input[@id='iBinCapacity']")
	public static WebElement binCapacityTxt;

	@FindBy(xpath="//select[@id='iValuationMethod']")
	public static WebElement valuationMethodDropdown;

	@FindBy(xpath="//input[@id='iCategory']")
	public static WebElement categoryTxt;

	@FindBy(xpath="//*[@id=iCategory_input_image']/span")
	public static WebElement category_ExpansionBtn;

	@FindBy(xpath="//*[@id='iCategory_input_settings']/span")
	public static WebElement category_SettingBtn;

	@FindBy(xpath="//select[@id='iProductMake']")
	public static WebElement itemMakeDropdown;

	@FindBy(xpath="//input[@id='Printer']")
	public static WebElement printerTxt;

	@FindBy(xpath="//input[@id='iAlternateCategory']")
	public static WebElement alternateCategorytxt;

	@FindBy(xpath="//*[@id='iAlternateCategory_input_image']/span")
	public static WebElement alternateCategory_ExpansionBtn;

	@FindBy(xpath="//*[@id='iAlternateCategory_input_settings']/span")
	public static WebElement alternate_SettingBtn;

	@FindBy(xpath="//textarea[@id='sDescription']")
	public static WebElement descriptionTxt;

	@FindBy(xpath="//input[@id='bPerishableItem']")
	public static WebElement perishableItemCheckbox;

	@FindBy(xpath="//input[@id='iBin']")
	public static WebElement binTxt;

	@FindBy(xpath="//*[@id='iBin_input_image']/span")
	public static WebElement bin_ExpansionBtn;

	@FindBy(xpath="//*[@id='iBin_input_settings']/span")
	public static WebElement bin_SettingBtn;



	/////Item---New---Units

	@FindBy(xpath="//input[@id='iDefaultBaseUnit']")
	public static WebElement defaultBaseUnitTxt;

	@FindBy(xpath="//*[@id='iDefaultBaseUnit_input_image']/span")
	public static WebElement defaultBaseUnit_ExpansionBtn;

	@FindBy(xpath="//*[@id='iDefaultBaseUnit_input_settings']/span")
	public static WebElement defaultBaseUnit_SettingBtn;

	@FindBy(xpath="//input[@id='iDefaultSalesUnit']")
	public static WebElement defaultSalesUnit_Txt;

	@FindBy(xpath="//*[@id='iDefaultSalesUnit_input_image']/span")
	public static WebElement defaultSalesUnit_ExpansionBtn;

	@FindBy(xpath="//*[@id='iDefaultSalesUnit_input_settings']/span")
	public static WebElement defaultSalesUnit_SettingBtn;

	@FindBy(xpath="//input[@id='iDefaultPurchaseUnit']")
	public static WebElement defaultPurchaseUnitTxt;

	@FindBy(xpath="//*[@id='iDefaultPurchaseUnit_input_image']/span")
	public static WebElement defaultPurchaseUnit_ExpansioinBtn;

	@FindBy(xpath="//*[@id='iDefaultPurchaseUnit_input_settings']/span")
	public static WebElement defaultPurchaseUnit_SettingBtn;

	@FindBy(xpath="//input[@id='fLength']")
	public static WebElement lengthTxt;

	@FindBy(xpath="//input[@id='fWidth']")
	public static WebElement widthTxt;

	@FindBy(xpath="//input[@id='fHeight']")
	public static WebElement heightTxt;

	@FindBy(xpath="//input[@id='fCBM']")
	public static WebElement CBMTxt;


	/////Master--Item--Item--New--Settings

	@FindBy(xpath="//input[@id='fStandardCost']")
	public static WebElement standardCostTxt;

	@FindBy(xpath="//input[@id='fOverheadCost']")
	public static WebElement overheadCostTxt;

	@FindBy(xpath="//input[@id='fIndirectCost']")
	public static WebElement indirectCostTxt;

	@FindBy(xpath="//input[@id='fProfit']")
	public static WebElement profitTxt;

	@FindBy(xpath="//input[@id='iDontshowproductexpireddays']")
	public static WebElement dontshowproductexpiringindaysTxt;

	@FindBy(xpath="//input[@id='iTaxCode']")
	public static WebElement taxCodeTxt;

	@FindBy(xpath="//*[@id='iTaxCode_input_image']/span")
	public static WebElement taxCode_ExpansionBtn;

	@FindBy(xpath="//*[@id='iTaxCode_input_settings']/span")
	public static WebElement taxCode_SettingBtn;



	/////////Master--Item--Item--New--Classification


	@FindBy(xpath="//select[@id='iABCCodeValue']")
	public static WebElement ABCCodeValueDropdown;

	@FindBy(xpath="//select[@id='iABCCodeMargin']")
	public static WebElement ABCCodeMarginDropdown;

	@FindBy(xpath="//select[@id='iABCCodeRevenue']")
	public static WebElement ABCCodeRevenueDropdown;

	@FindBy(xpath="//select[@id='iABCCodeCarryingCost']")
	public static WebElement ABCCodeCarryingCostDropdown;

	@FindBy(xpath="//*[@id='sBarcode1']")
	public static WebElement barcode1Txt;

	@FindBy(xpath="//input[@id='sBarcode2']")
	public static WebElement barcode2Txt;

	@FindBy(xpath="//input[@id='sBarcode3']")
	public static WebElement barcode3Txt;


	///Units ---Grid---First Row
	@FindBy(xpath="//input[@id='iUnit1']")
	public static WebElement gridUnitTxt;

	@FindBy(xpath="//*[@id='iUnit_input_image']/span")
	public static WebElement gridUnit_ExpansionBtn;

	@FindBy(xpath="//*[@id='iUnit_input_settings']/span")
	public static WebElement gridUnit_SettingBtn;

	@FindBy(xpath="//tr[@class='tableRow']//input[@id='sBarcode1']")
	public static WebElement barcodeTxt;

	@FindBy(xpath="//input[@id='sBatch1']")
	public static WebElement batchTxt;




	//Master--Item--Item--New--Other Details

	@FindBy(xpath="//input[@id='iCostOfIssueAccount']")
	public static WebElement costOfIssueAccountTxt;

	@FindBy(xpath="//*[@id='iCostOfIssueAccount_input_image']/span")
	public static WebElement costOfIssueAccount_ExpansiionBtn;

	@FindBy(xpath="//*[@id='iCostOfIssueAccount_input_settings']/span")
	public static WebElement costOfIssueAccount_SettingBtn;

	@FindBy(xpath="//input[@id='iStocksAccount']")
	public static WebElement stocksAccountTxt;

	@FindBy(xpath="//*[@id='iStocksAccount_input_image']/span")
	public static WebElement stocksAccount_ExpansionBtn;

	@FindBy(xpath="//*[@id='iStocksAccount_input_settings']/span")
	public static WebElement stocksAccount_SettingBtn;

	@FindBy(xpath="//input[@id='iSalesAccount']")
	public static WebElement salesAccount_Txt;

	@FindBy(xpath="//*[@id='iSalesAccount_input_image']/span")
	public static WebElement salesAccount_ExpansionBtn;

	@FindBy(xpath="//*[@id='iSalesAccount_input_settings']/span")
	public static WebElement salesAccount_SettingBtn;

	@FindBy(xpath="//input[@id='iWIPAccount']")
	public static WebElement WIPAccountTxt;

	@FindBy(xpath="//*[@id='iWIPAccount_input_image']/span")
	public static WebElement WIPAccoun_tExpansionBtn;

	@FindBy(xpath="//*[@id='iWIPAccount_input_settings']/span")
	public static WebElement WIPAccount_SettingBtn;

	@FindBy(xpath="//input[@id='iCostofShortageStockAC']")
	public static WebElement costofShortageStockACTxt;

	@FindBy(xpath="//*[@id='iCostofShortageStockAC_input_image']/span")
	public static WebElement costofShortageStockAC_ExpansionBtn;

	@FindBy(xpath="//*[@id='iCostofShortageStockAC_input_settings']/span")
	public static WebElement costofShortageStockAC_SettingBtn;

	@FindBy(xpath="//input[@id='iCostofExcessStockAC']")
	public static WebElement otherDetails_CostofExcessStockAC;

	@FindBy(xpath="//*[@id='iCostofExcessStockAC_input_image']/span")
	public static WebElement costofExcessStockAC_ExpansionBtn;

	@FindBy(xpath="//*[@id='iCostofExcessStockAC_input_settings']/span")
	public static WebElement costofExcessStockAC_SettingBtn;



	//Grid---OtherDetails---1 row elements

	@FindBy(xpath="//input[@id='ioWarehouse']")
	public static WebElement otherDetailsGrid_WarehouseTxt;

	@FindBy(xpath="//*[@id='ioWarehouse_input_image']/span")
	public static WebElement otherDetailsGrid_Warehouse_ExpansionBtn;

	@FindBy(xpath="//*[@id='ioWarehouse_input_settings']/span")
	public static WebElement otherDetailsGrid_Warehouse_SettingBtn;

	@FindBy(xpath="//input[@id='iSupplier1']")
	public static WebElement grid_Supplier1Txt;

	@FindBy(xpath="//input[@id='sSupCode1']")
	public static WebElement grid_SupCode1Txt;

	@FindBy(xpath="//input[@id='iStartDate1']")
	public static WebElement grids_StartDate1Txt;

	//Master----Item---New---Replenishment

	@FindBy(xpath="//select[@id='iDefaultReplenishment']")
	public static WebElement defaultReplenishmentDropDown;

	@FindBy(xpath="//select[@id='iManufacturePolicy']")
	public static WebElement manufacturePolicyDropDown;

	@FindBy(xpath="//input[@id='iPackingBOM']")
	public static WebElement packingBOMTxt;

	@FindBy(xpath="//*[@id='iPackingBOM_input_image']/span")
	public static WebElement packingBOMExpansionBtn;

	@FindBy(xpath="//*[@id='iPackingBOM_input_settings']/span")
	public static WebElement packingBOMSettingBtn;

	@FindBy(xpath="//input[@id='iBOM']")
	public static WebElement BOMTxt;

	@FindBy(xpath="//*[@id='iBOM_input_image']/span")
	public static WebElement BOMExpansionBtn;

	@FindBy(xpath="//*[@id='iBOM_input_settings']/span")
	public static WebElement BOMSettingBtn;

	@FindBy(xpath="//select[@id='iFlushing']")
	public static WebElement flushingDropdown;

	@FindBy(xpath="//input[@id='irEnddate']")
	public static WebElement grid_EndingDate;

	@FindBy(xpath="//input[@id='iReplenishqty1']")
	public static WebElement grid_Replenishqty1;

	@FindBy(xpath="//input[@id='irWarehouse']")
	public static WebElement replenishmentGrid_WarehouseTxt;

	@FindBy(xpath="//*[@id='irWarehouse_input_image']/span")
	public static WebElement replenishmentGrid_Warehouse_ExpansionBtn;

	@FindBy(xpath="//*[@id='irWarehouse_input_settings']/span")
	public static WebElement replenishmentGrid_Warehouse_SettingBtn;

	@FindBy(xpath="//input[@id='irStartdate1']")
	public static WebElement grid_StartDateTxt;



	//OutLet Elements


	@FindBy(xpath="//input[@id='txtsrch-term0']")
	public static WebElement searchBox;

	@FindBy(xpath="//*[@id='liSearchOn']/a")
	public static WebElement search_SearchOnBtn;

	@FindBy(xpath="//*[@id='liAdvanceSearch']/a")
	public static WebElement search_AdvanceSearch ;

	@FindBy(xpath="//input[@id='cmbUserTypeMaster']")
	public static WebElement cmbSearchTxt;

	@FindBy(xpath="//*[@id='cmbUserTypeMaster_input_image']/span")
	public static WebElement cmbSearchExpansionBtn;

	@FindBy(xpath="//*[@id='cmbUserTypeMaster_input_settings']/span")
	public static WebElement cmbSearchSettingBtn;

	@FindBy(xpath="//a[@id='chkResizeGrid0']")
	public static WebElement resizeGridBtn ;

	@FindBy(xpath="//input[@id='chkRetainSelection']")
	public static WebElement retainSelectionCheckbox;

	@FindBy(xpath="//label[@id='oncheckaccorderan0']")
	public static WebElement checkAccorderanBtn;

	@FindBy(xpath="//*[@id='iTreeId0']")
	public static WebElement treeIdDropdown;

	@FindBy(xpath="//*[@id='iTreeViewId0']")
	public static WebElement treeViewIdDropdown;







	//WareHouse


	@FindBy(xpath="//input[@id='iBins']")
	public static WebElement binsText;

	@FindBy(xpath="//*[@id='iBins_input_image']/span")
	public static WebElement bins_ExpansionBtn;

	@FindBy(xpath="//*[@id='iBins_input_settings']/span")
	public static WebElement bins_SettingBtn;

	@FindBy(xpath="//input[@id='iPhysInventoryCountingFrequency']")
	public static WebElement physInventoryCountingFrequencyTxt;

	@FindBy(xpath="//select[@id='iWarehouseType']")
	public static WebElement warehouseTypeDropdown;

	@FindBy(xpath="//input[@id='bDontMaintainBin']")
	public static WebElement dontMaintainBinCheckBox;


	// State

	@FindBy(xpath="//input[@id='iCountry']")
	public static WebElement countryTxt;

	@FindBy(xpath="//*[@id='iCountry_input_image']/span")
	public static WebElement country_ExpansionBtn;

	@FindBy(xpath="//*[@id='iCountry_input_settings']/span")
	public static WebElement country_SettingBtn;


	// City

	@FindBy(xpath="//input[@id='iState']")
	public static WebElement stateTxt;

	@FindBy(xpath="//*[@id='iState_input_image']/span")
	public static WebElement state_ExpansionBtn;

	@FindBy(xpath="//*[@id='iState_input_settings']/span")
	public static WebElement state_SettingBtn;



	//Master------>Delete Field



	@FindBy(xpath="//*[@id='btnDelete']/i")
	public static WebElement deleteBtn;


	@FindBy(xpath="//*[@id='LandingGridBody']/tr[1]/td[11]")
	public static WebElement accountCreation;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[1]/td[11]")
	public static WebElement accountNewCreationName;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[2]/td[11]")
	public static WebElement accountNewCreationNameOfLane;               

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[1]/td[8]/div[1]/label[1]/input[1]")
	public static WebElement accountFirstCheckBoxToSelection;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/ol[1]/li[5]/span[1]")
	public static WebElement accountGroupTitleDisplay;


	//Master Customization

	@FindBy(xpath="//i[@class='icon-expand']")
	public static WebElement plusBtn;

	@FindBy(xpath="//i[@class='icon-collepse']")
	public static WebElement minusBtn;

	@FindBy(xpath="//span[contains(text(),'Master Fields')]")
	public static WebElement masterFieldsOption;
/*
	@FindBy(xpath="//*[@id='masterFields_list']/li[1]/span")
	public static WebElement generalTab;*/

	@FindBy(xpath="//span[@class='font-5'][contains(text(),'Main')]")
	public static WebElement generalMainTab;

	@FindBy(xpath="//div[@id='mainTab_0']//tbody//tr[1]//td[4]")
	public static WebElement accountCustomizeName;

	@FindBy(xpath="//div[@id='mainTab_0']//tr[2]//td[4]")
	public static WebElement accountCustomizeCode;

	@FindBy(xpath="//div[@id='mainTab_0']//tr[3]//td[4]")
	public static WebElement accountCustomizeAccountType;

	@FindBy(xpath="//div[@id='mainTab_0']//tr[4]//td[4]")
	public static WebElement accountCustomizeCreditLimit;

	@FindBy(xpath="//div[@id='mainTab_0']//tr[5]//td[4]")
	public static WebElement accountCustomizeCreditDays;				


	@FindBy(xpath="//div[@id='tabId_1']//tbody[contains(@class,'ui-sortable')]//tr[1]//td[4]")
	public static WebElement accountCustomizeChequeDiscountLimit;

	@FindBy(xpath="//div[@id='HeaderDetails_0']//tr[2]//td[4]")
	public static WebElement accountCustomizeRateOfInterest;

	@FindBy(xpath="//*[@id='HeaderDetails_0']/div/div/table/tbody/tr[3]/td[4]")
	public static WebElement accountCustomizeBankAc;

	@FindBy(xpath="//*[@id='HeaderDetails_0']/div/div/table/tbody/tr[4]/td[4]")
	public static WebElement accountCustomizePDCDiscountedAccount;

	@FindBy(xpath="//*[@id='btnMove_Field_MasterCust']/div[1]/span")
	public static WebElement accountHeaderMoveFiledBtn;

	@FindBy(xpath="//div[contains(text(),'Preview')]")
	public static WebElement accountHeaderPreview;

	@FindBy(xpath="//div[@class='clsFieldButtons_MCust_div']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Save')]")
	public static WebElement accountSaveBtn;

	@FindBy(xpath="//*[@id='btnClose']")
	public static WebElement accountCloseBtn;

	@FindBy(xpath="//span[@class='Flabel theme_icon-color'][contains(text(),'Settings')]")
	public static WebElement settingOption;

	@FindBy(xpath="//div[@id='tabId_69']//span[@class='font-5'][contains(text(),'Header Details')]")
	public static WebElement settingsHeaderDetailsTab;

	/*@FindBy(xpath="//div[@id='tabId_68']//span[@class='font-5'][contains(text(),'Header Details')]")
					public static WebElement settingsHeaderDetailsTab;*/

	@FindBy(xpath="//*[@id='HeaderDetails_1']/div/div/table/tbody/tr[1]/td[1]/i[1]")
	public static WebElement accountSettingsHeaderEditFirstRowBtn;

	@FindBy(xpath="//*[@id='HeaderDetails_1']/div/div/table/tbody/tr[2]/td[1]/i[1]")
	public static WebElement accountSettingsHeaderEditSecondRowBtn;

	@FindBy(xpath="//*[@id='HeaderDetails_1']/div/div/table/tbody/tr[3]/td[1]/i[1]")
	public static WebElement accountSettingsHeaderEditThirdRowBtn;

	@FindBy(xpath="//*[@id='HeaderDetails_1']/div/div/table/tbody/tr[4]/td[1]/i[1]")
	public static WebElement accountSettingsHeaderEditFourthRowBtn;

	@FindBy(xpath="//*[@id='HeaderDetails_1']/div/div/table/tbody/tr[5]/td[1]/i[1]")
	public static WebElement accountSettingsHeaderEditFifthRowBtn;

	@FindBy(xpath="//*[@id='HeaderDetails_1']/div/div/table/tbody/tr[6]/td[1]/i[1]")
	public static WebElement accountSettingsHeaderEditSixthRowBtn;

	@FindBy(xpath="//*[@id='HeaderDetails_1']/div/div/table/tbody/tr[7]/td[1]/i[1]")
	public static WebElement accountSettingsHeaderEditSeventhRowBtn;

	@FindBy(xpath="//*[@id='HeaderDetails_1']/div/div/table/tbody/tr[8]/td[1]/i[1]")
	public static WebElement accountSettingsHeaderEditEighthRowBtn;

	@FindBy(xpath="//div[contains(text(),'Move Field')]")
	public static WebElement accountSettingsHeaderMoveFiledBtn;

	@FindBy(xpath="//div[contains(text(),'Preview')]")
	public static WebElement accountSettingsHeaderPreview;

	@FindBy(xpath="//div[@class='clsFieldButtons_MCust_div']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Save')]")
	public static WebElement accountSettingsSaveBtn;

	@FindBy(xpath="//div[@id='btnAdd_Field_MasterCust']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Add')]")
	public static WebElement accountSettingsAddBtn;						

	@FindBy(xpath="//div[@class='clsFieldButtons_MCust_div']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Close')]")
	public static WebElement accountSettingsCloseBtn;


	/*@FindBy(xpath="//div[@id='tabId_68']//span[@class='font-5'][contains(text(),'Body Details')]")
					public static WebElement settingsBodyDetailsTab;*/

	@FindBy(xpath="//div[@id='tabId_69']//span[@class='font-5'][contains(text(),'Body Details')]")
	public static WebElement settingsBodyDetailsTab;

	@FindBy(xpath="//div[@id='BodyDetails_1']//div[@class='scrollable tbl-emptyfields-mastercust']")
	public static WebElement settingsBodyDetailsEmptyTab;


	@FindBy(xpath="//span[@class='Flabel theme_icon-color'][contains(text(),'Details')]")
	public static WebElement accountMasterFieldDetailsOption;

	/*@FindBy(xpath="//div[@id='tabId_69']//span[@class='font-5'][contains(text(),'Header Details')]")
		        public static WebElement detailsHeaderDetailsTab;

		         				  @FindBy(xpath="//div[@id='tabId_69']//tbody[@class='ui-sortable']//tr[1]//td[4]")
								  public static WebElement detailsHeaderAddress;

								  @FindBy(xpath="//div[@id='tabId_69']//tr[2]//td[4]")
								  public static WebElement detailsHeaderTelNo;

								  @FindBy(xpath="//div[@id='tabId_69']//tr[3]//td[4]")
								  public static WebElement detailsHeaderFaxNo;		

								  @FindBy(xpath="//div[@id='tabId_69']//tr[4]//td[4]")
								  public static WebElement detailsHeaderCity;

								  @FindBy(xpath="//div[@id='tabId_69']//tr[5]//td[4]")
								  public static WebElement detailsHeaderPin;

								  @FindBy(xpath="//div[@id='tabId_69']//tr[6]//td[4]")
								  public static WebElement detailsHeaderDeliveryAddress;

								  @FindBy(xpath="//div[@id='tabId_69']//tr[7]//td[4]")
								  public static WebElement detailsHeaderCityOne;

								  @FindBy(xpath="//div[@id='tabId_69']//tr[8]//td[4]")
								  public static WebElement detailsHeaderPinOne;

								  @FindBy(xpath="//div[@id='tabId_69']//tr[9]//td[4]")
								  public static WebElement detailsHeaderSendEmailToCustomer;

								  @FindBy(xpath="//div[@id='tabId_69']//tr[10]//td[4]")
								  public static WebElement detailsHeaderAllowCustomerPortal;

								  @FindBy(xpath="//div[@id='tabId_69']//tr[11]//td[4]")
								  public static WebElement detailsHeaderEmail;

								  @FindBy(xpath="//div[@id='tabId_69']//tr[12]//td[4]")
								  public static WebElement detailsHeaderPassword;

								  @FindBy(xpath="//div[@id='tabId_69']//tr[13]//td[4]")
								  public static WebElement detailsHeaderBankAccountName;

								  @FindBy(xpath="//div[@id='tabId_69']//tr[14]//td[4]")
								  public static WebElement detailsHeaderBankAccountNumber;

								  @FindBy(xpath="//div[@id='tabId_69']//tr[15]//td[4]")
								  public static WebElement detailsHeaderIFSCCode;

								  @FindBy(xpath="//div[@id='tabId_69']//tr[16]//td[4]")
								  public static WebElement detailsHeaderPaymentType;

								  @FindBy(xpath="//div[@id='tabId_69']//tr[17]//td[4]")
								  public static WebElement detailsHeaderFinanceEmail;							  

	                              @FindBy(xpath="//div[@id='tabId_69']//tr[18]//td[4]")
								  public static WebElement detailsHeaderPortalEmail;	

	                              @FindBy(xpath="//div[@class='clsFieldButtons_MCust_div']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Save')]")
								  public static WebElement detailsHeaderBankSaveBtn;

								  @FindBy(xpath="//div[contains(text(),'Move Field')]")
								  public static WebElement detailsHeaderMoveFieldBtn;

								  @FindBy(xpath="//div[contains(text(),'Add')]")
								  public static WebElement detailsHeaderAddBtn;

								  @FindBy(xpath="//div[contains(text(),'Preview')]")
								  public static WebElement detailsHeaderPreviewBtn;

								  @FindBy(xpath="//div[@class='clsFieldButtons_MCust_div']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Close')]")
								  public static WebElement detailsHeaderCloseBtn;	*/



	@FindBy(xpath="//div[@id='tabId_70']//span[@class='font-5'][contains(text(),'Header Details')]")
	public static WebElement detailsHeaderDetailsTab;

	@FindBy(xpath="//div[@id='tabId_70']//tbody[@class='ui-sortable']//tr[1]//td[4]")
	public static WebElement detailsHeaderAddress;

	@FindBy(xpath="//div[@id='tabId_70']//tr[2]//td[4]")
	public static WebElement detailsHeaderTelNo;

	@FindBy(xpath="//div[@id='tabId_70']//tr[3]//td[4]")
	public static WebElement detailsHeaderFaxNo;		

	@FindBy(xpath="//div[@id='tabId_70']//tr[4]//td[4]")
	public static WebElement detailsHeaderCity;

	@FindBy(xpath="//div[@id='tabId_70']//tr[5]//td[4]")
	public static WebElement detailsHeaderPin;

	@FindBy(xpath="//div[@id='tabId_70']//tr[6]//td[4]")
	public static WebElement detailsHeaderDeliveryAddress;

	@FindBy(xpath="//div[@id='tabId_70']//tr[7]//td[4]")
	public static WebElement detailsHeaderCityOne;

	@FindBy(xpath="//div[@id='tabId_70']//tr[8]//td[4]")
	public static WebElement detailsHeaderPinOne;

	@FindBy(xpath="//div[@id='tabId_70']//tr[9]//td[4]")
	public static WebElement detailsHeaderSendEmailToCustomer;

	@FindBy(xpath="//div[@id='tabId_70']//tr[10]//td[4]")
	public static WebElement detailsHeaderAllowCustomerPortal;

	@FindBy(xpath="//div[@id='tabId_70']//tr[11]//td[4]")
	public static WebElement detailsHeaderEmail;

	@FindBy(xpath="//div[@id='tabId_70']//tr[12]//td[4]")
	public static WebElement detailsHeaderPassword;

	@FindBy(xpath="//div[@id='tabId_70']//tr[13]//td[4]")
	public static WebElement detailsHeaderBankAccountName;

	@FindBy(xpath="//div[@id='tabId_70']//tr[14]//td[4]")
	public static WebElement detailsHeaderBankAccountNumber;

	@FindBy(xpath="//div[@id='tabId_70']//tr[15]//td[4]")
	public static WebElement detailsHeaderIFSCCode;

	@FindBy(xpath="//div[@id='tabId_70']//tr[16]//td[4]")
	public static WebElement detailsHeaderPaymentType;

	@FindBy(xpath="//div[@id='tabId_70']//tr[17]//td[4]")
	public static WebElement detailsHeaderFinanceEmail;							  

	@FindBy(xpath="//div[@id='tabId_70']//tr[18]//td[4]")
	public static WebElement detailsHeaderPortalEmail;	

	@FindBy(xpath="//div[@class='clsFieldButtons_MCust_div']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Save')]")
	public static WebElement detailsHeaderBankSaveBtn;

	@FindBy(xpath="//div[contains(text(),'Move Field')]")
	public static WebElement detailsHeaderMoveFieldBtn;

	@FindBy(xpath="//div[contains(text(),'Add')]")
	public static WebElement detailsHeaderAddBtn;

	@FindBy(xpath="//div[contains(text(),'Preview')]")
	public static WebElement detailsHeaderPreviewBtn;

	@FindBy(xpath="//div[@class='clsFieldButtons_MCust_div']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Close')]")
	public static WebElement detailsHeaderCloseBtn;				  

	/*@FindBy(xpath="//div[@id='tabId_69']//span[@class='font-5'][contains(text(),'Body Details')]")
						public static WebElement detailsBodyDetailsTab;*/

	@FindBy(xpath="//div[@id='tabId_70']//span[@class='font-5'][contains(text(),'Body Details')]")
	public static WebElement detailsBodyDetailsTab;

	@FindBy(xpath="//div[@id='BodyDetails_2']//div[@class='scrollable tbl-emptyfields-mastercust']")
	public static WebElement detailsBodyDetailsEmptyTab;

	@FindBy(xpath="//*[@id='masterFields_list']/li[4]/span")
	public static WebElement accountMasterFieldPrintLayoutOption;

	/* @FindBy(xpath="//div[@id='tabId_70']//span[@class='font-5'][contains(text(),'Header Details')]")
					  public static WebElement printlayoutHeaderDetailsTab;*/

	@FindBy(xpath="//div[@id='tabId_71']//span[@class='font-5'][contains(text(),'Header Details')]")
	public static WebElement printlayoutHeaderDetailsTab;

	@FindBy(xpath="//div[@id='HeaderDetails_3']//div[@class='scrollable tbl-emptyfields-mastercust']")
	public static WebElement printLayoutHeaderDetailsEmpty;

	/* @FindBy(xpath="//div[@id='tabId_70']//span[@class='font-5'][contains(text(),'Body Details')]")
					  public static WebElement printLayouBodyDetailsTab;*/

	@FindBy(xpath="//div[@id='tabId_71']//span[@class='font-5'][contains(text(),'Body Details')]")
	public static WebElement printLayouBodyDetailsTab;

	@FindBy(xpath="//div[@id='BodyDetails_3']/div/div/table/tbody/tr[1]/td[4]")
	public static WebElement printlayoutBodyVoucherType;

	@FindBy(xpath="//div[@id='tabId_70']//tr[2]//td[4]]")
	public static WebElement printLayoutBodyPrintlayout;

	@FindBy(xpath="//div[@class='clsFieldButtons_MCust_div']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Save')]")
	public static WebElement printLayoutSaveBtn;

	@FindBy(xpath="//div[@id='btnAdd_Field_MasterCust']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Add')]")
	public static WebElement printLayoutAddBtn;

	@FindBy(xpath="//div[contains(text(),'Preview')]")
	public static WebElement printLayoutPreviewBtn;

	@FindBy(xpath="//div[@class='clsFieldButtons_MCust_div']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Close')]")
	public static WebElement printLayoutCloseBtn;

	@FindBy(xpath="//*[@id='allMasterCustTabs']/li[2]/a")
	public static WebElement accountMasterFieldsUniqueConstraintsOption; 

	@FindBy(xpath="//*[@id='tabContent_UConstraints_MasterCust']/div[1]/div[2]/nav/ul/li[1]/a/i")
	public static WebElement UniqueConstraintsAddBtn;

	@FindBy(xpath="//*[@id='btnDelete_UniqueConstraints']/a/i")
	public static WebElement UniqueConstraintsDeleteBtn;

	@FindBy(xpath="//div[@id='tabContent_UConstraints_MasterCust']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Close')]")
	public static WebElement UniqueConstraintsCloseBtn;

	@FindBy(xpath="//input[@id='txtConstraintName']")
	public static WebElement ConstraintNameTxt;

	@FindBy(xpath="//select[@id='ddlConstraintTabList']")
	public static WebElement UniqueConstraints_TabsDropdown;

	@FindBy(xpath="//*[@id='tab_Main_UcFields']/i")
	public static WebElement UniqueConstraints_MainExpansionBtn;

	@FindBy(xpath="//*[@id='chkList_MainFields_1']/div[1]")
	public static WebElement accountUniqueConstraints_Main_NameChekbox;

	@FindBy(xpath="//div[@id='chkList_MainFields_1']//div[2]")
	public static WebElement accountUniqueConstraints_Main_CodeChekbox;

	@FindBy(xpath="//div[@id='chkList_MainFields_1']//div[3]")
	public static WebElement accountUniqueConstraints_Main_AccountTypeCheckbox;

	@FindBy(xpath="//div[@id='chkList_MainFields_1']//div[4]")
	public static WebElement accountUniqueConstraints_Main_CreditLimitCheckBox;

	@FindBy(xpath="//div[@id='chkList_MainFields_1']//div[5]")
	public static WebElement accountUniqueConstraints_Main_CreditDays;

	@FindBy(xpath="//div[@id='tab_Header_UcFields']//i[@class='pull-right icon-expand theme_icon-color']")
	public static WebElement UniqueConstraints_HeaderExpansionBtn;

	@FindBy(xpath="//*[@id='chkList_HeaderFields_1']/div[1]")
	public static WebElement UniqueConstraints_Header_ChequeDiscountLimitChekbox;

	@FindBy(xpath="//*[@id='chkList_HeaderFields_1']/div[2]")
	public static WebElement UniqueConstraints_Header_RateOfInterestChekbox;

	@FindBy(xpath="//*[@id='chkList_HeaderFields_1']/div[3]")
	public static WebElement UniqueConstraints_Header_BankAcChekbox;

	@FindBy(xpath="//*[@id='chkList_HeaderFields_1']/div[4]")
	public static WebElement UniqueConstraints_Header_PDCDiscountedChekbox;

	@FindBy(xpath="//*[@id='tab_Body_UcFields']/i")
	public static WebElement UniqueConstraints_BodyExpansionBtn;

	@FindBy(xpath="//*[@id='allMasterCustTabs']/li[3]/a")
	public static WebElement RulesOption;

	@FindBy(xpath="//*[@id='newRuleTab_div_MasterRules']/div[1]/div[2]/nav/ul/li[1]/a/i")
	public static WebElement accountRules_SaveBtn;

	@FindBy(xpath="//*[@id='newRuleTab_div_MasterRules']/div[1]/div[2]/nav/ul/li[2]/a/i")
	public static WebElement accountRules_NewBtn;

	@FindBy(xpath="//*[@id='newRuleTab_div_MasterRules']/div[1]/div[2]/nav/ul/li[3]/a/i")
	public static WebElement accountRules_DeleteBtn;

	@FindBy(xpath="//div[@id='newRuleTab_div_MasterRules']//li[4]/a/i")
	public static WebElement accountRules_CloseBtn;   

	@FindBy(xpath="//*[@id='txtMasterRuleName_MasterRules']")
	public static WebElement Rules_RuleNameText ;


	@FindBy(xpath="//*[@id='chkListApplyOn_MasterRules']/div/div[1]/div/label/span")
	public static WebElement Rules_CreatingGroupChekbox ;
	
	@FindBy(xpath="//*[@id='chkCreatingGroup_Rule_MasterRules']")
	public static WebElement Rules_CreatingGroupChekboxSelected ;
	
	

	@FindBy(xpath="//*[@id='chkListApplyOn_MasterRules']/div/div[2]/div/label/span")
	public static WebElement Rules_NewRecordChekbox ;
	
	@FindBy(xpath="//*[@id='chkNewRecord_Rule_MasterRules']")
	public static WebElement Rules_NewRecordChekboxSelected ;

	@FindBy(xpath="//*[@id='chkListApplyOn_MasterRules']/div/div[3]/div/label/span")
	public static WebElement Rules_EditChekbox ;

	@FindBy(xpath="//*[@id='chkEdit_Rule_MasterRules']")
	public static WebElement Rules_EditChekboxSelected;

	@FindBy(xpath="//*[@id='chkListEvaluateOn_MasterRules']/div/div[1]/div/label/span")
	public static WebElement Rules_LoadChekbox ;
	
	@FindBy(xpath="//*[@id='chkLoad_Rule_MasterRules']")
	public static WebElement Rules_LoadChekboxSelected ;
	
	

	@FindBy(xpath="//*[@id='chkListEvaluateOn_MasterRules']/div/div[4]/div/label/span")
	public static WebElement Rules_BeforeSaveChekbox ;
	
	@FindBy(xpath="//*[@id='chkBeforeSave_Rule_MasterRules']")
	public static WebElement Rules_BeforeSaveChekboxSelected ;

	@FindBy(xpath="//*[@id='chkListEvaluateOn_MasterRules']/div/div[2]/div/label/span")
	public static WebElement Rules_OnLeaveChekbox ;
	
	@FindBy(xpath="//*[@id='chkOnLeave_Rule_MasterRules']")
	public static WebElement Rules_OnLeaveChekboxSelected;

	@FindBy(xpath="//*[@id='chkListEvaluateOn_MasterRules']/div/div[5]/div/label/span")
	public static WebElement Rules_BeforeDeleteChekbox ;
	
	@FindBy(xpath="//*[@id='chkBeforeDelete_Rule_MasterRules']")
	public static WebElement Rules_BeforeDeleteChekboxSelected;

	@FindBy(xpath="//*[@id='chkListEvaluateOn_MasterRules']/div/div[3]/div/label/span")
	public static WebElement Rules_OnEnterChekbox ;
	
	@FindBy(xpath="//*[@id='chkOnEnter_Rule_MasterRules']")
	public static WebElement Rules_OnEnterChekboxSelected ;

	@FindBy(xpath="//*[@id='chkListStatus_MasterRules']/div/div[1]/div/label/span")
	public static WebElement Rules_ActiveChekbox ;

	@FindBy(xpath="//label[contains(text(),'Active')]")
	public static WebElement Rules_ActiveChekboxSelected ;

	@FindBy(xpath="//input[@id='chkIsRuleActive_Rule_MasterRules']")
	public static WebElement MasterRules_ActiveChekbox ;



	@FindBy(xpath="//*[@id='RulesDefinition_MasterRules']/div[3]/div[2]/div/label/span")
	public static WebElement Rules_NoConditionChekbox;
	
	@FindBy(xpath="//*[@id='RulesDefinition_MasterRules']/div[3]/div[2]/div/label/input")
	public static WebElement Rules_NoConditionChekboxSelected;

	@FindBy(xpath="//input[@id='chkNoRuleCondition_MasterRules']")
	public static WebElement MasterRules_NoConditionChekbox;



	@FindBy(xpath="//*[@id='allMasterCustTabs']/li[4]/span")
	public static WebElement rules_ExternalModules;

	@FindBy(xpath="//select[@id='ddlOnEvent_MasterExternalModule']")
	public static WebElement rules_ExternalModulesOnEventDropdown;	

	@FindBy(xpath="//input[@id='txtbuttonCaption_MasterExternalModule']")
	public static WebElement rules_ExternalModulesButtonCaption;

	@FindBy(xpath="//select[@id='ddlModuleType_MasterExternalModule']")
	public static WebElement rules_ExternalModules_ModuleTypeBtn;

	@FindBy(xpath="//select[@id='ddlAllDllFiles_MasterExternalModule']")
	public static WebElement rules_ExternalModules_ModuleNameDropdown;

	@FindBy(xpath="//select[@id='ddlClassNames_MasterExternalModule']")
	public static WebElement rules_ExternalModulesClassNameDropdown;

	@FindBy(xpath="//select[@id='ddlClassMethods_MasterExternalModule']")
	public static WebElement rules_ExternalModulesFuctionalNameDropdown;

	@FindBy(xpath="//div[contains(text(),'Update')]")
	public static WebElement rules_ExternalModulesUpdateBtn;

	@FindBy(xpath="//div[@id='ExternalModulesDiv_MasterExternalModule']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Save')]")
	public static WebElement rules_ExternalModulesSaveBtn;

	@FindBy(xpath="//div[contains(text(),'Edit')]")
	public static WebElement rules_ExternalModulesEditBtn;

	@FindBy(xpath="//div[@id='ExternalModulesDiv_MasterExternalModule']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Delete')]")
	public static WebElement rules_ExternalModulesDeleteBtn;

	@FindBy(xpath="//div[@id='ExternalModulesDiv_MasterExternalModule']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Close')]")
	public static WebElement rules_ExternalModulesCloseBtn;

	@FindBy(xpath="//a[contains(text(),'Info Panel Customization')]")
	public static WebElement itemInfoPanelCustomizationTab;

	@FindBy(xpath="//*[@id='tabContent_IPCust_MasterCust']/div[1]/div[2]/nav/ul/li[1]/a/i")
	public static WebElement iteminfoPanelCust_AddBtn;

	@FindBy(xpath="//*[@id='tabContent_IPCust_MasterCust']/div[1]/div/div[2]/nav/ul/li[2]/a/i")
	public static WebElement infoPanelCust_DeleteBtn;

	@FindBy(xpath="(//*[@id='btnCloseMasterCutomizationFromMasterScreen']/a/i)[5]")
	public static WebElement infoPanelCust_CloseBtn;

	@FindBy(xpath="//strong[contains(text(),'Credit History')]")
	public static WebElement infoPanelCustCreditHistory;

	@FindBy(xpath="//div[@id='divPanel_2']//strong[contains(text(),'Ageing Analysis')]")
	public static WebElement infoPanelCustAgeingAnalysis;

	@FindBy(xpath="//strong[contains(text(),'Ageing Analysis Base')]")
	public static WebElement infoPanelCustAgeingAnalysisBase;

	@FindBy(xpath="//strong[contains(text(),'Ageing Analysis Local')]")
	public static WebElement infoPanelCustAgeingAnalysisLocal;

	@FindBy(xpath="//strong[contains(text(),'Authorization')]")
	public static WebElement infoPanelAuthorization;

	@FindBy(xpath="//span[@class='Flabel'][contains(text(),'Reports')]")
	public static WebElement accountReportsTab;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Save')]")
	public static WebElement  accountReports_SaveBtn;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Close')]")
	public static WebElement  accountReports_CloseBtn;

	@FindBy(xpath="//*[@id='AllReportsDiv_MasterCust']/div[1]/label/input")
	public static WebElement  reports_AdvancedbudgetReportChkBox;

	@FindBy(xpath="//div[@id='AllReportsDiv_MasterCust']//div[1]//label[1]")
	public static WebElement  reports_MasterInfoChkBox;


	@FindBy(xpath="//div[@class='col-xs-12 col-sm-8 col-md-8 col-lg-9 padding0']//div[2]//label[1]")
	public static WebElement  reports_ABCAnalysisAmountChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[3]//label[1]")
	public static WebElement  reports_BankBookChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[4]//label[1]")
	public static WebElement  reports_BankreconciliationstatementChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[5]//label[1]")
	public static WebElement  reports_CashBookChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[6]//label[1]")
	public static WebElement  reports_ComparativeAnalysisChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[7]//label[1]")
	public static WebElement  reports_CustomerAgeingDetailsAnalysisChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[8]//label[1]")
	public static WebElement  reports_CustomerageingdetailbyduedateChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[9]//label[1]")
	public static WebElement  reports_CustomerageingsummaryanalysisChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[10]//label[1]")
	public static WebElement  reports_CustomerbillwisesummaryChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[11]//label[1]")
	public static WebElement  reports_CustomerduedateanalysisChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[12]//label[1]")
	public static WebElement  reports_CustomerlistingofoutstandingbillsChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[13]//label[1]")
	public static WebElement  reports_CustomeroverdueanalysisChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[14]//label[1]")
	public static WebElement  reports_CustomeroverduesummaryChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[15]//label[1]")
	public static WebElement  reports_CustomerstatementsChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[16]//label[1]")
	public static WebElement  reports_CustomersummaryageingbyduedateChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[17]//label[1]")
	public static WebElement  reports_IncomeExpenseTrendChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[18]//label[1]")
	public static WebElement  reports_InterestcalculationChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[19]//label[1]")
	public static WebElement  reports_LedgerChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[20]//label[1]")
	public static WebElement  reports_LedgerdetailChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[21]//label[1]")
	public static WebElement  reports_MonthlySalesChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[22]//label[1]")
	public static WebElement  reports_PeakandlowbalanceamountChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[23]//label[1]")
	public static WebElement  reports_PettycashbookChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[24]//label[1]")
	public static WebElement  reports_PurchaseregisterChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[25]//label[1]")
	public static WebElement  reports_PurchasereturnregisterChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[26]//label[1]")
	public static WebElement  reports_PurchasesgroupedbydepartmentChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[27]//label[1]")
	public static WebElement  reports_PurchasesgroupedbyItemChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[28]//label[1]")
	public static WebElement  reports_PurchasesgroupedbyvendorChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[29]//label[1]")
	public static WebElement  reports_SalesdaybookChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[30]//label[1]")
	public static WebElement  reports_SalesgroupedbycustomerChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[31]//label[1]")
	public static WebElement  reports_salesgroupedbydepartmentrChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[32]//label[1]")
	public static WebElement  reports_SalesgroupedbyItemChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[33]//label[1]")
	public static WebElement  reports_SalesreturnregisterChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[34]//label[1]")
	public static WebElement  reports_SchedulesChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[35]//label[1]")
	public static WebElement  reports_SubledgerChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[36]//label[1]")
	public static WebElement  reports_SummarypurchaseregisterChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[37]//label[1]")
	public static WebElement  reports_SummarysalesregisterChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[38]//label[1]")
	public static WebElement  reports_TopCustomersChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[39]//label[1]")
	public static WebElement  reports_TradingaccountrChkBox;

	@FindBy(xpath="//div[40]//label[1]")
	public static WebElement  reports_TransactionstypeanalysisChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[41]//label[1]")
	public static WebElement  reports_VendorageingdetailanalysisChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[42]//label[1]")
	public static WebElement  reports_VendorageingdetailbyduedateChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[43]//label[1]")
	public static WebElement  reports_VendorageingsummaryanalysisChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[44]//label[1]")
	public static WebElement  reports_VendorbillwisesummaryChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[45]//label[1]")
	public static WebElement  reports_VendorduedateanalysisChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[46]//label[1]")
	public static WebElement  reports_VendorlistingofoutstandingbillsChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[47]//label[1]")
	public static WebElement  reports_VendoroverdueanalysisChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[48]//label[1]")
	public static WebElement  reports_VendoroverduesummaryChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[49]//label[1]")
	public static WebElement  reports_VendorstatementsChkBox;

	@FindBy(xpath="//div[@id='tabContent_Reports_MasterCust']//div[50]//label[1]")
	public static WebElement  reports_VendorsummaryageingbyduedateChkBox;

	//Create Tabs

	@FindBy(xpath="//button[@id='btnCreateTab_MCust']")
	public static WebElement createTab;  

	@FindBy(xpath="//a[contains(text(),'Tree Tab')]")
	public static WebElement createTabTreeTab; 

	@FindBy(xpath="//input[@id='txtNewTreeTabCaption']")
	public static WebElement  treeTabCaptionTxt;

	@FindBy(xpath="//input[@id='txtNewTreeTabName']")
	public static WebElement  treeTabTabNameTxt;

	@FindBy(xpath="//input[@id='fOption_tab_masterName']")
	public static WebElement  treeTabNewMastertxt;

	@FindBy(xpath="//*[@id='fOption_tab_masterName_input_image']/span")
	public static WebElement  treeTabNewMasterdropdown;

	@FindBy(xpath="//*[@id='fOption_tab_masterName_input_settings']/span")
	public static WebElement  treeTab_NewMasterSettingsBtn;

	@FindBy(xpath="//input[@id='txtNewTreeTabFieldCaption']")
	public static WebElement  treeTab_FieldCaptiontxt;

	@FindBy(xpath="//input[@id='txtNewTreeTabFieldName']")
	public static WebElement  treeTab_FieldNameTxt;

	@FindBy(xpath="//input[@id='bIsTreeHiddenTab']")
	public static WebElement  treeTab_HiddenChkBox;

	@FindBy(xpath="//div[@id='fOption_tab_masterName_customize_popup_container']")
	public static WebElement  treeTab_NewMaster_ContainerTxt;

	@FindBy(xpath="//div[@id='fOption_tab_masterName_customize_popup_footer']//input[1]")
	public static WebElement  treeTab_NewMaster_StanadrdfieldsBtn;

	@FindBy(xpath="//select[@id='fOption_tab_masterName_customize_popup_standardfields_list']")
	public static WebElement treeTab_NewMaster_Stanadrdfields_Fielddropdown;

	@FindBy(xpath="//input[@id='fOption_tab_masterName_customize_popup_standardfields_header']")
	public static WebElement  treeTab_NewMaster_Stanadrdfields_headerTxt;

	@FindBy(xpath="//select[@id='fOption_tab_masterName_customize_popup_standardfields_alignment']")
	public static WebElement  treeTab_NewMaster_Stanadrdfields_Allignmentdropdown;

	@FindBy(xpath="//input[@id='fOption_tab_masterName_customize_popup_standardfields_width']")
	public static WebElement  treeTab_NewMaster_Stanadrdfields_WidthTxt;

	@FindBy(xpath="//div[@id='divSecondsub']//input[3]")
	public static WebElement  treeTab_NewMaster_Stanadrdfields_OkBtn;

	@FindBy(xpath="//div[@id='divSecondsub']//input[4]")
	public static WebElement  treeTab_NewMaster_Stanadrdfields_CancelBtn;

	@FindBy(xpath="//div[@id='fOption_tab_masterName_search_container']//input[2]")
	public static WebElement  treeTab_NewMaster_deleteColumnBtn;

	@FindBy(xpath="//div[@id='divSecondsub']//input[3]")
	public static WebElement  treeTab_NewMaster_OkBtn;

	@FindBy(xpath="//div[@id='divSecondsub']//input[4]")
	public static WebElement  treeTab_NewMaster_CancelBtn;

	@FindBy(xpath="//*[@id='MCustomize_CreateTreeTab_Modal']/div/div/div[3]/button[1]")
	public static WebElement  treeTab_OkBtn;

	@FindBy(xpath="//div[@id='MCustomize_EditTab_Modal']//button[@class='Fbutton font-5'][contains(text(),'OK')]")
	public static WebElement  treeTab_UpdateOkBtn;

	@FindBy(xpath="//*[@id='MCustomize_CreateTreeTab_Modal']/div/div/div[3]/button[2]")
	public static WebElement  treeTab_CancelBtn;

	@FindBy(xpath="//a[contains(text(),'Document Tab')]")
	public static WebElement createTab_DocumentTab;  

	@FindBy(xpath="//input[@id='txtNewDocTabCaption']")
	public static WebElement documentTab_TabCaption;  

	@FindBy(xpath="//input[@id='txtNewDocTabName']")
	public static WebElement documentTab_TabName;  

	@FindBy(xpath="//input[@id='bIsDocHiddenTab']")
	public static WebElement documentTab_HiddenChkbox;  

	@FindBy(xpath="//div[@id='MCustomize_CreateDocTab_Modal']//button[@class='Fbutton font-5'][contains(text(),'OK')]")
	public static WebElement documentTab_OkBtn;  

	@FindBy(xpath="//div[@id='MCustomize_CreateDocTab_Modal']//button[@class='Fbutton font-5'][contains(text(),'Cancel')]")
	public static WebElement documentTab_CancelBtn; 

	@FindBy(xpath="//label[@id='lblNameError_DocTab']")
	public static WebElement customizeMasterCreateTabDocumentTabMessage; 

	@FindBy(xpath="//span[contains(text(),'Document Tab')]")
	public static WebElement customizeMasterCreateDocumentTabNewlyCreate; 

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[6]/ul[1]/li[1]/a[1]/span[1]")
	public static WebElement customizeMasterCreateDocumentTabNewlyHeaderDetails; 	

	@FindBy(xpath="//div[@id='HeaderDetails_5']//div[@class='scrollable tbl-emptyfields-mastercust']")
	public static WebElement customizeMasterCreateDocumentTabNewlyBlankInHeaderDetails;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[6]/ul[1]/li[2]/a[1]/span[1]")
	public static WebElement customizeMasterCreateDocumentTabNewlyBodyDetails; 			

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[6]/div[1]/div[2]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[4]")
	public static WebElement customizeMasterCreateDocumentTabFieldName; 

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[6]/div[1]/div[2]/div[1]/div[1]/table[1]/tbody[1]/tr[2]/td[4]")
	public static WebElement customizeMasterCreateDocumentTabDocument; 

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[6]/div[1]/div[2]/div[1]/div[1]/table[1]/tbody[1]/tr[3]/td[4]")
	public static WebElement customizeMasterCreateDocumentTabCreatedDate; 

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[6]/div[1]/div[2]/div[1]/div[1]/table[1]/tbody[1]/tr[4]/td[4]")
	public static WebElement customizeMasterCreateDocumentTabLastModified; 

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[6]/div[1]/div[2]/div[1]/div[1]/table[1]/tbody[1]/tr[5]/td[4]")
	public static WebElement customizeMasterCreateDocumentFileSize; 

	@FindBy(xpath="//a[contains(text(),'Create Tab')]")
	public static WebElement createTab_CreateTab;  

	@FindBy(xpath="//div[@id='MCustomize_CreateDocTab_Modal']//h4[@class='modal-title'][contains(text(),'Tab Details')]")
	public static WebElement createTab_TabDetailsLabel;  

	@FindBy(xpath="//input[@id='txtNewTabCaption']")
	public static WebElement createTab_TabCaptionTxt;  

	@FindBy(xpath="//input[@id='txtNewTabName']")
	public static WebElement createTab_TabNameTxt;  

	@FindBy(xpath="//input[@id='bIsHiddenTab']")
	public static WebElement createTab_PopHiddenChkbox;  

	@FindBy(xpath="//*[@id='MCustomize_CreateTab_Modal']/div/div/div[3]/button[1]")
	public static WebElement createTab_PopOkBtn;  

	@FindBy(xpath="//*[@id='MCustomize_CreateTab_Modal']/div/div/div[3]/button[2]")
	public static WebElement createTab_PopCancelBtn; 

	@FindBy(xpath="//label[@id='lblNameError_NewTab']")
	public static WebElement customizeMasterCreateTabCreateTabMessage;  


	//Newly Created Create Tab  

	@FindBy(xpath="//span[contains(text(),'Create Tab')]")
	public static WebElement customizeMasterCreateCreateTabNewlyCreateTabCaption; 	


	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[7]/ul[1]/li[1]/a[1]/span[1]")
	public static WebElement customizeMasterCreateCreateTabHeaderDetails; 	

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[7]/div[1]/div[1]/div[1]/div[1]")
	public static WebElement customizeMasterCreateCreateTabBlankHeaderDetails; 	

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[7]/ul[1]/li[2]/a[1]/span[1]")
	public static WebElement customizeMasterCreateCreateTabBodyDetails; 	

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[7]/div[1]/div[2]/div[1]/div[1]")
	public static WebElement customizeMasterCreateCreateTabBlankBodyDetails; 

	@FindBy(xpath="//*[@id='all_TabsField']//ul/li[1]/a/i")
	public static WebElement customizeMasterCreateCreateTabNewlyCreateTabSaveButton; 		

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[8]/div[3]/div[2]")
	public static WebElement customizeMasterCreateCreateTabAddButton; 	

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[8]/div[4]/div[2]")
	public static WebElement customizeMasterCreateCreateTabPreviewButton; 	

		

	@FindBy(xpath="//button[@id='btnDeleteTab_MCust']")
	public static WebElement tabs_DeleteBtn; 

	@FindBy(xpath="//label[@id='lblNameError_TreeTab']")
	public static WebElement customizeMasterCreateTabsMessage; 		

	@FindBy(xpath="//label[@id='lblMasterNameError_TreeTab']")
	public static WebElement customizeMasterCreateTabsMasterNameMessage; 	

	@FindBy(xpath="//span[contains(text(),'Tree Tab')]")
	public static WebElement customizeMasterCreateTreeTabNewlyCreate; 	

	@FindBy(xpath="//input[@id='txtEditTabCaption']")
	public static WebElement customizeMasterCreateTreeTabNewlyCreateTabCaption; 	

	@FindBy(xpath="//div[@id='MCustomize_EditTab_Modal']//label[@class='col-sm-12 col-xs-12 col-md-5 col-lg-5 form-control-static Flabel'][contains(text(),'Hidden')]")
	public static WebElement customizeMasterCreateTreeTabNewlyCreateHidden; 	

	@FindBy(xpath="//div[@id='MCustomize_EditTab_Modal']//button[@class='Fbutton font-5'][contains(text(),'OK')]")
	public static WebElement customizeMasterCreateTreeTabNewlyCreateOkButton; 	

	@FindBy(xpath="//div[@id='MCustomize_EditTab_Modal']//button[@class='Fbutton font-5'][contains(text(),'Cancel')]")
	public static WebElement customizeMasterCreateTreeTabNewlyCreateCancelButton; 	

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[5]/ul[1]/li[1]/a[1]/span[1]")
	public static WebElement customizeMasterCreateTreeTabNewlyHeaderDetails; 	

	//               
	@FindBy(xpath="//div[@id='HeaderDetails_4']//div[@class='scrollable tbl-emptyfields-mastercust']")
	public static WebElement customizeMasterCreateTreeTabNewlyBlankInHeaderDetails; 	

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[5]/ul[1]/li[2]/a[1]/span[1]")
	public static WebElement customizeMasterCreateTreeTabNewlyBodyDetails; 	


	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[5]/div[1]/div[2]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[4]")
	public static WebElement customizeMasterCreateTreeTabNewlyFieldInBodyDetails; 	

	@FindBy(xpath="//span[contains(text(),'Tree Tab Delete')]")
	public static WebElement  CustomizeCreateTreeTab;

	@FindBy(xpath="//*[@id='lblWarnMessage_TabModal']")
	public static WebElement  CustomizeDeleteTabMessage;

	@FindBy(xpath="//div[@id='MCustomize_DeleteTab_Modal']//button[@class='Fbutton font-5'][contains(text(),'Yes')]")
	public static WebElement  CustomizeDeleteTabMessageYesBtn;

	@FindBy(xpath="//div[@id='MCustomize_DeleteTab_Modal']//button[@class='Fbutton font-5'][contains(text(),'No')]")
	public static WebElement  CustomizeDeleteTabMessageNoBtn;


	//Master Customization Extra Fields Creation On Click Add button


	@FindBy(xpath="//*[@id='ExtraField_Tabs']/li[2]/a")
	public static WebElement extraFields_PropertiesTab;		     



	@FindBy(xpath="//*[@id='Behaviour']")
	public static WebElement extraFields_PropertiesBehaviourDropdown;     

	@FindBy(xpath="//*[@id='ExtraField_Tabs']/li[3]/a")
	public static WebElement  extraFields_FormattingTab;

	@FindBy(xpath="//*[@id='FieldsDetails_ColumnSpan']")
	public static WebElement extraFields_FormattingColumnSpan ;

	@FindBy(xpath="//*[@id='FieldsDetails_RowSpan']")
	public static WebElement extraFields_FormattingRowSpan ;

	@FindBy(xpath="//*[@id='CharacterCasing']")
	public static WebElement extraFields_FormattingCharacterCasingDropdown ;

	@FindBy(xpath="//*[@id='TextAlign']")
	public static WebElement extraFields_FormattingTextAlignDropdown ;

	@FindBy(xpath="//*[@id='FieldsDetails_Font']")
	public static WebElement extraFields_FormattingFieldsDetailsFont ;

	@FindBy(xpath="//*[@id='FieldsDetails_BackColor']")
	public static WebElement extraFields_FormattingBackColor ;

	@FindBy(xpath="//*[@id='FieldsDetails_Font_Button']")
	public static WebElement extraFields_FormattingFieldsDetailsFont_Btn ;

	//Elements are used for font edit option pop in field details and rules 

	@FindBy(xpath="//*[@id='fontFamily_ExtraField_FontCtrl']")
	public static WebElement FontAreialDropdown ;

	@FindBy(xpath="//*[@id='fontStyle_ExtraField_FontCtrl']")
	public static WebElement fontStyleDropdown ;

	@FindBy(xpath="//*[@id='fontWeight_ExtraField_FontCtrl']")
	public static WebElement fontWeightDropdown ;

	@FindBy(xpath="//*[@id='fontSizes_ExtraField_FontCtrl']")
	public static WebElement fontSizeDropdown ;

	@FindBy(xpath="//*[@id='fontForeColor_ExtraField_FontCtrl']")
	public static WebElement foreColourDropdown ;

	@FindBy(xpath="//*[@id='fontBackColor_ExtraField_FontCtrl']")
	public static WebElement backColorDropdown ;

	@FindBy(xpath="//*[@id='MCustomize_FontDialog_Modal']/div[2]/div/div[2]/div[7]/div/div[1]/label/span")
	public static WebElement baselineChekbox ;

	@FindBy(xpath="//*[@id='MCustomize_FontDialog_Modal']/div[2]/div/div[2]/div[7]/div/div[2]/label/span")
	public static WebElement overLineChekbox ;

	@FindBy(xpath="//*[@id='chkStrikeThrough_ExtraField_FontCtrl']")
	public static WebElement strikeThroughChekbox ;

	@FindBy(xpath="//*[@id='MCustomize_FontDialog_Modal']/div[2]/div/div[2]/div[7]/div/div[3]/label/span")
	public static WebElement underlineChekbox ;

	@FindBy(xpath="//*[@id='chkEnableFont_ExtraField_FontCtrl']//following-sibling::span")
	public static WebElement enableFontChekbox ;
	
	@FindBy(xpath="//*[@id='chkEnableFont_ExtraField_FontCtrl']")
	public static WebElement enableFontChekboxSelected;

	@FindBy(xpath="//*[@id='previewfont_ExtraField_FontCtrl']")
	public static WebElement frontPriveiw ;

	@FindBy(xpath="//*[@id='btnAddGroup_Ok']")
	public static WebElement frontSaveBtn ;

	@FindBy(xpath="//*[@id='btnAddGroup_Cancel']")
	public static WebElement frontCloseBtn ;


	@FindBy(xpath="//*[@id='ExtraField_Tabs']/li[4]/a")
	public static WebElement extraFields_RulesTab ;

	@FindBy(xpath="//*[@id='newRuleTab_div_FieldRules']/div[1]/div[2]/nav/ul/li[1]/a/i")
	public static WebElement extraFields_RulesSaveBtn ;

	@FindBy(xpath="//*[@id='newRuleTab_div_FieldRules']/div[1]/div/div[2]/div[2]")
	public static WebElement extraFields_RulesNewBtn ;

	@FindBy(xpath="//*[@id='newRuleTab_div_FieldRules']/div[1]/div[2]/nav/ul/li[3]/a/I")
	public static WebElement extraFields_RulesDeleteBtn ;

	@FindBy(xpath="//div[@id='newRuleTab_div_FieldRules']//div[@class='col-sm-12 btnheader_txt font-7'][contains(text(),'Close')]")
	public static WebElement extraFields_RulesCloseBtn ;

	@FindBy(xpath="//input[@class='btn btn-link']")
	public static WebElement extraFields_RulesClickHereAddRuleButtonBtn ;

	@FindBy(xpath="//input[@id='txtMasterRuleName_FieldRules']")
	public static WebElement extraFields_RuleNameDropdown ;

	@FindBy(xpath="//div[@id='txtMasterRuleName_FieldRules_input_container']//i[@class='icon-menudots btn-img']")
	public static WebElement extraFields_RuleNameSetingBtn ;      



	@FindBy(xpath="//*[@id='extraFieldContainer_div']/ul/li[5]/a/span")
	public static WebElement extraFields_ExternalModulesTab;			     

	@FindBy(xpath="//*[@id='ddlOnEvent_mExtraFieldExternalModule']")
	public static WebElement extraFields_ExternalModulesOnEventDropdown;	

	@FindBy(xpath="//*[@id='txtbuttonCaption_mExtraFieldExternalModule']")
	public static WebElement extraFields_ExternalModulesButtonCaption;

	@FindBy(xpath="//*[@id='ddlModuleType_mExtraFieldExternalModule']")
	public static WebElement extraFields_ExternalModules_ModuleTypeBtn;

	@FindBy(xpath="//*[@id='ddlAllDllFiles_mExtraFieldExternalModule']")
	public static WebElement extraFields_ExternalModules_ModuleNameDropdown;

	@FindBy(xpath="//*[@id='ddlClassNames_mExtraFieldExternalModule']")
	public static WebElement extraFields_ExternalModulesClassNameDropdown;

	@FindBy(xpath="//*[@id='ddlClassMethods_mExtraFieldExternalModule']")
	public static WebElement extraFields_ExternalModulesFuctionalNameDropdown;

	@FindBy(xpath="//*[@id='ddlAvailability_mExtraFieldExternalModule']")
	public static WebElement extraFields_ExternalModulesAvabileInDropdown;        

	@FindBy(xpath="//*[@id='MCustomize_FontDialog_Modal']/div/div/div[3]/button[1]")
	public static WebElement extraFields_ExternalModulesForMatFieldDeatailsOkBtn ;

	@FindBy(xpath="//*[@id='MCustomize_FontDialog_Modal']/div/div/div[3]/button[2]")
	public static WebElement extraFields_externalModulesForMatFieldDeatailsCanceBtn ;



	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[7]/div[1]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[4]")
	public static WebElement extraFields_CreatedByUserInHeaderDetailsTab;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[7]/div[1]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/i[1]")
	public static WebElement extraFields_EditOptionInHeaderDetailsTab;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[7]/div[1]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/i[2]")
	public static WebElement extraFields_DeleteOptionInHeaderDetailsTab;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[7]/div[1]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[2]/td[4]")
	public static WebElement extraFields_SecondFieldInHeaderDetailsTab;


	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[8]/div[2]/div[2]")
	public static WebElement extraFields_MoveFieldOption;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[8]/div[1]/div[1]/div[2]/div[1]/div[2]/div[1]/select[1]")
	public static WebElement extraFields_MoveFieldTabName;

	@FindBy(xpath="//div[@id='tableType_div']//div[1]//label[1]")
	public static WebElement extraFields_MoveFieldHeader;

	@FindBy(xpath="//div[@id='rdbBodyDiv_MoveField_Modal']//label[1]")
	public static WebElement extraFields_MoveFieldBody;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[8]/div[1]/div[1]/div[3]/button[1]")
	public static WebElement extraFields_MoveFieldOkButton;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[8]/div[1]/div[1]/div[3]/button[2]")
	public static WebElement extraFields_MoveFieldCancelButton;


	//Settings Tab Move Field

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[3]/td[1]/i[1]")
	public static WebElement extraFields_SettingsTab_MoveField;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[4]")
	public static WebElement extraFields_SettingsTab_First;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/i[2]")
	public static WebElement extraFields_SettingsTab_FirstDelete;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[3]/td[1]/i[2]")
	public static WebElement extraFields_SettingsTab_MoveFieldOptsDelete;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[9]/div[1]/div[1]/div[2]/div[1]/div[1]/label[1]")
	public static WebElement extraFields_SettingsTab_DeleteMessage;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[9]/div[1]/div[1]/div[3]/button[2]")
	public static WebElement extraFields_SettingsTab_DeleteMessageNoOption;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[9]/div[1]/div[1]/div[3]/button[1]")
	public static WebElement extraFields_SettingsTab_DeleteMessageYesOption;



	@FindBy(xpath="//a[@class='icon-font7 theme_color-inverse']")
	public static WebElement extraFields_GeneralTab;

	@FindBy(xpath="//a[contains(text(),'Settings')]")
	public static WebElement extraFields_SettingsTab;

	@FindBy(xpath="//a[contains(text(),'Details')]")
	public static WebElement extraFields_DetailsTab;

	@FindBy(xpath="//a[contains(text(),'Print Layout')]")
	public static WebElement extraFields_PrintLayout;

	@FindBy(xpath="//a[contains(text(),'Tree Tab Update')]")
	public static WebElement extraFields_TreeTabUpdate;

	@FindBy(xpath="//a[@class='icon-font7 theme_color'][contains(text(),'Document Tab')]")
	public static WebElement extraFields_DocumentTab;

	@FindBy(xpath="//a[@class='icon-font7 theme_color'][contains(text(),'Create Tab')]")
	public static WebElement extraFields_CreateTab;


	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/div[8]/div[4]/div[2]")
	public static WebElement extraFields_PreviewTab;


	@FindBy(xpath="//input[@id='sFileName1']")
	public static WebElement extraFields_PreviewTab_DocumentTab_FileName;

	@FindBy(xpath="//input[@id='biDocument1']")
	public static WebElement extraFields_PreviewTab_DocumentTab_Document;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[23]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/form[1]/div[1]/div[6]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[5]/div[1]/div[1]/div[1]")
	public static WebElement extraFields_PreviewTab_DocumentTab_UploadDocument;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[23]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/form[1]/div[1]/div[6]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[5]/div[1]/div[1]/div[2]")
	public static WebElement extraFields_PreviewTab_DocumentTab_SaveDocument;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[23]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/form[1]/div[1]/div[6]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[5]/div[1]/div[1]/div[3]")
	public static WebElement extraFields_PreviewTab_DocumentTab_DeleteDocument;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[23]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/form[1]/div[1]/div[6]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[7]/table[1]/tbody[1]/tr[1]/td[2]/input[2]")
	public static WebElement extraFields_PreviewTab_DocumentTab_CreateDate;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[23]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/form[1]/div[1]/div[6]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[9]/div[1]/input[1]")
	public static WebElement extraFields_PreviewTab_DocumentTab_FileSize;


	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[23]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/form[1]/div[1]/div[7]/div[1]/div[2]/div[2]/div[1]/div[1]/input[1]")
	public static WebElement extraFields_PreviewTab_CreateCreateTab_ExtraFieldUpdate;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[23]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/div[3]/div[2]/div[1]/ul[1]/li[2]/button[2]/i[1]")
	public static WebElement extraFields_PreviewTab_SaveBtn;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[23]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/div[3]/div[2]/div[1]/ul[1]/li[2]/button[5]")
	public static WebElement extraFields_PreviewTab_CloseBtn;


	@FindBy(xpath="/html/body/section/div[2]/div/section[1]/div[1]/div/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table/tbody/tr[1]/td/div/table/tbody/tr[2]/td[8]/div[1]/label/input")
	public static WebElement selectVendorB;



	@FindBy(xpath="//input[@id='iPDCDiscountedAC']")
	public static WebElement pdcDicountAccount;


	@FindBy(xpath="//input[@id='uploadBtnbiDocument1']")
	public static WebElement addGroupDocumentTab_UploadDocument;

	@FindBy(xpath="//tr[1]//td[5]//div[1]//div[1]//div[2]")
	public static WebElement addGroupDocumentTab_SaveDocument;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/div[2]/form[1]/div[1]/div[6]/div[1]/div[1]/div[1]/table[1]/tbody[1]/tr[1]/td[5]/div[1]/div[1]/div[3]/i[1]")
	public static WebElement addGroupDocumentTab_DeleteDocument;


	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/div[2]/form[1]/div[1]/div[7]/div[1]/div[2]/div[2]/div[1]/div[1]/input[1]")
	public static WebElement addGroupCreateCreateTab_ExtraFieldUpdate;

	@FindBy(xpath="//td[contains(@class,'tdName padding0')][contains(text(),'Vendor Group')]")
	public static WebElement accountGroupCreation;


	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[1]/td[8]/div[1]/label[1]/input[1]")
	public static WebElement accSelect;



	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[1]/td[11]")
	public static WebElement accSelectBySingleClick;





	@FindBy(xpath="//span[contains(text(),'Vendor Group')]")
	public static WebElement clickOnAccountGroupToDisplayTitle;


	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/ol[1]/li[4]/span[1]")
	public static WebElement clickOnAccountGroup;


	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/div[2]/form[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[1]/div[1]/input[1]")
	public static WebElement getCpationOfGroup;


	@FindBy(xpath="//label[@class='msgInfo']")
	public static WebElement clickOnEmptyGroup;




	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/div[3]/ul[1]/li[1]/ul[6]/li[1]/ul[3]/li[1]/ul[1]/li[1]/a[2]")
	public static WebElement selectVendorGroupCheckbox;

	@FindBy(xpath="/html/body/section/div[2]/div/section[1]/div[1]/div/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table/tbody/tr[1]/td/div/table/tbody/tr[1]/td[8]/div[1]/label/input")
	public static WebElement selectVendorGroup;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[9]/div[1]/div[1]/div[1]/div[2]/div[1]/label[1]")
	public static WebElement getMsgOnDelete;

	@FindBy(xpath="//button[@id='btnOkForDelete']")
	public static WebElement clickOnOkInDelete;

	@FindBy(xpath="//button[@id='btnCancelForDelete']")
	public static WebElement clickOnCancelInDelete;


	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/ol[1]/li[4]/span[1]")
	public static WebElement clickOnVendorGroup;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/div[2]/form[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[1]/div[1]/input[1]")
	public static WebElement getVendorGroupName;

	@FindBy(xpath="//button[@class='btn-link theme_icon-color btnGenerateMasterclose closeMasterPartial clsMasterSaveClose']//i[@class='icon-font6 icon-close']")
	public static WebElement closeAccountCreationScreen;

	@FindBy(xpath="//input[@id='chkRetainSelection']")
	public static WebElement accountMasterRetain;

	@FindBy(xpath="//input[@id='liSelectAllMasters']")
	public static WebElement accountMasterSelect;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[1]/td[8]/div[1]/label[1]/input[1]")
	public static WebElement accountFirstCheckBox;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[2]/td[8]/div[1]/label[1]/input[1]")
	public static WebElement accountSecondCheckBox;

	@FindBy(xpath="//button[@class='btn-link theme_icon-color btnGenerateMasterclose closeMasterPartial clsMasterSaveClose']")
	public static WebElement closeAccMasterCreationScreen;


	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/div[1]/div[2]/div[1]/ul[1]/li[2]/button[5]/i[1]")
	public static WebElement closeMaster;


	//Dash board Page

	@FindBy(xpath="//*[@id='dashName']")
	public static WebElement labelDashboard ;

	@FindBy(xpath="//*[@id='Select_dash']")
	public static WebElement selectDashboard ;

	@FindBy(xpath="//*[@id='Dashboard_AddDash']")
	public static WebElement newAddDashBoard;

	@FindBy(xpath="//*[@id='Dashboard_Dash_Config']")
	public static WebElement dashboardCustomizationSettings;



	//Properties Page

	@FindBy(xpath="//span[contains(text(),'Account Properties')]")
	public static WebElement accountPropertiesLabel;

	@FindBy(xpath="//input[@id='rbnNormal']")
	public static WebElement normalRadioBtn;

	@FindBy(xpath="//input[@id='rbnDisplayDebitCreditTotalForEachAccountUnderGroup']")
	public static WebElement  displayDebitCreditTotalForEachAccountUnderGroup;

	@FindBy(xpath="//input[@id='rbnClubTranOfAllAcctsUnderGrpWhenDispInLedger']")
	public static WebElement  ClubTheTransactionsofAllTheAccountsUnderGroup;

	@FindBy(xpath="//input[@id='rbnShowSummaryOfAccount']")
	public static WebElement showSummaryOfTheAccountRadioBtn ;	

	@FindBy(xpath="//input[@id='chkSuspendCreditLimit']")
	public static WebElement suspendCreditLimitChkbox ;

	@FindBy(xpath="//input[@id='rbnDisplayDebitCreditTotalForEachMonth']")
	public static WebElement  displayDebitCreditTotalForEachMonthRadioBtn;

	@FindBy(xpath="//input[@id='rbnrbnDisplayDebitCreditTotalForEachDay']")
	public static WebElement  displayDebitCreditTotalForEachDayRadioBtn;

	@FindBy(xpath="//input[@id='rbnNone']")
	public static WebElement  noneRadioBtn;

	@FindBy(xpath="//input[@id='rbnConsolidateWhenBothAccountsAreSame']")
	public static WebElement consolidateWhenBothAccountsAreSameRadioBtn ;

	@FindBy(xpath="//input[@id='rbnConsolidateAlways']")
	public static WebElement consolidateAlwaysRadioBtn ;

	@FindBy(xpath="//select[@id='ddlStatus']")
	public static WebElement  statusDropdown;

	@FindBy(xpath="//input[@id='chkDoNotRestrictSelectionEvenIfRightsNotAllotted']")
	public static WebElement  doNotRestrictSelectionEvenIfRightsNotAllottedCheckbox;

	@FindBy(xpath="//input[@id='chkAllowOtherCompaniesToViewRecords']")
	public static WebElement allowOtherCompaniesToViewRecordsCheckbox;

	@FindBy(xpath="//input[@id='chkGenerateLedgerByCurrency']")
	public static WebElement generateLedgerByCurrencyCheckbox;

	@FindBy(xpath="//input[@id='chkSendSmsEmailWhereverAcDebitedCredited']")
	public static WebElement sendSmsEmailWhereverAcDebitedCreditedCheckbox;

	@FindBy(xpath="//span[@id='btnPropOk']")
	public static WebElement properties_okBtn;

	@FindBy(xpath="//*[@id='divMasterProperty']/ul/li/span[2]")
	public static WebElement  properties_cancelBtn;


	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/div[1]/div[2]/ul[1]/li[1]/ul[1]/li[5]/span[1]")
	public static WebElement  customizeTabWithTreeTabUpdate;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/div[1]/div[2]/ul[1]/li[1]/ul[1]/li[6]/span[1]")
	public static WebElement  customizeTabWithDocumentTab;

	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/div[1]/div[2]/ul[1]/li[1]/ul[1]/li[7]/span[1]")
	public static WebElement  customizeTabWithCreateTreeTab;

	@FindBy(xpath="//div[@id='Layout_Popup']//input[2]")
	public static WebElement noIn;


	@FindBy(xpath="//div[@id='chartdiv0']")
	public static WebElement dashboardGraph;

	@FindBy(xpath="//div[@id='DBdashlate1']")
	public static WebElement dashboardLedger;

	@FindBy(xpath="//div[@id='DBdashlate2']")
	public static WebElement dashboardInfoPanel;





	public static String checkDownloadedFileName(WebDriver driver) throws InterruptedException
	{
		String mainWindow = driver.getWindowHandle();

		JavascriptExecutor js = (JavascriptExecutor)driver;
		js.executeScript("window.open()");

		for(String winHandle : driver.getWindowHandles())
		{
			driver.switchTo().window(winHandle);
		}

		driver.get("chrome://downloads");

		JavascriptExecutor js1 = (JavascriptExecutor)driver;

		String fileName = (String) js1.executeScript("document.querySelector('downloads-manager').shadowRoot.querySelector('#downloadsList downloads-item').shadowRoot.querySelector('div#content #file-link').text");

		System.err.println("Download deatils");
		System.out.println("File Name :-" + fileName);

		Thread.sleep(2000);
		driver.close();

		driver.switchTo().window(mainWindow);

		return fileName;
	}


	public static void checkPopUpWindow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{       
		try 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(doNotShowCheckbox));
			doNotShowCheckbox.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtnInDemoPopupScreen));
			closeBtnInDemoPopupScreen.click(); 

			System.err.println("POP UP DISPLAYED AND CLOSED SUCCESSFULLY");

		} 
		catch (Exception e)
		{
			System.err.println("NO POP UP DISPLAYED");
		} 	
	}




	public static String checkValidationMessage(String ExpMessage) throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
			String actErrorMessage=errorMessage.getText();
			String expErrorMessage=ExpMessage;

			try
			{

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
				errorMessageCloseBtn.click();

				System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);

				return actErrorMessage;
			}
			catch(Exception ee)
			{

				System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);

				return actErrorMessage;
			}
		}
		catch(Exception e)
		{
			System.err.println("Error Message NOT Found or NOT Clickable");
			System.err.println(e.getMessage());

			String Exception=e.getMessage();

			return Exception;
		}
	}



	@FindBy(xpath="//button[contains(text(),'Ok')]")
	public static WebElement loginRefreshOkBtn;


	public static void checkRefershPopOnlogin() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		try 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(loginRefreshOkBtn));
			loginRefreshOkBtn.click();


		} 
		catch (Exception e)
		{
			System.err.println("NO ALERT POP UP DISPLAYED");
		}



	}



	public static String xlfile;
	public static String resPass="Pass";
	public static String resFail="Fail";
	public static ExcelReader excelReader;

	public static int cSize;

	@FindBy(xpath="//i[@class='icon-restore-1 icon-font4']")
	public static WebElement  loginPageRestoreBtn;

	//User Name and password in Credentials
	@FindBy(xpath="//*[@id='txtAdminUsername']")
	public static WebElement adminName;

	@FindBy(xpath="//*[@id='txtAdminPassword']")
	public static WebElement adminPassword;

	@FindBy(xpath="/html/body/section/div[8]/div/div/div[4]/button[1]")
	public static WebElement loginButton;

	@FindBy(xpath="/html/body/section/div[8]/div/div/div[4]/button[2]")
	public static WebElement cancelButton;

	//Restore Screen Options
	@FindBy(xpath="//div[contains(text(),'Restore Company')]")
	public static WebElement restoreCompanyBtnOfLoginPage;

	@FindBy(xpath="//input[@id='txtRestoreFile']")
	public static WebElement restoreInputTxt;

	@FindBy(xpath="//button[@class='btn Fbutton']")
	public static WebElement restoreBrowseBtn;


	public static boolean checkRestoreCompany() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
	{
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restore));
			restore.click();
		 */

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(loginPageRestoreBtn));
		loginPageRestoreBtn.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(adminName));
		adminPassword.sendKeys("focus");

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(loginButton));
		loginButton.click();

		Thread.sleep(2000);

		boolean actRestoreCompanyBtnOfLoginPage  =restoreCompanyBtnOfLoginPage.isDisplayed();
		boolean actRestoreInputTxt               =restoreInputTxt.isDisplayed();
		boolean actRestoreBrowseBtn              =restoreBrowseBtn.isDisplayed();

		boolean expRestoreCompanyBtnOfLoginPage  =true;
		boolean expRestoreInputTxt               =true;
		boolean expRestoreBrowseBtn              =true;

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(restoreBrowseBtn));
		restoreBrowseBtn.click();

		Thread.sleep(3000);

		Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\SanityRestore.exe");

		Thread.sleep(3000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(restoreCompanyBtnOfLoginPage));
		restoreCompanyBtnOfLoginPage.click();

		getWaitForAlert();
		String actAlertTxt = getAlert().getText();
		getAlert().accept();

		System.err.println(actAlertTxt);

		String expAlertTxt = "Restore company code : 010";

		Thread.sleep(3000);

		if(actAlertTxt.equalsIgnoreCase(expAlertTxt))
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	public static boolean checkLogin() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		Thread.sleep(3000);
		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt="su";

		String pawslt="su";


		getDriver().navigate().refresh();
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
		username.click();
		Thread.sleep(2000);
		username.clear();
		Thread.sleep(2000);
		username.sendKeys(unamelt);
		//getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
		password.click();
		Thread.sleep(2000);
		password.clear();*/
		Thread.sleep(2000);
		password.sendKeys(pawslt);

		String compname="Account Properties And Customization";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		int zqSize=cSize+1;

		System.out.println("CompanyDropdownList Count :"+cqSize);

		System.out.println("Company dropdown is :"+ zqSize);


		//Select dropdown= new Select(lp.companyDropDownList);
		int i;

		//List<WebElement> list = dropdown.getOptions();

		//List<String> text = new ArrayList<>();
		for(i=0; i<elementCount.size(); i++) 
		{
			elementCount.get(i).getText();
			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}	
		}

		lp.clickOnSignInBtn();

		//checkRefershPopOnlogin();

		//checkPopUpWindow();

		Thread.sleep(8000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameTxt));
		userNameTxt.click();

		String userInfo=userNameTxt.getText();

		System.out.println("User Info : "+userInfo);

		System.out.println("User Info Capture Text :"+userNameTxt.getText());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogoImg));

		companyLogoImg.click();

		String getCompanyTxt=companyName.getText();
		String getLoginCompanyName=getCompanyTxt.substring(0, 36);
		System.out.println("company name :"+ getLoginCompanyName);
		companyLogoImg.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dashboardName));

		String getDashboard=dashboardName.getText();

		System.out.println(getDashboard);

		/*	boolean actdashboardGraph     =dashboardGraph.isDisplayed();
	boolean actdashboardLedger    =dashboardLedger.isDisplayed();
	boolean actdashboardInfoPanel =dashboardInfoPanel.isDisplayed();*/


		String expuserInfo            ="SU";
		String expLoginCompanyName    ="Account Properties And Customization ";
		String expDashboard			  ="Graph with Active and setAsDefault";


		System.out.println("***********************************checkLogin*********************************");

		System.out.println("User Info                        : "+userInfo               +"  value expected  "+expuserInfo);
		System.out.println("Login Company Name               : "+getLoginCompanyName    +"  value expected  "+expLoginCompanyName);
		System.out.println("Dashboard                        : "+getDashboard           +"  value expected  "+expDashboard);


		if(/*userInfo.equalsIgnoreCase(expuserInfo) &&*/ getLoginCompanyName.equalsIgnoreCase(expLoginCompanyName))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}





	public static boolean checkMainOptionsAccountsMenu() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));		

		boolean actmasterNewBtn    	 		=masterNewBtn.isDisplayed();
		boolean actmasterAddGroupBtn    		=masterAddGroupBtn.isDisplayed();
		boolean actmasterEditBtn 				=masterEditBtn.isDisplayed();
		boolean actmasterCloneBtn 				=masterCloneBtn.isDisplayed();
		boolean actmasterPropertiesBtn 		=masterPropertiesBtn.isDisplayed();
		boolean actmasterDeleteBtn 			=masterDeleteBtn.isDisplayed();
		boolean actmasterCloseBtn 				=masterCloseBtn.isDisplayed();
		boolean actmasterRibbonToExpandOptions =masterRibbonToExpandOptions.isDisplayed();

		boolean expmasterNewBtn    	 		=true;
		boolean expmasterAddGroupBtn    		=true;
		boolean expmasterEditBtn 				=true;
		boolean expmasterCloneBtn 				=true;
		boolean expmasterPropertiesBtn 		=true;
		boolean expmasterDeleteBtn 			=true;
		boolean expmasterCloseBtn 				=true;
		boolean expmasterRibbonToExpandOptions =true;


		System.out.println("**************************************checkMainOptionsAccountsMenu*****************************");

		System.out.println("masterNewBtn                  : "+actmasterNewBtn                +" Value Expected : "+expmasterNewBtn);
		System.out.println("masterAddGroupBtn             : "+actmasterAddGroupBtn           +" Value Expected : "+expmasterAddGroupBtn);
		System.out.println("masterEditBtn                 : "+actmasterEditBtn               +" Value Expected : "+expmasterEditBtn);
		System.out.println("masterCloneBtn                : "+actmasterCloneBtn              +" Value Expected : "+expmasterCloneBtn);
		System.out.println("masterPropertiesBtn           : "+actmasterPropertiesBtn         +" Value Expected : "+expmasterPropertiesBtn);
		System.out.println("masterDeleteBtn               : "+actmasterDeleteBtn             +" Value Expected : "+expmasterDeleteBtn);
		System.out.println("masterCloseBtn                : "+actmasterCloseBtn              +" Value Expected : "+expmasterCloseBtn);
		System.out.println("masterRibbonToExpandOptions   : "+actmasterRibbonToExpandOptions +" Value Expected : "+expmasterRibbonToExpandOptions);


		if(actmasterNewBtn==expmasterNewBtn && actmasterAddGroupBtn==expmasterAddGroupBtn && actmasterEditBtn==expmasterEditBtn
				&& actmasterCloneBtn==expmasterCloneBtn && actmasterPropertiesBtn==expmasterPropertiesBtn && actmasterDeleteBtn==expmasterDeleteBtn
				&& actmasterCloseBtn==expmasterCloseBtn && actmasterRibbonToExpandOptions==expmasterRibbonToExpandOptions)
		{	
			excelReader.setCellData(xlfile, "Sheet1", 250, 9, resPass);
			return true;
		}	 
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 250, 9, resFail);
			return false;
		}
	}


	public static boolean checkToolsOptionsAccountsMenu() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		

		masterRibbonToExpandOptions.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterGroupBtn));	

		boolean actmasterGroupBtn    	 													=masterGroupBtn.isDisplayed();
		boolean actmasterDeleteAllBtn    	 												=masterDeleteAllBtn.isDisplayed();
		boolean actmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity   	=masterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity.isDisplayed();
		boolean actmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState    	 	  	=masteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState.isDisplayed();
		boolean actmasterAdvanceMasterImportORExportBtn    	 							=masterAdvanceMasterImportORExportBtn.isDisplayed();
		boolean actmasterAuthorInfoBtn    	 												=masterAuthorInfoBtn.isDisplayed();
		boolean actmasterMoveUpBtn    	 													=masterMoveUpBtn.isDisplayed();
		boolean actmasterMoveDownBtn    	 												=masterMoveDownBtn.isDisplayed();
		boolean actmasterSortBtn    	 													=masterSortBtn.isDisplayed();
		boolean actmasterMassUpdateBtn    	 												=masterMassUpdateBtn.isDisplayed();
		boolean actmasterImportFromXmlBtn    	 											=masterImportFromXmlBtn.isDisplayed();
		boolean actmasterExportFormatToXmlBtn    	 										=masterExportFormatToXmlBtn.isDisplayed();

		boolean expmasterGroupBtn    	 													=true;
		boolean expmasterDeleteAllBtn    	 												=true;
		boolean expmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity   	=true;
		boolean expmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState    	 	  	=true;
		boolean expmasterAdvanceMasterImportORExportBtn    	 							=true;
		boolean expmasterAuthorInfoBtn    	 												=true;
		boolean expmasterMoveUpBtn    	 													=true;
		boolean expmasterMoveDownBtn    	 												=true;
		boolean expmasterSortBtn    	 													=true;
		boolean expmasterMassUpdateBtn    	 												=true;
		boolean expmasterImportFromXmlBtn    	 											=true;
		boolean expmasterExportFormatToXmlBtn    	 										=true;

		System.out.println("**************************************checkToolsOptionsAccountsMenu********************************");

		System.out.println("masterGroupBtn                                                      : "+actmasterGroupBtn                                                      +" Value Expected : "+expmasterGroupBtn);
		System.out.println("masterDeleteAllBtn                                                  : "+actmasterDeleteAllBtn                                                  +" Value Expected : "+expmasterDeleteAllBtn);
		System.out.println("masterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity : "+actmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity +" Value Expected : "+expmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity);
		System.out.println("masteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState          : "+actmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState          +" Value Expected : "+expmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState);
		System.out.println("masterAdvanceMasterImportORExportBtn                                : "+actmasterAdvanceMasterImportORExportBtn                                +" Value Expected : "+expmasterAdvanceMasterImportORExportBtn);
		System.out.println("masterAuthorInfoBtn                                                 : "+actmasterAuthorInfoBtn                                                 +" Value Expected : "+expmasterAuthorInfoBtn);
		System.out.println("masterMoveUpBtn                                                     : "+actmasterMoveUpBtn                                                     +" Value Expected : "+expmasterMoveUpBtn);
		System.out.println("masterMoveDownBtn                                                   : "+actmasterMoveDownBtn                                                   +" Value Expected : "+expmasterMoveDownBtn);
		System.out.println("masterSortBtn                                                       : "+actmasterSortBtn                                                       +" Value Expected : "+expmasterSortBtn);
		System.out.println("masterMassUpdateBtn                                                 : "+actmasterMassUpdateBtn                                                 +" Value Expected : "+expmasterMassUpdateBtn);
		System.out.println("masterImportFromXmlBtn                                              : "+actmasterImportFromXmlBtn                                              +" Value Expected : "+expmasterImportFromXmlBtn);
		System.out.println("masterExportFormatToXmlBtn                                          : "+actmasterExportFormatToXmlBtn                                          +" Value Expected : "+expmasterExportFormatToXmlBtn);


		if(actmasterGroupBtn==expmasterGroupBtn && actmasterDeleteAllBtn==expmasterDeleteAllBtn 
				&& actmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity==expmasterCloseAccountOrItemOrUnitsOrDepartmentOrWareHouseOrStateOrCity
				&& actmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState==expmasteropenCloseAccountOrItemOrDepartmentOrWareHouseOrState 
				&& actmasterAdvanceMasterImportORExportBtn==expmasterAdvanceMasterImportORExportBtn
				&& actmasterAuthorInfoBtn==expmasterAuthorInfoBtn && actmasterMoveUpBtn==expmasterMoveUpBtn && actmasterMoveDownBtn==expmasterMoveDownBtn
				&& actmasterSortBtn==expmasterSortBtn && actmasterMassUpdateBtn==expmasterMassUpdateBtn && actmasterImportFromXmlBtn==expmasterImportFromXmlBtn
				&& actmasterExportFormatToXmlBtn==expmasterExportFormatToXmlBtn)
		{	
			excelReader.setCellData(xlfile, "Sheet1", 251, 9, resPass);
			return true;
		}	 
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 251, 9, resFail);
			return false;
		}
	}

	public static boolean checkOtherToolsOptionsAccountsMenu() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(masterTranferBtn));	

		boolean actmasterCustamizemasterBtn    	  =masterCustamizemasterBtn.isDisplayed();
		boolean actmasterCustamizeViewBtn    	 	  =masterCustamizeViewBtn.isDisplayed();
		boolean actmastercustamizeTreeBtn    	 	  =mastercustamizeTreeBtn.isDisplayed();
		boolean actmasterLedgerBtn    	 		      =masterLedgerBtn.isDisplayed();
		boolean actmasterManageCreditBtn    	 	  =masterManageCreditBtn.isDisplayed();
		boolean actmasterDepartmentAppropriationBtn  =masterDepartmentAppropriationBtn.isDisplayed();
		// boolean actmasterBudgetBtn    	 		      =masterBudgetBtn.isDisplayed();
		boolean actmasterBackTrackBtn    	 	      =masterBackTrackBtn.isDisplayed();
		boolean actmasterTranferBtn    	 		  =masterTranferBtn.isDisplayed();

		boolean expmasterCustamizemasterBtn    	  =true;
		boolean expmasterCustamizeViewBtn    	 	  =true;
		boolean expmastercustamizeTreeBtn    	 	  =true;
		boolean expmasterLedgerBtn    	 		      =true;
		boolean expmasterManageCreditBtn    	 	  =true;
		boolean expmasterDepartmentAppropriationBtn  =true;
		// boolean expmasterBudgetBtn    	 		      =true;
		boolean expmasterBackTrackBtn    	 	      =true;
		boolean expmasterTranferBtn    	 		  =true;


		System.out.println("************************************checkOtherToolsOptionsAccountsMenu************************************");

		System.out.println("masterCustamizemasterBtn           : "+actmasterCustamizemasterBtn           +" Value Expected : "+expmasterCustamizemasterBtn);
		System.out.println("masterCustamizeViewBtn             : "+actmasterCustamizeViewBtn             +" Value Expected : "+expmasterCustamizeViewBtn);
		System.out.println("mastercustamizeTreeBtn             : "+actmastercustamizeTreeBtn             +" Value Expected : "+expmastercustamizeTreeBtn);
		System.out.println("masterLedgerBtn                    : "+actmasterLedgerBtn                    +" Value Expected : "+expmasterLedgerBtn);
		System.out.println("masterManageCreditBtn              : "+actmasterManageCreditBtn              +" Value Expected : "+expmasterManageCreditBtn);
		System.out.println("masterDepartmentAppropriationBtn   : "+actmasterDepartmentAppropriationBtn   +" Value Expected : "+expmasterDepartmentAppropriationBtn);
		// System.out.println("masterBudgetBtn                    : "+actmasterBudgetBtn                    +" Value Expected : "+expmasterBudgetBtn);
		System.out.println("masterBackTrackBtn                 : "+actmasterBackTrackBtn                 +" Value Expected : "+expmasterBackTrackBtn);
		System.out.println("masterTranferBtn                   : "+actmasterTranferBtn                   +" Value Expected : "+expmasterTranferBtn);


		if(actmasterCustamizemasterBtn==expmasterCustamizemasterBtn && actmasterCustamizeViewBtn==expmasterCustamizeViewBtn  
				&& actmastercustamizeTreeBtn==expmastercustamizeTreeBtn && actmasterLedgerBtn==expmasterLedgerBtn
				&& actmasterManageCreditBtn==expmasterManageCreditBtn && actmasterDepartmentAppropriationBtn==expmasterDepartmentAppropriationBtn
				/*&& actmasterBudgetBtn==expmasterBudgetBtn*/ && actmasterBackTrackBtn==expmasterBackTrackBtn && actmasterTranferBtn==expmasterTranferBtn)
		{	
			excelReader.setCellData(xlfile, "Sheet1", 252, 9, resPass);
			return true;
		}	 
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 252, 9, resFail);
			return false;
		}
	}


	public static boolean checkTreeViewOptionsAccountsMenu() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeIdDropdown));	

		boolean actmasterTreeIdDropdown    	        =masterTreeIdDropdown.isDisplayed();
		boolean actmasterTreeIDToggleBtn    	        =masterTreeIDToggleBtn.isDisplayed();
		boolean actmasterTreeViewIDDropdown    	    =masterTreeViewIDDropdown.isDisplayed();
		boolean actmasterTreeViewIDToggleBtn    	    =masterTreeViewIDToggleBtn.isDisplayed();
		boolean actmasterOptionToHideAccountsGroupTree =masterOptionToHideAccountsGroupTree.isDisplayed();

		boolean expmasterTreeIdDropdown        	    =true;
		boolean expmasterTreeIDToggleBtn    	        =true;
		boolean expmasterTreeViewIDDropdown    	    =true;
		boolean expmasterTreeViewIDToggleBtn    	    =true;
		boolean expmasterOptionToHideAccountsGroupTree =true;

		System.out.println("*********************************checkTreeViewOptionsAccountsMenu****************************");

		System.out.println("masterTreeIdDropdown                  : "+actmasterTreeIdDropdown                  +" Value Expected : "+expmasterTreeIdDropdown);
		System.out.println("masterTreeIDToggleBtn                 : "+actmasterTreeIDToggleBtn                 +" Value Expected : "+expmasterTreeIDToggleBtn);
		System.out.println("masterTreeViewIDDropdown              : "+actmasterTreeViewIDDropdown              +" Value Expected : "+expmasterTreeViewIDDropdown);
		System.out.println("masterTreeViewIDToggleBtn             : "+actmasterTreeViewIDToggleBtn             +" Value Expected : "+expmasterTreeViewIDToggleBtn);
		System.out.println("masterOptionToHideAccountsGroupTree   : "+actmasterOptionToHideAccountsGroupTree   +" Value Expected : "+expmasterOptionToHideAccountsGroupTree);

		if(actmasterTreeIdDropdown==expmasterTreeIdDropdown && actmasterTreeIDToggleBtn==expmasterTreeIDToggleBtn && actmasterTreeViewIDDropdown==expmasterTreeViewIDDropdown
				&& actmasterTreeViewIDToggleBtn==expmasterTreeViewIDToggleBtn && actmasterOptionToHideAccountsGroupTree==expmasterOptionToHideAccountsGroupTree)
		{	
			excelReader.setCellData(xlfile, "Sheet1", 253, 9, resPass);
			return true;
		}	 
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 253, 9, resFail);
			return false;
		}
	}



	public static boolean checkGroupOptionsAccountsMenu() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountAssestsGroup));	

		boolean actaccountAssestsGroup    	            =accountAssestsGroup.isDisplayed();
		boolean actaccountFixedAssestsGroup    	    =accountFixedAssestsGroup.isDisplayed();
		boolean actaccountCurrentAssetsGroup    	    =accountCurrentAssetsGroup.isDisplayed();
		boolean actaccountCAshAndBankGroup    	        =accountCAshAndBankGroup.isDisplayed();
		boolean actaccountInventoriesGroup    	        =accountInventoriesGroup.isDisplayed();
		boolean actaccountAccountsReceivableGroup    	=accountAccountsReceivableGroup.isDisplayed();
		boolean actaccountInvestmentsGroup    	        =accountInvestmentsGroup.isDisplayed();
		boolean actaccountExpensesGroup    	        =accountExpensesGroup.isDisplayed();
		boolean actaccountDirectExpensesGroup    	    =accountDirectExpensesGroup.isDisplayed();
		boolean actaccountIndirectExpensesGroup    	=accountIndirectExpensesGroup.isDisplayed();
		boolean actaccountAdministrativeExpensesGroup  =accountAdministrativeExpensesGroup.isDisplayed();
		boolean actaccountEmployeeBenefitsGroup    	=accountEmployeeBenefitsGroup.isDisplayed();
		boolean actaccountFinancialChargesGroup    	=accountFinancialChargesGroup.isDisplayed();
		boolean actaccountGainAndLossGroup    	        =accountGainAndLossGroup.isDisplayed();
		boolean actaccountControlAccountsGroup    	    =accountControlAccountsGroup.isDisplayed();
		boolean actaccountRevenueGroup    	            =accountRevenueGroup.isDisplayed();
		boolean actaccountSalesGroup    	            =accountSalesGroup.isDisplayed();
		boolean actaccountEqitiesGroup    	            =accountEqitiesGroup.isDisplayed();
		boolean actaccountCapitalGroup    	            =accountCapitalGroup.isDisplayed();
		boolean actaccountLiabilitiesGroup    	        =accountLiabilitiesGroup.isDisplayed();
		boolean actaccountLoanAndBorrowingGroup    	=accountLoanAndBorrowingGroup.isDisplayed();
		boolean actaccountLoansGroup    	            =accountLoansGroup.isDisplayed();
		boolean actaccountAccruedLiabilitiesGroup    	=accountAccruedLiabilitiesGroup.isDisplayed();
		boolean actaccountTradePayableGroup    	    =accountTradePayableGroup.isDisplayed();
		boolean actaccountProvisionsGroup    	        =accountProvisionsGroup.isDisplayed();

		boolean expaccountAssestsGroup    	            =true;
		boolean expaccountFixedAssestsGroup    	    =true;
		boolean expaccountCurrentAssetsGroup    	    =true;
		boolean expaccountCAshAndBankGroup    	        =true;
		boolean expaccountInventoriesGroup    	        =true;
		boolean expaccountAccountsReceivableGroup    	=true;
		boolean expaccountInvestmentsGroup    	        =true;
		boolean expaccountExpensesGroup    	        =true;
		boolean expaccountDirectExpensesGroup    	    =true;
		boolean expaccountIndirectExpensesGroup    	=true;
		boolean expaccountAdministrativeExpensesGroup  =true;
		boolean expaccountEmployeeBenefitsGroup    	=true;
		boolean expaccountFinancialChargesGroup    	=true;
		boolean expaccountGainAndLossGroup    	        =true;
		boolean expaccountControlAccountsGroup    	    =true;
		boolean expaccountRevenueGroup    	            =true;
		boolean expaccountSalesGroup    	            =true;
		boolean expaccountEqitiesGroup    	            =true;
		boolean expaccountCapitalGroup    	            =true;
		boolean expaccountLiabilitiesGroup    	        =true;
		boolean expaccountLoanAndBorrowingGroup    	=true;
		boolean expaccountLoansGroup    	            =true;
		boolean expaccountAccruedLiabilitiesGroup    	=true;
		boolean expaccountTradePayableGroup    	    =true;
		boolean expaccountProvisionsGroup    	        =true;

		System.out.println("******************************checkGroupOptionsAccountsMenu***********************************");

		System.out.println("accountAssestsGroup                 : "+actaccountAssestsGroup                +" Value Expected : "+expaccountAssestsGroup);
		System.out.println("accountFixedAssestsGroup            : "+actaccountFixedAssestsGroup           +" Value Expected : "+expaccountFixedAssestsGroup);
		System.out.println("accountCurrentAssetsGroup           : "+actaccountCurrentAssetsGroup          +" Value Expected : "+expaccountCurrentAssetsGroup);
		System.out.println("accountCAshAndBankGroup             : "+actaccountCAshAndBankGroup            +" Value Expected : "+expaccountCAshAndBankGroup);
		System.out.println("accountInventoriesGroup             : "+actaccountInventoriesGroup            +" Value Expected : "+expaccountInventoriesGroup);
		System.out.println("accountAccountsReceivableGroup      : "+actaccountAccountsReceivableGroup     +" Value Expected : "+expaccountAccountsReceivableGroup);
		System.out.println("accountInvestmentsGroup             : "+actaccountInvestmentsGroup            +" Value Expected : "+expaccountInvestmentsGroup);
		System.out.println("accountExpensesGroup                : "+actaccountExpensesGroup               +" Value Expected : "+expaccountExpensesGroup);
		System.out.println("accountDirectExpensesGroup          : "+actaccountDirectExpensesGroup         +" Value Expected : "+expaccountDirectExpensesGroup);
		System.out.println("accountIndirectExpensesGroup        : "+actaccountIndirectExpensesGroup       +" Value Expected : "+expaccountIndirectExpensesGroup);
		System.out.println("accountAdministrativeExpensesGroup  : "+actaccountAdministrativeExpensesGroup +" Value Expected : "+expaccountAdministrativeExpensesGroup);
		System.out.println("accountEmployeeBenefitsGroup        : "+actaccountEmployeeBenefitsGroup       +" Value Expected : "+expaccountEmployeeBenefitsGroup);
		System.out.println("accountFinancialChargesGroup        : "+actaccountFinancialChargesGroup       +" Value Expected : "+expaccountFinancialChargesGroup);
		System.out.println("accountGainAndLossGroup             : "+actaccountGainAndLossGroup            +" Value Expected : "+expaccountGainAndLossGroup);
		System.out.println("accountControlAccountsGroup         : "+actaccountControlAccountsGroup        +" Value Expected : "+expaccountControlAccountsGroup);
		System.out.println("accountRevenueGroup                 : "+actaccountRevenueGroup                +" Value Expected : "+expaccountRevenueGroup);
		System.out.println("accountSalesGroup                   : "+actaccountSalesGroup                  +" Value Expected : "+expaccountSalesGroup);
		System.out.println("accountEqitiesGroup                 : "+actaccountEqitiesGroup                +" Value Expected : "+expaccountEqitiesGroup);
		System.out.println("accountCapitalGroup                 : "+actaccountCapitalGroup                +" Value Expected : "+expaccountCapitalGroup);
		System.out.println("accountLiabilitiesGroup             : "+actaccountLiabilitiesGroup            +" Value Expected : "+expaccountLiabilitiesGroup);
		System.out.println("accountLoanAndBorrowingGroup        : "+actaccountLoanAndBorrowingGroup       +" Value Expected : "+expaccountLoanAndBorrowingGroup);
		System.out.println("accountLoansGroup                   : "+actaccountLoansGroup                  +" Value Expected : "+expaccountLoansGroup);
		System.out.println("accountAccruedLiabilitiesGroup      : "+actaccountAccruedLiabilitiesGroup     +" Value Expected : "+expaccountAccruedLiabilitiesGroup);
		System.out.println("accountTradePayableGroup            : "+actaccountTradePayableGroup           +" Value Expected : "+expaccountTradePayableGroup);
		System.out.println("accountProvisionsGroup              : "+actaccountProvisionsGroup             +" Value Expected : "+expaccountProvisionsGroup);

		if(actaccountAssestsGroup==expaccountAssestsGroup && actaccountFixedAssestsGroup==expaccountFixedAssestsGroup 
				&& actaccountCurrentAssetsGroup==expaccountCurrentAssetsGroup
				&& actaccountCAshAndBankGroup==expaccountCAshAndBankGroup && actaccountInventoriesGroup==expaccountInventoriesGroup 
				&& actaccountAccountsReceivableGroup==expaccountAccountsReceivableGroup &&  actaccountInvestmentsGroup==expaccountInvestmentsGroup 
				&& actaccountExpensesGroup==expaccountExpensesGroup && actaccountDirectExpensesGroup==expaccountDirectExpensesGroup 
				&& actaccountIndirectExpensesGroup==expaccountIndirectExpensesGroup && actaccountAdministrativeExpensesGroup==expaccountAdministrativeExpensesGroup
				&& actaccountEmployeeBenefitsGroup==expaccountEmployeeBenefitsGroup && actaccountFinancialChargesGroup==expaccountFinancialChargesGroup 
				&& actaccountGainAndLossGroup==expaccountGainAndLossGroup && actaccountControlAccountsGroup==expaccountControlAccountsGroup
				&& actaccountRevenueGroup==expaccountRevenueGroup && actaccountSalesGroup==expaccountSalesGroup
				&& actaccountEqitiesGroup==expaccountEqitiesGroup && actaccountCapitalGroup==expaccountCapitalGroup
				&& actaccountLiabilitiesGroup==expaccountLiabilitiesGroup && actaccountLoanAndBorrowingGroup==expaccountLoanAndBorrowingGroup
				&& actaccountLoansGroup==expaccountLoansGroup && actaccountAccruedLiabilitiesGroup==expaccountAccruedLiabilitiesGroup
				&& actaccountTradePayableGroup==expaccountTradePayableGroup && actaccountProvisionsGroup==expaccountProvisionsGroup)
		{	
			excelReader.setCellData(xlfile, "Sheet1", 254, 9, resPass);
			return true;
		}	 
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 254, 9, resFail);
			return false;
		}
	}


	public static boolean checkCreateTreeToggleOptionsAccountsMenu() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeIDToggleBtn));	

		masterTreeIDToggleBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeIDToggle_CreateTreeBtn));	

		boolean actmasterTreeIDToggle_CreateTreeBtn    =masterTreeIDToggle_CreateTreeBtn.isDisplayed();
		boolean actmasterTreeIDToggle_EditBtn          =masterTreeIDToggle_EditBtn.isDisplayed();
		boolean actmasterTreeIDToggle_DeleteBtn        =masterTreeIDToggle_DeleteBtn.isDisplayed();
		boolean actmasterTreeIDToggle_setDefaultBtn    =masterTreeIDToggle_setDefaultBtn.isDisplayed();

		boolean expmasterTreeIDToggle_CreateTreeBtn    =true;
		boolean expmasterTreeIDToggle_EditBtn          =true;
		boolean expmasterTreeIDToggle_DeleteBtn        =true;
		boolean expmasterTreeIDToggle_setDefaultBtn    =true;

		System.out.println("*****************************checkCreateTreeToggleOptionsAccountsMenu******************************");

		System.out.println("masterTreeIDToggle_CreateTreeBtn   : "+actmasterTreeIDToggle_CreateTreeBtn  +" Value Expected : "+expmasterTreeIDToggle_CreateTreeBtn);
		System.out.println("masterTreeIDToggle_EditBtn         : "+actmasterTreeIDToggle_EditBtn        +" Value Expected : "+expmasterTreeIDToggle_EditBtn);
		System.out.println("masterTreeIDToggle_DeleteBtn       : "+actmasterTreeIDToggle_DeleteBtn      +" Value Expected : "+expmasterTreeIDToggle_DeleteBtn);
		System.out.println("masterTreeIDToggle_setDefaultBtn   : "+actmasterTreeIDToggle_setDefaultBtn  +" Value Expected : "+expmasterTreeIDToggle_setDefaultBtn);

		if(actmasterTreeIDToggle_CreateTreeBtn==expmasterTreeIDToggle_CreateTreeBtn 
				&& actmasterTreeIDToggle_EditBtn==expmasterTreeIDToggle_EditBtn
				&& actmasterTreeIDToggle_DeleteBtn==expmasterTreeIDToggle_DeleteBtn
				&& actmasterTreeIDToggle_setDefaultBtn==expmasterTreeIDToggle_setDefaultBtn)
		{	
			excelReader.setCellData(xlfile, "Sheet1", 255, 9, resPass);
			return true;
		}	 
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 255, 9, resFail);
			return false;
		}
	}


	public static boolean checkCreateViewToggleOptionsAccountsMenu() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeViewIDToggleBtn));	
		masterTreeViewIDToggleBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeViewIdCreateViewBtn));	

		boolean actmasterTreeViewIdCreateViewBtn   =masterTreeViewIdCreateViewBtn.isDisplayed();
		boolean actmasterTreeeViewIdEditBtn        =masterTreeeViewIdEditBtn.isDisplayed();
		boolean actmasterTreeViewIdDeleteBtn       =masterTreeViewIdDeleteBtn.isDisplayed();

		boolean expmasterTreeViewIdCreateViewBtn   =true;
		boolean expmasterTreeeViewIdEditBtn        =true;
		boolean expmasterTreeViewIdDeleteBtn       =true;

		System.out.println("*************************************checkCreateViewToggleOptionsAccountsMenu**************************");

		System.out.println("masterTreeViewIdCreateViewBtn   : "+actmasterTreeViewIdCreateViewBtn +" Value Expected : "+expmasterTreeViewIdCreateViewBtn);
		System.out.println("masterTreeeViewIdEditBtn        : "+actmasterTreeeViewIdEditBtn      +" Value Expected : "+expmasterTreeeViewIdEditBtn);
		System.out.println("masterTreeViewIdDeleteBtn       : "+actmasterTreeViewIdDeleteBtn     +" Value Expected : "+expmasterTreeViewIdDeleteBtn);

		if(actmasterTreeViewIdCreateViewBtn==expmasterTreeViewIdCreateViewBtn
				&& actmasterTreeeViewIdEditBtn==expmasterTreeeViewIdEditBtn
				&& actmasterTreeViewIdDeleteBtn==expmasterTreeViewIdDeleteBtn)
		{	
			excelReader.setCellData(xlfile, "Sheet1", 256, 9, resPass);
			return true;
		}	 
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 256, 9, resFail);
			return false;
		}
	}


	public static boolean checkHideAccountGroupsOptionsAccountsMenu() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterOptionToHideAccountsGroupTree));	
		masterOptionToHideAccountsGroupTree.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeDisplayMenuAccountGroups));	

		boolean actmasterTreeDisplayMenuAccountGroups  =masterTreeDisplayMenuAccountGroups.isDisplayed();
		boolean expmasterTreeDisplayMenuAccountGroups  =true;

		System.out.println("*********************************checkHideAccountGroupsOptionsAccountsMenu*****************************************");

		System.out.println("masterTreeDisplayMenuAccountGroups  : "+actmasterTreeDisplayMenuAccountGroups+" Value Expected : "+expmasterTreeDisplayMenuAccountGroups);

		if(actmasterTreeDisplayMenuAccountGroups==expmasterTreeDisplayMenuAccountGroups)
		{	
			excelReader.setCellData(xlfile, "Sheet1", 257, 9, resPass);
			return true;
		}	 
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 257, 9, resFail);
			return false;
		}
	}


	public static boolean checkUnHideAccountGroupsOptionsAccountsMenu() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterOptionToHideAccountsGroupTree));	
		masterOptionToHideAccountsGroupTree.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountAssestsGroup));	

		boolean actaccountAssestsGroup  =accountAssestsGroup.isDisplayed();
		boolean expaccountAssestsGroup  =true;

		System.out.println("*********************************checkUnHideAccountGroupsOptionsAccountsMenu*****************************************");

		System.out.println("accountAssestsGroup  : "+actaccountAssestsGroup+" Value Expected : "+expaccountAssestsGroup);

		if(actaccountAssestsGroup==expaccountAssestsGroup)
		{	
			excelReader.setCellData(xlfile, "Sheet1", 258, 9, resPass);
			return true;
		}	 
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 258, 9, resFail);
			return false;
		}
	}


	public static boolean checkMainPageHeaderFieldsOptionsAccountsMenu() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxt));	

		boolean actmasterSearchTxt    							=masterSearchTxt.isDisplayed();
		boolean actmasterSearchBtn    							=masterSearchBtn.isDisplayed();
		boolean actmastercmbMasterTxt    						=mastercmbMasterTxt.isDisplayed();
		boolean actmasterCmbMasterExpansionBtn    				=masterCmbMasterExpansionBtn.isDisplayed();
		boolean actmasterCumMasterSettingBtn    				=masterCumMasterSettingBtn.isDisplayed();
		boolean actmasterMoveTheSelectionToNextBookMarkBtn    	=masterMoveTheSelectionToNextBookMarkBtn.isDisplayed();
		boolean actmasterMoveTheSelectionToPrevoiusBookmarkBtn =masterMoveTheSelectionToPrevoiusBookmarkBtn.isDisplayed();
		boolean actmasterShowAllRecordsBtn    					=masterShowAllRecordsBtn.isDisplayed();
		boolean actmasterShowAllUnauthorisedRecords    		=masterShowAllUnauthorisedRecords.isDisplayed();
		boolean actmasterShowAllClosedRecordsBtn    			=masterShowAllClosedRecordsBtn.isDisplayed();
		boolean actmasterAutoAdjustColoumnsBtn    				=masterAutoAdjustColoumnsBtn.isDisplayed();
		boolean actmasterRetainSelectionCheckBox    			=masterRetainSelectionCheckBox.isDisplayed();
		boolean actmasterSideBarBtn    						=masterSideBarBtn.isDisplayed();

		boolean expmasterSearchTxt    							=true;
		boolean expmasterSearchBtn    							=true;
		boolean expmastercmbMasterTxt    						=true;
		boolean expmasterCmbMasterExpansionBtn    				=true;
		boolean expmasterCumMasterSettingBtn    				=true;
		boolean expmasterMoveTheSelectionToNextBookMarkBtn    	=true;
		boolean expmasterMoveTheSelectionToPrevoiusBookmarkBtn =true;
		boolean expmasterShowAllRecordsBtn    					=true;
		boolean expmasterShowAllUnauthorisedRecords    		=true;
		boolean expmasterShowAllClosedRecordsBtn    			=true;
		boolean expmasterAutoAdjustColoumnsBtn    				=true;
		boolean expmasterRetainSelectionCheckBox    			=true;
		boolean expmasterSideBarBtn    						=true;

		System.out.println("************************************checkMainPageHeaderFieldsOptionsAccountsMenu**************************");

		System.out.println("masterSearchTxt                             : "+actmasterSearchTxt                             +" Value Expected : "+expmasterSearchTxt);
		System.out.println("masterSearchBtn                             : "+actmasterSearchBtn                             +" Value Expected : "+expmasterSearchBtn);
		System.out.println("mastercmbMasterTxt                          : "+actmastercmbMasterTxt                          +" Value Expected : "+expmastercmbMasterTxt);
		System.out.println("masterCmbMasterExpansionBtn                 : "+actmasterCmbMasterExpansionBtn                 +" Value Expected : "+expmasterCmbMasterExpansionBtn);
		System.out.println("masterCumMasterSettingBtn                   : "+actmasterCumMasterSettingBtn                   +" Value Expected : "+expmasterCumMasterSettingBtn);
		System.out.println("masterMoveTheSelectionToNextBookMarkBtn     : "+actmasterMoveTheSelectionToNextBookMarkBtn     +" Value Expected : "+expmasterMoveTheSelectionToNextBookMarkBtn);
		System.out.println("masterMoveTheSelectionToPrevoiusBookmarkBtn : "+actmasterMoveTheSelectionToPrevoiusBookmarkBtn +" Value Expected : "+expmasterMoveTheSelectionToPrevoiusBookmarkBtn);
		System.out.println("masterShowAllRecordsBtn                     : "+actmasterShowAllRecordsBtn                     +" Value Expected : "+expmasterShowAllRecordsBtn);
		System.out.println("masterShowAllUnauthorisedRecords            : "+actmasterShowAllUnauthorisedRecords            +" Value Expected : "+expmasterShowAllUnauthorisedRecords);
		System.out.println("masterShowAllClosedRecordsBtn               : "+actmasterShowAllClosedRecordsBtn               +" Value Expected : "+expmasterShowAllClosedRecordsBtn);
		System.out.println("masterAutoAdjustColoumnsBtn                 : "+actmasterAutoAdjustColoumnsBtn                 +" Value Expected : "+expmasterAutoAdjustColoumnsBtn);
		System.out.println("masterRetainSelectionCheckBox               : "+actmasterRetainSelectionCheckBox               +" Value Expected : "+expmasterRetainSelectionCheckBox);
		System.out.println("masterSideBarBtn                            : "+actmasterSideBarBtn                            +" Value Expected : "+expmasterSideBarBtn);


		if(actmasterSearchTxt==expmasterSearchTxt && actmasterSearchBtn==expmasterSearchBtn && actmastercmbMasterTxt==expmastercmbMasterTxt
				&& actmasterCmbMasterExpansionBtn==expmasterCmbMasterExpansionBtn && actmasterCumMasterSettingBtn==expmasterCumMasterSettingBtn
				&& actmasterMoveTheSelectionToNextBookMarkBtn==expmasterMoveTheSelectionToNextBookMarkBtn
				&& actmasterMoveTheSelectionToPrevoiusBookmarkBtn==expmasterMoveTheSelectionToPrevoiusBookmarkBtn
				&& actmasterShowAllRecordsBtn==expmasterShowAllRecordsBtn && actmasterShowAllUnauthorisedRecords==expmasterShowAllUnauthorisedRecords
				&& actmasterShowAllClosedRecordsBtn==expmasterShowAllClosedRecordsBtn && actmasterAutoAdjustColoumnsBtn==expmasterAutoAdjustColoumnsBtn
				&& actmasterRetainSelectionCheckBox==expmasterRetainSelectionCheckBox && actmasterSideBarBtn==expmasterSideBarBtn)
		{	
			excelReader.setCellData(xlfile, "Sheet1", 259, 9, resPass);
			return true;
		}	 
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 259, 9, resFail);
			return false;
		}
	}


	public static boolean checkSearchOptionsInMainPageHeaderFieldsOptionsAccountsMenu() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchBtn));	
		masterSearchBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxtBtn_SearchOnBtn));

		boolean actmasterSearchTxtBtn_SearchOnBtn         =masterSearchTxtBtn_SearchOnBtn.isDisplayed();
		boolean actmasterSearchTxtBtn_AdvanceSearchBtn    =masterSearchTxtBtn_AdvanceSearchBtn.isDisplayed();

		boolean expmasterSearchTxtBtn_SearchOnBtn         =true;
		boolean expmasterSearchTxtBtn_AdvanceSearchBtn    =true;

		System.out.println("*******************************************checkSearchOptionsInMainPageHeaderFieldsOptionsAccountsMenu***********************");

		System.out.println("masterSearchTxtBtn_SearchOnBtn       : "+actmasterSearchTxtBtn_SearchOnBtn      +" Value Expected : "+expmasterSearchTxtBtn_SearchOnBtn);
		System.out.println("masterSearchTxtBtn_AdvanceSearchBtn  : "+actmasterSearchTxtBtn_AdvanceSearchBtn +" Value Expected : "+expmasterSearchTxtBtn_AdvanceSearchBtn);


		if(actmasterSearchTxtBtn_SearchOnBtn==expmasterSearchTxtBtn_SearchOnBtn
				&& actmasterSearchTxtBtn_AdvanceSearchBtn==expmasterSearchTxtBtn_AdvanceSearchBtn)
		{	
			excelReader.setCellData(xlfile, "Sheet1", 260, 9, resPass);
			return true;
		}	 
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 260, 9, resFail);
			return false;
		}
	}



	public static boolean checkAccountsMasterDisplayInMainPageGridAccountsMenu() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterGrid_Header_SelectTxt));
		masterGrid_Header_SelectTxt.click();

		boolean actmasterGrid_Header_SelectTxt              =masterGrid_Header_SelectTxt.isDisplayed();
		boolean actmasterGridHeader_SelectAllRowsCheckBox   =masterGridHeader_SelectAllRowsCheckBox.isDisplayed();
		boolean actmasterGridHeader_MasterId         		 =masterGridHeader_MasterId.isDisplayed();
		boolean actmasterAssets         					 =masterAssets.isDisplayed();
		boolean actmasterExpenses         					 =masterExpenses.isDisplayed();
		boolean actmasterControlAccounts         			 =masterControlAccounts.isDisplayed();
		boolean actmasterRevenue         					 =masterRevenue.isDisplayed();
		boolean actmasterEquities         					 =masterEquities.isDisplayed();
		boolean actmasterLiabilities         				 =masterLiabilities.isDisplayed();

		boolean expmasterGrid_Header_SelectTxt              =true;
		boolean expmasterGridHeader_SelectAllRowsCheckBox   =true;
		boolean expmasterGridHeader_MasterId         		 =true;
		boolean expmasterAssets         					 =true;
		boolean expmasterExpenses         					 =true;
		boolean expmasterControlAccounts         			 =true;
		boolean expmasterRevenue         					 =true;
		boolean expmasterEquities         					 =true;
		boolean expmasterLiabilities         				 =true;

		System.out.println("*****************************************checkAccountsMasterDisplayInMainPageGridAccountsMenu***************************");

		System.out.println("masterGrid_Header_SelectTxt             : "+actmasterGrid_Header_SelectTxt             +" Value Expected : "+expmasterGrid_Header_SelectTxt);
		System.out.println("masterGridHeader_SelectAllRowsCheckBox  : "+actmasterGridHeader_SelectAllRowsCheckBox  +" Value Expected : "+expmasterGridHeader_SelectAllRowsCheckBox);
		System.out.println("masterGridHeader_MasterId               : "+actmasterGridHeader_MasterId               +" Value Expected : "+expmasterGridHeader_MasterId);
		System.out.println("masterAssets                            : "+actmasterAssets                            +" Value Expected : "+expmasterAssets);
		System.out.println("masterExpenses                          : "+actmasterExpenses                          +" Value Expected : "+expmasterExpenses);
		System.out.println("masterControlAccounts                   : "+actmasterControlAccounts                   +" Value Expected : "+expmasterControlAccounts);
		System.out.println("masterRevenue                           : "+actmasterRevenue                           +" Value Expected : "+expmasterRevenue);
		System.out.println("masterEquities                          : "+actmasterEquities                          +" Value Expected : "+expmasterEquities);
		System.out.println("masterLiabilities                       : "+actmasterLiabilities                       +" Value Expected : "+expmasterLiabilities);

		if(actmasterGrid_Header_SelectTxt==expmasterGrid_Header_SelectTxt && actmasterGridHeader_SelectAllRowsCheckBox==expmasterGridHeader_SelectAllRowsCheckBox
				&& actmasterGridHeader_MasterId==expmasterGridHeader_MasterId && actmasterAssets==expmasterAssets && actmasterExpenses==expmasterExpenses
				&& actmasterControlAccounts==expmasterControlAccounts && actmasterRevenue==expmasterRevenue && actmasterEquities==expmasterEquities
				&& actmasterLiabilities==expmasterLiabilities)
		{
			excelReader.setCellData(xlfile, "Sheet1", 261, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 261, 9, resFail);
			return false;
		}
	}

	//Here modifying the New Script for account creation

	public static boolean checkNewButtonBeforeCustomization() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		masterNewBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerGeneralTab));

		boolean actheaderGeneralTab          =headerGeneralTab.isDisplayed();
		boolean actheaderAccountSettingTab   =headerAccountSettingTab.isDisplayed();
		boolean actheaderDetailsTab          =headerDetailsTab.isDisplayed();
		boolean actheaderPrintLayoutTab      =headerPrintLayoutTab.isDisplayed();
		boolean actSaveBtn                   =SaveBtn.isDisplayed();
		boolean actcloseBtn                  =closeBtn.isDisplayed();

		boolean expheaderGeneralTab          =true;
		boolean expheaderAccountSettingTab   =true;
		boolean expheaderDetailsTab          =true;
		boolean expheaderPrintLayoutTab      =true;
		boolean expSaveBtn                   =true;
		boolean expcloseBtn                  =true;

		System.out.println("***********************************checkNewButtonBeforeCustomization*********************************");

		System.out.println("headerGeneralTab          : "+actheaderGeneralTab        +" Value Expected : "+expheaderGeneralTab);
		System.out.println("headerAccountSettingTab   : "+actheaderAccountSettingTab +" Value Expected : "+expheaderAccountSettingTab);
		System.out.println("headerDetailsTab          : "+actheaderDetailsTab        +" Value Expected : "+expheaderDetailsTab);
		System.out.println("headerPrintLayoutTab      : "+actheaderPrintLayoutTab    +" Value Expected : "+expheaderPrintLayoutTab);
		System.out.println("SaveBtn                   : "+actSaveBtn                 +" Value Expected : "+expSaveBtn);
		System.out.println("closeBtn                  : "+actcloseBtn                +" Value Expected : "+expcloseBtn);

		if(actheaderGeneralTab==expheaderGeneralTab && actheaderAccountSettingTab==expheaderAccountSettingTab && actheaderDetailsTab==expheaderDetailsTab
				&& actheaderPrintLayoutTab==expheaderPrintLayoutTab && actSaveBtn==expSaveBtn && actcloseBtn==expcloseBtn)
		{
			excelReader.setCellData(xlfile, "Sheet1", 262, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 262, 9, resFail);
			return false;
		}
	}

	public static boolean checkGenralTabOnClickOnNewButtonBeforeCustomization() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));

		Select oSelect = new Select(accountTypeDropdown);
		List <WebElement> elementCount = oSelect.getOptions();
		int actaccTypeSize = elementCount.size();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));

		boolean actnameTxt                =nameTxt.isDisplayed();
		boolean actcodeTxt                =codeTxt.isDisplayed();
		boolean actaccountTypeDropdown    =accountTypeDropdown.isDisplayed();
		boolean actcreditLimitTxt         =creditLimitTxt.isDisplayed();
		boolean actcreditdaysTxt          =creditdaysTxt.isDisplayed();
		boolean actchequeDiscountLimitTxt =chequeDiscountLimitTxt.isDisplayed();
		boolean actrateofinterestTxt      =rateofinterestTxt.isDisplayed();
		boolean actbankAccountTxt         =bankAccountTxt.isDisplayed();


		int     expaccTypeSize            =39;
		boolean expnameTxt                =true;
		boolean expcodeTxt                =true;
		boolean expaccountTypeDropdown    =true;
		boolean expcreditLimitTxt         =true;
		boolean expcreditdaysTxt          =true;
		boolean expchequeDiscountLimitTxt =true;
		boolean exprateofinterestTxt      =true;
		boolean expbankAccountTxt         =true;

		System.out.println("*******************************checkGenralTabOnClickOnNewButtonBeforeCustomization************************");

		System.out.println("nameTxt                 : "+actnameTxt                +" Value Expected : "+expnameTxt);
		System.out.println("codeTxt                 : "+actcodeTxt                +" Value Expected : "+expcodeTxt);
		System.out.println("accountTypeDropdown     : "+actaccountTypeDropdown    +" Value Expected : "+expaccountTypeDropdown);
		System.out.println("creditLimitTxt          : "+actcreditLimitTxt         +" Value Expected : "+expcreditLimitTxt);
		System.out.println("creditdaysTxt           : "+actcreditdaysTxt          +" Value Expected : "+expcreditdaysTxt);
		System.out.println("chequeDiscountLimitTxt  : "+actchequeDiscountLimitTxt +" Value Expected : "+expchequeDiscountLimitTxt);
		System.out.println("rateofinterestTxt       : "+actrateofinterestTxt      +" Value Expected : "+exprateofinterestTxt);
		System.out.println("bankAccountTxt          : "+actbankAccountTxt         +" Value Expected : "+expbankAccountTxt);
		System.out.println("accTypeSize             : "+actaccTypeSize            +" Value Expected : "+expaccTypeSize);


		if(actnameTxt==expnameTxt && actcodeTxt==expcodeTxt && actaccountTypeDropdown==expaccountTypeDropdown 
				&& actcreditLimitTxt==expcreditLimitTxt && actcreditdaysTxt==expcreditdaysTxt && actchequeDiscountLimitTxt==expchequeDiscountLimitTxt
				&& actrateofinterestTxt==exprateofinterestTxt && actbankAccountTxt==expbankAccountTxt && actaccTypeSize==expaccTypeSize)
		{
			excelReader.setCellData(xlfile, "Sheet1", 263, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 263, 9, resFail);
			return false;
		}
	}


	public static boolean checkSettingsTabOnClickOnNewButtonBeforeCustomization() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerAccountSettingTab));
		headerAccountSettingTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(debitCreditProposalDropdown));

		boolean actdebitCreditProposalDropdown                =debitCreditProposalDropdown.isDisplayed();
		boolean actdebitCreditRequiredDropdown                =debitCreditRequiredDropdown.isDisplayed();
		boolean actexchangeAdjustmentGainACTxt                =exchangeAdjustmentGainACTxt.isDisplayed();
		boolean actexchangeAdjustmentLossACTxt                =exchangeAdjustmentLossACTxt.isDisplayed();
		boolean actprimaryAccountTxt               		   =primaryAccountTxt.isDisplayed();
		boolean actdefaultCurrencyTxt		                   =defaultCurrencyTxt.isDisplayed();
		boolean actconsolidationMethodDropdown                =consolidationMethodDropdown.isDisplayed();
		boolean actpaymentTermstxt                            =paymentTermstxt.isDisplayed();
		boolean actreminderTermsTxt                           =reminderTermsTxt.isDisplayed();
		boolean actfinanceChargeTermsTxt                      =financeChargeTermsTxt.isDisplayed();

		boolean expdebitCreditProposalDropdown                =true;
		boolean expdebitCreditRequiredDropdown                =true;
		boolean expexchangeAdjustmentGainACTxt                =true;
		boolean expexchangeAdjustmentLossACTxt                =true;
		boolean expprimaryAccountTxt               		   =true;
		boolean expdefaultCurrencyTxt		                   =true;
		boolean expconsolidationMethodDropdown                =true;
		boolean exppaymentTermstxt                            =true;
		boolean expreminderTermsTxt                           =true;
		boolean expfinanceChargeTermsTxt                      =true;

		System.out.println("***********************************checkSettingsTabOnClickOnNewButtonBeforeCustomization*************************");

		System.out.println("debitCreditProposalDropdown    : "+actdebitCreditProposalDropdown+" Value Expected : "+expdebitCreditProposalDropdown);
		System.out.println("debitCreditRequiredDropdown    : "+actdebitCreditRequiredDropdown+" Value Expected : "+expdebitCreditRequiredDropdown);
		System.out.println("exchangeAdjustmentGainACTxt    : "+actexchangeAdjustmentGainACTxt+" Value Expected : "+expexchangeAdjustmentGainACTxt);
		System.out.println("exchangeAdjustmentLossACTxt    : "+actexchangeAdjustmentLossACTxt+" Value Expected : "+expexchangeAdjustmentLossACTxt);
		System.out.println("primaryAccountTxt              : "+actprimaryAccountTxt          +" Value Expected : "+expprimaryAccountTxt);
		System.out.println("defaultCurrencyTxt             : "+actdefaultCurrencyTxt         +" Value Expected : "+expdefaultCurrencyTxt);
		System.out.println("consolidationMethodDropdown    : "+actconsolidationMethodDropdown+" Value Expected : "+expconsolidationMethodDropdown);
		System.out.println("paymentTermstxt                : "+actpaymentTermstxt            +" Value Expected : "+exppaymentTermstxt);
		System.out.println("reminderTermsTxt               : "+actreminderTermsTxt           +" Value Expected : "+expreminderTermsTxt);
		System.out.println("financeChargeTermsTxt          : "+actfinanceChargeTermsTxt      +" Value Expected : "+expfinanceChargeTermsTxt);

		if(actdebitCreditProposalDropdown==expdebitCreditProposalDropdown && actdebitCreditRequiredDropdown==expdebitCreditRequiredDropdown
				&& actexchangeAdjustmentGainACTxt==expexchangeAdjustmentGainACTxt && actexchangeAdjustmentLossACTxt==expexchangeAdjustmentLossACTxt
				&& actprimaryAccountTxt==expprimaryAccountTxt && actdefaultCurrencyTxt==expdefaultCurrencyTxt
				&& actconsolidationMethodDropdown==expconsolidationMethodDropdown && actpaymentTermstxt==exppaymentTermstxt
				&& actreminderTermsTxt==expreminderTermsTxt && actfinanceChargeTermsTxt==expfinanceChargeTermsTxt)
		{
			excelReader.setCellData(xlfile, "Sheet1", 264, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 264, 9, resFail);
			return false;
		}
	}



	public static boolean checkDetailsTabOnClickOnNewButtonBeforeCustomization() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerDetailsTab));
		headerDetailsTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addressTxt));

		boolean actaddressTxt           		=addressTxt.isDisplayed();
		boolean actcityTxt           			=cityTxt.isDisplayed();
		boolean actdeliveryAddressTxt          =deliveryAddressTxt.isDisplayed();
		boolean actpinTxt           			=pinTxt.isDisplayed();
		boolean actcity2Text           		=city2Text.isDisplayed();
		boolean actpin2Txt           			=pin2Txt.isDisplayed();
		boolean actsendEmailCheckBox           =sendEmailCheckBox.isDisplayed();
		boolean actallowCustomerPortalCheckBox =allowCustomerPortalCheckBox.isDisplayed();
		boolean actsendEmailTxt                =sendEmailTxt.isDisplayed();
		boolean actpasswordTxt           		=passwordTxt.isDisplayed();
		boolean acttelphoneNumberTxt           =telphoneNumberTxt.isDisplayed();
		boolean actfaxNoTxt           			=faxNoTxt.isDisplayed();

		boolean expaddressTxt           		=true;
		boolean expcityTxt           			=true;
		boolean expdeliveryAddressTxt          =true;
		boolean exppinTxt           			=true;
		boolean expcity2Text           		=true;
		boolean exppin2Txt           			=true;
		boolean expsendEmailCheckBox           =true;
		boolean expallowCustomerPortalCheckBox =true;
		boolean expsendEmailTxt                =true;
		boolean exppasswordTxt           		=true;
		boolean exptelphoneNumberTxt           =true;
		boolean expfaxNoTxt           			=true;

		System.out.println("*********************************checkDetailsTabOnClickOnNewButtonBeforeCustomization**************************");

		System.out.println("addressTxt                  : "+actaddressTxt                  +" Value Expected : "+expaddressTxt);
		System.out.println("cityTxt                     : "+actcityTxt                     +" Value Expected : "+expcityTxt);
		System.out.println("deliveryAddressTxt          : "+actdeliveryAddressTxt          +" Value Expected : "+expdeliveryAddressTxt);
		System.out.println("pinTxt                      : "+actpinTxt                      +" Value Expected : "+exppinTxt);
		System.out.println("city2Text                   : "+actcity2Text                   +" Value Expected : "+expcity2Text);
		System.out.println("pin2Txt                     : "+actpin2Txt                     +" Value Expected : "+exppin2Txt);
		System.out.println("sendEmailCheckBox           : "+actsendEmailCheckBox           +" Value Expected : "+expsendEmailCheckBox);
		System.out.println("allowCustomerPortalCheckBox : "+actallowCustomerPortalCheckBox +" Value Expected : "+expallowCustomerPortalCheckBox);
		System.out.println("sendEmailTxt                : "+actsendEmailTxt                +" Value Expected : "+expsendEmailTxt);
		System.out.println("passwordTxt                 : "+actpasswordTxt                 +" Value Expected : "+exppasswordTxt);
		System.out.println("telphoneNumberTxt           : "+acttelphoneNumberTxt           +" Value Expected : "+exptelphoneNumberTxt);
		System.out.println("faxNoTxt                    : "+actfaxNoTxt                    +" Value Expected : "+expfaxNoTxt);

		if(actaddressTxt==expaddressTxt && actcityTxt==expcityTxt && actdeliveryAddressTxt==expdeliveryAddressTxt
				&& actpinTxt==exppinTxt && actcity2Text==expcity2Text && actpin2Txt==exppin2Txt && actsendEmailCheckBox==expsendEmailCheckBox
				&& actallowCustomerPortalCheckBox==expallowCustomerPortalCheckBox && actsendEmailTxt==expsendEmailTxt && actpasswordTxt==exppasswordTxt
				&& acttelphoneNumberTxt==exptelphoneNumberTxt && actfaxNoTxt==expfaxNoTxt)
		{
			excelReader.setCellData(xlfile, "Sheet1", 265, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 265, 9, resFail);
			return false;
		}
	}


	public static boolean checkPrintlayoutTabOnClickOnNewButtonBeforeCustomization() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerPrintLayoutTab));
		headerPrintLayoutTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridVoucherTypeTxt));
		gridVoucherTypeTxt.click();

		boolean actgridVoucherTypeTxt    =gridVoucherTypeTxt.isDisplayed();
		boolean actgridPrintLayoutTxt    =gridPrintLayoutTxt.isDisplayed();

		boolean expgridVoucherTypeTxt    =true;
		boolean expgridPrintLayoutTxt    =true;

		System.out.println("**********************************checkPrintlayoutTabOnClickOnNewButtonBeforeCustomization*****************************");

		System.out.println("gridVoucherTypeTxt   : "+actgridVoucherTypeTxt+" Value Expected : "+expgridVoucherTypeTxt);
		System.out.println("gridPrintLayoutTxt   : "+actgridPrintLayoutTxt+" Value Expected : "+expgridPrintLayoutTxt);

		if(actgridVoucherTypeTxt==expgridVoucherTypeTxt && actgridPrintLayoutTxt==expgridPrintLayoutTxt)
		{
			excelReader.setCellData(xlfile, "Sheet1", 266, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 266, 9, resFail);
			return false;
		}
	}


	public static boolean checkSaveButtonWithoutInputNameMandatoryFieldsInNewOptionBeforeCustomization() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerGeneralTab));
		headerGeneralTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage="In Tab :General ---> Name Field is Required";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkSaveButtonWithoutInputNameMandatoryFieldsInNewOptionBeforeCustomization***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 267, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 267, 9, resFail);
			return false;
		}
	}


	public static boolean checkSaveButtonWithoutInputCodeMandatoryFieldsInNewOptionBeforeCustomization() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("Trail Account");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage="In Tab :General ---> Code Field is Required";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkSaveButtonWithoutInputCodeMandatoryFieldsInNewOptionBeforeCustomization***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 268, 9, resPass);
			return true;
		}	
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 268, 9, resFail);
			return false;
		}
	}



	public static boolean checkSaveButtonWithInputingMandatoryFieldsBeforeCustomization() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("Trial Code");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage="Saved Successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkSaveButtonWithInputingMandatoryFieldsBeforeCustomization***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{

			excelReader.setCellData(xlfile, "Sheet1", 269, 9, resPass);
			return true;
		}
		else
		{

			excelReader.setCellData(xlfile, "Sheet1", 269, 9, resFail);
			return false;
		}
	}


	public static boolean checkAccountsCreationScreenAfterSavingBeforeCustomization() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));

		Select oSelect = new Select(accountTypeDropdown);
		List <WebElement> elementCount = oSelect.getOptions();
		int actaccTypeSize = elementCount.size();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));

		boolean actnameTxt                =nameTxt.isDisplayed();
		boolean actcodeTxt                =codeTxt.isDisplayed();
		boolean actaccountTypeDropdown    =accountTypeDropdown.isDisplayed();
		boolean actcreditLimitTxt         =creditLimitTxt.isDisplayed();
		boolean actcreditdaysTxt          =creditdaysTxt.isDisplayed();
		boolean actchequeDiscountLimitTxt =chequeDiscountLimitTxt.isDisplayed();
		boolean actrateofinterestTxt      =rateofinterestTxt.isDisplayed();
		boolean actbankAccountTxt         =bankAccountTxt.isDisplayed();


		int     expaccTypeSize            =39;
		boolean expnameTxt                =true;
		boolean expcodeTxt                =true;
		boolean expaccountTypeDropdown    =true;
		boolean expcreditLimitTxt         =true;
		boolean expcreditdaysTxt          =true;
		boolean expchequeDiscountLimitTxt =true;
		boolean exprateofinterestTxt      =true;
		boolean expbankAccountTxt         =true;

		System.out.println("*******************************checkAccountsCreationScreenAfterSavingBeforeCustomization************************");

		System.out.println("nameTxt                 : "+actnameTxt                +" Value Expected : "+expnameTxt);
		System.out.println("codeTxt                 : "+actcodeTxt                +" Value Expected : "+expcodeTxt);
		System.out.println("accountTypeDropdown     : "+actaccountTypeDropdown    +" Value Expected : "+expaccountTypeDropdown);
		System.out.println("creditLimitTxt          : "+actcreditLimitTxt         +" Value Expected : "+expcreditLimitTxt);
		System.out.println("creditdaysTxt           : "+actcreditdaysTxt          +" Value Expected : "+expcreditdaysTxt);
		System.out.println("chequeDiscountLimitTxt  : "+actchequeDiscountLimitTxt +" Value Expected : "+expchequeDiscountLimitTxt);
		System.out.println("rateofinterestTxt       : "+actrateofinterestTxt      +" Value Expected : "+exprateofinterestTxt);
		System.out.println("bankAccountTxt          : "+actbankAccountTxt         +" Value Expected : "+expbankAccountTxt);
		System.out.println("accTypeSize             : "+actaccTypeSize            +" Value Expected : "+expaccTypeSize);


		if(actnameTxt==expnameTxt && actcodeTxt==expcodeTxt && actaccountTypeDropdown==expaccountTypeDropdown 
				&& actcreditLimitTxt==expcreditLimitTxt && actcreditdaysTxt==expcreditdaysTxt && actchequeDiscountLimitTxt==expchequeDiscountLimitTxt
				&& actrateofinterestTxt==exprateofinterestTxt && actbankAccountTxt==expbankAccountTxt && actaccTypeSize==expaccTypeSize)
		{

			excelReader.setCellData(xlfile, "Sheet1", 270, 9, resPass);
			return true;
		}
		else
		{


			excelReader.setCellData(xlfile, "Sheet1", 270, 9, resFail);
			return false;
		}
	}


	public static boolean checkAccountDisplayInAccountGridBeforeCustomization() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();



		System.out.println("New"+accountNewCreationName.getText());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountNewCreationName));

		String actaccountNewCreationName  =accountNewCreationName.getText();
		String expaccountNewCreationName  ="Trail Account";

		System.out.println("****************************checkAccountDisplayInAccountGridBeforeCustomization********************");

		System.out.println("accountNewCreationName  : "+actaccountNewCreationName+" value Expected : "+expaccountNewCreationName);

		if(actaccountNewCreationName.equalsIgnoreCase(expaccountNewCreationName))
		{ 
			excelReader.setCellData(xlfile, "Sheet1", 271, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 271, 9, resFail);
			return false;
		}
	}



	//Here The End of the New Code for account creation


	//Here The start of the New Code for account edit

	public static boolean checkEditOptionForNewlyCreateAccountBeforeCustomization() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountFirstCheckBox));
		accountFirstCheckBox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
		masterEditBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));

		String actnameTxt  =nameTxt.getAttribute("value");
		String expnameTxt  ="Trail Account";

		System.out.println("*************************checkEditOptionForNewlyCreateAccountBeforeCustomization**********************");

		System.out.println("nameTxt  : "+actnameTxt+" Value Expected : "+expnameTxt);

		if(actnameTxt.equalsIgnoreCase(expnameTxt))
		{ 
			excelReader.setCellData(xlfile, "Sheet1", 272, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 272, 9, resFail);
			return false;
		}
	}


	public static boolean checkUpateForNewlyCreateAccountBeforeCustomiztaion() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();
		nameTxt.clear();
		nameTxt.sendKeys("Trail Account Update");
		nameTxt.sendKeys(Keys.TAB);

		//getAction().moveToElement(nameTxt).sendKeys(Keys.TAB).perform();



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.click();
		codeTxt.clear();
		codeTxt.sendKeys("TrailAccountUpdate");
		codeTxt.sendKeys(Keys.TAB);

		//getAction().moveToElement(codeTxt).sendKeys(Keys.TAB).perform();



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
		accountTypeDropdown.sendKeys(Keys.TAB);

		//getAction().moveToElement(accountTypeDropdown).sendKeys(Keys.TAB).perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage="Updated Successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkUpateForNewlyCreateAccountBeforeCustomiztaion***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 273, 9, resPass);
			return true;
		}

		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 273, 9, resFail);
			return false;
		}
	}


	public static boolean checkUpdatedAccountDisplayInAccountGridBeforeCustomization() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountNewCreationName));


		String actaccountNewCreationName  =accountNewCreationName.getText();
		String expaccountNewCreationName  ="Trail Account Update";

		System.out.println("************************checkUpdatedAccountDisplayInAccountGridBeforeCustomization***********************");

		System.out.println("accountNewCreationName  : "+actaccountNewCreationName+" Value Expected : "+expaccountNewCreationName);

		if(actaccountNewCreationName.equalsIgnoreCase(expaccountNewCreationName))
		{ 
			excelReader.setCellData(xlfile, "Sheet1", 274, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 274, 9, resFail);
			return false;
		}
	}

	//Here is the end of account edition



	//Here is the start of account deletion

	public static boolean checkDeleteAccountBeforeCustomization() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountFirstCheckBoxToSelection));
		accountFirstCheckBoxToSelection.click();		 



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountFirstCheckBoxToSelection));
		accountFirstCheckBoxToSelection.click();	



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDeleteBtn));

		masterDeleteBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(getMsgOnDelete));
		System.out.println(getMsgOnDelete.getText());



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clickOnOkInDelete));
		clickOnOkInDelete.click();

		String expMessage="Record Deleted Successfully.";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkDeleteAccountBeforeCustomization***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 275, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 275, 9, resFail);
			return false;
		}	 
	}




	public static boolean checkDeleteAccountDisplayBeforeCustomization() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountNewCreationName));

		String actaccountNewCreationName  =accountNewCreationName.getText();
		String expaccountNewCreationName  ="ASSETS";

		System.out.println("*******************************checkDeleteAccountDisplayBeforeCustomization************************************");

		System.out.println("accountNewCreationName  : "+actaccountNewCreationName+" Value Expected : "+expaccountNewCreationName);

		if(actaccountNewCreationName.equalsIgnoreCase(expaccountNewCreationName))
		{ 
			excelReader.setCellData(xlfile, "Sheet1", 276, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 276, 9, resFail);
			return false;
		}
	}


	//Here is the end of the delete account


	public static boolean checkLogoutAfterClosingAccountMaster() throws EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
		userNameDisplay.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();

		boolean verifyFiledsStatus=true;

		getWebDriverWait().until(ExpectedConditions.visibilityOf(username));

		boolean actusername			=username.isDisplayed();
		boolean actpassword	 	    =password.isDisplayed();
		boolean actcompanyDropDownList =companyDropDownList.isDisplayed();
		boolean actsignIn				=signIn.isDisplayed();

		boolean expusername			=true;
		boolean exppassword			=true;
		boolean expcompanyDropDownList	=true;
		boolean expsignIn				=true;

		System.out.println("************************************* checkLogoutAfterClosingAccountMaster  *********************************");

		System.out.println("username             : "+actusername            +" Value Expected : "+expusername);
		System.out.println("password             : "+actpassword            +" Value Expected : "+exppassword);
		System.out.println("companyDropDownList  : "+actcompanyDropDownList +" Value Expected : "+expcompanyDropDownList);
		System.out.println("signIn               : "+actsignIn              +" Value Expected : "+expsignIn);

		if(actusername==expusername && actpassword==exppassword && actcompanyDropDownList==expcompanyDropDownList && actsignIn==expsignIn)
		{
			excelReader.setCellData(xlfile, "Sheet1", 277, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 277, 9, resFail);
			return false;
		}
	}




	public static boolean checkSignToCustomizeMasterInAccounts() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(username));
		username.sendKeys("su");
		username.sendKeys(Keys.TAB);

		//getAction().moveToElement(username).sendKeys(Keys.TAB).perform();
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
		password.sendKeys("su");
		//password.sendKeys(Keys.TAB);  
		Thread.sleep(2000);
		//getAction().moveToElement(password).sendKeys(Keys.TAB).perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(signIn));
		signIn.click();

		//checkRefershPopOnlogin();

		//checkPopUpWindow();

		Thread.sleep(8000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();

		//To Check Login User Home Page is display

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));




		getFluentWebDriverWait().until(ExpectedConditions.textToBePresentInElement(userNameDisplay, "SU"));

		String userInfo=userNameDisplay.getText();

		System.out.println("User Info : "+userInfo);

		System.out.println("User Info Capture Text :"+userNameDisplay.getText());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
		companyLogo.click();

		String getCompanyTxt			=companyName.getText();
		String getLoginCompanyName		=getCompanyTxt.substring(0, 19);
		companyLogo.click();

		String expuserInfo				="SU";
		String expLoginCompanyName		="Automation Company ";

		if(userInfo.equalsIgnoreCase(expuserInfo) /*&& getLoginCompanyName.equalsIgnoreCase(expLoginCompanyName)*/)
		{
			getLogger().info("Login User the Company Name and Information is displaying correct");
			System.out.println("Pass : Login User and Company Name is displaying Correct");
			excelReader.setCellData(xlfile, "Sheet1", 278, 9, resPass);
			return true;
		}
		else
		{
			getLogger().info("Fail : Login User the Company Name and Information is displaying Wrong");
			System.out.println("Fail : Login Name the Company Name and Information is displaying Wrong");
			excelReader.setCellData(xlfile, "Sheet1", 10, 278, resFail);
			return false;
		}
	}


	public static boolean checkOpenAccountsMasterAfterLogout() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(3000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountsTitle));

		String actaccountsTitle  =accountsTitle.getText();
		String expaccountsTitle  ="Account";

		System.out.println("*********************************checkOpenAccountsMasterAfterLogout**************************");

		System.out.println("accountsTitle  : "+actaccountsTitle+" Value Expected : "+expaccountsTitle);

		if(actaccountsTitle.equalsIgnoreCase(expaccountsTitle))
		{	
			excelReader.setCellData(xlfile, "Sheet1", 279, 9, resPass);
			return true;
		}	 
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 279, 9, resFail);
			return false;
		}
	}


	public static boolean checkCustomizeMasterTabOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));	
		masterRibbonControlNextBtn.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));	
		masterRibbonControlNextBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(3000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(minusBtn));
		minusBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(plusBtn));

		boolean actplusBtn                                     =plusBtn.isDisplayed();
		boolean actmasterFieldsOption                          =masterFieldsOption.isDisplayed();
		boolean actaccountMasterFieldsUniqueConstraintsOption  =accountMasterFieldsUniqueConstraintsOption.isDisplayed();
		boolean actRulesOption                                 =RulesOption.isDisplayed();
		boolean actrules_ExternalModules                       =rules_ExternalModules.isDisplayed();
		boolean actitemInfoPanelCustomizationTab               =itemInfoPanelCustomizationTab.isDisplayed();
		boolean actaccountReportsTab                           =accountReportsTab.isDisplayed();

		boolean expplusBtn                                     =true;
		boolean expmasterFieldsOption                          =true;
		boolean expaccountMasterFieldsUniqueConstraintsOption  =true;
		boolean expRulesOption                                 =true;
		boolean exprules_ExternalModules                       =true;
		boolean expitemInfoPanelCustomizationTab               =true;
		boolean expaccountReportsTab                           =true;

		System.out.println("**********************************checkCustomizeMasterTabOption**************************************");

		System.out.println("plusBtn                                     : "+actplusBtn                                    +" Value Expected : "+expplusBtn);
		System.out.println("masterFieldsOption                          : "+actmasterFieldsOption                         +" Value Expected : "+expmasterFieldsOption);
		System.out.println("accountMasterFieldsUniqueConstraintsOption  : "+actaccountMasterFieldsUniqueConstraintsOption +" Value Expected : "+expaccountMasterFieldsUniqueConstraintsOption);
		System.out.println("RulesOption                                 : "+actRulesOption                                +" Value Expected : "+expRulesOption);
		System.out.println("rules_ExternalModules                       : "+actrules_ExternalModules                      +" Value Expected : "+exprules_ExternalModules);
		System.out.println("itemInfoPanelCustomizationTab               : "+actitemInfoPanelCustomizationTab              +" Value Expected : "+expitemInfoPanelCustomizationTab);
		System.out.println("accountReportsTab                           : "+actaccountReportsTab                          +" Value Expected : "+expaccountReportsTab);

		if(actplusBtn==expplusBtn && actmasterFieldsOption==expmasterFieldsOption && actaccountMasterFieldsUniqueConstraintsOption==expaccountMasterFieldsUniqueConstraintsOption
				&& actRulesOption==expRulesOption && actrules_ExternalModules==exprules_ExternalModules && actitemInfoPanelCustomizationTab==expitemInfoPanelCustomizationTab
				&& actaccountReportsTab==expaccountReportsTab)
		{
			excelReader.setCellData(xlfile, "Sheet1", 280, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 280, 9, resFail);
			return false;
		}
	}



	public static boolean checkCustomizeMasterTabMasterFieldsOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(plusBtn));
		plusBtn.click();



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(generalTab));

		boolean actgeneralTab                           =generalTab.isDisplayed();
		boolean actsettingOption                        =settingOption.isDisplayed();
		boolean actaccountMasterFieldDetailsOption      =accountMasterFieldDetailsOption.isDisplayed();
		boolean actaccountMasterFieldPrintLayoutOption  =accountMasterFieldPrintLayoutOption.isDisplayed();

		boolean expgeneralTab                           =true;
		boolean expsettingOption                        =true;
		boolean expaccountMasterFieldDetailsOption      =true;
		boolean expaccountMasterFieldPrintLayoutOption  =true;

		System.out.println("*************************************checkCustomizeMasterTabMasterFieldsOption***********************************");

		System.out.println("generalTab                          : "+actgeneralTab                          +" Value Expected : "+expgeneralTab);
		System.out.println("settingOption                       : "+actsettingOption                       +" Value Expected : "+expsettingOption);
		System.out.println("accountMasterFieldDetailsOption     : "+actaccountMasterFieldDetailsOption     +" Value Expected : "+expaccountMasterFieldDetailsOption);
		System.out.println("accountMasterFieldPrintLayoutOption : "+actaccountMasterFieldPrintLayoutOption +" Value Expected : "+expaccountMasterFieldPrintLayoutOption);

		if(actgeneralTab==expgeneralTab && actsettingOption==expsettingOption
				&& actaccountMasterFieldDetailsOption==expaccountMasterFieldDetailsOption
				&& actaccountMasterFieldPrintLayoutOption==expaccountMasterFieldPrintLayoutOption)
		{
			excelReader.setCellData(xlfile, "Sheet1", 281, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 281, 9, resFail);
			return false;
		}
	}


	public static boolean checkGeneralTabOptionInCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(generalTab));
		generalTab.click();



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(generalMainTab));

		boolean actgeneralMainTab           =generalMainTab.isDisplayed();
		boolean actgeneralHeaderDetailsTab  =generalHeaderDetailsTab.isDisplayed();
		boolean actaccountSaveBtn           =accountSaveBtn.isDisplayed();
		boolean actaccountHeaderPreview     =accountHeaderPreview.isDisplayed();
		boolean actaccountCloseBtn          =accountCloseBtn.isDisplayed();

		boolean expgeneralMainTab           =true;
		boolean expgeneralHeaderDetailsTab  =true;
		boolean expaccountSaveBtn           =true;
		boolean expaccountHeaderPreview     =true;
		boolean expaccountCloseBtn          =true;

		System.out.println("********************************checkGeneralTabOptionInCustomizeMaster******************************");

		System.out.println("generalMainTab          : "+actgeneralMainTab          +" Value Expected : "+expgeneralMainTab);
		System.out.println("generalHeaderDetailsTab : "+actgeneralHeaderDetailsTab +" Value Expected : "+expgeneralHeaderDetailsTab);
		System.out.println("accountSaveBtn          : "+actaccountSaveBtn          +" Value Expected : "+expaccountSaveBtn);
		System.out.println("accountHeaderPreview    : "+actaccountHeaderPreview    +" Value Expected : "+expaccountHeaderPreview);
		System.out.println("accountCloseBtn         : "+actaccountCloseBtn         +" Value Expected : "+expaccountCloseBtn);

		if(actgeneralMainTab==expgeneralMainTab && actgeneralHeaderDetailsTab==expgeneralHeaderDetailsTab && actaccountSaveBtn==expaccountSaveBtn
				&& actaccountHeaderPreview==expaccountHeaderPreview && actaccountCloseBtn==expaccountCloseBtn)
		{
			excelReader.setCellData(xlfile, "Sheet1", 282, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 282, 9, resFail);
			return false;
		}
	}


	public static boolean checkGeneralTabOptionMainTabInCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountCustomizeName));

		boolean actaccountCustomizeName          =accountCustomizeName.isDisplayed();
		boolean actaccountCustomizeCode          =accountCustomizeCode.isDisplayed();
		boolean actaccountCustomizeAccountType   =accountCustomizeAccountType.isDisplayed();
		boolean actaccountCustomizeCreditLimit   =accountCustomizeCreditLimit.isDisplayed();
		boolean actaccountCustomizeCreditDays    =accountCustomizeCreditDays.isDisplayed();

		boolean expaccountCustomizeName          =true;
		boolean expaccountCustomizeCode          =true;
		boolean expaccountCustomizeAccountType   =true;
		boolean expaccountCustomizeCreditLimit   =true;
		boolean expaccountCustomizeCreditDays    =true;

		System.out.println("*******************************checkGeneralTabOptionMainTabInCustomizeMaster***************************");

		System.out.println("accountCustomizeName         : "+actaccountCustomizeName        +" value Expected : "+expaccountCustomizeName);
		System.out.println("accountCustomizeCode         : "+actaccountCustomizeCode        +" value Expected : "+expaccountCustomizeCode);
		System.out.println("accountCustomizeAccountType  : "+actaccountCustomizeAccountType +" value Expected : "+expaccountCustomizeAccountType);
		System.out.println("accountCustomizeCreditLimit  : "+actaccountCustomizeCreditLimit +" value Expected : "+expaccountCustomizeCreditLimit);
		System.out.println("accountCustomizeCreditDays   : "+actaccountCustomizeCreditDays  +" value Expected : "+expaccountCustomizeCreditDays);

		if(actaccountCustomizeName==expaccountCustomizeName && actaccountCustomizeCode==expaccountCustomizeCode
				&& actaccountCustomizeAccountType==expaccountCustomizeAccountType && actaccountCustomizeCreditLimit==expaccountCustomizeCreditLimit
				&& actaccountCustomizeCreditDays==expaccountCustomizeCreditDays)
		{
			excelReader.setCellData(xlfile, "Sheet1", 283, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 283, 9, resFail);
			return false;
		}
	}


	public static boolean checkGeneralTabOptionHeaderDetailsTabInCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(generalHeaderDetailsTab));
		generalHeaderDetailsTab.click();



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountCustomizeChequeDiscountLimit));

		boolean actaccountCustomizeChequeDiscountLimit  =accountCustomizeChequeDiscountLimit.isDisplayed();
		boolean actaccountCustomizeRateOfInterest       =accountCustomizeRateOfInterest.isDisplayed();
		boolean actaccountCustomizeBankAc               =accountCustomizeBankAc.isDisplayed();
		boolean actaccountCustomizePDCDiscountedAccount =accountCustomizePDCDiscountedAccount.isDisplayed();
		boolean actaccountHeaderMoveFiledBtn            =accountHeaderMoveFiledBtn.isDisplayed();
		boolean actaccountHeaderPreview                 =accountHeaderPreview.isDisplayed();
		boolean actaccountSaveBtn                       =accountSaveBtn.isDisplayed();
		boolean actaccountAddBtn                        =accountAddBtn.isDisplayed();
		boolean actaccountCloseBtn                      =accountCloseBtn.isDisplayed();

		boolean expaccountCustomizeChequeDiscountLimit  =true;
		boolean expaccountCustomizeRateOfInterest       =true;
		boolean expaccountCustomizeBankAc               =true;
		boolean expaccountCustomizePDCDiscountedAccount =true;
		boolean expaccountHeaderMoveFiledBtn            =true;
		boolean expaccountHeaderPreview                 =true;
		boolean expaccountSaveBtn                       =true;
		boolean expaccountAddBtn                        =true;
		boolean expaccountCloseBtn                      =true;

		System.out.println("***********************checkGeneralTabOptionHeaderDetailsTabInCustomizeMaster*****************************");

		System.out.println("accountCustomizeChequeDiscountLimit   : "+actaccountCustomizeChequeDiscountLimit  +" Value Expected : "+expaccountCustomizeChequeDiscountLimit);
		System.out.println("accountCustomizeRateOfInterest        : "+actaccountCustomizeRateOfInterest       +" Value Expected : "+expaccountCustomizeRateOfInterest);
		System.out.println("accountCustomizeBankAc                : "+actaccountCustomizeBankAc               +" Value Expected : "+expaccountCustomizeBankAc);
		System.out.println("accountCustomizePDCDiscountedAccount  : "+actaccountCustomizePDCDiscountedAccount +" Value Expected : "+expaccountCustomizePDCDiscountedAccount);
		System.out.println("accountHeaderMoveFiledBtn             : "+actaccountHeaderMoveFiledBtn            +" Value Expected : "+expaccountHeaderMoveFiledBtn);
		System.out.println("accountHeaderPreview                  : "+actaccountHeaderPreview                 +" Value Expected : "+expaccountHeaderPreview);
		System.out.println("accountSaveBtn                        : "+actaccountSaveBtn                       +" Value Expected : "+expaccountSaveBtn);
		System.out.println("accountAddBtn                         : "+actaccountAddBtn                        +" Value Expected : "+expaccountAddBtn);
		System.out.println("accountCloseBtn                       : "+actaccountCloseBtn                      +" Value Expected : "+expaccountCloseBtn);

		if(actaccountCustomizeChequeDiscountLimit==expaccountCustomizeChequeDiscountLimit && actaccountCustomizeRateOfInterest==expaccountCustomizeRateOfInterest
				&& actaccountCustomizeBankAc==expaccountCustomizeBankAc && actaccountCustomizePDCDiscountedAccount==expaccountCustomizePDCDiscountedAccount
				&& actaccountHeaderMoveFiledBtn==expaccountHeaderMoveFiledBtn && actaccountHeaderPreview==expaccountHeaderPreview
				&& actaccountSaveBtn==expaccountSaveBtn && actaccountAddBtn==expaccountAddBtn && actaccountCloseBtn==expaccountCloseBtn)
		{
			excelReader.setCellData(xlfile, "Sheet1", 284, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 284, 9, resFail);
			return false;
		}
	}


	public static boolean checkSettingsTabInCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingOption));
		settingOption.click();

		Thread.sleep(3000);

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsHeaderDetailsTab));

		boolean actsettingsHeaderDetailsTab          =settingsHeaderDetailsTab.isDisplayed();
		boolean actsettingsBodyDetailsTab            =settingsBodyDetailsTab.isDisplayed();
		boolean actaccountSettingsHeaderMoveFiledBtn =accountSettingsHeaderMoveFiledBtn.isDisplayed();
		boolean actaccountSettingsHeaderPreview      =accountSettingsHeaderPreview.isDisplayed();
		boolean actaccountSettingsSaveBtn            =accountSettingsSaveBtn.isDisplayed();
		boolean actaccountSettingsAddBtn             =accountSettingsAddBtn.isDisplayed();
		boolean actaccountSettingsCloseBtn           =accountSettingsCloseBtn.isDisplayed();

		boolean expsettingsHeaderDetailsTab          =true;
		boolean expsettingsBodyDetailsTab            =true;
		boolean expaccountSettingsHeaderMoveFiledBtn =true;
		boolean expaccountSettingsHeaderPreview      =true;
		boolean expaccountSettingsSaveBtn            =true;
		boolean expaccountSettingsAddBtn             =true;
		boolean expaccountSettingsCloseBtn           =true;

		System.out.println("********************************checkSettingsTabInCustomizeMaster******************************");

		System.out.println("settingsHeaderDetailsTab           : "+actsettingsHeaderDetailsTab          +" Value Expected : "+expsettingsHeaderDetailsTab);
		System.out.println("settingsBodyDetailsTab             : "+actsettingsBodyDetailsTab            +" Value Expected : "+expsettingsBodyDetailsTab);
		System.out.println("accountSettingsHeaderMoveFiledBtn  : "+actaccountSettingsHeaderMoveFiledBtn +" Value Expected : "+expaccountSettingsHeaderMoveFiledBtn);
		System.out.println("accountSettingsHeaderPreview       : "+actaccountSettingsHeaderPreview      +" Value Expected : "+expaccountSettingsHeaderPreview);
		System.out.println("accountSettingsSaveBtn             : "+actaccountSettingsSaveBtn            +" Value Expected : "+expaccountSettingsSaveBtn);
		System.out.println("accountSettingsAddBtn              : "+actaccountSettingsAddBtn             +" Value Expected : "+expaccountSettingsAddBtn);
		System.out.println("accountSettingsCloseBtn            : "+actaccountSettingsCloseBtn           +" Value Expected : "+expaccountSettingsCloseBtn);

		if(actsettingsHeaderDetailsTab==expsettingsHeaderDetailsTab && actsettingsBodyDetailsTab==expsettingsBodyDetailsTab
				&& actaccountSettingsHeaderMoveFiledBtn==expaccountSettingsHeaderMoveFiledBtn && actaccountSettingsHeaderPreview==expaccountSettingsHeaderPreview
				&& actaccountSettingsSaveBtn==expaccountSettingsSaveBtn && actaccountSettingsAddBtn==expaccountSettingsAddBtn 
				&& actaccountSettingsCloseBtn==expaccountSettingsCloseBtn)
		{
			excelReader.setCellData(xlfile, "Sheet1", 285, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 285, 9, resFail);
			return false;
		}	
	}




	public static boolean checkSettingsTabHeaderFieldsInCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountSettingsHeaderEditFirstRowBtn));

		boolean actaccountSettingsHeaderEditFirstRowBtn    =accountSettingsHeaderEditFirstRowBtn.isDisplayed();
		boolean actaccountSettingsHeaderEditSecondRowBtn   =accountSettingsHeaderEditSecondRowBtn.isDisplayed();
		boolean actaccountSettingsHeaderEditThirdRowBtn    =accountSettingsHeaderEditThirdRowBtn.isDisplayed();
		boolean actaccountSettingsHeaderEditFourthRowBtn   =accountSettingsHeaderEditFourthRowBtn.isDisplayed();
		boolean actaccountSettingsHeaderEditFifthRowBtn    =accountSettingsHeaderEditFifthRowBtn.isDisplayed();
		boolean actaccountSettingsHeaderEditSixthRowBtn    =accountSettingsHeaderEditSixthRowBtn.isDisplayed();
		boolean actaccountSettingsHeaderEditSeventhRowBtn  =accountSettingsHeaderEditSeventhRowBtn.isDisplayed();
		boolean actaccountSettingsHeaderEditEighthRowBtn   =accountSettingsHeaderEditEighthRowBtn.isDisplayed();

		boolean expaccountSettingsHeaderEditFirstRowBtn    =true;
		boolean expaccountSettingsHeaderEditSecondRowBtn   =true;
		boolean expaccountSettingsHeaderEditThirdRowBtn    =true;
		boolean expaccountSettingsHeaderEditFourthRowBtn   =true;
		boolean expaccountSettingsHeaderEditFifthRowBtn    =true;
		boolean expaccountSettingsHeaderEditSixthRowBtn    =true;
		boolean expaccountSettingsHeaderEditSeventhRowBtn  =true;
		boolean expaccountSettingsHeaderEditEighthRowBtn   =true;

		System.out.println("****************************checkSettingsTabHeaderFieldsInCustomizeMaster*************************");

		System.out.println("accountSettingsHeaderEditFirstRowBtn    : "+actaccountSettingsHeaderEditFirstRowBtn  +" Value Expected : "+expaccountSettingsHeaderEditFirstRowBtn);
		System.out.println("accountSettingsHeaderEditSecondRowBtn   : "+actaccountSettingsHeaderEditSecondRowBtn +" Value Expected : "+expaccountSettingsHeaderEditSecondRowBtn);
		System.out.println("accountSettingsHeaderEditThirdRowBtn    : "+actaccountSettingsHeaderEditThirdRowBtn  +" Value Expected : "+expaccountSettingsHeaderEditThirdRowBtn);
		System.out.println("accountSettingsHeaderEditFourthRowBtn   : "+actaccountSettingsHeaderEditFourthRowBtn +" Value Expected : "+expaccountSettingsHeaderEditFourthRowBtn);
		System.out.println("accountSettingsHeaderEditFifthRowBtn    : "+actaccountSettingsHeaderEditFifthRowBtn  +" Value Expected : "+expaccountSettingsHeaderEditFifthRowBtn);
		System.out.println("accountSettingsHeaderEditSixthRowBtn    : "+actaccountSettingsHeaderEditSixthRowBtn  +" Value Expected : "+expaccountSettingsHeaderEditSixthRowBtn);
		System.out.println("accountSettingsHeaderEditSeventhRowBtn  : "+actaccountSettingsHeaderEditSeventhRowBtn+" Value Expected : "+expaccountSettingsHeaderEditSeventhRowBtn);
		System.out.println("accountSettingsHeaderEditEighthRowBtn   : "+actaccountSettingsHeaderEditEighthRowBtn +" Value Expected : "+expaccountSettingsHeaderEditEighthRowBtn);

		if(actaccountSettingsHeaderEditFirstRowBtn==expaccountSettingsHeaderEditFirstRowBtn
				&& actaccountSettingsHeaderEditSecondRowBtn==expaccountSettingsHeaderEditSecondRowBtn 
				&& actaccountSettingsHeaderEditThirdRowBtn==expaccountSettingsHeaderEditThirdRowBtn 
				&& actaccountSettingsHeaderEditFourthRowBtn==expaccountSettingsHeaderEditFourthRowBtn
				&& actaccountSettingsHeaderEditFifthRowBtn==expaccountSettingsHeaderEditFifthRowBtn 
				&& actaccountSettingsHeaderEditSixthRowBtn==expaccountSettingsHeaderEditSixthRowBtn
				&& actaccountSettingsHeaderEditSeventhRowBtn==expaccountSettingsHeaderEditSeventhRowBtn
				&& actaccountSettingsHeaderEditEighthRowBtn==expaccountSettingsHeaderEditEighthRowBtn)
		{
			excelReader.setCellData(xlfile, "Sheet1", 286, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 286, 9, resFail);
			return false;
		}
	}


	public static boolean checkSettingsTabBodyFieldsInCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsBodyDetailsTab));
		settingsBodyDetailsTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsBodyDetailsEmptyTab));

		boolean actsettingsBodyDetailsEmptyTab  =settingsBodyDetailsEmptyTab.isDisplayed();
		boolean expsettingsBodyDetailsEmptyTab  =true;

		System.out.println("***************************checkSettingsTabBodyFieldsInCustomizeMaster*****************************");

		System.out.println("settingsBodyDetailsEmptyTab : "+actsettingsBodyDetailsEmptyTab+" Value Expected : "+expsettingsBodyDetailsEmptyTab);

		if(actsettingsBodyDetailsEmptyTab==expsettingsBodyDetailsEmptyTab)
		{
			excelReader.setCellData(xlfile, "Sheet1", 287, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 287, 9, resFail);
			return false;
		}
	}



	public static boolean checkDetailsTabInCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountMasterFieldDetailsOption));
		accountMasterFieldDetailsOption.click();

		Thread.sleep(3000);

		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(detailsHeaderDetailsTab));

		boolean actdetailsHeaderDetailsTab          =detailsHeaderDetailsTab.isDisplayed();
		boolean actdetailsBodyDetailsTab            =detailsBodyDetailsTab.isDisplayed();
		boolean actdetailsHeaderBankSaveBtn 		=detailsHeaderBankSaveBtn.isDisplayed();
		boolean actdetailsHeaderMoveFieldBtn 		=detailsHeaderMoveFieldBtn.isDisplayed();
		boolean actdetailsHeaderAddBtn		 		=detailsHeaderAddBtn.isDisplayed();
		boolean actdetailsHeaderPreviewBtn	 		=detailsHeaderPreviewBtn.isDisplayed();
		boolean actdetailsHeaderCloseBtn	 		=detailsHeaderCloseBtn.isDisplayed();

		boolean expdetailsHeaderDetailsTab          =true;
		boolean expdetailsBodyDetailsTab            =true;
		boolean expdetailsHeaderBankSaveBtn 		=true;
		boolean expdetailsHeaderMoveFieldBtn 		=true;
		boolean expdetailsHeaderAddBtn		 		=true;
		boolean expdetailsHeaderPreviewBtn	 		=true;
		boolean expdetailsHeaderCloseBtn	 		=true;

		System.out.println("************************************checkDetailsTabInCustomizeMaster********************************");

		System.out.println("detailsHeaderDetailsTab    : "+actdetailsHeaderDetailsTab   +" Value Expected : "+expdetailsHeaderDetailsTab);
		System.out.println("detailsBodyDetailsTab      : "+actdetailsBodyDetailsTab     +" Value Expected : "+expdetailsBodyDetailsTab);
		System.out.println("detailsHeaderBankSaveBtn   : "+actdetailsHeaderBankSaveBtn  +" Value Expected : "+expdetailsHeaderBankSaveBtn);
		System.out.println("detailsHeaderMoveFieldBtn  : "+actdetailsHeaderMoveFieldBtn +" Value Expected : "+expdetailsHeaderMoveFieldBtn);
		System.out.println("detailsHeaderAddBtn        : "+actdetailsHeaderAddBtn       +" Value Expected : "+expdetailsHeaderAddBtn);
		System.out.println("detailsHeaderPreviewBtn    : "+actdetailsHeaderPreviewBtn   +" Value Expected : "+expdetailsHeaderPreviewBtn);
		System.out.println("detailsHeaderCloseBtn      : "+actdetailsHeaderCloseBtn     +" Value Expected : "+expdetailsHeaderCloseBtn);

		if(actdetailsHeaderDetailsTab==expdetailsHeaderDetailsTab && actdetailsBodyDetailsTab==expdetailsBodyDetailsTab
				&& actdetailsHeaderBankSaveBtn==expdetailsHeaderBankSaveBtn && actdetailsHeaderMoveFieldBtn==expdetailsHeaderMoveFieldBtn
				&& actdetailsHeaderAddBtn==expdetailsHeaderAddBtn && actdetailsHeaderPreviewBtn==expdetailsHeaderPreviewBtn
				&& actdetailsHeaderCloseBtn==expdetailsHeaderCloseBtn)
		{
			excelReader.setCellData(xlfile, "Sheet1", 288, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 288, 9, resFail);
			return false;
		}
	}


	public static boolean checkDetailsTabHeaderFieldsInCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(detailsHeaderAddress));

		boolean actdetailsHeaderAddress   			=detailsHeaderAddress.isDisplayed();
		boolean actdetailsHeaderCity   				=detailsHeaderCity.isDisplayed();
		boolean actdetailsHeaderPin   				=detailsHeaderPin.isDisplayed();
		boolean actdetailsHeaderDeliveryAddress   	=detailsHeaderDeliveryAddress.isDisplayed();
		boolean actdetailsHeaderCityOne   			=detailsHeaderCityOne.isDisplayed();
		boolean actdetailsHeaderPinOne   			=detailsHeaderPinOne.isDisplayed();
		boolean actdetailsHeaderSendEmailToCustomer =detailsHeaderSendEmailToCustomer.isDisplayed();
		boolean actdetailsHeaderAllowCustomerPortal =detailsHeaderAllowCustomerPortal.isDisplayed();
		boolean actdetailsHeaderEmail   			=detailsHeaderEmail.isDisplayed();
		boolean actdetailsHeaderPassword   			=detailsHeaderPassword.isDisplayed();
		boolean actdetailsHeaderTelNo   			=detailsHeaderTelNo.isDisplayed();
		boolean actdetailsHeaderFaxNo   			=detailsHeaderFaxNo.isDisplayed();
		boolean actdetailsHeaderBankAccountName   	=detailsHeaderBankAccountName.isDisplayed();
		boolean actdetailsHeaderBankAccountNumber   =detailsHeaderBankAccountNumber.isDisplayed();
		boolean actdetailsHeaderIFSCCode   			=detailsHeaderIFSCCode.isDisplayed();
		boolean actdetailsHeaderPaymentType   		=detailsHeaderPaymentType.isDisplayed();
		boolean actdetailsHeaderFinanceEmail   		=detailsHeaderFinanceEmail.isDisplayed();

		boolean expdetailsHeaderAddress   			=true;
		boolean expdetailsHeaderCity   				=true;
		boolean expdetailsHeaderPin   				=true;
		boolean expdetailsHeaderDeliveryAddress   	=true;
		boolean expdetailsHeaderCityOne   			=true;
		boolean expdetailsHeaderPinOne   			=true;
		boolean expdetailsHeaderSendEmailToCustomer =true;
		boolean expdetailsHeaderAllowCustomerPortal =true;
		boolean expdetailsHeaderEmail   			=true;
		boolean expdetailsHeaderPassword   			=true;
		boolean expdetailsHeaderTelNo   			=true;
		boolean expdetailsHeaderFaxNo   			=true;
		boolean expdetailsHeaderBankAccountName   	=true;
		boolean expdetailsHeaderBankAccountNumber   =true;
		boolean expdetailsHeaderIFSCCode   			=true;
		boolean expdetailsHeaderPaymentType   		=true;
		boolean expdetailsHeaderFinanceEmail   		=true;

		System.out.println("********************************checkDetailsTabHeaderFieldsInCustomizeMaster**************************");

		System.out.println("detailsHeaderAddress               : "+actdetailsHeaderAddress             +" Value Expected : "+expdetailsHeaderAddress);
		System.out.println("detailsHeaderCity                  : "+actdetailsHeaderCity                +" Value Expected : "+expdetailsHeaderCity);
		System.out.println("detailsHeaderPin                   : "+actdetailsHeaderPin                 +" Value Expected : "+expdetailsHeaderPin);
		System.out.println("detailsHeaderDeliveryAddress       : "+actdetailsHeaderDeliveryAddress     +" Value Expected : "+expdetailsHeaderDeliveryAddress);
		System.out.println("detailsHeaderCityOne               : "+actdetailsHeaderCityOne             +" Value Expected : "+expdetailsHeaderCityOne);
		System.out.println("detailsHeaderPinOne                : "+actdetailsHeaderPinOne              +" Value Expected : "+expdetailsHeaderPinOne);
		System.out.println("detailsHeaderSendEmailToCustomer   : "+actdetailsHeaderSendEmailToCustomer +" Value Expected : "+expdetailsHeaderSendEmailToCustomer);
		System.out.println("detailsHeaderAllowCustomerPortal   : "+actdetailsHeaderAllowCustomerPortal +" Value Expected : "+expdetailsHeaderAllowCustomerPortal);
		System.out.println("detailsHeaderEmail                 : "+actdetailsHeaderEmail               +" Value Expected : "+expdetailsHeaderEmail);
		System.out.println("detailsHeaderPassword              : "+actdetailsHeaderPassword            +" Value Expected : "+expdetailsHeaderPassword);
		System.out.println("detailsHeaderTelNo                 : "+actdetailsHeaderTelNo               +" Value Expected : "+expdetailsHeaderTelNo);
		System.out.println("detailsHeaderFaxNo                 : "+actdetailsHeaderFaxNo               +" Value Expected : "+expdetailsHeaderFaxNo);
		System.out.println("detailsHeaderBankAccountName       : "+actdetailsHeaderBankAccountName     +" Value Expected : "+expdetailsHeaderBankAccountName);
		System.out.println("detailsHeaderBankAccountNumber     : "+actdetailsHeaderBankAccountNumber   +" Value Expected : "+expdetailsHeaderBankAccountNumber);
		System.out.println("detailsHeaderIFSCCode              : "+actdetailsHeaderIFSCCode            +" Value Expected : "+expdetailsHeaderIFSCCode);
		System.out.println("detailsHeaderPaymentType           : "+actdetailsHeaderPaymentType         +" Value Expected : "+expdetailsHeaderPaymentType);
		System.out.println("detailsHeaderFinanceEmail          : "+actdetailsHeaderFinanceEmail        +" Value Expected : "+expdetailsHeaderFinanceEmail);

		if(actdetailsHeaderAddress==expdetailsHeaderAddress && actdetailsHeaderCity==expdetailsHeaderCity && actdetailsHeaderPin==expdetailsHeaderPin
				&& actdetailsHeaderDeliveryAddress==expdetailsHeaderDeliveryAddress && actdetailsHeaderCityOne==expdetailsHeaderCityOne
				&& actdetailsHeaderPinOne==expdetailsHeaderPinOne && actdetailsHeaderSendEmailToCustomer==expdetailsHeaderSendEmailToCustomer
				&& actdetailsHeaderAllowCustomerPortal==expdetailsHeaderAllowCustomerPortal && actdetailsHeaderEmail==expdetailsHeaderEmail
				&& actdetailsHeaderPassword==expdetailsHeaderPassword && actdetailsHeaderTelNo==expdetailsHeaderTelNo 
				&& actdetailsHeaderFaxNo==expdetailsHeaderFaxNo && actdetailsHeaderBankAccountName==expdetailsHeaderBankAccountName 
				&& actdetailsHeaderBankAccountNumber==expdetailsHeaderBankAccountNumber && actdetailsHeaderIFSCCode==expdetailsHeaderIFSCCode
				&& actdetailsHeaderPaymentType==expdetailsHeaderPaymentType && actdetailsHeaderFinanceEmail==expdetailsHeaderFinanceEmail)
		{
			excelReader.setCellData(xlfile, "Sheet1", 289, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 289, 9, resFail);
			return false;
		}
	}


	public static boolean checkDetailsTabBodyFieldsInCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(detailsBodyDetailsTab));
		detailsBodyDetailsTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(detailsBodyDetailsEmptyTab));

		boolean actdetailsBodyDetailsEmptyTab  =detailsBodyDetailsEmptyTab.isDisplayed();
		boolean expdetailsBodyDetailsEmptyTab  =true;

		System.out.println("********************************checkDetailsTabBodyFieldsInCustomizeMaster******************");

		System.out.println("detailsBodyDetailsEmptyTab  : "+actdetailsBodyDetailsEmptyTab+" Value Expected : "+expdetailsBodyDetailsEmptyTab);

		if(actdetailsBodyDetailsEmptyTab==expdetailsBodyDetailsEmptyTab)
		{
			excelReader.setCellData(xlfile, "Sheet1", 290, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 290, 9, resFail);
			return false;
		}
	}



	public static boolean checkPrintLayoutTabInCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountMasterFieldPrintLayoutOption));
		accountMasterFieldPrintLayoutOption.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(printlayoutHeaderDetailsTab));

		boolean actprintlayoutHeaderDetailsTab  =printlayoutHeaderDetailsTab.isDisplayed();
		boolean actprintLayouBodyDetailsTab     =printLayouBodyDetailsTab.isDisplayed();

		boolean expprintlayoutHeaderDetailsTab  =true;
		boolean expprintLayouBodyDetailsTab     =true;

		System.out.println("*********************************checkPrintLayoutTabInCustomizeMaster*******************************");

		System.out.println("printlayoutHeaderDetailsTab  : "+actprintlayoutHeaderDetailsTab+" Value Expected : "+expprintlayoutHeaderDetailsTab);
		System.out.println("printLayouBodyDetailsTab     : "+actprintLayouBodyDetailsTab   +" Value Expected : "+expprintLayouBodyDetailsTab);

		if(actprintlayoutHeaderDetailsTab==expprintlayoutHeaderDetailsTab && actprintLayouBodyDetailsTab==expprintLayouBodyDetailsTab)
		{
			excelReader.setCellData(xlfile, "Sheet1", 291, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 291, 9, resFail);
			return false;
		}
	}



	public static boolean checkPrintLayoutTabHeaderFieldsInCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(printLayoutHeaderDetailsEmpty));

		boolean actprintLayoutHeaderDetailsEmpty  =printLayoutHeaderDetailsEmpty.isDisplayed();
		boolean expprintLayoutHeaderDetailsEmpty  =true;

		System.out.println("*****************************checkPrintLayoutTabHeaderFieldsInCustomizeMaster***************************");

		System.out.println("printLayoutHeaderDetailsEmpty  : "+actprintLayoutHeaderDetailsEmpty+" Value Expected : "+expprintLayoutHeaderDetailsEmpty);

		if(actprintLayoutHeaderDetailsEmpty==expprintLayoutHeaderDetailsEmpty)
		{
			excelReader.setCellData(xlfile, "Sheet1", 292, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 292, 9, resFail);
			return false;
		}
	}



	public static boolean checkPrintLayoutTabBodyFieldsInCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(printLayouBodyDetailsTab));
		printLayouBodyDetailsTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(printlayoutBodyVoucherType));

		boolean actprintlayoutBodyVoucherType  	=printlayoutBodyVoucherType.isDisplayed();
		boolean actprintLayoutSaveBtn    		=printLayoutSaveBtn.isDisplayed();
		boolean actprintLayoutAddBtn    		=printLayoutAddBtn.isDisplayed();
		boolean actprintLayoutPreviewBtn    	=printLayoutPreviewBtn.isDisplayed();
		boolean actprintLayoutCloseBtn    		=printLayoutCloseBtn.isDisplayed();

		boolean expprintlayoutBodyVoucherType  	=true;
		boolean expprintLayoutSaveBtn    		=true;
		boolean expprintLayoutAddBtn    		=true;
		boolean expprintLayoutPreviewBtn    	=true;
		boolean expprintLayoutCloseBtn    		=true;

		System.out.println("**********************************checkPrintLayoutTabBodyFieldsInCustomizeMaster******************************");

		System.out.println("printlayoutBodyVoucherType   : "+actprintlayoutBodyVoucherType +" Value Expected : "+expprintlayoutBodyVoucherType);
		System.out.println("printLayoutSaveBtn           : "+actprintLayoutSaveBtn         +" Value Expected : "+expprintLayoutSaveBtn);
		System.out.println("printLayoutAddBtn            : "+actprintLayoutAddBtn          +" Value Expected : "+expprintLayoutAddBtn);
		System.out.println("printLayoutPreviewBtn        : "+actprintLayoutPreviewBtn      +" Value Expected : "+expprintLayoutPreviewBtn);
		System.out.println("printLayoutCloseBtn          : "+actprintLayoutCloseBtn        +" Value Expected : "+expprintLayoutCloseBtn);

		if(actprintlayoutBodyVoucherType==expprintlayoutBodyVoucherType && actprintLayoutSaveBtn==expprintLayoutSaveBtn
				&& actprintLayoutAddBtn==expprintLayoutAddBtn && actprintLayoutPreviewBtn==expprintLayoutPreviewBtn
				&& actprintLayoutCloseBtn==expprintLayoutCloseBtn)
		{
			excelReader.setCellData(xlfile, "Sheet1", 293, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 293, 9, resFail);
			return false;
		}
	}



	public static boolean checkUniqueContraintCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountMasterFieldsUniqueConstraintsOption));
		accountMasterFieldsUniqueConstraintsOption.click();



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UniqueConstraintsAddBtn));

		boolean actUniqueConstraintsAddBtn  						=UniqueConstraintsAddBtn.isDisplayed();
		boolean actUniqueConstraintsDeleteBtn  						=UniqueConstraintsDeleteBtn.isDisplayed();
		boolean actUniqueConstraintsCloseBtn  						=UniqueConstraintsCloseBtn.isDisplayed();
		boolean actConstraintNameTxt  								=ConstraintNameTxt.isDisplayed();
		boolean actUniqueConstraints_TabsDropdown  					=UniqueConstraints_TabsDropdown.isDisplayed();
		boolean actaccountUniqueConstraints_Main_NameChekbox  		=accountUniqueConstraints_Main_NameChekbox.isDisplayed();
		boolean actaccountUniqueConstraints_Main_CodeChekbox  		=accountUniqueConstraints_Main_CodeChekbox.isDisplayed();
		boolean actaccountUniqueConstraints_Main_AccountTypeCheckbox=accountUniqueConstraints_Main_AccountTypeCheckbox.isDisplayed();
		boolean actaccountUniqueConstraints_Main_CreditLimitCheckBox=accountUniqueConstraints_Main_CreditLimitCheckBox.isDisplayed();
		boolean actaccountUniqueConstraints_Main_CreditDays  		=accountUniqueConstraints_Main_CreditDays.isDisplayed();
		boolean actUniqueConstraints_HeaderExpansionBtn  			=UniqueConstraints_HeaderExpansionBtn.isDisplayed();
		boolean actUniqueConstraints_BodyExpansionBtn  				=UniqueConstraints_BodyExpansionBtn.isDisplayed();

		boolean expUniqueConstraintsAddBtn  						=true;
		boolean expUniqueConstraintsDeleteBtn  						=true;
		boolean expUniqueConstraintsCloseBtn  						=true;
		boolean expConstraintNameTxt  								=true;
		boolean expUniqueConstraints_TabsDropdown  					=true;
		boolean expaccountUniqueConstraints_Main_NameChekbox  		=true;
		boolean expaccountUniqueConstraints_Main_CodeChekbox  		=true;
		boolean expaccountUniqueConstraints_Main_AccountTypeCheckbox=true;
		boolean expaccountUniqueConstraints_Main_CreditLimitCheckBox=true;
		boolean expaccountUniqueConstraints_Main_CreditDays  		=true;
		boolean expUniqueConstraints_HeaderExpansionBtn  			=true;
		boolean expUniqueConstraints_BodyExpansionBtn  				=true;

		System.out.println("***************************************************checkUniqueContraintCustomizeMaster********************************");

		System.out.println("UniqueConstraintsAddBtn                            : "+actUniqueConstraintsAddBtn                           +" Value Expected : "+expUniqueConstraintsAddBtn);
		System.out.println("UniqueConstraintsDeleteBtn                         : "+actUniqueConstraintsDeleteBtn                        +" Value Expected : "+expUniqueConstraintsDeleteBtn);
		System.out.println("UniqueConstraintsCloseBtn                          : "+actUniqueConstraintsCloseBtn                         +" Value Expected : "+expUniqueConstraintsCloseBtn);
		System.out.println("ConstraintNameTxt                                  : "+actConstraintNameTxt                                 +" Value Expected : "+expConstraintNameTxt);
		System.out.println("UniqueConstraints_TabsDropdown                     : "+actUniqueConstraints_TabsDropdown                    +" Value Expected : "+expUniqueConstraints_TabsDropdown);
		System.out.println("accountUniqueConstraints_Main_NameChekbox          : "+actaccountUniqueConstraints_Main_NameChekbox         +" Value Expected : "+expaccountUniqueConstraints_Main_NameChekbox);
		System.out.println("accountUniqueConstraints_Main_CodeChekbox          : "+actaccountUniqueConstraints_Main_CodeChekbox         +" Value Expected : "+expaccountUniqueConstraints_Main_CodeChekbox);
		System.out.println("accountUniqueConstraints_Main_AccountTypeCheckbox  : "+actaccountUniqueConstraints_Main_AccountTypeCheckbox +" Value Expected : "+expaccountUniqueConstraints_Main_AccountTypeCheckbox);
		System.out.println("accountUniqueConstraints_Main_CreditLimitCheckBox  : "+actaccountUniqueConstraints_Main_CreditLimitCheckBox +" Value Expected : "+expaccountUniqueConstraints_Main_CreditLimitCheckBox);
		System.out.println("UniqueConstraints_BodyExpansionBtn                 : "+actUniqueConstraints_BodyExpansionBtn                +" Value Expected : "+expUniqueConstraints_BodyExpansionBtn);
		System.out.println("UniqueConstraints_HeaderExpansionBtn               : "+actUniqueConstraints_HeaderExpansionBtn              +" Value Expected : "+expUniqueConstraints_HeaderExpansionBtn);
		System.out.println("UniqueConstraints_BodyExpansionBtn                 : "+actUniqueConstraints_BodyExpansionBtn                +" Value Expected : "+expUniqueConstraints_BodyExpansionBtn);

		if(actUniqueConstraintsAddBtn==expUniqueConstraintsAddBtn && actUniqueConstraintsDeleteBtn==expUniqueConstraintsDeleteBtn
				&& actUniqueConstraintsCloseBtn==expUniqueConstraintsCloseBtn && actConstraintNameTxt==expConstraintNameTxt
				&& actUniqueConstraints_TabsDropdown==expUniqueConstraints_TabsDropdown
				&& actaccountUniqueConstraints_Main_NameChekbox==expaccountUniqueConstraints_Main_NameChekbox
				&& actaccountUniqueConstraints_Main_CodeChekbox==expaccountUniqueConstraints_Main_CodeChekbox
				&& actaccountUniqueConstraints_Main_AccountTypeCheckbox==expaccountUniqueConstraints_Main_AccountTypeCheckbox
				&& actaccountUniqueConstraints_Main_CreditLimitCheckBox==expaccountUniqueConstraints_Main_CreditLimitCheckBox
				&& actaccountUniqueConstraints_Main_CreditDays==expaccountUniqueConstraints_Main_CreditDays 
				&& actUniqueConstraints_HeaderExpansionBtn==expUniqueConstraints_HeaderExpansionBtn
				&& actUniqueConstraints_BodyExpansionBtn==expUniqueConstraints_BodyExpansionBtn)
		{
			excelReader.setCellData(xlfile, "Sheet1", 294, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 294, 9, resFail);
			return false;
		}
	}


	public static boolean checkHeaderFieldsUniqueContraintCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UniqueConstraints_HeaderExpansionBtn));
		UniqueConstraints_HeaderExpansionBtn.click();



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UniqueConstraints_Header_ChequeDiscountLimitChekbox));

		boolean actUniqueConstraints_Header_ChequeDiscountLimitChekbox =UniqueConstraints_Header_ChequeDiscountLimitChekbox.isDisplayed();
		boolean actUniqueConstraints_Header_RateOfInterestChekbox  	=UniqueConstraints_Header_RateOfInterestChekbox.isDisplayed();
		boolean actUniqueConstraintsCloseBtn  							=UniqueConstraintsCloseBtn.isDisplayed();
		boolean actUniqueConstraints_Header_PDCDiscountedChekbox  		=UniqueConstraints_Header_PDCDiscountedChekbox.isDisplayed();

		boolean expUniqueConstraints_Header_ChequeDiscountLimitChekbox =true;
		boolean expUniqueConstraints_Header_RateOfInterestChekbox  	=true;
		boolean expUniqueConstraintsCloseBtn  							=true;
		boolean expUniqueConstraints_Header_PDCDiscountedChekbox  		=true;

		System.out.println("*************************************checkHeaderFieldsUniqueContraintCustomizeMaster************************************************");

		System.out.println("UniqueConstraints_Header_ChequeDiscountLimitChekbox : "+actUniqueConstraints_Header_ChequeDiscountLimitChekbox +" Value Expected : "+expUniqueConstraints_Header_ChequeDiscountLimitChekbox);
		System.out.println("UniqueConstraints_Header_RateOfInterestChekbox      : "+actUniqueConstraints_Header_RateOfInterestChekbox      +" Value Expected : "+expUniqueConstraints_Header_RateOfInterestChekbox);
		System.out.println("UniqueConstraintsCloseBtn                           : "+actUniqueConstraintsCloseBtn                           +" Value Expected : "+expUniqueConstraintsCloseBtn);
		System.out.println("UniqueConstraints_Header_PDCDiscountedChekbox       : "+actUniqueConstraints_Header_PDCDiscountedChekbox       +" Value Expected : "+expUniqueConstraints_Header_PDCDiscountedChekbox);

		if(actUniqueConstraints_Header_ChequeDiscountLimitChekbox==expUniqueConstraints_Header_ChequeDiscountLimitChekbox
				&& actUniqueConstraints_Header_RateOfInterestChekbox==expUniqueConstraints_Header_RateOfInterestChekbox
				&& actUniqueConstraintsCloseBtn==expUniqueConstraintsCloseBtn
				&& actUniqueConstraints_Header_PDCDiscountedChekbox==expUniqueConstraints_Header_PDCDiscountedChekbox)
		{
			excelReader.setCellData(xlfile, "Sheet1", 295, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 295, 9, resFail);
			return false;
		}
	}



	public static boolean checkRulesInCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(RulesOption));
		RulesOption.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountRules_SaveBtn));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountRules_NewBtn));

		boolean actaccountRules_SaveBtn   		=accountRules_SaveBtn.isDisplayed();
		boolean actaccountRules_NewBtn   		=accountRules_NewBtn.isDisplayed();
		boolean actaccountRules_DeleteBtn   	=accountRules_DeleteBtn.isDisplayed();
		boolean actaccountRules_CloseBtn   		=accountRules_CloseBtn.isDisplayed();
		boolean actRules_RuleNameText  	 		=Rules_RuleNameText.isDisplayed();
		boolean actRules_CreatingGroupChekbox   =Rules_CreatingGroupChekbox.isDisplayed();
		boolean actRules_NewRecordChekbox   	=Rules_NewRecordChekbox.isDisplayed();
		boolean actRules_EditChekbox   			=Rules_EditChekbox.isDisplayed();
		boolean actRules_LoadChekbox   			=Rules_LoadChekbox.isDisplayed();
		boolean actRules_BeforeSaveChekbox   	=Rules_BeforeSaveChekbox.isDisplayed();
		boolean actRules_OnLeaveChekbox   		=Rules_OnLeaveChekbox.isDisplayed();
		boolean actRules_BeforeDeleteChekbox   	=Rules_BeforeDeleteChekbox.isDisplayed();
		boolean actRules_OnEnterChekbox   		=Rules_OnEnterChekbox.isDisplayed();

		boolean expaccountRules_SaveBtn   		=true;
		boolean expaccountRules_NewBtn   		=true;
		boolean expaccountRules_DeleteBtn   	=true;
		boolean expaccountRules_CloseBtn   		=true;
		boolean expRules_RuleNameText  	 		=true;
		boolean expRules_CreatingGroupChekbox   =true;
		boolean expRules_NewRecordChekbox   	=true;
		boolean expRules_EditChekbox   			=true;
		boolean expRules_LoadChekbox   			=true;
		boolean expRules_BeforeSaveChekbox   	=true;
		boolean expRules_OnLeaveChekbox   		=true;
		boolean expRules_BeforeDeleteChekbox   	=true;
		boolean expRules_OnEnterChekbox   		=true;

		System.out.println("********************************checkRulesInCustomizeMaster*******************************");

		System.out.println("accountRules_SaveBtn         : "+actaccountRules_SaveBtn       +" Value Expected : "+expaccountRules_SaveBtn);
		System.out.println("accountRules_NewBtn          : "+actaccountRules_NewBtn        +" Value Expected : "+expaccountRules_NewBtn);
		System.out.println("accountRules_DeleteBtn       : "+actaccountRules_DeleteBtn     +" Value Expected : "+expaccountRules_DeleteBtn);
		System.out.println("accountRules_CloseBtn        : "+actaccountRules_CloseBtn      +" Value Expected : "+expaccountRules_CloseBtn);
		System.out.println("Rules_RuleNameText           : "+actRules_RuleNameText         +" Value Expected : "+expRules_RuleNameText);
		System.out.println("Rules_CreatingGroupChekbox   : "+actRules_CreatingGroupChekbox +" Value Expected : "+expRules_CreatingGroupChekbox);
		System.out.println("Rules_NewRecordChekbox       : "+actRules_NewRecordChekbox     +" Value Expected : "+expRules_NewRecordChekbox);
		System.out.println("Rules_EditChekbox            : "+actRules_EditChekbox          +" Value Expected : "+expRules_EditChekbox);
		System.out.println("Rules_LoadChekbox            : "+actRules_LoadChekbox          +" Value Expected : "+expRules_LoadChekbox);
		System.out.println("Rules_BeforeSaveChekbox      : "+actRules_BeforeSaveChekbox    +" Value Expected : "+expRules_BeforeSaveChekbox);
		System.out.println("Rules_OnLeaveChekbox         : "+actRules_OnLeaveChekbox       +" Value Expected : "+expRules_OnLeaveChekbox);
		System.out.println("Rules_BeforeDeleteChekbox    : "+actRules_BeforeDeleteChekbox  +" Value Expected : "+expRules_BeforeDeleteChekbox);
		System.out.println("Rules_OnEnterChekbox         : "+actRules_OnEnterChekbox       +" Value Expected : "+expRules_OnEnterChekbox);

		if(actaccountRules_SaveBtn==expaccountRules_SaveBtn && actaccountRules_NewBtn==expaccountRules_NewBtn
				&& actaccountRules_DeleteBtn==expaccountRules_DeleteBtn && actaccountRules_CloseBtn==expaccountRules_CloseBtn
				&& actRules_RuleNameText==expRules_RuleNameText && actRules_CreatingGroupChekbox==expRules_CreatingGroupChekbox
				&& actRules_NewRecordChekbox==expRules_NewRecordChekbox && actRules_EditChekbox==expRules_EditChekbox
				&& actRules_LoadChekbox==expRules_LoadChekbox && actRules_BeforeSaveChekbox==expRules_BeforeSaveChekbox
				&& actRules_OnLeaveChekbox==expRules_OnLeaveChekbox && actRules_BeforeDeleteChekbox==expRules_BeforeDeleteChekbox
				&& actRules_OnEnterChekbox==expRules_OnEnterChekbox)
		{
			excelReader.setCellData(xlfile, "Sheet1", 296, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 296, 9, resFail);
			return false;
		}
	}


	public static boolean checkExternalModulesInCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rules_ExternalModules));
		rules_ExternalModules.click();



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rules_ExternalModulesOnEventDropdown));

		boolean actrules_ExternalModulesOnEventDropdown  	=rules_ExternalModulesOnEventDropdown.isDisplayed();
		boolean actrules_ExternalModulesButtonCaption  		=rules_ExternalModulesButtonCaption.isDisplayed();
		boolean actrules_ExternalModules_ModuleTypeBtn  	=rules_ExternalModules_ModuleTypeBtn.isDisplayed();
		boolean actrules_ExternalModules_ModuleNameDropdown =rules_ExternalModules_ModuleNameDropdown.isDisplayed();
		boolean actrules_ExternalModulesClassNameDropdown  	=rules_ExternalModulesClassNameDropdown.isDisplayed();
		boolean actrules_ExternalModulesUpdateBtn  			=rules_ExternalModulesUpdateBtn.isDisplayed();

		boolean exprules_ExternalModulesOnEventDropdown  	=true;
		boolean exprules_ExternalModulesButtonCaption  		=true;
		boolean exprules_ExternalModules_ModuleTypeBtn  	=true;
		boolean exprules_ExternalModules_ModuleNameDropdown =true;
		boolean exprules_ExternalModulesClassNameDropdown  	=true;
		boolean exprules_ExternalModulesUpdateBtn  			=true;

		System.out.println("*************************************checkExternalModulesInCustomizeMaster********************************");

		System.out.println("rules_ExternalModulesOnEventDropdown      : "+actrules_ExternalModulesOnEventDropdown     +" Value Expected : "+exprules_ExternalModulesOnEventDropdown);
		System.out.println("rules_ExternalModulesButtonCaption        : "+actrules_ExternalModulesButtonCaption       +" Value Expected : "+exprules_ExternalModulesButtonCaption);
		System.out.println("rules_ExternalModules_ModuleTypeBtn       : "+actrules_ExternalModules_ModuleTypeBtn      +" Value Expected : "+exprules_ExternalModules_ModuleTypeBtn);
		System.out.println("rules_ExternalModules_ModuleNameDropdown  : "+actrules_ExternalModules_ModuleNameDropdown +" Value Expected : "+exprules_ExternalModules_ModuleNameDropdown);
		System.out.println("rules_ExternalModulesClassNameDropdown    : "+actrules_ExternalModulesClassNameDropdown   +" Value Expected : "+exprules_ExternalModulesClassNameDropdown);
		System.out.println("rules_ExternalModulesUpdateBtn            : "+actrules_ExternalModulesUpdateBtn           +" Value Expected : "+exprules_ExternalModulesUpdateBtn);

		if(actrules_ExternalModulesOnEventDropdown==exprules_ExternalModulesOnEventDropdown 
				&& actrules_ExternalModulesButtonCaption==exprules_ExternalModulesButtonCaption
				&& actrules_ExternalModules_ModuleTypeBtn==exprules_ExternalModules_ModuleTypeBtn 
				&& actrules_ExternalModules_ModuleNameDropdown==exprules_ExternalModules_ModuleNameDropdown
				&& actrules_ExternalModulesClassNameDropdown==exprules_ExternalModulesClassNameDropdown 
				&& actrules_ExternalModulesUpdateBtn==exprules_ExternalModulesUpdateBtn	)
		{
			excelReader.setCellData(xlfile, "Sheet1", 297, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 297, 9, resFail);
			return false;
		}
	}



	public static boolean checkInfoPanelInCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemInfoPanelCustomizationTab));
		itemInfoPanelCustomizationTab.click(); 


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(iteminfoPanelCust_AddBtn));

		boolean actiteminfoPanelCust_AddBtn 	 	=iteminfoPanelCust_AddBtn.isDisplayed();
		boolean actinfoPanelCust_DeleteBtn  		=infoPanelCust_DeleteBtn.isDisplayed();
		boolean actinfoPanelCust_CloseBtn  			=infoPanelCust_CloseBtn.isDisplayed();
		boolean actinfoPanelCustCreditHistory  		=infoPanelCustCreditHistory.isDisplayed();
		boolean actinfoPanelCustAgeingAnalysis  	=infoPanelCustAgeingAnalysis.isDisplayed();
		boolean actinfoPanelCustAgeingAnalysisBase  =infoPanelCustAgeingAnalysisBase.isDisplayed();
		boolean actinfoPanelCustAgeingAnalysisLocal =infoPanelCustAgeingAnalysisLocal.isDisplayed();
		boolean actinfoPanelAuthorization  			=infoPanelAuthorization.isDisplayed();

		boolean expiteminfoPanelCust_AddBtn 	 	=true;
		boolean expinfoPanelCust_DeleteBtn  		=true;
		boolean expinfoPanelCust_CloseBtn  			=true;
		boolean expinfoPanelCustCreditHistory  		=true;
		boolean expinfoPanelCustAgeingAnalysis  	=true;
		boolean expinfoPanelCustAgeingAnalysisBase  =true;
		boolean expinfoPanelCustAgeingAnalysisLocal =true;
		boolean expinfoPanelAuthorization  			=true;

		System.out.println("**********************************************checkInfoPanelInCustomizeMaster*********************************");

		System.out.println("iteminfoPanelCust_AddBtn         : "+actiteminfoPanelCust_AddBtn         +" Value Expected : "+expiteminfoPanelCust_AddBtn);
		System.out.println("infoPanelCust_DeleteBtn          : "+actinfoPanelCust_DeleteBtn          +" Value Expected : "+expinfoPanelCust_DeleteBtn);
		System.out.println("infoPanelCust_CloseBtn           : "+actinfoPanelCust_CloseBtn           +" Value Expected : "+expinfoPanelCust_CloseBtn);
		System.out.println("infoPanelCustCreditHistory       : "+actinfoPanelCustCreditHistory       +" Value Expected : "+expinfoPanelCustCreditHistory);
		System.out.println("infoPanelCustAgeingAnalysis      : "+actinfoPanelCustAgeingAnalysis      +" Value Expected : "+expinfoPanelCustAgeingAnalysis);
		System.out.println("infoPanelCustAgeingAnalysisBase  : "+actinfoPanelCustAgeingAnalysisBase  +" Value Expected : "+expinfoPanelCustAgeingAnalysisBase);
		System.out.println("infoPanelCustAgeingAnalysisLocal : "+actinfoPanelCustAgeingAnalysisLocal +" Value Expected : "+expinfoPanelCustAgeingAnalysisLocal);
		System.out.println("infoPanelAuthorization           : "+actinfoPanelAuthorization           +" Value Expected : "+expinfoPanelAuthorization);

		if(actiteminfoPanelCust_AddBtn==expiteminfoPanelCust_AddBtn && actinfoPanelCust_DeleteBtn==expinfoPanelCust_DeleteBtn
				&& actinfoPanelCust_CloseBtn==expinfoPanelCust_CloseBtn && actinfoPanelCustCreditHistory==expinfoPanelCustCreditHistory
				&& actinfoPanelCustAgeingAnalysis==expinfoPanelCustAgeingAnalysis && actinfoPanelCustAgeingAnalysisBase==expinfoPanelCustAgeingAnalysisBase
				&& actinfoPanelCustAgeingAnalysisLocal==expinfoPanelCustAgeingAnalysisLocal && actinfoPanelAuthorization==expinfoPanelAuthorization)
		{
			excelReader.setCellData(xlfile, "Sheet1", 298, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 298, 9, resFail);
			return false;
		}
	}



	public static boolean checkReportsInCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountReportsTab));
		accountReportsTab.click();



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountReports_SaveBtn));

		boolean actaccountReports_SaveBtn   						=accountReports_SaveBtn.isDisplayed();
		boolean actaccountReports_CloseBtn   						=accountReports_CloseBtn.isDisplayed();
		boolean actreports_MasterInfoChkBox   						=reports_MasterInfoChkBox.isDisplayed();
		boolean actreports_ABCAnalysisAmountChkBox   				=reports_ABCAnalysisAmountChkBox.isDisplayed();
		boolean actreports_BankBookChkBox   						=reports_BankBookChkBox.isDisplayed();
		boolean actreports_BankreconciliationstatementChkBox   		=reports_BankreconciliationstatementChkBox.isDisplayed();
		boolean actreports_CashBookChkBox   						=reports_CashBookChkBox.isDisplayed();
		boolean actreports_ComparativeAnalysisChkBox   				=reports_ComparativeAnalysisChkBox.isDisplayed();
		boolean actreports_CustomerAgeingDetailsAnalysisChkBox   	=reports_CustomerAgeingDetailsAnalysisChkBox.isDisplayed();
		boolean actreports_CustomerageingdetailbyduedateChkBox   	=reports_CustomerageingdetailbyduedateChkBox.isDisplayed();
		boolean actreports_CustomerageingsummaryanalysisChkBox   	=reports_CustomerageingsummaryanalysisChkBox.isDisplayed();
		boolean actreports_CustomerbillwisesummaryChkBox   			=reports_CustomerbillwisesummaryChkBox.isDisplayed();
		boolean actreports_CustomerduedateanalysisChkBox   			=reports_CustomerduedateanalysisChkBox.isDisplayed();
		boolean actreports_CustomerlistingofoutstandingbillsChkBox  =reports_CustomerlistingofoutstandingbillsChkBox.isDisplayed();
		boolean actreports_CustomeroverdueanalysisChkBox   			=reports_CustomeroverdueanalysisChkBox.isDisplayed();
		boolean actreports_CustomeroverduesummaryChkBox   			=reports_CustomeroverduesummaryChkBox.isDisplayed();
		boolean actreports_CustomerstatementsChkBox   				=reports_CustomerstatementsChkBox.isDisplayed();
		boolean actreports_CustomersummaryageingbyduedateChkBox   	=reports_CustomersummaryageingbyduedateChkBox.isDisplayed();
		boolean actreports_IncomeExpenseTrendChkBox   				=reports_IncomeExpenseTrendChkBox.isDisplayed();
		boolean actreports_InterestcalculationChkBox   				=reports_InterestcalculationChkBox.isDisplayed();
		boolean actreports_LedgerChkBox   							=reports_LedgerChkBox.isDisplayed();
		boolean actreports_LedgerdetailChkBox   					=reports_LedgerdetailChkBox.isDisplayed();
		boolean actreports_MonthlySalesChkBox   					=reports_MonthlySalesChkBox.isDisplayed();
		boolean actreports_PeakandlowbalanceamountChkBox   			=reports_PeakandlowbalanceamountChkBox.isDisplayed();
		boolean actreports_PettycashbookChkBox   					=reports_PettycashbookChkBox.isDisplayed();
		boolean actreports_PurchaseregisterChkBox   				=reports_PurchaseregisterChkBox.isDisplayed();
		boolean actreports_PurchasereturnregisterChkBox   			=reports_PurchasereturnregisterChkBox.isDisplayed();
		boolean actreports_PurchasesgroupedbydepartmentChkBox   	=reports_PurchasesgroupedbydepartmentChkBox.isDisplayed();
		boolean actreports_PurchasesgroupedbyItemChkBox   			=reports_PurchasesgroupedbyItemChkBox.isDisplayed();
		boolean actreports_PurchasesgroupedbyvendorChkBox   		=reports_PurchasesgroupedbyvendorChkBox.isDisplayed();
		boolean actreports_SalesdaybookChkBox   					=reports_SalesdaybookChkBox.isDisplayed();
		boolean actreports_SalesgroupedbycustomerChkBox   			=reports_SalesgroupedbycustomerChkBox.isDisplayed();
		boolean actreports_salesgroupedbydepartmentrChkBox   		=reports_salesgroupedbydepartmentrChkBox.isDisplayed();
		boolean actreports_SalesgroupedbyItemChkBox   				=reports_SalesgroupedbyItemChkBox.isDisplayed();
		boolean actreports_SalesreturnregisterChkBox   				=reports_SalesreturnregisterChkBox.isDisplayed();
		boolean actreports_SchedulesChkBox   						=reports_SchedulesChkBox.isDisplayed();
		boolean actreports_SubledgerChkBox   						=reports_SubledgerChkBox.isDisplayed();
		boolean actreports_SummarysalesregisterChkBox   			=reports_SummarysalesregisterChkBox.isDisplayed();
		boolean actreports_TopCustomersChkBox   					=reports_TopCustomersChkBox.isDisplayed();
		boolean actreports_TradingaccountrChkBox   					=reports_TradingaccountrChkBox.isDisplayed();
		boolean actreports_TransactionstypeanalysisChkBox   		=reports_TransactionstypeanalysisChkBox.isDisplayed();
		boolean actreports_VendorageingdetailanalysisChkBox   		=reports_VendorageingdetailanalysisChkBox.isDisplayed();
		boolean actreports_VendorageingdetailbyduedateChkBox   		=reports_VendorageingdetailbyduedateChkBox.isDisplayed();
		boolean actreports_VendorageingsummaryanalysisChkBox   		=reports_VendorageingsummaryanalysisChkBox.isDisplayed();
		boolean actreports_VendorbillwisesummaryChkBox  		 	=reports_VendorbillwisesummaryChkBox.isDisplayed();
		boolean actreports_VendorduedateanalysisChkBox   			=reports_VendorduedateanalysisChkBox.isDisplayed();
		boolean actreports_VendorlistingofoutstandingbillsChkBox   	=reports_VendorlistingofoutstandingbillsChkBox.isDisplayed();
		boolean actreports_VendoroverdueanalysisChkBox   			=reports_VendoroverdueanalysisChkBox.isDisplayed();
		boolean actreports_VendoroverduesummaryChkBox   			=reports_VendoroverduesummaryChkBox.isDisplayed();
		boolean actreports_VendorstatementsChkBox   				=reports_VendorstatementsChkBox.isDisplayed();
		boolean actreports_VendorsummaryageingbyduedateChkBox   	=reports_VendorsummaryageingbyduedateChkBox.isDisplayed();

		boolean expaccountReports_SaveBtn   						=true;
		boolean expaccountReports_CloseBtn   						=true;
		boolean expreports_MasterInfoChkBox   						=true;
		boolean expreports_ABCAnalysisAmountChkBox   				=true;
		boolean expreports_BankBookChkBox   						=true;
		boolean expreports_BankreconciliationstatementChkBox   		=true;
		boolean expreports_CashBookChkBox   						=true;
		boolean expreports_ComparativeAnalysisChkBox   				=true;
		boolean expreports_CustomerAgeingDetailsAnalysisChkBox   	=true;
		boolean expreports_CustomerageingdetailbyduedateChkBox   	=true;
		boolean expreports_CustomerageingsummaryanalysisChkBox   	=true;
		boolean expreports_CustomerbillwisesummaryChkBox   			=true;
		boolean expreports_CustomerduedateanalysisChkBox   			=true;
		boolean expreports_CustomerlistingofoutstandingbillsChkBox  =true;
		boolean expreports_CustomeroverdueanalysisChkBox   			=true;
		boolean expreports_CustomeroverduesummaryChkBox   			=true;
		boolean expreports_CustomerstatementsChkBox   				=true;
		boolean expreports_CustomersummaryageingbyduedateChkBox   	=true;
		boolean expreports_IncomeExpenseTrendChkBox   				=true;
		boolean expreports_InterestcalculationChkBox   				=true;
		boolean expreports_LedgerChkBox   							=true;
		boolean expreports_LedgerdetailChkBox   					=true;
		boolean expreports_MonthlySalesChkBox   					=true;
		boolean expreports_PeakandlowbalanceamountChkBox   			=true;
		boolean expreports_PettycashbookChkBox   					=true;
		boolean expreports_PurchaseregisterChkBox   				=true;
		boolean expreports_PurchasereturnregisterChkBox   			=true;
		boolean expreports_PurchasesgroupedbydepartmentChkBox   	=true;
		boolean expreports_PurchasesgroupedbyItemChkBox   			=true;
		boolean expreports_PurchasesgroupedbyvendorChkBox   		=true;
		boolean expreports_SalesdaybookChkBox   					=true;
		boolean expreports_SalesgroupedbycustomerChkBox   			=true;
		boolean expreports_salesgroupedbydepartmentrChkBox   		=true;
		boolean expreports_SalesgroupedbyItemChkBox   				=true;
		boolean expreports_SalesreturnregisterChkBox   				=true;
		boolean expreports_SchedulesChkBox   						=true;
		boolean expreports_SubledgerChkBox   						=true;
		boolean expreports_SummarysalesregisterChkBox   			=true;
		boolean expreports_TopCustomersChkBox   					=true;
		boolean expreports_TradingaccountrChkBox   					=true;
		boolean expreports_TransactionstypeanalysisChkBox   		=true;
		boolean expreports_VendorageingdetailanalysisChkBox   		=true;
		boolean expreports_VendorageingdetailbyduedateChkBox   		=true;
		boolean expreports_VendorageingsummaryanalysisChkBox   		=true;
		boolean expreports_VendorbillwisesummaryChkBox  		 	=true;
		boolean expreports_VendorduedateanalysisChkBox   			=true;
		boolean expreports_VendorlistingofoutstandingbillsChkBox   	=true;
		boolean expreports_VendoroverdueanalysisChkBox   			=true;
		boolean expreports_VendoroverduesummaryChkBox   			=true;
		boolean expreports_VendorstatementsChkBox   				=true;
		boolean expreports_VendorsummaryageingbyduedateChkBox   	=true;

		System.out.println("****************************************checkReportsInCustomizeMaster***************************************");

		System.out.println("accountReports_SaveBtn                           : "+actaccountReports_SaveBtn                           +" Value Expected : "+expaccountReports_SaveBtn);
		System.out.println("accountReports_CloseBtn                          : "+actaccountReports_CloseBtn                          +" Value Expected : "+expaccountReports_CloseBtn);
		System.out.println("reports_MasterInfoChkBox                         : "+actreports_MasterInfoChkBox                         +" Value Expected : "+expreports_MasterInfoChkBox);
		System.out.println("reports_ABCAnalysisAmountChkBox                  : "+actreports_ABCAnalysisAmountChkBox                  +" Value Expected : "+expreports_ABCAnalysisAmountChkBox);
		System.out.println("reports_BankBookChkBox                           : "+actreports_BankBookChkBox                           +" Value Expected : "+expreports_BankBookChkBox);
		System.out.println("reports_BankreconciliationstatementChkBox        : "+actreports_BankreconciliationstatementChkBox        +" Value Expected : "+expreports_BankreconciliationstatementChkBox);
		System.out.println("reports_CashBookChkBox                           : "+actreports_CashBookChkBox                           +" Value Expected : "+expreports_CashBookChkBox);
		System.out.println("reports_ComparativeAnalysisChkBox                : "+actreports_ComparativeAnalysisChkBox                +" Value Expected : "+expreports_ComparativeAnalysisChkBox);
		System.out.println("reports_CustomerAgeingDetailsAnalysisChkBox      : "+actreports_CustomerAgeingDetailsAnalysisChkBox      +" Value Expected : "+expreports_CustomerAgeingDetailsAnalysisChkBox);
		System.out.println("reports_CustomerageingdetailbyduedateChkBox      : "+actreports_CustomerageingdetailbyduedateChkBox      +" Value Expected : "+expreports_CustomerageingdetailbyduedateChkBox);
		System.out.println("reports_CustomerageingsummaryanalysisChkBox      : "+actreports_CustomerageingsummaryanalysisChkBox      +" Value Expected : "+expreports_CustomerageingsummaryanalysisChkBox);
		System.out.println("reports_CustomerbillwisesummaryChkBox            : "+actreports_CustomerbillwisesummaryChkBox            +" Value Expected : "+expreports_CustomerbillwisesummaryChkBox);
		System.out.println("reports_CustomerduedateanalysisChkBox            : "+actreports_CustomerduedateanalysisChkBox            +" Value Expected : "+expreports_CustomerduedateanalysisChkBox);
		System.out.println("reports_CustomerlistingofoutstandingbillsChkBox  : "+actreports_CustomerlistingofoutstandingbillsChkBox  +" Value Expected : "+expreports_CustomerlistingofoutstandingbillsChkBox);
		System.out.println("reports_CustomeroverdueanalysisChkBox            : "+actreports_CustomeroverdueanalysisChkBox            +" Value Expected : "+expreports_CustomeroverdueanalysisChkBox);
		System.out.println("reports_CustomeroverduesummaryChkBox             : "+actreports_CustomeroverduesummaryChkBox             +" Value Expected : "+expreports_CustomeroverduesummaryChkBox);
		System.out.println("reports_CustomerstatementsChkBox                 : "+actreports_CustomerstatementsChkBox                 +" Value Expected : "+expreports_CustomerstatementsChkBox);
		System.out.println("reports_CustomersummaryageingbyduedateChkBox     : "+actreports_CustomersummaryageingbyduedateChkBox     +" Value Expected : "+expreports_CustomersummaryageingbyduedateChkBox);
		System.out.println("reports_IncomeExpenseTrendChkBox                 : "+actreports_IncomeExpenseTrendChkBox                 +" Value Expected : "+expreports_IncomeExpenseTrendChkBox);
		System.out.println("reports_InterestcalculationChkBox                : "+actreports_InterestcalculationChkBox                +" Value Expected : "+expreports_InterestcalculationChkBox);
		System.out.println("reports_LedgerChkBox                             : "+actreports_LedgerChkBox                             +" Value Expected : "+expreports_LedgerChkBox);
		System.out.println("reports_LedgerdetailChkBox                       : "+actreports_LedgerdetailChkBox                       +" Value Expected : "+expreports_LedgerdetailChkBox);
		System.out.println("reports_MonthlySalesChkBox                       : "+actreports_MonthlySalesChkBox                       +" Value Expected : "+expreports_MonthlySalesChkBox);
		System.out.println("reports_PeakandlowbalanceamountChkBox            : "+actreports_PeakandlowbalanceamountChkBox            +" Value Expected : "+expreports_PeakandlowbalanceamountChkBox);
		System.out.println("reports_PettycashbookChkBox                      : "+actreports_PettycashbookChkBox                      +" Value Expected : "+expreports_PettycashbookChkBox);
		System.out.println("reports_PurchaseregisterChkBox                   : "+actreports_PurchaseregisterChkBox                   +" Value Expected : "+expreports_PurchaseregisterChkBox);
		System.out.println("reports_PurchasereturnregisterChkBox             : "+actreports_PurchasereturnregisterChkBox             +" Value Expected : "+expreports_PurchasereturnregisterChkBox);
		System.out.println("reports_PurchasesgroupedbydepartmentChkBox       : "+actreports_PurchasesgroupedbydepartmentChkBox       +" Value Expected : "+expreports_PurchasesgroupedbydepartmentChkBox);
		System.out.println("reports_PurchasesgroupedbyItemChkBox             : "+actreports_PurchasesgroupedbyItemChkBox             +" Value Expected : "+expreports_PurchasesgroupedbyItemChkBox);
		System.out.println("reports_PurchasesgroupedbyvendorChkBox           : "+actreports_PurchasesgroupedbyvendorChkBox           +" Value Expected : "+expreports_PurchasesgroupedbyvendorChkBox);
		System.out.println("reports_SalesdaybookChkBox                       : "+actreports_SalesdaybookChkBox                       +" Value Expected : "+expreports_SalesdaybookChkBox);
		System.out.println("reports_SalesgroupedbycustomerChkBox             : "+actreports_SalesgroupedbycustomerChkBox             +" Value Expected : "+expreports_SalesgroupedbycustomerChkBox);
		System.out.println("reports_salesgroupedbydepartmentrChkBox          : "+actreports_salesgroupedbydepartmentrChkBox          +" Value Expected : "+expreports_salesgroupedbydepartmentrChkBox);
		System.out.println("reports_SalesgroupedbyItemChkBox                 : "+actreports_SalesgroupedbyItemChkBox                 +" Value Expected : "+expreports_SalesgroupedbyItemChkBox);
		System.out.println("reports_SalesreturnregisterChkBox                : "+actreports_SalesreturnregisterChkBox                +" Value Expected : "+expreports_SalesreturnregisterChkBox);
		System.out.println("reports_SchedulesChkBox                          : "+actreports_SchedulesChkBox                          +" Value Expected : "+expreports_SchedulesChkBox);
		System.out.println("reports_SubledgerChkBox                          : "+actreports_SubledgerChkBox                          +" Value Expected : "+expreports_SubledgerChkBox);
		System.out.println("reports_SummarysalesregisterChkBox               : "+actreports_SummarysalesregisterChkBox               +" Value Expected : "+expreports_SummarysalesregisterChkBox);
		System.out.println("reports_TopCustomersChkBox                       : "+actreports_TopCustomersChkBox                       +" Value Expected : "+expreports_TopCustomersChkBox);
		System.out.println("reports_TradingaccountrChkBox                    : "+actreports_TradingaccountrChkBox                    +" Value Expected : "+expreports_TradingaccountrChkBox);
		System.out.println("reports_TransactionstypeanalysisChkBox           : "+actreports_TransactionstypeanalysisChkBox           +" Value Expected : "+expreports_TransactionstypeanalysisChkBox);
		System.out.println("reports_VendorageingdetailanalysisChkBox         : "+actreports_VendorageingdetailanalysisChkBox         +" Value Expected : "+expreports_VendorageingdetailanalysisChkBox);
		System.out.println("reports_VendorageingdetailbyduedateChkBox        : "+actreports_VendorageingdetailbyduedateChkBox        +" Value Expected : "+expreports_VendorageingdetailbyduedateChkBox);
		System.out.println("reports_VendorageingsummaryanalysisChkBox        : "+actreports_VendorageingsummaryanalysisChkBox        +" Value Expected : "+expreports_VendorageingsummaryanalysisChkBox);
		System.out.println("reports_VendorbillwisesummaryChkBox              : "+actreports_VendorbillwisesummaryChkBox              +" Value Expected : "+expreports_VendorbillwisesummaryChkBox);
		System.out.println("reports_VendorduedateanalysisChkBox              : "+actreports_VendorduedateanalysisChkBox              +" Value Expected : "+expreports_VendorduedateanalysisChkBox);
		System.out.println("reports_VendorlistingofoutstandingbillsChkBox    : "+actreports_VendorlistingofoutstandingbillsChkBox    +" Value Expected : "+expreports_VendorlistingofoutstandingbillsChkBox);
		System.out.println("reports_VendoroverdueanalysisChkBox              : "+actreports_VendoroverdueanalysisChkBox              +" Value Expected : "+expreports_VendoroverdueanalysisChkBox);
		System.out.println("reports_VendoroverduesummaryChkBox               : "+actreports_VendoroverduesummaryChkBox               +" Value Expected : "+expreports_VendoroverduesummaryChkBox);
		System.out.println("reports_VendorstatementsChkBox                   : "+actreports_VendorstatementsChkBox                   +" Value Expected : "+expreports_VendorstatementsChkBox);
		System.out.println("reports_VendorsummaryageingbyduedateChkBox       : "+actreports_VendorsummaryageingbyduedateChkBox       +" Value Expected : "+expreports_VendorsummaryageingbyduedateChkBox);


		if(actaccountReports_SaveBtn==expaccountReports_SaveBtn && actaccountReports_CloseBtn==expaccountReports_CloseBtn
				&& actreports_MasterInfoChkBox==expreports_MasterInfoChkBox && actreports_ABCAnalysisAmountChkBox==expreports_ABCAnalysisAmountChkBox
				&& actreports_BankBookChkBox==expreports_BankBookChkBox && actreports_BankreconciliationstatementChkBox==expreports_BankreconciliationstatementChkBox
				&& actreports_CashBookChkBox==expreports_CashBookChkBox && actreports_ComparativeAnalysisChkBox==expreports_ComparativeAnalysisChkBox
				&& actreports_CustomerAgeingDetailsAnalysisChkBox==expreports_CustomerAgeingDetailsAnalysisChkBox
				&& actreports_CustomerageingdetailbyduedateChkBox==expreports_CustomerageingdetailbyduedateChkBox
				&& actreports_CustomerageingsummaryanalysisChkBox==expreports_CustomerageingsummaryanalysisChkBox
				&& actreports_CustomerbillwisesummaryChkBox==expreports_CustomerbillwisesummaryChkBox
				&& actreports_CustomerduedateanalysisChkBox==expreports_CustomerduedateanalysisChkBox
				&& actreports_CustomerlistingofoutstandingbillsChkBox==expreports_CustomerlistingofoutstandingbillsChkBox
				&& actreports_CustomeroverdueanalysisChkBox==expreports_CustomeroverdueanalysisChkBox
				&& actreports_CustomeroverduesummaryChkBox==expreports_CustomeroverduesummaryChkBox
				&& actreports_CustomerstatementsChkBox==expreports_CustomerstatementsChkBox 
				&& actreports_CustomersummaryageingbyduedateChkBox==expreports_CustomersummaryageingbyduedateChkBox
				&& actreports_IncomeExpenseTrendChkBox==expreports_IncomeExpenseTrendChkBox
				&& actreports_InterestcalculationChkBox==expreports_InterestcalculationChkBox
				&& actreports_LedgerChkBox==expreports_LedgerChkBox && actreports_LedgerdetailChkBox==expreports_LedgerdetailChkBox
				&& actreports_MonthlySalesChkBox==expreports_MonthlySalesChkBox && actreports_PeakandlowbalanceamountChkBox==expreports_PeakandlowbalanceamountChkBox
				&& actreports_PettycashbookChkBox==expreports_PettycashbookChkBox && actreports_PurchaseregisterChkBox==expreports_PurchaseregisterChkBox
				&& actreports_PurchasereturnregisterChkBox==expreports_PurchasereturnregisterChkBox
				&& actreports_PurchasesgroupedbydepartmentChkBox==expreports_PurchasesgroupedbydepartmentChkBox
				&& actreports_PurchasesgroupedbyItemChkBox==expreports_PurchasesgroupedbyItemChkBox
				&& actreports_PurchasesgroupedbyvendorChkBox==expreports_PurchasesgroupedbyvendorChkBox
				&& actreports_SalesdaybookChkBox==expreports_SalesdaybookChkBox && actreports_SalesgroupedbycustomerChkBox==expreports_SalesgroupedbycustomerChkBox
				&& actreports_salesgroupedbydepartmentrChkBox==expreports_salesgroupedbydepartmentrChkBox 
				&& actreports_SalesgroupedbyItemChkBox==expreports_SalesgroupedbyItemChkBox
				&& actreports_SalesreturnregisterChkBox==expreports_SalesreturnregisterChkBox && actreports_SchedulesChkBox==expreports_SchedulesChkBox
				&& actreports_SubledgerChkBox==expreports_SubledgerChkBox && actreports_SummarysalesregisterChkBox==expreports_SummarysalesregisterChkBox
				&& actreports_TopCustomersChkBox==expreports_TopCustomersChkBox && actreports_TradingaccountrChkBox==expreports_TradingaccountrChkBox
				&& actreports_TransactionstypeanalysisChkBox==expreports_TransactionstypeanalysisChkBox 
				&& actreports_VendorageingdetailanalysisChkBox==expreports_VendorageingdetailanalysisChkBox
				&& actreports_VendorageingdetailbyduedateChkBox==expreports_VendorageingdetailbyduedateChkBox 
				&& actreports_VendorageingsummaryanalysisChkBox==expreports_VendorageingsummaryanalysisChkBox
				&& actreports_VendorbillwisesummaryChkBox==expreports_VendorbillwisesummaryChkBox
				&& actreports_VendorduedateanalysisChkBox==expreports_VendorduedateanalysisChkBox
				&& actreports_VendorlistingofoutstandingbillsChkBox==expreports_VendorlistingofoutstandingbillsChkBox
				&& actreports_VendoroverdueanalysisChkBox==expreports_VendoroverdueanalysisChkBox
				&& actreports_VendoroverduesummaryChkBox==expreports_VendoroverduesummaryChkBox
				&& actreports_VendorstatementsChkBox==expreports_VendorstatementsChkBox
				&& actreports_VendorsummaryageingbyduedateChkBox==expreports_VendorsummaryageingbyduedateChkBox)
		{
			excelReader.setCellData(xlfile, "Sheet1", 299, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 299, 9, resFail);
			return false;
		}
	}


	public static boolean checkCreateTabsInCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterFieldsOption));
		masterFieldsOption.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTab));

		boolean actcreateTab       =createTab.isDisplayed();
		boolean acttabs_DeleteBtn  =tabs_DeleteBtn.isDisplayed();

		boolean expcreateTab       =true;
		boolean exptabs_DeleteBtn  =true;

		System.out.println("*****************************checkCreateTabsInCustomizeMaster****************************");

		System.out.println("createTab       : "+actcreateTab      +" Value Expected : "+expcreateTab);
		System.out.println("tabs_DeleteBtn  : "+acttabs_DeleteBtn +" Value Expected : "+exptabs_DeleteBtn);

		if(actcreateTab==expcreateTab && acttabs_DeleteBtn==exptabs_DeleteBtn)
		{
			excelReader.setCellData(xlfile, "Sheet1", 300, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 300, 9, resFail);
			return false;
		}
	}



	public static boolean checkCreateTabsOptionsInCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTab));
		createTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabTreeTab));

		boolean actcreateTabTreeTab  		=createTabTreeTab.isDisplayed();
		boolean actcreateTab_DocumentTab  	=createTab_DocumentTab.isDisplayed();
		boolean actcreateTab_CreateTab  	=createTab_CreateTab.isDisplayed();

		boolean expcreateTabTreeTab  		=true;
		boolean expcreateTab_DocumentTab  	=true;
		boolean expcreateTab_CreateTab  	=true;

		System.out.println("****************************checkCreateTabsOptionsInCustomizeMaster****************************");

		System.out.println("createTabTreeTab        : "+actcreateTabTreeTab      +" Value Expected : "+expcreateTabTreeTab);
		System.out.println("createTab_DocumentTab   : "+actcreateTab_DocumentTab +" Value Expected : "+expcreateTab_DocumentTab);
		System.out.println("createTab_CreateTab     : "+actcreateTab_CreateTab   +" Value Expected : "+expcreateTab_CreateTab);

		if(actcreateTabTreeTab==expcreateTabTreeTab && actcreateTab_DocumentTab==expcreateTab_DocumentTab && actcreateTab_CreateTab==expcreateTab_CreateTab)
		{	 
			excelReader.setCellData(xlfile, "Sheet1", 301, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 301, 9, resFail);
			return false;
		}
	}


	public static boolean checkCreateTreeTabOptionsInCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabTreeTab));
		createTabTreeTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(treeTabCaptionTxt));

		boolean acttreeTabCaptionTxt  	 		=treeTabCaptionTxt.isDisplayed();
		boolean acttreeTabTabNameTxt   			=treeTabTabNameTxt.isDisplayed();
		boolean acttreeTabNewMastertxt   		=treeTabNewMastertxt.isDisplayed();
		boolean acttreeTabNewMasterdropdown   	=treeTabNewMasterdropdown.isDisplayed();
		boolean acttreeTab_NewMasterSettingsBtn =treeTab_NewMasterSettingsBtn.isDisplayed();
		boolean acttreeTab_FieldCaptiontxt   	=treeTab_FieldCaptiontxt.isDisplayed();
		boolean acttreeTab_FieldNameTxt   		=treeTab_FieldNameTxt.isDisplayed();
		boolean acttreeTab_HiddenChkBox   		=treeTab_HiddenChkBox.isDisplayed();
		boolean acttreeTab_OkBtn   				=treeTab_OkBtn.isDisplayed();
		boolean acttreeTab_CancelBtn   			=treeTab_CancelBtn.isDisplayed();

		boolean exptreeTabCaptionTxt  	 		=true;
		boolean exptreeTabTabNameTxt   			=true;
		boolean exptreeTabNewMastertxt   		=true;
		boolean exptreeTabNewMasterdropdown   	=true;
		boolean exptreeTab_NewMasterSettingsBtn =true;
		boolean exptreeTab_FieldCaptiontxt   	=true;
		boolean exptreeTab_FieldNameTxt   		=true;
		boolean exptreeTab_HiddenChkBox   		=true;
		boolean exptreeTab_OkBtn   				=true;
		boolean exptreeTab_CancelBtn   			=true;

		System.out.println("*************************************checkCreateTreeTabOptionsInCustomizeMaster*******************************"); 

		System.out.println("treeTabCaptionTxt            : "+acttreeTabCaptionTxt            +" Value Expected : "+exptreeTabCaptionTxt);
		System.out.println("treeTabTabNameTxt            : "+acttreeTabTabNameTxt            +" Value Expected : "+exptreeTabTabNameTxt);
		System.out.println("treeTabNewMastertxt          : "+acttreeTabNewMastertxt          +" Value Expected : "+exptreeTabNewMastertxt);
		System.out.println("treeTabNewMasterdropdown     : "+acttreeTabNewMasterdropdown     +" Value Expected : "+exptreeTabNewMasterdropdown);
		System.out.println("treeTab_NewMasterSettingsBtn : "+acttreeTab_NewMasterSettingsBtn +" Value Expected : "+exptreeTab_NewMasterSettingsBtn);
		System.out.println("treeTab_FieldCaptiontxt      : "+acttreeTab_FieldCaptiontxt      +" Value Expected : "+exptreeTab_FieldCaptiontxt);
		System.out.println("treeTab_FieldNameTxt         : "+acttreeTab_FieldNameTxt         +" Value Expected : "+exptreeTab_FieldNameTxt);
		System.out.println("treeTab_HiddenChkBox         : "+acttreeTab_HiddenChkBox         +" Value Expected : "+exptreeTab_HiddenChkBox);
		System.out.println("treeTab_OkBtn                : "+acttreeTab_OkBtn                +" Value Expected : "+exptreeTab_OkBtn);
		System.out.println("treeTab_CancelBtn            : "+acttreeTab_CancelBtn            +" Value Expected : "+exptreeTab_CancelBtn);

		if(acttreeTabCaptionTxt==exptreeTabCaptionTxt && acttreeTabTabNameTxt==exptreeTabTabNameTxt && acttreeTabNewMastertxt==exptreeTabNewMastertxt
				&& acttreeTabNewMasterdropdown==exptreeTabNewMasterdropdown && acttreeTab_NewMasterSettingsBtn==exptreeTab_NewMasterSettingsBtn 
				&& acttreeTab_FieldCaptiontxt==exptreeTab_FieldCaptiontxt && acttreeTab_FieldNameTxt==exptreeTab_FieldNameTxt
				&& acttreeTab_HiddenChkBox==exptreeTab_HiddenChkBox && acttreeTab_OkBtn==exptreeTab_OkBtn && acttreeTab_CancelBtn==exptreeTab_CancelBtn)
		{
			excelReader.setCellData(xlfile, "Sheet1", 302, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 302, 9, resFail);
			return false;
		}
	}


	public static boolean checkMandatoryCheckForCreateTreeTabWithAllInputsAreBlank() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(treeTab_OkBtn));
		treeTab_OkBtn.click();   		 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateTabsMessage));

		String actcustomizeMasterCreateTabsMessage  =customizeMasterCreateTabsMessage.getText();
		String expcustomizeMasterCreateTabsMessage  ="Please enter Tab name.";

		System.out.println("********************checkMandatoryCheckForCreateTreeTabWithAllInputsAreBlank***************************");

		System.out.println("customizeMasterCreateTabsMessage  : "+actcustomizeMasterCreateTabsMessage+" Value Expected : "+expcustomizeMasterCreateTabsMessage);

		if(actcustomizeMasterCreateTabsMessage.equalsIgnoreCase(expcustomizeMasterCreateTabsMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 303, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 303, 9, resFail);
			return false;
		}
	}


	public static boolean checkMandatoryCheckForCreateTreeTabWithCaptionAsBlank() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(treeTabTabNameTxt));
		treeTabTabNameTxt.click();
		treeTabTabNameTxt.sendKeys("Tree Tab");
		treeTabTabNameTxt.sendKeys(Keys.TAB); 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(treeTab_OkBtn));
		treeTab_OkBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateTabsMessage));

		String actcustomizeMasterCreateTabsMessage  =customizeMasterCreateTabsMessage.getText();
		String expcustomizeMasterCreateTabsMessage  ="Please enter Tab name.";

		System.out.println("********************checkMandatoryCheckForCreateTreeTabWithCaptionAsBlank***************************");

		System.out.println("customizeMasterCreateTabsMessage  : "+actcustomizeMasterCreateTabsMessage+" Value Expected : "+expcustomizeMasterCreateTabsMessage);

		if(actcustomizeMasterCreateTabsMessage.equalsIgnoreCase(expcustomizeMasterCreateTabsMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 304, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 304, 9, resFail);
			return false;
		}
	}


	public static boolean checkMandatoryCheckForCreateTreeTabNewMasterAsBlank() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(treeTabCaptionTxt));
		treeTabCaptionTxt.sendKeys("Tree Tab");

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(treeTab_OkBtn));
		treeTab_OkBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateTabsMasterNameMessage));

		String actcustomizeMasterCreateTabsMasterNameMessage  =customizeMasterCreateTabsMasterNameMessage.getText();
		String expcustomizeMasterCreateTabsMasterNameMessage  ="Please enter Master name.";

		System.out.println("********************checkMandatoryCheckForCreateTreeTabNewMasterAsBlank***************************");

		System.out.println("customizeMasterCreateTabsMasterNameMessage  : "+actcustomizeMasterCreateTabsMasterNameMessage+" Value Expected : "+expcustomizeMasterCreateTabsMasterNameMessage);

		if(actcustomizeMasterCreateTabsMasterNameMessage.equalsIgnoreCase(expcustomizeMasterCreateTabsMasterNameMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 305, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 305, 9, resFail);
			return false;
		}
	}


	public static boolean checkMandatoryCheckForCreateTreeTabFieldCaptionAsBlank() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(treeTabNewMastertxt));
		treeTabNewMastertxt.sendKeys("Account");
		Thread.sleep(3000);
		treeTabNewMastertxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(treeTab_OkBtn));
		treeTab_OkBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateTabsMessage));

		String actcustomizeMasterCreateTabsMessage  =customizeMasterCreateTabsMessage.getText();
		String expcustomizeMasterCreateTabsMessage  ="Enter field caption";

		System.out.println("********************checkMandatoryCheckForCreateTreeTabFieldCaptionAsBlank***************************");

		System.out.println("customizeMasterCreateTabsMessage  : "+actcustomizeMasterCreateTabsMessage+" Value Expected : "+expcustomizeMasterCreateTabsMessage);

		if(actcustomizeMasterCreateTabsMessage.equalsIgnoreCase(expcustomizeMasterCreateTabsMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 306, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 306, 9, resFail);
			return false;
		}
	}


	public static boolean checkOkCheckForCreateTreeTabWithInput() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(treeTab_FieldCaptiontxt));
		treeTab_FieldCaptiontxt.sendKeys("Tree Tab");	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(treeTab_OkBtn));
		treeTab_OkBtn.click();

		String expMessage="Tab Added Successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkOkCheckForCreateTreeTabWithInput***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 307, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 307, 9, resFail);
			return false;
		}
	}



	public static boolean checkNewCreateTreeTabDisplayInTabs() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateTreeTabNewlyCreate));

		boolean actcustomizeMasterCreateTreeTabNewlyCreate  =customizeMasterCreateTreeTabNewlyCreate.isDisplayed();
		boolean expcustomizeMasterCreateTreeTabNewlyCreate  =true;

		System.out.println("**************************checkNewCreateTreeTabDisplayInTabs*************************");

		System.out.println("customizeMasterCreateTreeTabNewlyCreate  : "+actcustomizeMasterCreateTreeTabNewlyCreate+" Value Expected : "+expcustomizeMasterCreateTreeTabNewlyCreate);

		if(actcustomizeMasterCreateTreeTabNewlyCreate==expcustomizeMasterCreateTreeTabNewlyCreate)
		{
			excelReader.setCellData(xlfile, "Sheet1", 308, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 308, 9, resFail);
			return false;
		}
	}



	public static boolean checkEditPopUpForNewCreateTreeTabDisplayInTabs() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateTreeTabNewlyCreate));

		getAction().doubleClick(customizeMasterCreateTreeTabNewlyCreate).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateTreeTabNewlyCreateTabCaption));

		boolean actcustomizeMasterCreateTreeTabNewlyCreateTabCaption  	=customizeMasterCreateTreeTabNewlyCreateTabCaption.isDisplayed();
		boolean actcustomizeMasterCreateTreeTabNewlyCreateHidden  		=customizeMasterCreateTreeTabNewlyCreateHidden.isDisplayed();
		boolean actcustomizeMasterCreateTreeTabNewlyCreateOkButton  	=customizeMasterCreateTreeTabNewlyCreateOkButton.isDisplayed();
		boolean actcustomizeMasterCreateTreeTabNewlyCreateCancelButton =customizeMasterCreateTreeTabNewlyCreateCancelButton.isDisplayed();

		boolean expcustomizeMasterCreateTreeTabNewlyCreateTabCaption  	=true;
		boolean expcustomizeMasterCreateTreeTabNewlyCreateHidden  		=true;
		boolean expcustomizeMasterCreateTreeTabNewlyCreateOkButton  	=true;
		boolean expcustomizeMasterCreateTreeTabNewlyCreateCancelButton =true;

		System.out.println("*********************************checkEditPopUpForNewCreateTreeTabDisplayInTabs*************************************");

		System.out.println("customizeMasterCreateTreeTabNewlyCreateTabCaption    : "+actcustomizeMasterCreateTreeTabNewlyCreateTabCaption   +" Value Expected : "+expcustomizeMasterCreateTreeTabNewlyCreateTabCaption);
		System.out.println("customizeMasterCreateTreeTabNewlyCreateHidden        : "+actcustomizeMasterCreateTreeTabNewlyCreateHidden       +" Value Expected : "+expcustomizeMasterCreateTreeTabNewlyCreateHidden);
		System.out.println("customizeMasterCreateTreeTabNewlyCreateOkButton      : "+actcustomizeMasterCreateTreeTabNewlyCreateOkButton     +" Value Expected : "+expcustomizeMasterCreateTreeTabNewlyCreateOkButton);
		System.out.println("customizeMasterCreateTreeTabNewlyCreateCancelButton  : "+actcustomizeMasterCreateTreeTabNewlyCreateCancelButton +" Value Expected : "+expcustomizeMasterCreateTreeTabNewlyCreateCancelButton);

		if(actcustomizeMasterCreateTreeTabNewlyCreateTabCaption==expcustomizeMasterCreateTreeTabNewlyCreateTabCaption
				&& actcustomizeMasterCreateTreeTabNewlyCreateHidden==expcustomizeMasterCreateTreeTabNewlyCreateHidden
				&& actcustomizeMasterCreateTreeTabNewlyCreateOkButton==expcustomizeMasterCreateTreeTabNewlyCreateOkButton
				&& actcustomizeMasterCreateTreeTabNewlyCreateCancelButton==expcustomizeMasterCreateTreeTabNewlyCreateCancelButton)
		{	
			excelReader.setCellData(xlfile, "Sheet1", 309, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 309, 9, resFail);
			return false;
		}
	}


	public static boolean checkCancelEditPopUpForNewCreateTreeTabDisplayInTabs() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateTreeTabNewlyCreateCancelButton));
		customizeMasterCreateTreeTabNewlyCreateCancelButton.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(minusBtn));
		minusBtn.click();



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(plusBtn));

		boolean actplusBtn         							    =plusBtn.isDisplayed();
		boolean actmasterFieldsOption         					=masterFieldsOption.isDisplayed();
		boolean actaccountMasterFieldsUniqueConstraintsOption   =accountMasterFieldsUniqueConstraintsOption.isDisplayed();
		boolean actRulesOption         						    =RulesOption.isDisplayed();
		boolean actrules_ExternalModules         				=rules_ExternalModules.isDisplayed();
		boolean actitemInfoPanelCustomizationTab         		=itemInfoPanelCustomizationTab.isDisplayed();
		boolean actaccountReportsTab         					=accountReportsTab.isDisplayed();

		boolean expplusBtn         							    =true;
		boolean expmasterFieldsOption         					=true;
		boolean expaccountMasterFieldsUniqueConstraintsOption  =true;
		boolean expRulesOption         						    =true;
		boolean exprules_ExternalModules         				=true;
		boolean expitemInfoPanelCustomizationTab         		=true;
		boolean expaccountReportsTab         					=true;

		System.out.println("****************************checkCancelEditPopUpForNewCreateTreeTabDisplayInTabs**********************************");

		System.out.println("plusBtn                                    : "+actplusBtn                                    +" Value Expected : "+expplusBtn);
		System.out.println("masterFieldsOption                         : "+actmasterFieldsOption                         +" Value Expected : "+expmasterFieldsOption);
		System.out.println("accountMasterFieldsUniqueConstraintsOption : "+actaccountMasterFieldsUniqueConstraintsOption +" Value Expected : "+expaccountMasterFieldsUniqueConstraintsOption);
		System.out.println("RulesOption                                : "+actRulesOption                                +" Value Expected : "+expRulesOption);
		System.out.println("rules_ExternalModules                      : "+actrules_ExternalModules                      +" Value Expected : "+exprules_ExternalModules);
		System.out.println("itemInfoPanelCustomizationTab              : "+actitemInfoPanelCustomizationTab              +" Value Expected : "+expitemInfoPanelCustomizationTab);
		System.out.println("accountReportsTab                          : "+actaccountReportsTab                          +" Value Expected : "+expaccountReportsTab);

		if(actplusBtn==expplusBtn && actmasterFieldsOption==expmasterFieldsOption 
				&& actaccountMasterFieldsUniqueConstraintsOption==expaccountMasterFieldsUniqueConstraintsOption
				&& actRulesOption==expRulesOption && actrules_ExternalModules==exprules_ExternalModules
				&& actitemInfoPanelCustomizationTab==expitemInfoPanelCustomizationTab && actaccountReportsTab==expaccountReportsTab)	
		{
			excelReader.setCellData(xlfile, "Sheet1", 310, 9, resPass);
			return true;
		}	
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 310, 9, resFail);
			return false;
		}
	}


	public static boolean checkOkEditPopUpForNewCreateTreeTabDisplayInTabs() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(plusBtn));
		plusBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateTreeTabNewlyCreate));
		getAction().doubleClick(customizeMasterCreateTreeTabNewlyCreate).build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateTreeTabNewlyCreateTabCaption));
		customizeMasterCreateTreeTabNewlyCreateTabCaption.clear();

		customizeMasterCreateTreeTabNewlyCreateTabCaption.sendKeys("Tree Tab Update");	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(treeTab_UpdateOkBtn));
		treeTab_UpdateOkBtn.click();

		String expMessage="Tab Caption Updated Successfully.";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkOkEditPopUpForNewCreateTreeTabDisplayInTabs***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 311, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 311, 9, resFail);
			return false;	
		}
	}



	public static boolean checkHeaderDetailsTabWithBlankForCreateTreeTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";


		getDriver().navigate().refresh();

		Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(3000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));	
		masterRibbonControlNextBtn.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));	
		masterRibbonControlNextBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateTreeTabNewlyCreate));
		customizeMasterCreateTreeTabNewlyCreate.click();



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateTreeTabNewlyHeaderDetails));

		boolean actcustomizeMasterCreateTreeTabNewlyHeaderDetails  		=customizeMasterCreateTreeTabNewlyHeaderDetails.isDisplayed();
		boolean actcustomizeMasterCreateTreeTabNewlyBlankInHeaderDetails  	=customizeMasterCreateTreeTabNewlyBlankInHeaderDetails.isDisplayed();

		boolean expcustomizeMasterCreateTreeTabNewlyHeaderDetails  		=true;
		boolean expcustomizeMasterCreateTreeTabNewlyBlankInHeaderDetails  	=true;

		System.out.println("***********************************checkHeaderDetailsTabWithBlankForCreateTreeTab***********************************");

		System.out.println("customizeMasterCreateTreeTabNewlyHeaderDetails         : "+actcustomizeMasterCreateTreeTabNewlyHeaderDetails        +" Value Expected : "+expcustomizeMasterCreateTreeTabNewlyHeaderDetails);
		System.out.println("customizeMasterCreateTreeTabNewlyBlankInHeaderDetails  : "+actcustomizeMasterCreateTreeTabNewlyBlankInHeaderDetails +" Value Expected : "+expcustomizeMasterCreateTreeTabNewlyBlankInHeaderDetails);

		if(actcustomizeMasterCreateTreeTabNewlyHeaderDetails==expcustomizeMasterCreateTreeTabNewlyHeaderDetails
				&& actcustomizeMasterCreateTreeTabNewlyBlankInHeaderDetails==expcustomizeMasterCreateTreeTabNewlyBlankInHeaderDetails)
		{
			excelReader.setCellData(xlfile, "Sheet1", 312, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 312, 9, resFail);
			return false;
		}
	}


	public static boolean checkBodyDetailsTabWithBlankForCreateTreeTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateTreeTabNewlyBodyDetails));
		customizeMasterCreateTreeTabNewlyBodyDetails.click();



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateTreeTabNewlyFieldInBodyDetails));

		boolean actcustomizeMasterCreateTreeTabNewlyFieldInBodyDetails  =customizeMasterCreateTreeTabNewlyFieldInBodyDetails.isDisplayed();
		boolean expcustomizeMasterCreateTreeTabNewlyFieldInBodyDetails  =true;

		System.out.println("************************************checkBodyDetailsTabWithBlankForCreateTreeTab****************************");

		System.out.println("customizeMasterCreateTreeTabNewlyFieldInBodyDetails  : "+actcustomizeMasterCreateTreeTabNewlyFieldInBodyDetails+" Value Expected : "+expcustomizeMasterCreateTreeTabNewlyFieldInBodyDetails);

		if(actcustomizeMasterCreateTreeTabNewlyFieldInBodyDetails==expcustomizeMasterCreateTreeTabNewlyFieldInBodyDetails)
		{
			excelReader.setCellData(xlfile, "Sheet1", 313, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 313, 9, resFail);
			return false;
		}
	}


	public static boolean checkConfirmmationMessageOnDeleteTabOptionForCreateTreeTabDisplayInTabs() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateTreeTabNewlyHeaderDetails));
		customizeMasterCreateTreeTabNewlyHeaderDetails.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTab));
		createTab.click();



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabTreeTab));
		createTabTreeTab.click();



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(treeTabCaptionTxt));
		treeTabCaptionTxt.sendKeys("Tree Tab Delete");
		treeTabCaptionTxt.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(treeTabTabNameTxt));
		treeTabTabNameTxt.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(treeTabNewMastertxt));
		treeTabNewMastertxt.sendKeys("Account");
		Thread.sleep(3000);
		treeTabNewMastertxt.sendKeys(Keys.TAB);



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(treeTab_FieldCaptiontxt));
		treeTab_FieldCaptiontxt.sendKeys("Tree Tab Delete");	



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(treeTab_OkBtn));
		treeTab_OkBtn.click();



		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			errorMessageCloseBtn.click();
		}
		catch(Exception e)
		{
			System.out.println("Error Message Close Btn Not Displayed");
		}


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CustomizeCreateTreeTab));
		CustomizeCreateTreeTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tabs_DeleteBtn));
		tabs_DeleteBtn.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CustomizeDeleteTabMessage));

		boolean actCustomizeDeleteTabMessage  =CustomizeDeleteTabMessage.isDisplayed();
		boolean expCustomizeDeleteTabMessage  =true;

		System.out.println("***********checkConfirmmationMessageOnDeleteTabOptionForCreateTreeTabDisplayInTabs*******************");

		System.out.println("CustomizeDeleteTabMessage  : "+actCustomizeDeleteTabMessage+" Value Expected : "+expCustomizeDeleteTabMessage);

		if(actCustomizeDeleteTabMessage==expCustomizeDeleteTabMessage)
		{

			excelReader.setCellData(xlfile, "Sheet1", 314, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 314, 9, resFail);
			return false;
		}
	}



	public static boolean checkNoConfirmmationMessageOnDeleteTabOptionForCreateTreeTabDisplayInTabs() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CustomizeDeleteTabMessageNoBtn));
		CustomizeDeleteTabMessageNoBtn.click();



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CustomizeCreateTreeTab));

		boolean actCustomizeCreateTreeTab  =CustomizeCreateTreeTab.isDisplayed();
		boolean expCustomizeCreateTreeTab  =true;

		System.out.println("*****************checkNoConfirmmationMessageOnDeleteTabOptionForCreateTreeTabDisplayInTabs******************");

		System.out.println("CustomizeCreateTreeTab  : "+actCustomizeCreateTreeTab+" Value Expected : "+expCustomizeCreateTreeTab);

		if(actCustomizeCreateTreeTab==expCustomizeCreateTreeTab)
		{
			excelReader.setCellData(xlfile, "Sheet1", 315, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 315, 9, resFail);
			return false;
		}
	}




	public static boolean checkYesConfirmmationMessageOnDeleteTabOptionForCreateTreeTabDisplayInTabs() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CustomizeCreateTreeTab));
		CustomizeCreateTreeTab.click();



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(tabs_DeleteBtn));
		tabs_DeleteBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CustomizeDeleteTabMessageYesBtn));
		CustomizeDeleteTabMessageYesBtn.click();

		String expMessage="Tab Deleted Successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkYesConfirmmationMessageOnDeleteTabOptionForCreateTreeTabDisplayInTabs***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 316, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 316, 9, resFail);
			return false;
		}
	}



	public static boolean checkCreateDocumentTabOptionsInCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTab));
		createTab.click();



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTab_DocumentTab));
		createTab_DocumentTab.click();



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentTab_TabCaption));

		boolean actdocumentTab_TabCaption    	=documentTab_TabCaption.isDisplayed();
		boolean actdocumentTab_TabName    		=documentTab_TabName.isDisplayed();
		boolean actdocumentTab_HiddenChkbox    	=documentTab_HiddenChkbox.isDisplayed();
		boolean actdocumentTab_OkBtn    		=documentTab_OkBtn.isDisplayed();
		boolean actdocumentTab_CancelBtn    	=documentTab_CancelBtn.isDisplayed();

		boolean expdocumentTab_TabCaption    	=true;
		boolean expdocumentTab_TabName    		=true;
		boolean expdocumentTab_HiddenChkbox    	=true;
		boolean expdocumentTab_OkBtn    		=true;
		boolean expdocumentTab_CancelBtn    	=true;

		System.out.println("************************************checkCreateDocumentTabOptionsInCustomizeMaster*****************************");

		System.out.println("documentTab_TabCaption    : "+actdocumentTab_TabCaption   +" Value Expected : "+expdocumentTab_TabCaption);
		System.out.println("documentTab_TabName       : "+actdocumentTab_TabName      +" Value Expected : "+expdocumentTab_TabName);
		System.out.println("documentTab_HiddenChkbox  : "+actdocumentTab_HiddenChkbox +" Value Expected : "+expdocumentTab_HiddenChkbox);
		System.out.println("documentTab_OkBtn         : "+actdocumentTab_OkBtn        +" Value Expected : "+expdocumentTab_OkBtn);
		System.out.println("documentTab_CancelBtn     : "+actdocumentTab_CancelBtn    +" Value Expected : "+expdocumentTab_CancelBtn);

		if(actdocumentTab_TabCaption==expdocumentTab_TabCaption && actdocumentTab_TabName==expdocumentTab_TabName
				&& actdocumentTab_HiddenChkbox==expdocumentTab_HiddenChkbox && actdocumentTab_OkBtn==expdocumentTab_OkBtn
				&& actdocumentTab_CancelBtn==expdocumentTab_CancelBtn)
		{
			excelReader.setCellData(xlfile, "Sheet1", 317, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 317, 9, resFail);
			return false;
		}
	}



	public static boolean checkMandatoryCheckInDocumentTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentTab_OkBtn));
		documentTab_OkBtn.click();



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateTabDocumentTabMessage));

		String actcustomizeMasterCreateTabDocumentTabMessage =customizeMasterCreateTabDocumentTabMessage.getText();
		String expcustomizeMasterCreateTabDocumentTabMessage ="Please enter Tab name.";

		System.out.println("**************************checkMandatoryCheckInDocumentTab*********************************");

		System.out.println("customizeMasterCreateTabDocumentTabMessage  : "+actcustomizeMasterCreateTabDocumentTabMessage+" Value Expected : "+expcustomizeMasterCreateTabDocumentTabMessage);

		if(actcustomizeMasterCreateTabDocumentTabMessage.equalsIgnoreCase(expcustomizeMasterCreateTabDocumentTabMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 318, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 318, 9, resFail);
			return false;	
		}
	}


	public static boolean checkOKWithInputCheckInDocumentTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentTab_TabCaption));
		documentTab_TabCaption.sendKeys("Document Tab");	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentTab_OkBtn));
		documentTab_OkBtn.click();

		String expMessage="Tab Added Successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkOKWithInputCheckInDocumentTab***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 319, 9, resPass);
			return true;
		}
		else
		{    
			excelReader.setCellData(xlfile, "Sheet1", 319, 9, resFail);
			return false;
		}
	}


	public static boolean checkHeaderDetailsTabWithBlankForCreateDocumentTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateDocumentTabNewlyCreate));
		customizeMasterCreateDocumentTabNewlyCreate.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateDocumentTabNewlyHeaderDetails));

		boolean actcustomizeMasterCreateDocumentTabNewlyHeaderDetails         =customizeMasterCreateDocumentTabNewlyHeaderDetails.isDisplayed();
		boolean actcustomizeMasterCreateDocumentTabNewlyBlankInHeaderDetails  =customizeMasterCreateDocumentTabNewlyBlankInHeaderDetails.isDisplayed();

		boolean expcustomizeMasterCreateDocumentTabNewlyHeaderDetails         =true;
		boolean expcustomizeMasterCreateDocumentTabNewlyBlankInHeaderDetails  =true;

		System.out.println("*********************************checkHeaderDetailsTabWithBlankForCreateDocumentTab********************************");

		System.out.println("customizeMasterCreateDocumentTabNewlyHeaderDetails        : "+actcustomizeMasterCreateDocumentTabNewlyHeaderDetails        +" Value Expected : "+expcustomizeMasterCreateDocumentTabNewlyHeaderDetails);
		System.out.println("customizeMasterCreateDocumentTabNewlyBlankInHeaderDetails : "+actcustomizeMasterCreateDocumentTabNewlyBlankInHeaderDetails +" Value Expected : "+expcustomizeMasterCreateDocumentTabNewlyBlankInHeaderDetails);

		if(actcustomizeMasterCreateDocumentTabNewlyHeaderDetails==expcustomizeMasterCreateDocumentTabNewlyHeaderDetails
				&& actcustomizeMasterCreateDocumentTabNewlyBlankInHeaderDetails==expcustomizeMasterCreateDocumentTabNewlyBlankInHeaderDetails)
		{
			excelReader.setCellData(xlfile, "Sheet1", 320, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 320, 9, resFail);
			return false;
		}
	}


	public static boolean checkBodyDetailsTabWithBlankForCreateDocumentTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateDocumentTabNewlyBodyDetails));
		customizeMasterCreateDocumentTabNewlyBodyDetails.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateDocumentTabFieldName));

		boolean actcustomizeMasterCreateDocumentTabFieldName   		=customizeMasterCreateDocumentTabFieldName.isDisplayed();
		boolean actcustomizeMasterCreateDocumentTabDocument   		=customizeMasterCreateDocumentTabDocument.isDisplayed();
		boolean actcustomizeMasterCreateDocumentTabCreatedDate   	=customizeMasterCreateDocumentTabCreatedDate.isDisplayed();
		boolean actcustomizeMasterCreateDocumentTabLastModified   	=customizeMasterCreateDocumentTabLastModified.isDisplayed();
		boolean actcustomizeMasterCreateDocumentFileSize   			=customizeMasterCreateDocumentFileSize.isDisplayed();

		boolean expcustomizeMasterCreateDocumentTabFieldName   		=true;
		boolean expcustomizeMasterCreateDocumentTabDocument   		=true;
		boolean expcustomizeMasterCreateDocumentTabCreatedDate   	=true;
		boolean expcustomizeMasterCreateDocumentTabLastModified   	=true;
		boolean expcustomizeMasterCreateDocumentFileSize   			=true;

		System.out.println("*****************************checkBodyDetailsTabWithBlankForCreateDocumentTab*****************************************");

		System.out.println("customizeMasterCreateDocumentTabFieldName     : "+actcustomizeMasterCreateDocumentTabFieldName    +" Value Expected : "+expcustomizeMasterCreateDocumentTabFieldName);
		System.out.println("customizeMasterCreateDocumentTabDocument      : "+actcustomizeMasterCreateDocumentTabDocument     +" Value Expected : "+expcustomizeMasterCreateDocumentTabDocument);
		System.out.println("customizeMasterCreateDocumentTabCreatedDate   : "+actcustomizeMasterCreateDocumentTabCreatedDate  +" Value Expected : "+expcustomizeMasterCreateDocumentTabCreatedDate);
		System.out.println("customizeMasterCreateDocumentTabLastModified  : "+actcustomizeMasterCreateDocumentTabLastModified +" Value Expected : "+expcustomizeMasterCreateDocumentTabLastModified);
		System.out.println("customizeMasterCreateDocumentFileSize         : "+actcustomizeMasterCreateDocumentFileSize        +" Value Expected : "+expcustomizeMasterCreateDocumentFileSize);

		if(actcustomizeMasterCreateDocumentTabFieldName==expcustomizeMasterCreateDocumentTabFieldName
				&& actcustomizeMasterCreateDocumentTabDocument==expcustomizeMasterCreateDocumentTabDocument
				&& actcustomizeMasterCreateDocumentTabCreatedDate==expcustomizeMasterCreateDocumentTabCreatedDate
				&& actcustomizeMasterCreateDocumentTabLastModified==expcustomizeMasterCreateDocumentTabLastModified
				&& actcustomizeMasterCreateDocumentFileSize==expcustomizeMasterCreateDocumentFileSize	)
		{
			excelReader.setCellData(xlfile, "Sheet1", 321, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 321, 9, resFail);
			return false;
		}
	}


	public static boolean checkCreateDocumentTabCreationWithExistingDocumentTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTab));
		createTab.click();



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTab_DocumentTab));
		createTab_DocumentTab.click();

		String expMessage="Only one document tab is allowed per master";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkCreateDocumentTabCreationWithExistingDocumentTab***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 322, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 322, 9, resFail);
			return false;
		}
	}


	public static boolean checkCreateCreateTabOptionsInCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTab));
		createTab.click();



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTab_CreateTab));
		createTab_CreateTab.click();



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTab_TabCaptionTxt));

		boolean actcreateTab_TabCaptionTxt  =createTab_TabCaptionTxt.isDisplayed();
		boolean actcreateTab_TabNameTxt  	=createTab_TabNameTxt.isDisplayed();
		boolean actcreateTab_PopHiddenChkbox=createTab_PopHiddenChkbox.isDisplayed();
		boolean actcreateTab_PopOkBtn  		=createTab_PopOkBtn.isDisplayed();
		boolean actcreateTab_PopCancelBtn  	=createTab_PopCancelBtn.isDisplayed();

		boolean expcreateTab_TabCaptionTxt  =true;
		boolean expcreateTab_TabNameTxt  	=true;
		boolean expcreateTab_PopHiddenChkbox=true;
		boolean expcreateTab_PopOkBtn  		=true;
		boolean expcreateTab_PopCancelBtn  	=true;

		System.out.println("********************************checkCreateCreateTabOptionsInCustomizeMaster****************************");

		System.out.println("createTab_TabCaptionTxt    : "+actcreateTab_TabCaptionTxt   +" Value Expected : "+expcreateTab_TabCaptionTxt);
		System.out.println("createTab_TabNameTxt       : "+actcreateTab_TabNameTxt      +" Value Expected : "+expcreateTab_TabNameTxt);
		System.out.println("createTab_PopHiddenChkbox  : "+actcreateTab_PopHiddenChkbox +" Value Expected : "+expcreateTab_PopHiddenChkbox);
		System.out.println("createTab_PopOkBtn         : "+actcreateTab_PopOkBtn        +" Value Expected : "+expcreateTab_PopOkBtn);
		System.out.println("createTab_PopCancelBtn     : "+actcreateTab_PopCancelBtn    +" Value Expected : "+expcreateTab_PopCancelBtn);

		if(actcreateTab_TabCaptionTxt==expcreateTab_TabCaptionTxt && actcreateTab_TabNameTxt==expcreateTab_TabNameTxt
				&& actcreateTab_PopHiddenChkbox==expcreateTab_PopHiddenChkbox && actcreateTab_PopOkBtn==expcreateTab_PopOkBtn
				&& actcreateTab_PopCancelBtn==expcreateTab_PopCancelBtn)
		{
			excelReader.setCellData(xlfile, "Sheet1", 323, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 323, 9, resFail);
			return false;
		}
	}


	public static boolean checkMandatoryCheckInCreateCreateTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTab_PopOkBtn));
		createTab_PopOkBtn.click();



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateTabCreateTabMessage));

		String actcustomizeMasterCreateTabCreateTabMessage =customizeMasterCreateTabCreateTabMessage.getText();
		String expcustomizeMasterCreateTabCreateTabMessage ="Please enter Tab name.";

		System.out.println("**************************checkMandatoryCheckInCreateCreateTab*********************************");

		System.out.println("customizeMasterCreateTabCreateTabMessage  : "+actcustomizeMasterCreateTabCreateTabMessage+" Value Expected : "+expcustomizeMasterCreateTabCreateTabMessage);

		if(actcustomizeMasterCreateTabCreateTabMessage.equalsIgnoreCase(expcustomizeMasterCreateTabCreateTabMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 324, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 324, 9, resFail);
			return false;	
		}
	}


	public static boolean checkOkButtonWithAllInputInCreateCreateTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTab_TabCaptionTxt));
		createTab_TabCaptionTxt.sendKeys("Create Tab");
		createTab_TabCaptionTxt.sendKeys(Keys.TAB); 

		String getTabName=createTab_TabNameTxt.getText();



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTab_TabCaptionTxt));


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTab_PopOkBtn));
		createTab_PopOkBtn.click();         

		String expMessage="Tab Added Successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkOkButtonWithAllInputInCreateCreateTab***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 325, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 325, 9, resFail);
			return false;
		}
	}


	public static boolean checkCreateCreateTabDisplayInCustomizeTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateCreateTabNewlyCreateTabCaption));

		boolean actcustomizeMasterCreateCreateTabNewlyCreateTabCaption  =customizeMasterCreateCreateTabNewlyCreateTabCaption.isDisplayed();
		boolean expcustomizeMasterCreateCreateTabNewlyCreateTabCaption  =true;

		System.out.println("***************************checkCreateCreateTabDisplayInCustomizeTab***********************");

		System.out.println("customizeMasterCreateCreateTabNewlyCreateTabCaption : "+actcustomizeMasterCreateCreateTabNewlyCreateTabCaption+" Value Expected : "+expcustomizeMasterCreateCreateTabNewlyCreateTabCaption);

		if(actcustomizeMasterCreateCreateTabNewlyCreateTabCaption==expcustomizeMasterCreateCreateTabNewlyCreateTabCaption)
		{
			excelReader.setCellData(xlfile, "Sheet1", 326, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 326, 9, resFail);
			return false;
		}
	}




	public static boolean checkHeaderDetailsTabInCreateCreateTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateCreateTabNewlyCreateTabCaption));
		customizeMasterCreateCreateTabNewlyCreateTabCaption.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateCreateTabHeaderDetails));

		boolean actcustomizeMasterCreateCreateTabHeaderDetails  			=customizeMasterCreateCreateTabHeaderDetails.isDisplayed();
		boolean actcustomizeMasterCreateCreateTabBlankHeaderDetails  		=customizeMasterCreateCreateTabBlankHeaderDetails.isDisplayed();
		boolean actcustomizeMasterCreateCreateTabNewlyCreateTabSaveButton   =customizeMasterCreateCreateTabNewlyCreateTabSaveButton.isDisplayed();
		boolean actcustomizeMasterCreateCreateTabAddButton  				=customizeMasterCreateCreateTabAddButton.isDisplayed();
		boolean actcustomizeMasterCreateCreateTabPreviewButton  			=customizeMasterCreateCreateTabPreviewButton.isDisplayed();
		boolean actcustomizeMasterCreateCreateTabCloseButton  				=customizeMasterCreateCreateTabCloseButton.isDisplayed();

		boolean expcustomizeMasterCreateCreateTabHeaderDetails  			=true;
		boolean expcustomizeMasterCreateCreateTabBlankHeaderDetails  		=true;
		boolean expcustomizeMasterCreateCreateTabNewlyCreateTabSaveButton   =true;
		boolean expcustomizeMasterCreateCreateTabAddButton  				=true;
		boolean expcustomizeMasterCreateCreateTabPreviewButton  			=true;
		boolean expcustomizeMasterCreateCreateTabCloseButton  				=true;

		System.out.println("***************************************************checkHeaderDetailsTabInCreateCreateTab****************************************");

		System.out.println("customizeMasterCreateCreateTabHeaderDetails             : "+actcustomizeMasterCreateCreateTabHeaderDetails            +" Value Expected : "+expcustomizeMasterCreateCreateTabHeaderDetails);
		System.out.println("customizeMasterCreateCreateTabBlankHeaderDetails        : "+actcustomizeMasterCreateCreateTabBlankHeaderDetails       +" Value Expected : "+expcustomizeMasterCreateCreateTabBlankHeaderDetails);
		System.out.println("customizeMasterCreateCreateTabNewlyCreateTabSaveButton  : "+actcustomizeMasterCreateCreateTabNewlyCreateTabSaveButton +" Value Expected : "+expcustomizeMasterCreateCreateTabNewlyCreateTabSaveButton);
		System.out.println("customizeMasterCreateCreateTabAddButton                 : "+actcustomizeMasterCreateCreateTabAddButton                +" Value Expected : "+expcustomizeMasterCreateCreateTabAddButton);
		System.out.println("customizeMasterCreateCreateTabPreviewButton             : "+actcustomizeMasterCreateCreateTabPreviewButton            +" Value Expected : "+expcustomizeMasterCreateCreateTabPreviewButton);
		System.out.println("customizeMasterCreateCreateTabCloseButton               : "+actcustomizeMasterCreateCreateTabCloseButton              +" Value Expected : "+expcustomizeMasterCreateCreateTabCloseButton);

		if(actcustomizeMasterCreateCreateTabHeaderDetails==expcustomizeMasterCreateCreateTabHeaderDetails
				&& actcustomizeMasterCreateCreateTabBlankHeaderDetails==expcustomizeMasterCreateCreateTabBlankHeaderDetails
				&& actcustomizeMasterCreateCreateTabNewlyCreateTabSaveButton==expcustomizeMasterCreateCreateTabNewlyCreateTabSaveButton
				&& actcustomizeMasterCreateCreateTabAddButton==expcustomizeMasterCreateCreateTabAddButton
				&& actcustomizeMasterCreateCreateTabPreviewButton==expcustomizeMasterCreateCreateTabPreviewButton
				&& actcustomizeMasterCreateCreateTabCloseButton==expcustomizeMasterCreateCreateTabCloseButton)
		{
			excelReader.setCellData(xlfile, "Sheet1", 327, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 327, 9, resFail);
			return false;
		}
	}

	public static boolean checkBodyDetailsTabInCreateCreateTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateCreateTabBodyDetails));
		customizeMasterCreateCreateTabBodyDetails.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateCreateTabBodyDetails));

		boolean actcustomizeMasterCreateCreateTabBodyDetails       =customizeMasterCreateCreateTabBodyDetails.isDisplayed();
		boolean actcustomizeMasterCreateCreateTabBlankBodyDetails  =customizeMasterCreateCreateTabBlankBodyDetails.isDisplayed();

		boolean expcustomizeMasterCreateCreateTabBodyDetails       =true;
		boolean expcustomizeMasterCreateCreateTabBlankBodyDetails  =true;

		System.out.println("customizeMasterCreateCreateTabBodyDetails       : "+actcustomizeMasterCreateCreateTabBodyDetails      +" Value Expected : "+expcustomizeMasterCreateCreateTabBodyDetails);
		System.out.println("customizeMasterCreateCreateTabBlankBodyDetails  : "+actcustomizeMasterCreateCreateTabBlankBodyDetails +" Value Expected : "+expcustomizeMasterCreateCreateTabBlankBodyDetails);

		if(actcustomizeMasterCreateCreateTabBodyDetails==expcustomizeMasterCreateCreateTabBodyDetails
				&& actcustomizeMasterCreateCreateTabBlankBodyDetails==expcustomizeMasterCreateCreateTabBlankBodyDetails)
		{
			excelReader.setCellData(xlfile, "Sheet1", 328, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 328, 9, resFail);
			return false;
		}
	}



	public static boolean checkAddOptionInCreateCreateTabDisplayInCustomizeTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateCreateTabHeaderDetails));
		customizeMasterCreateCreateTabHeaderDetails.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateCreateTabAddButton));
		customizeMasterCreateCreateTabAddButton.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsTab));

		boolean actextraFields_FieldDetailsTab     	=extraFields_FieldDetailsTab.isDisplayed();
		boolean actextraFields_PropertiesTab     	=extraFields_PropertiesTab.isDisplayed();
		boolean actextraFields_FormattingTab     	=extraFields_FormattingTab.isDisplayed();
		boolean actextraFields_RulesTab     		=extraFields_RulesTab.isDisplayed();
		boolean actextraFields_ExternalModulesTab   =extraFields_ExternalModulesTab.isDisplayed();

		boolean expextraFields_FieldDetailsTab     	=true;
		boolean expextraFields_PropertiesTab     	=true;
		boolean expextraFields_FormattingTab     	=true;
		boolean expextraFields_RulesTab     		=true;
		boolean expextraFields_ExternalModulesTab   =true;

		System.out.println("*************************************checkAddOptionInCreateCreateTabDisplayInCustomizeTab****************************");

		System.out.println("extraFields_FieldDetailsTab   : "+actextraFields_FieldDetailsTab    +" Value Expected : "+expextraFields_FieldDetailsTab);
		System.out.println("extraFields_PropertiesTab     : "+actextraFields_PropertiesTab      +" Value Expected : "+expextraFields_PropertiesTab);
		System.out.println("extraFields_FormattingTab     : "+actextraFields_FormattingTab      +" Value Expected : "+expextraFields_FormattingTab);
		System.out.println("extraFields_RulesTab          : "+actextraFields_RulesTab           +" Value Expected : "+expextraFields_RulesTab);
		System.out.println("extraFields_ExternalModulesTab: "+actextraFields_ExternalModulesTab +" Value Expected : "+expextraFields_ExternalModulesTab);


		if(actextraFields_FieldDetailsTab==expextraFields_FieldDetailsTab && actextraFields_PropertiesTab==expextraFields_PropertiesTab
				&& actextraFields_FormattingTab==expextraFields_FormattingTab && actextraFields_RulesTab==expextraFields_RulesTab
				&& actextraFields_ExternalModulesTab==expextraFields_ExternalModulesTab)
		{
			excelReader.setCellData(xlfile, "Sheet1", 329, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 329, 9, resFail);
			return false;
		}
	}



	public static boolean checkFieldsDetailsTabInCreateCreateTabDisplayInCustomizeTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));

		boolean actextraFields_FieldDetailsCaption   				=extraFields_FieldDetailsCaption.isDisplayed();
		boolean actextraFields_FieldDetailsName   					=extraFields_FieldDetailsName.isDisplayed();
		boolean actextraFields_FieldDetailsDatTypeDropdown   		=extraFields_FieldDetailsDatTypeDropdown.isDisplayed();
		boolean actextraFields_FieldDetailsDefaultValue   			=extraFields_FieldDetailsDefaultValue.isDisplayed();
		boolean actextraFields_FieldDetailsBannerText   			=extraFields_FieldDetailsBannerText.isDisplayed();
		boolean actextraFields_FieldDetails_MaxSize   				=extraFields_FieldDetails_MaxSize.isDisplayed();
		boolean actextraFields_FieldDetailsControlTypeDropdown   	=extraFields_FieldDetailsControlTypeDropdown.isDisplayed();
		boolean actextraFields_FieldDetailsToolTipText   			=extraFields_FieldDetailsToolTipText.isDisplayed();
		boolean actextraFields_FieldDetailsRegularExpressionText   	=extraFields_FieldDetailsRegularExpressionText.isDisplayed();
		boolean actextraFields_RegularExperssionLoadExpansionBtn   	=extraFields_RegularExperssionLoadExpansionBtn.isDisplayed();

		boolean expextraFields_FieldDetailsCaption   				=true;
		boolean expextraFields_FieldDetailsName   					=true;
		boolean expextraFields_FieldDetailsDatTypeDropdown   		=true;
		boolean expextraFields_FieldDetailsDefaultValue   			=true;
		boolean expextraFields_FieldDetailsBannerText   			=true;
		boolean expextraFields_FieldDetails_MaxSize   				=true;
		boolean expextraFields_FieldDetailsControlTypeDropdown   	=true;
		boolean expextraFields_FieldDetailsToolTipText   			=true;
		boolean expextraFields_FieldDetailsRegularExpressionText   	=true;
		boolean expextraFields_RegularExperssionLoadExpansionBtn   	=true;

		System.out.println("************************checkFieldsDetailsTabInCreateCreateTabDisplayInCustomizeTab********************************");

		System.out.println("extraFields_FieldDetailsCaption                : "+actextraFields_FieldDetailsCaption               +" Value Expected : "+expextraFields_FieldDetailsCaption);
		System.out.println("extraFields_FieldDetailsName                   : "+actextraFields_FieldDetailsName                  +" Value Expected : "+expextraFields_FieldDetailsName);
		System.out.println("extraFields_FieldDetailsDatTypeDropdown        : "+actextraFields_FieldDetailsDatTypeDropdown       +" Value Expected : "+expextraFields_FieldDetailsDatTypeDropdown);
		System.out.println("extraFields_FieldDetailsDefaultValue           : "+actextraFields_FieldDetailsDefaultValue          +" Value Expected : "+expextraFields_FieldDetailsDefaultValue);
		System.out.println("extraFields_FieldDetailsBannerText             : "+actextraFields_FieldDetailsBannerText            +" Value Expected : "+expextraFields_FieldDetailsBannerText);
		System.out.println("extraFields_FieldDetails_MaxSize               : "+actextraFields_FieldDetails_MaxSize              +" Value Expected : "+expextraFields_FieldDetails_MaxSize);
		System.out.println("extraFields_FieldDetailsControlTypeDropdown    : "+actextraFields_FieldDetailsControlTypeDropdown   +" Value Expected : "+expextraFields_FieldDetailsControlTypeDropdown);
		System.out.println("extraFields_FieldDetailsToolTipText            : "+actextraFields_FieldDetailsToolTipText           +" Value Expected : "+expextraFields_FieldDetailsToolTipText);
		System.out.println("extraFields_FieldDetailsRegularExpressionText  : "+actextraFields_FieldDetailsRegularExpressionText +" Value Expected : "+expextraFields_FieldDetailsRegularExpressionText);
		System.out.println("extraFields_RegularExperssionLoadExpansionBtn  : "+actextraFields_RegularExperssionLoadExpansionBtn +" Value Expected : "+expextraFields_RegularExperssionLoadExpansionBtn);

		if(actextraFields_FieldDetailsCaption==expextraFields_FieldDetailsCaption && actextraFields_FieldDetailsName==expextraFields_FieldDetailsName
				&& actextraFields_FieldDetailsDatTypeDropdown==expextraFields_FieldDetailsDatTypeDropdown
				&& actextraFields_FieldDetailsDefaultValue==expextraFields_FieldDetailsDefaultValue
				&& actextraFields_FieldDetailsBannerText==expextraFields_FieldDetailsBannerText
				&& actextraFields_FieldDetails_MaxSize==expextraFields_FieldDetails_MaxSize
				&& actextraFields_FieldDetailsControlTypeDropdown==expextraFields_FieldDetailsControlTypeDropdown
				&& actextraFields_FieldDetailsToolTipText==expextraFields_FieldDetailsToolTipText
				&& actextraFields_FieldDetailsRegularExpressionText==expextraFields_FieldDetailsRegularExpressionText
				&& actextraFields_RegularExperssionLoadExpansionBtn==expextraFields_RegularExperssionLoadExpansionBtn)
		{
			excelReader.setCellData(xlfile, "Sheet1", 330, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 330, 9, resFail);
			return false;
		}
	}


	public static boolean checkPropertiesTabInCreateCreateTabDisplayInCustomizeTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTabPartOfDeliveryAddressChekbox));

		boolean actextraFields_PropertiesTabPartOfDeliveryAddressChekbox  	=extraFields_PropertiesTabPartOfDeliveryAddressChekbox.isDisplayed();
		boolean actextraFields_PropertiesPartOfBillingAddressChekbox  		=extraFields_PropertiesPartOfBillingAddressChekbox.isDisplayed();
		boolean actextraFields_PropertiesMandatoryChekbox  					=extraFields_PropertiesMandatoryChekbox.isDisplayed();
		boolean actextraFields_PropertiesAllowAsParameterChekbox  			=extraFields_PropertiesAllowAsParameterChekbox.isDisplayed();
		boolean actextraFields_PropertiesHiddenChekbox  					=extraFields_PropertiesHiddenChekbox.isDisplayed();
		boolean actextraFields_PropertiesSpellCheckChekbox  				=extraFields_PropertiesSpellCheckChekbox.isDisplayed();
		boolean actextraFields_PropertiesMandatoryInGroupChekbox  			=extraFields_PropertiesMandatoryInGroupChekbox.isDisplayed();
		boolean actextraFields_PropertiesAuditTrialChekbox  				=extraFields_PropertiesAuditTrialChekbox.isDisplayed();
		boolean actextraFields_PropertiesNotAvailableForReportsChekbox  	=extraFields_PropertiesNotAvailableForReportsChekbox.isDisplayed();
		boolean actextraFields_PropertiesMergeFieldChekbox  				=extraFields_PropertiesMergeFieldChekbox.isDisplayed();
		boolean actextraFields_PropertiesMassUpdateChekbox  				=extraFields_PropertiesMassUpdateChekbox.isDisplayed();
		boolean actextraFields_PropertiesIncludeInQuickCreateChekbox  		=extraFields_PropertiesIncludeInQuickCreateChekbox.isDisplayed();
		boolean actextraFields_PropertiesCannotBeExportedChekbox  			=extraFields_PropertiesCannotBeExportedChekbox.isDisplayed();
		boolean actextraFields_PropertiesCannotBeImportedChekbox  			=extraFields_PropertiesCannotBeImportedChekbox.isDisplayed();
		boolean actextraFields_PropertiesCopyFromParentChekbox  			=extraFields_PropertiesCopyFromParentChekbox.isDisplayed();
		boolean actextraFields_PropertiesReadOnlyChekbox  					=extraFields_PropertiesReadOnlyChekbox.isDisplayed();
		boolean actextraFields_PropertiesInformationFieldChekbox  			=extraFields_PropertiesInformationFieldChekbox.isDisplayed();
		boolean actextraFields_PropertiesIsMandatoryInRevisionChekbox 		=extraFields_PropertiesIsMandatoryInRevisionChekbox.isDisplayed();
		boolean actextraFields_PropertiesAvailableinCustomerPortalChekbox 	=extraFields_PropertiesAvailableinCustomerPortalChekbox.isDisplayed();
		boolean actextraFields_PropertiesEditableinCustomerPortalChekbox  	=extraFields_PropertiesEditableinCustomerPortalChekbox.isDisplayed();
		boolean actextraFields_PropertiesBehaviourDropdown  				=extraFields_PropertiesBehaviourDropdown.isDisplayed();

		boolean expextraFields_PropertiesTabPartOfDeliveryAddressChekbox  	=true;
		boolean expextraFields_PropertiesPartOfBillingAddressChekbox  		=true;
		boolean expextraFields_PropertiesMandatoryChekbox  					=true;
		boolean expextraFields_PropertiesAllowAsParameterChekbox  			=true;
		boolean expextraFields_PropertiesHiddenChekbox  					=true;
		boolean expextraFields_PropertiesSpellCheckChekbox  				=true;
		boolean expextraFields_PropertiesMandatoryInGroupChekbox  			=true;
		boolean expextraFields_PropertiesAuditTrialChekbox  				=true;
		boolean expextraFields_PropertiesNotAvailableForReportsChekbox  	=true;
		boolean expextraFields_PropertiesMergeFieldChekbox  				=true;
		boolean expextraFields_PropertiesMassUpdateChekbox  				=true;
		boolean expextraFields_PropertiesIncludeInQuickCreateChekbox  		=true;
		boolean expextraFields_PropertiesCannotBeExportedChekbox  			=true;
		boolean expextraFields_PropertiesCannotBeImportedChekbox  			=true;
		boolean expextraFields_PropertiesCopyFromParentChekbox  			=true;
		boolean expextraFields_PropertiesReadOnlyChekbox  					=true;
		boolean expextraFields_PropertiesInformationFieldChekbox  			=true;
		boolean expextraFields_PropertiesIsMandatoryInRevisionChekbox 		=true;
		boolean expextraFields_PropertiesAvailableinCustomerPortalChekbox 	=true;
		boolean expextraFields_PropertiesEditableinCustomerPortalChekbox  	=true;
		boolean expextraFields_PropertiesBehaviourDropdown  				=true;


		System.out.println("***************************checkPropertiesTabInCreateCreateTabDisplayInCustomizeTab****************************");

		System.out.println("extraFields_PropertiesTabPartOfDeliveryAddressChekbox  : "+actextraFields_PropertiesTabPartOfDeliveryAddressChekbox +" Value Expected : "+expextraFields_PropertiesTabPartOfDeliveryAddressChekbox);
		System.out.println("extraFields_PropertiesPartOfBillingAddressChekbox      : "+actextraFields_PropertiesPartOfBillingAddressChekbox     +" Value Expected : "+expextraFields_PropertiesPartOfBillingAddressChekbox);
		System.out.println("extraFields_PropertiesMandatoryChekbox                 : "+actextraFields_PropertiesMandatoryChekbox                +" Value Expected : "+expextraFields_PropertiesMandatoryChekbox);
		System.out.println("extraFields_PropertiesAllowAsParameterChekbox          : "+actextraFields_PropertiesAllowAsParameterChekbox         +" Value Expected : "+expextraFields_PropertiesAllowAsParameterChekbox);
		System.out.println("extraFields_PropertiesHiddenChekbox                    : "+actextraFields_PropertiesHiddenChekbox                   +" Value Expected : "+expextraFields_PropertiesHiddenChekbox);
		System.out.println("extraFields_PropertiesSpellCheckChekbox                : "+actextraFields_PropertiesSpellCheckChekbox               +" Value Expected : "+expextraFields_PropertiesSpellCheckChekbox);
		System.out.println("extraFields_PropertiesMandatoryInGroupChekbox          : "+actextraFields_PropertiesMandatoryInGroupChekbox         +" Value Expected : "+expextraFields_PropertiesMandatoryInGroupChekbox);
		System.out.println("extraFields_PropertiesAuditTrialChekbox                : "+actextraFields_PropertiesAuditTrialChekbox               +" Value Expected : "+expextraFields_PropertiesAuditTrialChekbox);
		System.out.println("extraFields_PropertiesNotAvailableForReportsChekbox    : "+actextraFields_PropertiesNotAvailableForReportsChekbox   +" Value Expected : "+expextraFields_PropertiesNotAvailableForReportsChekbox);
		System.out.println("extraFields_PropertiesMergeFieldChekbox                : "+actextraFields_PropertiesMergeFieldChekbox               +" Value Expected : "+expextraFields_PropertiesMergeFieldChekbox);
		System.out.println("extraFields_PropertiesMassUpdateChekbox                : "+actextraFields_PropertiesMassUpdateChekbox               +" Value Expected : "+expextraFields_PropertiesMassUpdateChekbox);
		System.out.println("extraFields_PropertiesIncludeInQuickCreateChekbox      : "+actextraFields_PropertiesIncludeInQuickCreateChekbox     +" Value Expected : "+expextraFields_PropertiesIncludeInQuickCreateChekbox);
		System.out.println("extraFields_PropertiesCannotBeExportedChekbox          : "+actextraFields_PropertiesCannotBeExportedChekbox         +" Value Expected : "+expextraFields_PropertiesCannotBeExportedChekbox);
		System.out.println("extraFields_PropertiesCannotBeImportedChekbox          : "+actextraFields_PropertiesCannotBeImportedChekbox         +" Value Expected : "+expextraFields_PropertiesCannotBeImportedChekbox);
		System.out.println("extraFields_PropertiesCopyFromParentChekbox            : "+actextraFields_PropertiesCopyFromParentChekbox           +" Value Expected : "+expextraFields_PropertiesCopyFromParentChekbox);
		System.out.println("extraFields_PropertiesReadOnlyChekbox                  : "+actextraFields_PropertiesReadOnlyChekbox                 +" Value Expected : "+expextraFields_PropertiesReadOnlyChekbox);
		System.out.println("extraFields_PropertiesInformationFieldChekbox          : "+actextraFields_PropertiesInformationFieldChekbox         +" Value Expected : "+expextraFields_PropertiesInformationFieldChekbox);
		System.out.println("extraFields_PropertiesIsMandatoryInRevisionChekbox     : "+actextraFields_PropertiesIsMandatoryInRevisionChekbox    +" Value Expected : "+expextraFields_PropertiesIsMandatoryInRevisionChekbox);
		System.out.println("extraFields_PropertiesAvailableinCustomerPortalChekbox : "+actextraFields_PropertiesAvailableinCustomerPortalChekbox+" Value Expected : "+expextraFields_PropertiesAvailableinCustomerPortalChekbox);
		System.out.println("extraFields_PropertiesEditableinCustomerPortalChekbox  : "+actextraFields_PropertiesEditableinCustomerPortalChekbox +" Value Expected : "+expextraFields_PropertiesEditableinCustomerPortalChekbox);
		System.out.println("extraFields_PropertiesBehaviourDropdown                : "+actextraFields_PropertiesBehaviourDropdown               +" Value Expected : "+expextraFields_PropertiesBehaviourDropdown);


		if(actextraFields_PropertiesTabPartOfDeliveryAddressChekbox==expextraFields_PropertiesTabPartOfDeliveryAddressChekbox
				&& actextraFields_PropertiesPartOfBillingAddressChekbox==expextraFields_PropertiesPartOfBillingAddressChekbox
				&& actextraFields_PropertiesMandatoryChekbox==expextraFields_PropertiesMandatoryChekbox
				&& actextraFields_PropertiesAllowAsParameterChekbox==expextraFields_PropertiesAllowAsParameterChekbox
				&& actextraFields_PropertiesHiddenChekbox==expextraFields_PropertiesHiddenChekbox
				&& actextraFields_PropertiesSpellCheckChekbox==expextraFields_PropertiesSpellCheckChekbox
				&& actextraFields_PropertiesMandatoryInGroupChekbox==expextraFields_PropertiesMandatoryInGroupChekbox
				&& actextraFields_PropertiesAuditTrialChekbox==expextraFields_PropertiesAuditTrialChekbox
				&& actextraFields_PropertiesNotAvailableForReportsChekbox==expextraFields_PropertiesNotAvailableForReportsChekbox
				&& actextraFields_PropertiesMergeFieldChekbox==expextraFields_PropertiesMergeFieldChekbox
				&& actextraFields_PropertiesMassUpdateChekbox==expextraFields_PropertiesMassUpdateChekbox
				&& actextraFields_PropertiesIncludeInQuickCreateChekbox==expextraFields_PropertiesIncludeInQuickCreateChekbox
				&& actextraFields_PropertiesCannotBeExportedChekbox==expextraFields_PropertiesCannotBeExportedChekbox
				&& actextraFields_PropertiesCannotBeImportedChekbox==expextraFields_PropertiesCannotBeImportedChekbox
				&& actextraFields_PropertiesCopyFromParentChekbox==expextraFields_PropertiesCopyFromParentChekbox
				&& actextraFields_PropertiesReadOnlyChekbox==expextraFields_PropertiesReadOnlyChekbox
				&& actextraFields_PropertiesInformationFieldChekbox==expextraFields_PropertiesInformationFieldChekbox
				&& actextraFields_PropertiesIsMandatoryInRevisionChekbox==expextraFields_PropertiesIsMandatoryInRevisionChekbox
				&& actextraFields_PropertiesAvailableinCustomerPortalChekbox==expextraFields_PropertiesAvailableinCustomerPortalChekbox
				&& actextraFields_PropertiesEditableinCustomerPortalChekbox==expextraFields_PropertiesEditableinCustomerPortalChekbox
				&& actextraFields_PropertiesBehaviourDropdown==expextraFields_PropertiesBehaviourDropdown)
		{
			excelReader.setCellData(xlfile, "Sheet1", 331, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 331, 9, resFail);
			return false;
		}
	}

	public static boolean checkFormattingTabInCreateCreateTabDisplayInCustomizeTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FormattingTab));
		extraFields_FormattingTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FormattingColumnSpan));

		boolean actextraFields_FormattingColumnSpan   			=extraFields_FormattingColumnSpan.isDisplayed();
		boolean actextraFields_FormattingRowSpan   				=extraFields_FormattingRowSpan.isDisplayed();
		boolean actextraFields_FormattingCharacterCasingDropdown=extraFields_FormattingCharacterCasingDropdown.isDisplayed();
		boolean actextraFields_FormattingTextAlignDropdown   	=extraFields_FormattingTextAlignDropdown.isDisplayed();
		boolean actextraFields_FormattingFieldsDetailsFont   	=extraFields_FormattingFieldsDetailsFont.isDisplayed();
		boolean actextraFields_FormattingBackColor   			=extraFields_FormattingBackColor.isDisplayed();
		boolean actextraFields_FormattingFieldsDetailsFont_Btn  =extraFields_FormattingFieldsDetailsFont_Btn.isDisplayed();

		boolean expextraFields_FormattingColumnSpan   			=true;
		boolean expextraFields_FormattingRowSpan   				=true;
		boolean expextraFields_FormattingCharacterCasingDropdown=true;
		boolean expextraFields_FormattingTextAlignDropdown   	=true;
		boolean expextraFields_FormattingFieldsDetailsFont   	=true;
		boolean expextraFields_FormattingBackColor   			=true;
		boolean expextraFields_FormattingFieldsDetailsFont_Btn  =true;

		System.out.println("**************************checkFormattingTabInCreateCreateTabDisplayInCustomizeTab************************");

		System.out.println("extraFields_FormattingColumnSpan                : "+actextraFields_FormattingColumnSpan              +" Value Expected : "+expextraFields_FormattingColumnSpan);
		System.out.println("extraFields_FormattingRowSpan                   : "+actextraFields_FormattingRowSpan                 +" Value Expected : "+expextraFields_FormattingRowSpan);
		System.out.println("extraFields_FormattingCharacterCasingDropdown   : "+actextraFields_FormattingCharacterCasingDropdown +" Value Expected : "+expextraFields_FormattingCharacterCasingDropdown);
		System.out.println("extraFields_FormattingTextAlignDropdown         : "+actextraFields_FormattingTextAlignDropdown       +" Value Expected : "+expextraFields_FormattingTextAlignDropdown);
		System.out.println("extraFields_FormattingFieldsDetailsFont         : "+actextraFields_FormattingFieldsDetailsFont       +" Value Expected : "+expextraFields_FormattingFieldsDetailsFont);
		System.out.println("extraFields_FormattingBackColor                 : "+actextraFields_FormattingBackColor               +" Value Expected : "+expextraFields_FormattingBackColor);
		System.out.println("extraFields_FormattingFieldsDetailsFont_Btn     : "+actextraFields_FormattingFieldsDetailsFont_Btn   +" Value Expected : "+expextraFields_FormattingFieldsDetailsFont_Btn);

		if(actextraFields_FormattingColumnSpan==expextraFields_FormattingColumnSpan && actextraFields_FormattingRowSpan==expextraFields_FormattingRowSpan
				&& actextraFields_FormattingCharacterCasingDropdown==expextraFields_FormattingCharacterCasingDropdown
				&& actextraFields_FormattingTextAlignDropdown==expextraFields_FormattingTextAlignDropdown 
				&& actextraFields_FormattingFieldsDetailsFont==expextraFields_FormattingFieldsDetailsFont 
				&& actextraFields_FormattingBackColor==expextraFields_FormattingBackColor
				&& actextraFields_FormattingFieldsDetailsFont_Btn==expextraFields_FormattingFieldsDetailsFont_Btn)
		{
			excelReader.setCellData(xlfile, "Sheet1", 332, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 332, 9, resFail);
			return false;
		}
	}


	public static boolean checkRulesTabInCreateCreateTabDisplayInCustomizeTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_RulesTab));        	                
		extraFields_RulesTab.click();

		boolean actRulesValidationMessage = errorMessage.isDisplayed();
		boolean expRulesValidationMessage = true;


		// We are commenting this code as no message is displaying just checking message is display 
		String actSaveMessage=errorMessage.getText();
		String expSaveMessage="Enter field caption";

		errorMessageCloseBtn.click();
		System.out.println("******************************************* checkSelectSalesDayBookOptionInReportsAndClickOnSaveButton *****************************************");
		System.out.println("Click on Rules Button without Input Of Name   : " + actSaveMessage       + "  Value Expected : " + expSaveMessage); 

		extraFields_FieldDetailsCaption.click();
		extraFields_FieldDetailsCaption.sendKeys("Extra Field Two");



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_RulesTab));        	                
		extraFields_RulesTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_RulesClickHereAddRuleButtonBtn));

		boolean actextraFields_RulesClickHereAddRuleButtonBtn =extraFields_RulesClickHereAddRuleButtonBtn.isDisplayed();
		boolean expextraFields_RulesClickHereAddRuleButtonBtn =true;

		System.out.println("extraFields_RulesClickHereAddRuleButtonBtn : "+actextraFields_RulesClickHereAddRuleButtonBtn+" Value Expected : "+expextraFields_RulesClickHereAddRuleButtonBtn);

		if(actextraFields_RulesClickHereAddRuleButtonBtn==expextraFields_RulesClickHereAddRuleButtonBtn)
		{
			excelReader.setCellData(xlfile, "Sheet1", 333, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 333, 9, resFail);
			return false;
		}
	}



	public static boolean checkRulesOptionsTabInCreateCreateTabDisplayInCustomizeTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_RulesClickHereAddRuleButtonBtn));
		extraFields_RulesClickHereAddRuleButtonBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_RuleNameDropdown));

		boolean actextraFields_RuleNameDropdown  =extraFields_RuleNameDropdown.isDisplayed();
		boolean actextraFields_RuleNameSetingBtn =extraFields_RuleNameSetingBtn.isDisplayed();
		boolean actextraFields_RulesSaveBtn 	 =extraFields_RulesSaveBtn.isDisplayed();
		boolean actextraFields_RulesNewBtn 		 =extraFields_RulesNewBtn.isDisplayed();
		boolean actextraFields_RulesDeleteBtn 	 =extraFields_RulesDeleteBtn.isDisplayed();
		boolean actextraFields_RulesCloseBtn 	 =extraFields_RulesCloseBtn.isDisplayed();

		boolean expextraFields_RuleNameDropdown  =true;
		boolean expextraFields_RuleNameSetingBtn =true;
		boolean expextraFields_RulesSaveBtn 	 =true;
		boolean expextraFields_RulesNewBtn 		 =true;
		boolean expextraFields_RulesDeleteBtn 	 =true;
		boolean expextraFields_RulesCloseBtn 	 =true;

		System.out.println("*************************checkRulesOptionsTabInCreateCreateTabDisplayInCustomizeTab**********************");

		System.out.println("extraFields_RuleNameDropdown   : "+actextraFields_RuleNameDropdown  +" Value Expected : "+expextraFields_RuleNameDropdown);
		System.out.println("extraFields_RuleNameSetingBtn  : "+actextraFields_RuleNameSetingBtn +" Value Expected : "+expextraFields_RuleNameSetingBtn);
		System.out.println("extraFields_RulesSaveBtn       : "+actextraFields_RulesSaveBtn      +" Value Expected : "+expextraFields_RulesSaveBtn);
		System.out.println("extraFields_RulesNewBtn        : "+actextraFields_RulesNewBtn       +" Value Expected : "+expextraFields_RulesNewBtn);
		System.out.println("extraFields_RulesDeleteBtn     : "+actextraFields_RulesDeleteBtn    +" Value Expected : "+expextraFields_RulesDeleteBtn);
		System.out.println("extraFields_RulesCloseBtn      : "+actextraFields_RulesCloseBtn     +" Value Expected : "+expextraFields_RulesCloseBtn);

		if(actextraFields_RuleNameDropdown==expextraFields_RuleNameDropdown && actextraFields_RuleNameSetingBtn==expextraFields_RuleNameSetingBtn
				&& actextraFields_RulesSaveBtn==expextraFields_RulesSaveBtn && actextraFields_RulesNewBtn==expextraFields_RulesNewBtn
				&& actextraFields_RulesDeleteBtn==expextraFields_RulesDeleteBtn && actextraFields_RulesCloseBtn==expextraFields_RulesCloseBtn)
		{
			excelReader.setCellData(xlfile, "Sheet1", 334, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 334, 9, resFail);
			return false;
		}
	}


	public static boolean checkExternalModulesTabInCreateCreateTabDisplayInCustomizeTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_ExternalModulesTab));
		extraFields_ExternalModulesTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_ExternalModulesOnEventDropdown));

		boolean actextraFields_ExternalModulesOnEventDropdown  		=extraFields_ExternalModulesOnEventDropdown.isDisplayed();
		boolean actextraFields_ExternalModulesButtonCaption  		=extraFields_ExternalModulesButtonCaption.isDisplayed();
		boolean actextraFields_ExternalModules_ModuleTypeBtn  		=extraFields_ExternalModules_ModuleTypeBtn.isDisplayed();
		boolean actextraFields_ExternalModules_ModuleNameDropdown  	=extraFields_ExternalModules_ModuleNameDropdown.isDisplayed();
		boolean actextraFields_ExternalModulesClassNameDropdown  	=extraFields_ExternalModulesClassNameDropdown.isDisplayed();
		boolean actextraFields_ExternalModulesFuctionalNameDropdown =extraFields_ExternalModulesFuctionalNameDropdown.isDisplayed();
		boolean actextraFields_ExternalModulesAvabileInDropdown  	=extraFields_ExternalModulesAvabileInDropdown.isDisplayed();

		boolean expextraFields_ExternalModulesOnEventDropdown  		=true;
		boolean expextraFields_ExternalModulesButtonCaption  		=true;
		boolean expextraFields_ExternalModules_ModuleTypeBtn  		=true;
		boolean expextraFields_ExternalModules_ModuleNameDropdown  	=true;
		boolean expextraFields_ExternalModulesClassNameDropdown  	=true;
		boolean expextraFields_ExternalModulesFuctionalNameDropdown =true;
		boolean expextraFields_ExternalModulesAvabileInDropdown  	=true;

		System.out.println("********************checkExternalModulesTabInCreateCreateTabDisplayInCustomizeTab***********************");

		System.out.println("extraFields_ExternalModulesOnEventDropdown        : "+actextraFields_ExternalModulesOnEventDropdown       +" Value Expected : "+expextraFields_ExternalModulesOnEventDropdown);
		System.out.println("extraFields_ExternalModulesButtonCaption          : "+actextraFields_ExternalModulesButtonCaption         +" Value Expected : "+expextraFields_ExternalModulesButtonCaption);
		System.out.println("extraFields_ExternalModules_ModuleTypeBtn         : "+actextraFields_ExternalModules_ModuleTypeBtn        +" Value Expected : "+expextraFields_ExternalModules_ModuleTypeBtn);
		System.out.println("extraFields_ExternalModules_ModuleNameDropdown    : "+actextraFields_ExternalModules_ModuleNameDropdown   +" Value Expected : "+expextraFields_ExternalModules_ModuleNameDropdown);
		System.out.println("extraFields_ExternalModulesClassNameDropdown      : "+actextraFields_ExternalModulesClassNameDropdown     +" Value Expected : "+expextraFields_ExternalModulesClassNameDropdown);
		System.out.println("extraFields_ExternalModulesFuctionalNameDropdown  : "+actextraFields_ExternalModulesFuctionalNameDropdown +" Value Expected : "+expextraFields_ExternalModulesFuctionalNameDropdown);
		System.out.println("extraFields_ExternalModulesAvabileInDropdown      : "+actextraFields_ExternalModulesAvabileInDropdown     +" Value Expected : "+expextraFields_ExternalModulesAvabileInDropdown);

		if(actextraFields_ExternalModulesOnEventDropdown==expextraFields_ExternalModulesOnEventDropdown
				&& actextraFields_ExternalModulesButtonCaption==expextraFields_ExternalModulesButtonCaption
				&& actextraFields_ExternalModules_ModuleTypeBtn==expextraFields_ExternalModules_ModuleTypeBtn
				&& actextraFields_ExternalModules_ModuleNameDropdown==expextraFields_ExternalModules_ModuleNameDropdown
				&& actextraFields_ExternalModulesClassNameDropdown==expextraFields_ExternalModulesClassNameDropdown
				&& actextraFields_ExternalModulesFuctionalNameDropdown==expextraFields_ExternalModulesFuctionalNameDropdown
				&& actextraFields_ExternalModulesAvabileInDropdown==expextraFields_ExternalModulesAvabileInDropdown)
		{
			excelReader.setCellData(xlfile, "Sheet1", 335, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 335, 9, resFail);
			return false;
		}
	}


	public static boolean checkMandatoryFieldsByClickOnOkButtonCreateCreateTabDisplayInCustomizeTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_ClickOnFieldDetailsTab));
		extraFields_ClickOnFieldDetailsTab.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMessage="Enter the Rule Name, if Rule Added";

		String actMessage=checkValidationMessage(expMessage);

		System.err.println("  Master Accounts Page  ");

		System.out.println("********************************checkMandatoryFieldsByClickOnOkButtonCreateCreateTabDisplayInCustomizeTab***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 336, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 336, 9, resFail);
			return false;
		}
	}




	public static boolean checkCloseButtonWithInputMandatoryFieldsCreateCreateTabDisplayInCustomizeTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_CloseBtn));
		extraFields_CloseBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateCreateTabHeaderDetails));

		boolean actcustomizeMasterCreateCreateTabHeaderDetails   			=customizeMasterCreateCreateTabHeaderDetails.isDisplayed();
		boolean actcustomizeMasterCreateCreateTabBlankHeaderDetails   		=customizeMasterCreateCreateTabBlankHeaderDetails.isDisplayed();
		boolean actcustomizeMasterCreateCreateTabNewlyCreateTabSaveButton   =customizeMasterCreateCreateTabNewlyCreateTabSaveButton.isDisplayed();
		boolean actcustomizeMasterCreateCreateTabAddButton   				=customizeMasterCreateCreateTabAddButton.isDisplayed();
		boolean actcustomizeMasterCreateCreateTabPreviewButton   			=customizeMasterCreateCreateTabPreviewButton.isDisplayed();
		boolean actcustomizeMasterCreateCreateTabCloseButton   				=customizeMasterCreateCreateTabCloseButton.isDisplayed();

		boolean expcustomizeMasterCreateCreateTabHeaderDetails   			=true;
		boolean expcustomizeMasterCreateCreateTabBlankHeaderDetails   		=true;
		boolean expcustomizeMasterCreateCreateTabNewlyCreateTabSaveButton   =true;
		boolean expcustomizeMasterCreateCreateTabAddButton   				=true;
		boolean expcustomizeMasterCreateCreateTabPreviewButton   			=true;
		boolean expcustomizeMasterCreateCreateTabCloseButton   				=true;

		System.out.println("*******************checkCloseButtonWithInputMandatoryFieldsCreateCreateTabDisplayInCustomizeTab****************");

		System.out.println("customizeMasterCreateCreateTabHeaderDetails             : "+actcustomizeMasterCreateCreateTabHeaderDetails            +" Value Expected : "+expcustomizeMasterCreateCreateTabHeaderDetails);
		System.out.println("customizeMasterCreateCreateTabBlankHeaderDetails        : "+actcustomizeMasterCreateCreateTabBlankHeaderDetails       +" Value Expected : "+expcustomizeMasterCreateCreateTabBlankHeaderDetails);
		System.out.println("customizeMasterCreateCreateTabNewlyCreateTabSaveButton  : "+actcustomizeMasterCreateCreateTabNewlyCreateTabSaveButton +" Value Expected : "+expcustomizeMasterCreateCreateTabNewlyCreateTabSaveButton);
		System.out.println("customizeMasterCreateCreateTabAddButton                 : "+actcustomizeMasterCreateCreateTabAddButton                +" Value Expected : "+expcustomizeMasterCreateCreateTabAddButton);
		System.out.println("customizeMasterCreateCreateTabPreviewButton             : "+actcustomizeMasterCreateCreateTabPreviewButton            +" Value Expected : "+expcustomizeMasterCreateCreateTabPreviewButton);
		System.out.println("customizeMasterCreateCreateTabCloseButton               : "+actcustomizeMasterCreateCreateTabCloseButton              +" Value Expected : "+expcustomizeMasterCreateCreateTabCloseButton);

		if(actcustomizeMasterCreateCreateTabHeaderDetails==expcustomizeMasterCreateCreateTabHeaderDetails
				&& actcustomizeMasterCreateCreateTabBlankHeaderDetails==expcustomizeMasterCreateCreateTabBlankHeaderDetails
				&& actcustomizeMasterCreateCreateTabNewlyCreateTabSaveButton==expcustomizeMasterCreateCreateTabNewlyCreateTabSaveButton
				&& actcustomizeMasterCreateCreateTabAddButton==expcustomizeMasterCreateCreateTabAddButton
				&& actcustomizeMasterCreateCreateTabPreviewButton==expcustomizeMasterCreateCreateTabPreviewButton
				&& actcustomizeMasterCreateCreateTabCloseButton==expcustomizeMasterCreateCreateTabCloseButton)
		{
			excelReader.setCellData(xlfile, "Sheet1", 337, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 337, 9, resFail);
			return false;
		}
	}


	public static boolean checkOkButtonWithInputMandatoryFieldsCreateCreateTabDisplayInCustomizeTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateCreateTabAddButton));
		customizeMasterCreateCreateTabAddButton.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.sendKeys("Extra Field One");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMessage="Field Added Successfully.";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkOkButtonWithInputMandatoryFieldsCreateCreateTabDisplayInCustomizeTab***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 338, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 338, 9, resFail);
			return false;
		}
	}



	public static boolean checkCreatedFieldInCreateCreateTabDisplayInCustomizeTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateCreateTabHeaderDetails));
		customizeMasterCreateCreateTabHeaderDetails.click();

		boolean actcustomizeMasterCreateCreateTabHeaderDetails =customizeMasterCreateCreateTabHeaderDetails.isDisplayed();
		boolean actextraFields_CreatedByUserInHeaderDetailsTab =extraFields_CreatedByUserInHeaderDetailsTab.isDisplayed();

		boolean expcustomizeMasterCreateCreateTabHeaderDetails =true;
		boolean expextraFields_CreatedByUserInHeaderDetailsTab =true;

		System.out.println("***************************checkCreatedFieldInCreateCreateTabDisplayInCustomizeTab*****************************");

		System.out.println("customizeMasterCreateCreateTabHeaderDetails : "+actcustomizeMasterCreateCreateTabHeaderDetails+" Value Expected : "+expcustomizeMasterCreateCreateTabHeaderDetails);
		System.out.println("extraFields_CreatedByUserInHeaderDetailsTab : "+actextraFields_CreatedByUserInHeaderDetailsTab+" Value Expected : "+expextraFields_CreatedByUserInHeaderDetailsTab);

		if(actcustomizeMasterCreateCreateTabHeaderDetails==expcustomizeMasterCreateCreateTabHeaderDetails
				&& actextraFields_CreatedByUserInHeaderDetailsTab==expextraFields_CreatedByUserInHeaderDetailsTab)
		{
			excelReader.setCellData(xlfile, "Sheet1", 339, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 339, 9, resFail);
			return false;
		}
	}



	public static boolean checkEditCreatedFieldInCreateCreateTabDisplayInCustomizeTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateCreateTabHeaderDetails));
		customizeMasterCreateCreateTabHeaderDetails.click();



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_EditOptionInHeaderDetailsTab));
		extraFields_EditOptionInHeaderDetailsTab.click();



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();



		String actextraFields_FieldDetailsCaption    =extraFields_FieldDetailsCaption.getAttribute("Value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsTab));

		boolean actextraFields_FieldDetailsTab      =extraFields_FieldDetailsTab.isDisplayed();
		boolean actextraFields_PropertiesTab  		=extraFields_PropertiesTab.isDisplayed();
		boolean actextraFields_FormattingTab  		=extraFields_FormattingTab.isDisplayed();
		boolean actextraFields_RulesTab  			=extraFields_RulesTab.isDisplayed();
		boolean actextraFields_ExternalModulesTab  	=extraFields_ExternalModulesTab.isDisplayed();

		String expextraFields_FieldDetailsCaption   ="Extra Field One";
		boolean expextraFields_FieldDetailsTab      =true;
		boolean expextraFields_PropertiesTab  		=true;
		boolean expextraFields_FormattingTab  		=true;
		boolean expextraFields_RulesTab  			=true;
		boolean expextraFields_ExternalModulesTab  	=true;

		System.out.println("****************checkEditCreatedFieldInCreateCreateTabDisplayInCustomizeTab********************");

		System.out.println("extraFields_FieldDetailsCaption  : "+actextraFields_FieldDetailsCaption +" value Expected : "+expextraFields_FieldDetailsCaption);
		System.out.println("extraFields_FieldDetailsTab      : "+actextraFields_FieldDetailsTab     +" value Expected : "+expextraFields_FieldDetailsTab);
		System.out.println("extraFields_PropertiesTab        : "+actextraFields_PropertiesTab       +" value Expected : "+expextraFields_PropertiesTab);
		System.out.println("extraFields_FormattingTab        : "+actextraFields_FormattingTab       +" value Expected : "+expextraFields_FormattingTab);
		System.out.println("extraFields_RulesTab             : "+actextraFields_RulesTab            +" value Expected : "+expextraFields_RulesTab);
		System.out.println("extraFields_ExternalModulesTab   : "+actextraFields_ExternalModulesTab  +" value Expected : "+expextraFields_ExternalModulesTab);

		if(actextraFields_FieldDetailsCaption.equalsIgnoreCase(expextraFields_FieldDetailsCaption)
				&& actextraFields_FieldDetailsTab==expextraFields_FieldDetailsTab && actextraFields_PropertiesTab==expextraFields_PropertiesTab
				&& actextraFields_FormattingTab==expextraFields_FormattingTab && actextraFields_RulesTab==expextraFields_RulesTab
				&& actextraFields_ExternalModulesTab==expextraFields_ExternalModulesTab)
		{
			excelReader.setCellData(xlfile, "Sheet1", 340, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 340, 9, resFail);
			return false;
		}
	}



	public static boolean checkUpdateCreatedFieldInCreateCreateTabDisplayInCustomizeTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();
		extraFields_FieldDetailsCaption.clear();
		extraFields_FieldDetailsCaption.sendKeys("Extra Field Update On");



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMessage="Field Updated Successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkUpdateCreatedFieldInCreateCreateTabDisplayInCustomizeTab***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 341, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 341, 9, resFail);
			return false;
		}
	}


	public static boolean checkUpdateFieldInCreateCreateTabDisplayInCustomizeTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateCreateTabHeaderDetails));
		customizeMasterCreateCreateTabHeaderDetails.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_EditOptionInHeaderDetailsTab));
		extraFields_EditOptionInHeaderDetailsTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();

		String actextraFields_FieldDetailsCaption    =extraFields_FieldDetailsCaption.getAttribute("Value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsTab));

		boolean actextraFields_FieldDetailsTab      =extraFields_FieldDetailsTab.isDisplayed();
		boolean actextraFields_PropertiesTab  		=extraFields_PropertiesTab.isDisplayed();
		boolean actextraFields_FormattingTab  		=extraFields_FormattingTab.isDisplayed();
		boolean actextraFields_RulesTab  			=extraFields_RulesTab.isDisplayed();
		boolean actextraFields_ExternalModulesTab  	=extraFields_ExternalModulesTab.isDisplayed();

		String expextraFields_FieldDetailsCaption   ="Extra Field Update On";
		boolean expextraFields_FieldDetailsTab      =true;
		boolean expextraFields_PropertiesTab  		=true;
		boolean expextraFields_FormattingTab  		=true;
		boolean expextraFields_RulesTab  			=true;
		boolean expextraFields_ExternalModulesTab  	=true;

		System.out.println("****************checkUpdateFieldInCreateCreateTabDisplayInCustomizeTab********************");

		System.out.println("extraFields_FieldDetailsCaption  : "+actextraFields_FieldDetailsCaption +" value Expected : "+expextraFields_FieldDetailsCaption);
		System.out.println("extraFields_FieldDetailsTab      : "+actextraFields_FieldDetailsTab     +" value Expected : "+expextraFields_FieldDetailsTab);
		System.out.println("extraFields_PropertiesTab        : "+actextraFields_PropertiesTab       +" value Expected : "+expextraFields_PropertiesTab);
		System.out.println("extraFields_FormattingTab        : "+actextraFields_FormattingTab       +" value Expected : "+expextraFields_FormattingTab);
		System.out.println("extraFields_RulesTab             : "+actextraFields_RulesTab            +" value Expected : "+expextraFields_RulesTab);
		System.out.println("extraFields_ExternalModulesTab   : "+actextraFields_ExternalModulesTab  +" value Expected : "+expextraFields_ExternalModulesTab);

		if(actextraFields_FieldDetailsCaption.equalsIgnoreCase(expextraFields_FieldDetailsCaption)
				&& actextraFields_FieldDetailsTab==expextraFields_FieldDetailsTab && actextraFields_PropertiesTab==expextraFields_PropertiesTab
				&& actextraFields_FormattingTab==expextraFields_FormattingTab && actextraFields_RulesTab==expextraFields_RulesTab
				&& actextraFields_ExternalModulesTab==expextraFields_ExternalModulesTab)
		{
			extraFields_CloseBtn.click();
			excelReader.setCellData(xlfile, "Sheet1", 342, 9, resPass);
			return true;
		}
		else
		{
			extraFields_CloseBtn.click();
			excelReader.setCellData(xlfile, "Sheet1", 342, 9, resFail);
			return false;
		}
	}



	public static boolean checkCreateExtraFieldAfterCreation() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateCreateTabAddButton));
		customizeMasterCreateCreateTabAddButton.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.sendKeys("Exra Field Two");

		Thread.sleep(1000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMessage="Field Added Successfully.";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkCreateExtraFieldAfterCreation***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 343, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 343, 9, resFail);
			return false;
		}
	}




	public static boolean checkMoveExtraFieldAfterCreation() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_SecondFieldInHeaderDetailsTab));
		extraFields_SecondFieldInHeaderDetailsTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_MoveFieldOption));
		extraFields_MoveFieldOption.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_MoveFieldTabName));

		boolean actextraFields_MoveFieldTabName  	  =extraFields_MoveFieldTabName.isDisplayed();
		boolean actextraFields_MoveFieldHeader  	  =extraFields_MoveFieldHeader.isDisplayed();
		boolean actextraFields_MoveFieldBody  		  =extraFields_MoveFieldBody.isDisplayed();
		boolean actextraFields_MoveFieldCancelButton  =extraFields_MoveFieldCancelButton.isDisplayed();

		boolean expextraFields_MoveFieldTabName  	  =true;
		boolean expextraFields_MoveFieldHeader  	  =true;
		boolean expextraFields_MoveFieldBody  		  =true;
		boolean expextraFields_MoveFieldCancelButton  =true;

		System.out.println("***********************************checkMoveExtraFieldAfterCreation**********************************");

		System.out.println("extraFields_MoveFieldTabName       : "+actextraFields_MoveFieldTabName      +" Value Expected : "+expextraFields_MoveFieldTabName);
		System.out.println("extraFields_MoveFieldHeader        : "+actextraFields_MoveFieldHeader       +" Value Expected : "+expextraFields_MoveFieldHeader);
		System.out.println("extraFields_MoveFieldBody          : "+actextraFields_MoveFieldBody         +" Value Expected : "+expextraFields_MoveFieldBody);
		System.out.println("extraFields_MoveFieldCancelButton  : "+actextraFields_MoveFieldCancelButton +" Value Expected : "+expextraFields_MoveFieldCancelButton);

		if(actextraFields_MoveFieldTabName==expextraFields_MoveFieldTabName && actextraFields_MoveFieldHeader==expextraFields_MoveFieldHeader
				&& actextraFields_MoveFieldBody==expextraFields_MoveFieldBody && actextraFields_MoveFieldCancelButton==expextraFields_MoveFieldCancelButton)
		{	
			excelReader.setCellData(xlfile, "Sheet1", 344, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 344, 9, resFail);
			return false;
		}
	}



	public static boolean checkTabsAvailableInTabsOfMoveField() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_MoveFieldTabName));
		extraFields_MoveFieldTabName.click();

		Select tabSelect=new Select(extraFields_MoveFieldTabName);
		List <WebElement> tabsCount=tabSelect.getOptions();

		int actextraFields_MoveFieldTabName  =tabsCount.size();
		int expextraFields_MoveFieldTabName  =6;

		System.out.println("******************************checkTabsAvailableInTabsOfMoveField*****************************");

		System.out.println("extraFields_MoveFieldTabName : "+actextraFields_MoveFieldTabName+" Value Expected : "+expextraFields_MoveFieldTabName);

		if(actextraFields_MoveFieldTabName==expextraFields_MoveFieldTabName)
		{
			excelReader.setCellData(xlfile, "Sheet1", 345, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 345, 9, resFail);
			return false;
		}
	}



	public static boolean checkCancelButtonInMoveField() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_MoveFieldTabName));
		extraFields_MoveFieldTabName.sendKeys("Settings");
		extraFields_MoveFieldTabName.sendKeys(Keys.TAB);     

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_MoveFieldCancelButton));
		extraFields_MoveFieldCancelButton.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_SecondFieldInHeaderDetailsTab));

		boolean actextraFields_SecondFieldInHeaderDetailsTab =extraFields_SecondFieldInHeaderDetailsTab.isDisplayed();
		boolean expextraFields_SecondFieldInHeaderDetailsTab =true;

		System.out.println("****************************************checkCancelButtonInMoveField****************************");

		System.out.println("extraFields_SecondFieldInHeaderDetailsTab  : "+actextraFields_SecondFieldInHeaderDetailsTab+" Value Expected : "+expextraFields_SecondFieldInHeaderDetailsTab);

		if(actextraFields_SecondFieldInHeaderDetailsTab==expextraFields_SecondFieldInHeaderDetailsTab)
		{
			excelReader.setCellData(xlfile, "Sheet1", 346, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 346, 9, resFail);
			return false;
		}
	}


	public static boolean checkOkButtonInMoveField() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_SecondFieldInHeaderDetailsTab));
		extraFields_SecondFieldInHeaderDetailsTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_MoveFieldOption));
		extraFields_MoveFieldOption.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_MoveFieldTabName));
		extraFields_MoveFieldTabName.sendKeys("Settings");
		extraFields_MoveFieldTabName.sendKeys(Keys.TAB);     

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_MoveFieldOkButton));
		extraFields_MoveFieldOkButton.click();

		String expMessage="Field Moved Successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkOkButtonInMoveField***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 347, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 347, 9, resFail);
			return false;
		}
	}



	public static boolean checkMoveFieldMovedToSettingsTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingOption));
		settingOption.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_SettingsTab_MoveField));
		extraFields_SettingsTab_MoveField.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();

		String actextraFields_FieldDetailsCaption    =extraFields_FieldDetailsCaption.getAttribute("Value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsTab));

		boolean actextraFields_FieldDetailsTab      =extraFields_FieldDetailsTab.isDisplayed();
		boolean actextraFields_PropertiesTab  		=extraFields_PropertiesTab.isDisplayed();
		boolean actextraFields_FormattingTab  		=extraFields_FormattingTab.isDisplayed();
		boolean actextraFields_RulesTab  			=extraFields_RulesTab.isDisplayed();
		boolean actextraFields_ExternalModulesTab  	=extraFields_ExternalModulesTab.isDisplayed();

		String expextraFields_FieldDetailsCaption   ="Exra Field Two";
		boolean expextraFields_FieldDetailsTab      =true;
		boolean expextraFields_PropertiesTab  		=true;
		boolean expextraFields_FormattingTab  		=true;
		boolean expextraFields_RulesTab  			=true;
		boolean expextraFields_ExternalModulesTab  	=true;

		System.out.println("***************************************checkMoveFieldMovedToSettingsTab*************************************");

		System.out.println("extraFields_FieldDetailsCaption  : "+actextraFields_FieldDetailsCaption +" value Expected : "+expextraFields_FieldDetailsCaption);
		System.out.println("extraFields_FieldDetailsTab      : "+actextraFields_FieldDetailsTab     +" value Expected : "+expextraFields_FieldDetailsTab);
		System.out.println("extraFields_PropertiesTab        : "+actextraFields_PropertiesTab       +" value Expected : "+expextraFields_PropertiesTab);
		System.out.println("extraFields_FormattingTab        : "+actextraFields_FormattingTab       +" value Expected : "+expextraFields_FormattingTab);
		System.out.println("extraFields_RulesTab             : "+actextraFields_RulesTab            +" value Expected : "+expextraFields_RulesTab);
		System.out.println("extraFields_ExternalModulesTab   : "+actextraFields_ExternalModulesTab  +" value Expected : "+expextraFields_ExternalModulesTab);

		if(actextraFields_FieldDetailsCaption.equalsIgnoreCase(expextraFields_FieldDetailsCaption)
				&& actextraFields_FieldDetailsTab==expextraFields_FieldDetailsTab && actextraFields_PropertiesTab==expextraFields_PropertiesTab
				&& actextraFields_FormattingTab==expextraFields_FormattingTab && actextraFields_RulesTab==expextraFields_RulesTab
				&& actextraFields_ExternalModulesTab==expextraFields_ExternalModulesTab)
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_CloseBtn));
			extraFields_CloseBtn.click();
			excelReader.setCellData(xlfile, "Sheet1", 348, 9, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_CloseBtn));
			extraFields_CloseBtn.click();
			excelReader.setCellData(xlfile, "Sheet1", 348, 9, resFail);
			return false;
		}	
	}


	public static boolean checkDefaultFieldMoveInSettingsTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_SettingsTab_First));
		extraFields_SettingsTab_First.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_MoveFieldOption));
		extraFields_MoveFieldOption.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_SettingsTab_MoveField));

		boolean actextraFields_SettingsTab_MoveField =extraFields_SettingsTab_MoveField.isDisplayed();
		boolean expextraFields_SettingsTab_MoveField =true;

		System.out.println("*********************************checkDefaultFieldMoveInSettingsTab*****************************");

		System.out.println("extraFields_SettingsTab_MoveField  : "+actextraFields_SettingsTab_MoveField+" Value Expected : "+expextraFields_SettingsTab_MoveField);

		if(actextraFields_SettingsTab_MoveField==expextraFields_SettingsTab_MoveField)
		{
			excelReader.setCellData(xlfile, "Sheet1", 349, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 349, 9, resFail);
			return false;
		}
	}



	public static boolean checkDefaultDeleteInSettingsTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_SettingsTab_FirstDelete));
		extraFields_SettingsTab_FirstDelete.click();

		String expMessage="Default Field cannot delete";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkDefaultDeleteInSettingsTab***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 350, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 350, 9, resFail);
			return false;
		}
	}


	public static boolean checkMoveDeleteInSettingsTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_SettingsTab_MoveFieldOptsDelete));
		extraFields_SettingsTab_MoveFieldOptsDelete.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_SettingsTab_DeleteMessage));

		String actextraFields_SettingsTab_DeleteMessage  =extraFields_SettingsTab_DeleteMessage.getText();
		String expextraFields_SettingsTab_DeleteMessage  ="Are you sure that you want to delete selected Field ?";

		System.out.println("********************************checkMoveDeleteInSettingsTab***********************");

		System.out.println("extraFields_SettingsTab_DeleteMessage : "+actextraFields_SettingsTab_DeleteMessage+" Value Expected : "+expextraFields_SettingsTab_DeleteMessage);

		if(actextraFields_SettingsTab_DeleteMessage.equalsIgnoreCase(expextraFields_SettingsTab_DeleteMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 351, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 351, 9, resFail);
			return false;
		}
	}



	public static boolean checkNoOptionMoveDeleteInSettingsTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_SettingsTab_DeleteMessageNoOption));
		extraFields_SettingsTab_DeleteMessageNoOption.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_SettingsTab_MoveFieldOptsDelete));

		boolean actextraFields_SettingsTab_MoveFieldOptsDelete =extraFields_SettingsTab_MoveFieldOptsDelete.isDisplayed();
		boolean expextraFields_SettingsTab_MoveFieldOptsDelete =true;

		System.out.println("***********************************checkNoOptionMoveDeleteInSettingsTab**************************");

		System.out.println("extraFields_SettingsTab_MoveFieldOptsDelete  : "+actextraFields_SettingsTab_MoveFieldOptsDelete+" Value Expected : "+expextraFields_SettingsTab_MoveFieldOptsDelete);

		if(actextraFields_SettingsTab_MoveFieldOptsDelete==expextraFields_SettingsTab_MoveFieldOptsDelete)
		{
			excelReader.setCellData(xlfile, "Sheet1", 352, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 352, 9, resFail);
			return false;
		}
	}


	public static boolean checkYesOptionMoveDeleteInSettingsTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_SettingsTab_MoveFieldOptsDelete));
		extraFields_SettingsTab_MoveFieldOptsDelete.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_SettingsTab_DeleteMessageYesOption));
		extraFields_SettingsTab_DeleteMessageYesOption.click();

		String expMessage="Field deleted Successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkYesOptionMoveDeleteInSettingsTab***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 353, 9, resPass);
			return true;
		}	
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 353, 9, resFail);
			return false;
		}
	}




	public static boolean checkPreviewButtonBeforeLogout() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PreviewTab));
		extraFields_PreviewTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_GeneralTab));

		boolean actextraFields_GeneralTab			=extraFields_GeneralTab.isDisplayed();
		boolean actextraFields_SettingsTab			=extraFields_SettingsTab.isDisplayed();
		boolean actextraFields_DetailsTab			=extraFields_DetailsTab.isDisplayed();
		boolean actextraFields_PrintLayout			=extraFields_PrintLayout.isDisplayed();
		boolean actextraFields_TreeTabUpdate		=extraFields_TreeTabUpdate.isDisplayed();
		boolean actextraFields_DocumentTab			=extraFields_DocumentTab.isDisplayed();
		boolean actextraFields_CreateTab			=extraFields_CreateTab.isDisplayed();
		boolean actextraFields_PreviewTab_CloseBtn	=extraFields_PreviewTab_CloseBtn.isDisplayed();

		boolean expextraFields_GeneralTab			=true;
		boolean expextraFields_SettingsTab			=true;
		boolean expextraFields_DetailsTab			=true;
		boolean expextraFields_PrintLayout			=true;
		boolean expextraFields_TreeTabUpdate		=true;
		boolean expextraFields_DocumentTab			=true;
		boolean expextraFields_CreateTab			=true;
		boolean expextraFields_PreviewTab_CloseBtn	=true;

		System.out.println("***************************************checkPreviewButtonBeforeLogout*******************************");

		System.out.println("extraFields_GeneralTab          : "+actextraFields_GeneralTab           +"  value expected  "+expextraFields_GeneralTab);
		System.out.println("extraFields_SettingsTab         : "+actextraFields_SettingsTab          +"  value expected  "+expextraFields_SettingsTab);
		System.out.println("extraFields_DetailsTab          : "+actextraFields_DetailsTab           +"  value expected  "+expextraFields_DetailsTab);
		System.out.println("extraFields_PrintLayout         : "+actextraFields_PrintLayout          +"  value expected  "+expextraFields_PrintLayout);
		System.out.println("extraFields_TreeTabUpdate       : "+actextraFields_TreeTabUpdate        +"  value expected  "+expextraFields_TreeTabUpdate);
		System.out.println("extraFields_DocumentTab         : "+actextraFields_DocumentTab          +"  value expected  "+expextraFields_DocumentTab);
		System.out.println("extraFields_CreateTab           : "+actextraFields_CreateTab            +"  value expected  "+expextraFields_CreateTab);
		System.out.println("extraFields_PreviewTab_CloseBtn : "+actextraFields_PreviewTab_CloseBtn  +"  value expected  "+expextraFields_PreviewTab_CloseBtn);


		if(actextraFields_GeneralTab==expextraFields_GeneralTab && actextraFields_SettingsTab==expextraFields_SettingsTab && 
				actextraFields_DetailsTab==expextraFields_DetailsTab && actextraFields_PrintLayout==expextraFields_PrintLayout && 
				actextraFields_TreeTabUpdate==expextraFields_TreeTabUpdate && actextraFields_DocumentTab==expextraFields_DocumentTab && 
				actextraFields_CreateTab==expextraFields_CreateTab && actextraFields_PreviewTab_CloseBtn==expextraFields_PreviewTab_CloseBtn)
		{
			excelReader.setCellData(xlfile, "Sheet1", 354, 9, resFail);
			return false;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 354, 9, resPass);
			return true;
		}
	}


	public static boolean checkCloseBtnPreviewButtonBeforeLogout() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PreviewTab_CloseBtn));
		extraFields_PreviewTab_CloseBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(generalTab));

		boolean actgeneralTab   						=generalTab.isDisplayed();
		boolean actsettingOption   						=settingOption.isDisplayed();
		boolean actaccountMasterFieldDetailsOption   	=accountMasterFieldDetailsOption.isDisplayed();
		boolean actaccountMasterFieldPrintLayoutOption  =accountMasterFieldPrintLayoutOption.isDisplayed();

		boolean expgeneralTab   						=true;
		boolean expsettingOption   						=true;
		boolean expaccountMasterFieldDetailsOption   	=true;
		boolean expaccountMasterFieldPrintLayoutOption  =true;

		System.out.println("*****************************************checkCloseBtnPreviewButtonBeforeLogout*********************************");

		System.out.println("generalTab                           : "+actgeneralTab                          +" Value Expected : "+expgeneralTab);
		System.out.println("settingOption                        : "+actsettingOption                       +" Value Expected : "+expsettingOption);
		System.out.println("accountMasterFieldDetailsOption      : "+actaccountMasterFieldDetailsOption     +" Value Expected : "+expaccountMasterFieldDetailsOption);
		System.out.println("accountMasterFieldPrintLayoutOption  : "+actaccountMasterFieldPrintLayoutOption +" Value Expected : "+expaccountMasterFieldPrintLayoutOption);

		if(actgeneralTab==expgeneralTab && actsettingOption==expsettingOption
				&& actaccountMasterFieldDetailsOption==expaccountMasterFieldDetailsOption
				&& actaccountMasterFieldPrintLayoutOption==expaccountMasterFieldPrintLayoutOption)
		{
			excelReader.setCellData(xlfile, "Sheet1", 355, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 355, 9, resFail);
			return false;
		}
	}

	//Here we need to logout and chekc the customize

	public static boolean checkLogoutAfterCustomization() throws EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
		userNameDisplay.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();

		boolean verifyFiledsStatus=true;

		getWebDriverWait().until(ExpectedConditions.visibilityOf(username));

		boolean actusername			=username.isDisplayed();
		boolean actpassword	 	    =password.isDisplayed();
		boolean actcompanyDropDownList =companyDropDownList.isDisplayed();
		boolean actsignIn				=signIn.isDisplayed();

		boolean expusername			=true;
		boolean exppassword			=true;
		boolean expcompanyDropDownList	=true;
		boolean expsignIn				=true;

		System.out.println("************************************* checkLogoutAfterCustomization  *********************************");

		System.out.println("username             : "+actusername            +" Value Expected : "+expusername);
		System.out.println("password             : "+actpassword            +" Value Expected : "+exppassword);
		System.out.println("companyDropDownList  : "+actcompanyDropDownList +" Value Expected : "+expcompanyDropDownList);
		System.out.println("signIn               : "+actsignIn              +" Value Expected : "+expsignIn);

		if(actusername==expusername && actpassword==exppassword && actcompanyDropDownList==expcompanyDropDownList && actsignIn==expsignIn)
		{
			excelReader.setCellData(xlfile, "Sheet1", 356, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 356, 9, resFail);
			return false;
		}
	}


	public static boolean checkSignToCheckTabsInCustomization() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(username));
		username.sendKeys("su");
		getAction().moveToElement(username).sendKeys(Keys.TAB).perform();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
		password.sendKeys("su");
		//getAction().moveToElement(password).sendKeys(Keys.TAB).perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(signIn));
		signIn.click();

		Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();

		//To Check Login User Home Page is display

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));




		getFluentWebDriverWait().until(ExpectedConditions.textToBePresentInElement(userNameDisplay, "SU"));

		String userInfo=userNameDisplay.getText();

		System.out.println("User Info : "+userInfo);

		System.out.println("User Info Capture Text :"+userNameDisplay.getText());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
		companyLogo.click();

		String getCompanyTxt			=companyName.getText();
		String getLoginCompanyName		=getCompanyTxt.substring(0, 19);
		companyLogo.click();

		String expuserInfo				="SU";
		String expLoginCompanyName		="Automation Company ";

		if(userInfo.equalsIgnoreCase(expuserInfo) /*&& getLoginCompanyName.equalsIgnoreCase(expLoginCompanyName)*/)
		{
			getLogger().info("Login User the Company Name and Information is displaying correct");
			System.out.println("Pass : Login User and Company Name is displaying Correct");
			excelReader.setCellData(xlfile, "Sheet1", 357, 9, resPass);
			return true;
		}
		else
		{	
			getLogger().info("Fail : Login User the Company Name and Information is displaying Wrong");
			System.out.println("Fail : Login Name the Company Name and Information is displaying Wrong");
			excelReader.setCellData(xlfile, "Sheet1", 357, 9, resFail);
			return false;
		}
	}


	public static boolean checkOpenAccountsMasterAfterCustomization() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountsTitle));

		String actaccountsTitle  =accountsTitle.getText();
		String expaccountsTitle  ="Account";

		System.out.println("*********************************checkOpenAccountsMasterAfterCustomization**************************");

		System.out.println("accountsTitle  : "+actaccountsTitle+" Value Expected : "+expaccountsTitle);

		if(actaccountsTitle.equalsIgnoreCase(expaccountsTitle))
		{	
			excelReader.setCellData(xlfile, "Sheet1", 358, 9, resPass);
			return true;
		}	 
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 358, 9, resFail);
			return false;
		}
	}



	public static boolean checkCustomizeMasterTabOptionAfterAddingTabsWithLogout() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));	
		masterRibbonControlNextBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonControlNextBtn));	
		masterRibbonControlNextBtn.click();
		masterRibbonControlNextBtn.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(minusBtn));
		minusBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(plusBtn));

		boolean actplusBtn         							    =plusBtn.isDisplayed();
		boolean actmasterFieldsOption         					=masterFieldsOption.isDisplayed();
		boolean actaccountMasterFieldsUniqueConstraintsOption   =accountMasterFieldsUniqueConstraintsOption.isDisplayed();
		boolean actRulesOption         						    =RulesOption.isDisplayed();
		boolean actrules_ExternalModules         				=rules_ExternalModules.isDisplayed();
		boolean actitemInfoPanelCustomizationTab         		=itemInfoPanelCustomizationTab.isDisplayed();
		boolean actaccountReportsTab         					=accountReportsTab.isDisplayed();

		boolean expplusBtn         							    =true;
		boolean expmasterFieldsOption         					=true;
		boolean expaccountMasterFieldsUniqueConstraintsOption  =true;
		boolean expRulesOption         						    =true;
		boolean exprules_ExternalModules         				=true;
		boolean expitemInfoPanelCustomizationTab         		=true;
		boolean expaccountReportsTab         					=true;

		System.out.println("****************************checkCustomizeMasterTabOptionAfterAddingTabsWithLogout**********************************");

		System.out.println("plusBtn                                    : "+actplusBtn                                    +" Value Expected : "+expplusBtn);
		System.out.println("masterFieldsOption                         : "+actmasterFieldsOption                         +" Value Expected : "+expmasterFieldsOption);
		System.out.println("accountMasterFieldsUniqueConstraintsOption : "+actaccountMasterFieldsUniqueConstraintsOption +" Value Expected : "+expaccountMasterFieldsUniqueConstraintsOption);
		System.out.println("RulesOption                                : "+actRulesOption                                +" Value Expected : "+expRulesOption);
		System.out.println("rules_ExternalModules                      : "+actrules_ExternalModules                      +" Value Expected : "+exprules_ExternalModules);
		System.out.println("itemInfoPanelCustomizationTab              : "+actitemInfoPanelCustomizationTab              +" Value Expected : "+expitemInfoPanelCustomizationTab);
		System.out.println("accountReportsTab                          : "+actaccountReportsTab                          +" Value Expected : "+expaccountReportsTab);

		if(actplusBtn==expplusBtn && actmasterFieldsOption==expmasterFieldsOption 
				&& actaccountMasterFieldsUniqueConstraintsOption==expaccountMasterFieldsUniqueConstraintsOption
				&& actRulesOption==expRulesOption && actrules_ExternalModules==exprules_ExternalModules
				&& actitemInfoPanelCustomizationTab==expitemInfoPanelCustomizationTab && actaccountReportsTab==expaccountReportsTab)	
		{		 
			excelReader.setCellData(xlfile, "Sheet1", 359, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 359, 9, resFail);
			return false;
		}
	}



	public static boolean checkCustomizeMasterTabMasterFieldsOptionAfterAddingTabs() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(plusBtn));
		plusBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(generalTab));

		boolean actgeneralTab                           =generalTab.isDisplayed();
		boolean actsettingOption                        =settingOption.isDisplayed();
		boolean actaccountMasterFieldDetailsOption      =accountMasterFieldDetailsOption.isDisplayed();
		boolean actaccountMasterFieldPrintLayoutOption  =accountMasterFieldPrintLayoutOption.isDisplayed();
		boolean actcustomizeTabWithTreeTabUpdate        =customizeTabWithTreeTabUpdate.isDisplayed();
		boolean actcustomizeTabWithDocumentTab          =customizeTabWithDocumentTab.isDisplayed();
		boolean actcustomizeTabWithCreateTreeTab        =customizeTabWithCreateTreeTab.isDisplayed();

		boolean expgeneralTab                           =true;
		boolean expsettingOption                        =true;
		boolean expaccountMasterFieldDetailsOption      =true;
		boolean expaccountMasterFieldPrintLayoutOption  =true;
		boolean expcustomizeTabWithTreeTabUpdate        =true;
		boolean expcustomizeTabWithDocumentTab          =true;
		boolean expcustomizeTabWithCreateTreeTab        =true;

		System.out.println("*************************************checkCustomizeMasterTabMasterFieldsOption***********************************");

		System.out.println("generalTab                          : "+actgeneralTab                          +" Value Expected : "+expgeneralTab);
		System.out.println("settingOption                       : "+actsettingOption                       +" Value Expected : "+expsettingOption);
		System.out.println("accountMasterFieldDetailsOption     : "+actaccountMasterFieldDetailsOption     +" Value Expected : "+expaccountMasterFieldDetailsOption);
		System.out.println("accountMasterFieldPrintLayoutOption : "+actaccountMasterFieldPrintLayoutOption +" Value Expected : "+expaccountMasterFieldPrintLayoutOption);
		System.out.println("customizeTabWithTreeTabUpdate       : "+actcustomizeTabWithTreeTabUpdate       +" Value Expected : "+expcustomizeTabWithTreeTabUpdate);
		System.out.println("customizeTabWithDocumentTab         : "+actcustomizeTabWithDocumentTab         +" Value Expected : "+expcustomizeTabWithDocumentTab);
		System.out.println("customizeTabWithCreateTreeTab       : "+actcustomizeTabWithCreateTreeTab       	+" Value Expected : "+expcustomizeTabWithCreateTreeTab);

		if(actgeneralTab==expgeneralTab && actsettingOption==expsettingOption
				&& actaccountMasterFieldDetailsOption==expaccountMasterFieldDetailsOption
				&& actaccountMasterFieldPrintLayoutOption==expaccountMasterFieldPrintLayoutOption
				&& actcustomizeTabWithTreeTabUpdate==expcustomizeTabWithTreeTabUpdate
				&& actcustomizeTabWithDocumentTab==expcustomizeTabWithDocumentTab
				&& actcustomizeTabWithCreateTreeTab==expcustomizeTabWithCreateTreeTab)
		{
			excelReader.setCellData(xlfile, "Sheet1", 360, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 360, 9, resFail);
			return false;
		}
	}




	public static boolean checkPreviewOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PreviewTab));
		extraFields_PreviewTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_GeneralTab));

		boolean actextraFields_GeneralTab			=extraFields_GeneralTab.isDisplayed();
		boolean actextraFields_SettingsTab			=extraFields_SettingsTab.isDisplayed();
		boolean actextraFields_DetailsTab			=extraFields_DetailsTab.isDisplayed();
		boolean actextraFields_PrintLayout			=extraFields_PrintLayout.isDisplayed();
		boolean actextraFields_TreeTabUpdate		=extraFields_TreeTabUpdate.isDisplayed();
		boolean actextraFields_DocumentTab			=extraFields_DocumentTab.isDisplayed();
		boolean actextraFields_CreateTab			=extraFields_CreateTab.isDisplayed();
		boolean actextraFields_PreviewTab_CloseBtn	=extraFields_PreviewTab_CloseBtn.isDisplayed();

		boolean expextraFields_GeneralTab			=true;
		boolean expextraFields_SettingsTab			=true;
		boolean expextraFields_DetailsTab			=true;
		boolean expextraFields_PrintLayout			=true;
		boolean expextraFields_TreeTabUpdate		=true;
		boolean expextraFields_DocumentTab			=true;
		boolean expextraFields_CreateTab			=true;
		boolean expextraFields_PreviewTab_CloseBtn	=true;

		System.out.println("***************************************checkPreviewOption*******************************");

		System.out.println("extraFields_GeneralTab          : "+actextraFields_GeneralTab           +"  value expected  "+expextraFields_GeneralTab);
		System.out.println("extraFields_SettingsTab         : "+actextraFields_SettingsTab          +"  value expected  "+expextraFields_SettingsTab);
		System.out.println("extraFields_DetailsTab          : "+actextraFields_DetailsTab           +"  value expected  "+expextraFields_DetailsTab);
		System.out.println("extraFields_PrintLayout         : "+actextraFields_PrintLayout          +"  value expected  "+expextraFields_PrintLayout);
		System.out.println("extraFields_TreeTabUpdate       : "+actextraFields_TreeTabUpdate        +"  value expected  "+expextraFields_TreeTabUpdate);
		System.out.println("extraFields_DocumentTab         : "+actextraFields_DocumentTab          +"  value expected  "+expextraFields_DocumentTab);
		System.out.println("extraFields_CreateTab           : "+actextraFields_CreateTab            +"  value expected  "+expextraFields_CreateTab);
		System.out.println("extraFields_PreviewTab_CloseBtn : "+actextraFields_PreviewTab_CloseBtn  +"  value expected  "+expextraFields_PreviewTab_CloseBtn);


		if(actextraFields_GeneralTab==expextraFields_GeneralTab && actextraFields_SettingsTab==expextraFields_SettingsTab && 
				actextraFields_DetailsTab==expextraFields_DetailsTab && actextraFields_PrintLayout==expextraFields_PrintLayout && 
				actextraFields_TreeTabUpdate==expextraFields_TreeTabUpdate && actextraFields_DocumentTab==expextraFields_DocumentTab && 
				actextraFields_CreateTab==expextraFields_CreateTab && actextraFields_PreviewTab_CloseBtn==expextraFields_PreviewTab_CloseBtn)
		{
			excelReader.setCellData(xlfile, "Sheet1", 361, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 361, 9, resFail);
			return false;
		}
	}


	public static boolean checkGeneralTabInPreviewOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));

		Select oSelect = new Select(accountTypeDropdown);
		List <WebElement> elementCount = oSelect.getOptions();
		int actaccTypeSize = elementCount.size();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));

		boolean actnameTxt                =nameTxt.isDisplayed();
		boolean actcodeTxt                =codeTxt.isDisplayed();
		boolean actaccountTypeDropdown    =accountTypeDropdown.isDisplayed();
		boolean actcreditLimitTxt         =creditLimitTxt.isDisplayed();
		boolean actcreditdaysTxt          =creditdaysTxt.isDisplayed();
		boolean actchequeDiscountLimitTxt =chequeDiscountLimitTxt.isDisplayed();
		boolean actrateofinterestTxt      =rateofinterestTxt.isDisplayed();
		boolean actbankAccountTxt         =bankAccountTxt.isDisplayed();


		int     expaccTypeSize            =39;
		boolean expnameTxt                =true;
		boolean expcodeTxt                =true;
		boolean expaccountTypeDropdown    =true;
		boolean expcreditLimitTxt         =true;
		boolean expcreditdaysTxt          =true;
		boolean expchequeDiscountLimitTxt =true;
		boolean exprateofinterestTxt      =true;
		boolean expbankAccountTxt         =true;

		System.out.println("*******************************checkGeneralTabInPreviewOption************************");

		System.out.println("nameTxt                 : "+actnameTxt                +" Value Expected : "+expnameTxt);
		System.out.println("codeTxt                 : "+actcodeTxt                +" Value Expected : "+expcodeTxt);
		System.out.println("accountTypeDropdown     : "+actaccountTypeDropdown    +" Value Expected : "+expaccountTypeDropdown);
		System.out.println("creditLimitTxt          : "+actcreditLimitTxt         +" Value Expected : "+expcreditLimitTxt);
		System.out.println("creditdaysTxt           : "+actcreditdaysTxt          +" Value Expected : "+expcreditdaysTxt);
		System.out.println("chequeDiscountLimitTxt  : "+actchequeDiscountLimitTxt +" Value Expected : "+expchequeDiscountLimitTxt);
		System.out.println("rateofinterestTxt       : "+actrateofinterestTxt      +" Value Expected : "+exprateofinterestTxt);
		System.out.println("bankAccountTxt          : "+actbankAccountTxt         +" Value Expected : "+expbankAccountTxt);
		System.out.println("accTypeSize             : "+actaccTypeSize            +" Value Expected : "+expaccTypeSize);


		if(actnameTxt==expnameTxt && actcodeTxt==expcodeTxt && actaccountTypeDropdown==expaccountTypeDropdown 
				&& actcreditLimitTxt==expcreditLimitTxt && actcreditdaysTxt==expcreditdaysTxt && actchequeDiscountLimitTxt==expchequeDiscountLimitTxt
				&& actrateofinterestTxt==exprateofinterestTxt && actbankAccountTxt==expbankAccountTxt && actaccTypeSize==expaccTypeSize)
		{

			excelReader.setCellData(xlfile, "Sheet1", 362, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 362, 9, resFail);
			return false;
		}
	}



	public static boolean checkSettingsTabInPreviewOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerAccountSettingTab));
		headerAccountSettingTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(debitCreditProposalDropdown));

		boolean actdebitCreditProposalDropdown                =debitCreditProposalDropdown.isDisplayed();
		boolean actdebitCreditRequiredDropdown                =debitCreditRequiredDropdown.isDisplayed();
		boolean actexchangeAdjustmentGainACTxt                =exchangeAdjustmentGainACTxt.isDisplayed();
		boolean actexchangeAdjustmentLossACTxt                =exchangeAdjustmentLossACTxt.isDisplayed();
		boolean actprimaryAccountTxt               		   =primaryAccountTxt.isDisplayed();
		boolean actdefaultCurrencyTxt		                   =defaultCurrencyTxt.isDisplayed();
		boolean actconsolidationMethodDropdown                =consolidationMethodDropdown.isDisplayed();
		boolean actpaymentTermstxt                            =paymentTermstxt.isDisplayed();
		boolean actreminderTermsTxt                           =reminderTermsTxt.isDisplayed();
		boolean actfinanceChargeTermsTxt                      =financeChargeTermsTxt.isDisplayed();

		boolean expdebitCreditProposalDropdown                =true;
		boolean expdebitCreditRequiredDropdown                =true;
		boolean expexchangeAdjustmentGainACTxt                =true;
		boolean expexchangeAdjustmentLossACTxt                =true;
		boolean expprimaryAccountTxt               		   =true;
		boolean expdefaultCurrencyTxt		                   =true;
		boolean expconsolidationMethodDropdown                =true;
		boolean exppaymentTermstxt                            =true;
		boolean expreminderTermsTxt                           =true;
		boolean expfinanceChargeTermsTxt                      =true;

		System.out.println("***********************************checkSettingsTabInPreviewOption*************************");

		System.out.println("debitCreditProposalDropdown    : "+actdebitCreditProposalDropdown+" Value Expected : "+expdebitCreditProposalDropdown);
		System.out.println("debitCreditRequiredDropdown    : "+actdebitCreditRequiredDropdown+" Value Expected : "+expdebitCreditRequiredDropdown);
		System.out.println("exchangeAdjustmentGainACTxt    : "+actexchangeAdjustmentGainACTxt+" Value Expected : "+expexchangeAdjustmentGainACTxt);
		System.out.println("exchangeAdjustmentLossACTxt    : "+actexchangeAdjustmentLossACTxt+" Value Expected : "+expexchangeAdjustmentLossACTxt);
		System.out.println("primaryAccountTxt              : "+actprimaryAccountTxt          +" Value Expected : "+expprimaryAccountTxt);
		System.out.println("defaultCurrencyTxt             : "+actdefaultCurrencyTxt         +" Value Expected : "+expdefaultCurrencyTxt);
		System.out.println("consolidationMethodDropdown    : "+actconsolidationMethodDropdown+" Value Expected : "+expconsolidationMethodDropdown);
		System.out.println("paymentTermstxt                : "+actpaymentTermstxt            +" Value Expected : "+exppaymentTermstxt);
		System.out.println("reminderTermsTxt               : "+actreminderTermsTxt           +" Value Expected : "+expreminderTermsTxt);
		System.out.println("financeChargeTermsTxt          : "+actfinanceChargeTermsTxt      +" Value Expected : "+expfinanceChargeTermsTxt);

		if(actdebitCreditProposalDropdown==expdebitCreditProposalDropdown && actdebitCreditRequiredDropdown==expdebitCreditRequiredDropdown
				&& actexchangeAdjustmentGainACTxt==expexchangeAdjustmentGainACTxt && actexchangeAdjustmentLossACTxt==expexchangeAdjustmentLossACTxt
				&& actprimaryAccountTxt==expprimaryAccountTxt && actdefaultCurrencyTxt==expdefaultCurrencyTxt
				&& actconsolidationMethodDropdown==expconsolidationMethodDropdown && actpaymentTermstxt==exppaymentTermstxt
				&& actreminderTermsTxt==expreminderTermsTxt && actfinanceChargeTermsTxt==expfinanceChargeTermsTxt)
		{
			excelReader.setCellData(xlfile, "Sheet1", 363, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 363, 9, resFail);
			return false;
		}
	}



	public static boolean checkDetailsTabInPreviewOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerDetailsTab));
		headerDetailsTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addressTxt));

		boolean actaddressTxt           		=addressTxt.isDisplayed();
		boolean actcityTxt           			=cityTxt.isDisplayed();
		boolean actdeliveryAddressTxt          =deliveryAddressTxt.isDisplayed();
		boolean actpinTxt           			=pinTxt.isDisplayed();
		boolean actcity2Text           		=city2Text.isDisplayed();
		boolean actpin2Txt           			=pin2Txt.isDisplayed();
		boolean actsendEmailCheckBox           =sendEmailCheckBox.isDisplayed();
		boolean actallowCustomerPortalCheckBox =allowCustomerPortalCheckBox.isDisplayed();
		boolean actsendEmailTxt                =sendEmailTxt.isDisplayed();
		boolean actpasswordTxt           		=passwordTxt.isDisplayed();
		boolean acttelphoneNumberTxt           =telphoneNumberTxt.isDisplayed();
		boolean actfaxNoTxt           			=faxNoTxt.isDisplayed();

		boolean expaddressTxt           		=true;
		boolean expcityTxt           			=true;
		boolean expdeliveryAddressTxt          =true;
		boolean exppinTxt           			=true;
		boolean expcity2Text           		=true;
		boolean exppin2Txt           			=true;
		boolean expsendEmailCheckBox           =true;
		boolean expallowCustomerPortalCheckBox =true;
		boolean expsendEmailTxt                =true;
		boolean exppasswordTxt           		=true;
		boolean exptelphoneNumberTxt           =true;
		boolean expfaxNoTxt           			=true;

		System.out.println("*********************************checkDetailsTabInPreviewOption**************************");

		System.out.println("addressTxt                  : "+actaddressTxt                  +" Value Expected : "+expaddressTxt);
		System.out.println("cityTxt                     : "+actcityTxt                     +" Value Expected : "+expcityTxt);
		System.out.println("deliveryAddressTxt          : "+actdeliveryAddressTxt          +" Value Expected : "+expdeliveryAddressTxt);
		System.out.println("pinTxt                      : "+actpinTxt                      +" Value Expected : "+exppinTxt);
		System.out.println("city2Text                   : "+actcity2Text                   +" Value Expected : "+expcity2Text);
		System.out.println("pin2Txt                     : "+actpin2Txt                     +" Value Expected : "+exppin2Txt);
		System.out.println("sendEmailCheckBox           : "+actsendEmailCheckBox           +" Value Expected : "+expsendEmailCheckBox);
		System.out.println("allowCustomerPortalCheckBox : "+actallowCustomerPortalCheckBox +" Value Expected : "+expallowCustomerPortalCheckBox);
		System.out.println("sendEmailTxt                : "+actsendEmailTxt                +" Value Expected : "+expsendEmailTxt);
		System.out.println("passwordTxt                 : "+actpasswordTxt                 +" Value Expected : "+exppasswordTxt);
		System.out.println("telphoneNumberTxt           : "+acttelphoneNumberTxt           +" Value Expected : "+exptelphoneNumberTxt);
		System.out.println("faxNoTxt                    : "+actfaxNoTxt                    +" Value Expected : "+expfaxNoTxt);

		if(actaddressTxt==expaddressTxt && actcityTxt==expcityTxt && actdeliveryAddressTxt==expdeliveryAddressTxt
				&& actpinTxt==exppinTxt && actcity2Text==expcity2Text && actpin2Txt==exppin2Txt && actsendEmailCheckBox==expsendEmailCheckBox
				&& actallowCustomerPortalCheckBox==expallowCustomerPortalCheckBox && actsendEmailTxt==expsendEmailTxt && actpasswordTxt==exppasswordTxt
				&& acttelphoneNumberTxt==exptelphoneNumberTxt && actfaxNoTxt==expfaxNoTxt)
		{
			excelReader.setCellData(xlfile, "Sheet1", 364, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 364, 9, resFail);
			return false;
		}
	}


	public static boolean checkPrintLayoutTabInPreviewOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerPrintLayoutTab));
		headerPrintLayoutTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridVoucherTypeTxt));
		gridVoucherTypeTxt.click();

		boolean actgridVoucherTypeTxt =gridVoucherTypeTxt.isDisplayed();
		boolean actgridPrintLayoutTxt =gridPrintLayoutTxt.isDisplayed();

		boolean expgridVoucherTypeTxt =true;
		boolean expgridPrintLayoutTxt =true;

		System.out.println("**********************************checkPrintLayoutTabInPreviewOption*************************");

		System.out.println("gridVoucherTypeTxt  : "+actgridVoucherTypeTxt+" Value Expected : "+expgridVoucherTypeTxt);
		System.out.println("gridPrintLayoutTxt  : "+actgridPrintLayoutTxt+" Value Expected : "+expgridPrintLayoutTxt);

		if(actgridVoucherTypeTxt==expgridVoucherTypeTxt && actgridPrintLayoutTxt==expgridPrintLayoutTxt)
		{

			excelReader.setCellData(xlfile, "Sheet1", 365, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 365, 9, resFail);
			return false;
		}
	}


	public static boolean checkTreeTabUpdateInPreviewOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_TreeTabUpdate));
		extraFields_TreeTabUpdate.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeIdDropdown));	

		boolean actmasterTreeIdDropdown    	        =masterTreeIdDropdown.isDisplayed();
		boolean actmasterTreeViewIDDropdown    	    =masterTreeViewIDDropdown.isDisplayed();
		boolean actmasterOptionToHideAccountsGroupTree =masterOptionToHideAccountsGroupTree.isDisplayed();
		boolean actaccountAssestsGroup 				=accountAssestsGroup.isDisplayed();

		boolean expmasterTreeIdDropdown        	    =true;
		boolean expmasterTreeViewIDDropdown    	    =true;
		boolean expmasterOptionToHideAccountsGroupTree =true;
		boolean expaccountAssestsGroup 				=true;

		System.out.println("*********************************checkTreeTabUpdateInPreviewOption****************************");

		System.out.println("masterTreeIdDropdown                  : "+actmasterTreeIdDropdown                  +" Value Expected : "+expmasterTreeIdDropdown);
		System.out.println("masterTreeViewIDDropdown              : "+actmasterTreeViewIDDropdown              +" Value Expected : "+expmasterTreeViewIDDropdown);
		System.out.println("masterOptionToHideAccountsGroupTree   : "+actmasterOptionToHideAccountsGroupTree   +" Value Expected : "+expmasterOptionToHideAccountsGroupTree);
		System.out.println("accountAssestsGroup                   : "+actaccountAssestsGroup                   +" Value Expected : "+expaccountAssestsGroup);

		if(actmasterTreeIdDropdown==expmasterTreeIdDropdown  && actmasterTreeViewIDDropdown==expmasterTreeViewIDDropdown
				&& actmasterOptionToHideAccountsGroupTree==expmasterOptionToHideAccountsGroupTree
				&& actaccountAssestsGroup==expaccountAssestsGroup)
		{	
			excelReader.setCellData(xlfile, "Sheet1", 366, 9, resPass);
			return true;
		}	 
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 366, 9, resFail);
			return false;
		}
	}



	public static boolean checkDocumentTabInPreviewOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_DocumentTab));
		extraFields_DocumentTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PreviewTab_DocumentTab_FileName));

		boolean actextraFields_PreviewTab_DocumentTab_FileName  		=extraFields_PreviewTab_DocumentTab_FileName.isDisplayed();
		boolean actextraFields_PreviewTab_DocumentTab_Document  		=extraFields_PreviewTab_DocumentTab_Document.isDisplayed();
		boolean actextraFields_PreviewTab_DocumentTab_UploadDocument 	=extraFields_PreviewTab_DocumentTab_UploadDocument.isDisplayed();
		boolean actextraFields_PreviewTab_DocumentTab_SaveDocument  	=extraFields_PreviewTab_DocumentTab_SaveDocument.isDisplayed();
		boolean actextraFields_PreviewTab_DocumentTab_DeleteDocument  	=extraFields_PreviewTab_DocumentTab_DeleteDocument.isDisplayed();
		boolean actextraFields_PreviewTab_DocumentTab_FileSize  		=extraFields_PreviewTab_DocumentTab_FileSize.isDisplayed();

		boolean expextraFields_PreviewTab_DocumentTab_FileName  		=true;
		boolean expextraFields_PreviewTab_DocumentTab_Document  		=true;
		boolean expextraFields_PreviewTab_DocumentTab_UploadDocument 	=true;
		boolean expextraFields_PreviewTab_DocumentTab_SaveDocument  	=true;
		boolean expextraFields_PreviewTab_DocumentTab_DeleteDocument  	=true;
		boolean expextraFields_PreviewTab_DocumentTab_FileSize  		=true;

		System.out.println("******************************checkDocumentTabInPreviewOption*********************************");

		System.out.println("extraFields_PreviewTab_DocumentTab_FileName        : "+actextraFields_PreviewTab_DocumentTab_FileName       +" Value Expected : "+expextraFields_PreviewTab_DocumentTab_FileName);
		System.out.println("extraFields_PreviewTab_DocumentTab_Document        : "+actextraFields_PreviewTab_DocumentTab_Document       +" Value Expected : "+expextraFields_PreviewTab_DocumentTab_Document);
		System.out.println("extraFields_PreviewTab_DocumentTab_UploadDocument  : "+actextraFields_PreviewTab_DocumentTab_UploadDocument +" Value Expected : "+expextraFields_PreviewTab_DocumentTab_UploadDocument);
		System.out.println("extraFields_PreviewTab_DocumentTab_SaveDocument    : "+actextraFields_PreviewTab_DocumentTab_SaveDocument   +" Value Expected : "+expextraFields_PreviewTab_DocumentTab_SaveDocument);
		System.out.println("extraFields_PreviewTab_DocumentTab_DeleteDocument  : "+actextraFields_PreviewTab_DocumentTab_DeleteDocument +" Value Expected : "+expextraFields_PreviewTab_DocumentTab_DeleteDocument);
		System.out.println("extraFields_PreviewTab_DocumentTab_FileSize        : "+actextraFields_PreviewTab_DocumentTab_FileSize       +" Value Expected : "+expextraFields_PreviewTab_DocumentTab_FileSize);


		if(actextraFields_PreviewTab_DocumentTab_FileName==expextraFields_PreviewTab_DocumentTab_FileName
				&& actextraFields_PreviewTab_DocumentTab_Document==expextraFields_PreviewTab_DocumentTab_Document
				&& actextraFields_PreviewTab_DocumentTab_UploadDocument==expextraFields_PreviewTab_DocumentTab_UploadDocument 
				&& actextraFields_PreviewTab_DocumentTab_SaveDocument==expextraFields_PreviewTab_DocumentTab_SaveDocument
				&& actextraFields_PreviewTab_DocumentTab_DeleteDocument==expextraFields_PreviewTab_DocumentTab_DeleteDocument
				&& actextraFields_PreviewTab_DocumentTab_FileSize==expextraFields_PreviewTab_DocumentTab_FileSize)
		{
			excelReader.setCellData(xlfile, "Sheet1", 367, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 367, 9, resFail);
			return false;
		}
	}


	public static boolean checkCreateTabInPreviewOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_CreateTab));
		extraFields_CreateTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PreviewTab_CreateCreateTab_ExtraFieldUpdate));

		boolean actextraFields_PreviewTab_CreateCreateTab_ExtraFieldUpdate =extraFields_PreviewTab_CreateCreateTab_ExtraFieldUpdate.isDisplayed();
		boolean expextraFields_PreviewTab_CreateCreateTab_ExtraFieldUpdate =true;

		System.out.println("********************************checkCreateTabInPreviewOption********************************");

		System.out.println("extraFields_PreviewTab_CreateCreateTab_ExtraFieldUpdate : "+actextraFields_PreviewTab_CreateCreateTab_ExtraFieldUpdate+" Value Expected : "+expextraFields_PreviewTab_CreateCreateTab_ExtraFieldUpdate);

		if(actextraFields_PreviewTab_CreateCreateTab_ExtraFieldUpdate==expextraFields_PreviewTab_CreateCreateTab_ExtraFieldUpdate)
		{
			excelReader.setCellData(xlfile, "Sheet1", 368, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 368, 9, resFail);
			return false;
		}
	}


	public static boolean checkCloseBtnPreviewOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PreviewTab_CloseBtn));
		extraFields_PreviewTab_CloseBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(generalTab));

		boolean actgeneralTab                           =generalTab.isDisplayed();
		boolean actsettingOption                        =settingOption.isDisplayed();
		boolean actaccountMasterFieldDetailsOption      =accountMasterFieldDetailsOption.isDisplayed();
		boolean actaccountMasterFieldPrintLayoutOption  =accountMasterFieldPrintLayoutOption.isDisplayed();

		boolean expgeneralTab                           =true;
		boolean expsettingOption                        =true;
		boolean expaccountMasterFieldDetailsOption      =true;
		boolean expaccountMasterFieldPrintLayoutOption  =true;

		System.out.println("*************************************checkCloseBtnPreviewOption***********************************");

		System.out.println("generalTab                          : "+actgeneralTab                          +" Value Expected : "+expgeneralTab);
		System.out.println("settingOption                       : "+actsettingOption                       +" Value Expected : "+expsettingOption);
		System.out.println("accountMasterFieldDetailsOption     : "+actaccountMasterFieldDetailsOption     +" Value Expected : "+expaccountMasterFieldDetailsOption);
		System.out.println("accountMasterFieldPrintLayoutOption : "+actaccountMasterFieldPrintLayoutOption +" Value Expected : "+expaccountMasterFieldPrintLayoutOption);

		if(actgeneralTab==expgeneralTab && actsettingOption==expsettingOption
				&& actaccountMasterFieldDetailsOption==expaccountMasterFieldDetailsOption
				&& actaccountMasterFieldPrintLayoutOption==expaccountMasterFieldPrintLayoutOption)
		{
			excelReader.setCellData(xlfile, "Sheet1", 369, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 369, 9, resFail);
			return false;
		}
	}



	public static boolean checkCloseBtnCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountCloseBtn));
		accountCloseBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountAssestsGroup));	


		boolean actaccountAssestsGroup    	            =accountAssestsGroup.isDisplayed();
		boolean actaccountFixedAssestsGroup    	     	=accountFixedAssestsGroup.isDisplayed();
		boolean actaccountCurrentAssetsGroup    	    	=accountCurrentAssetsGroup.isDisplayed();
		boolean actaccountCAshAndBankGroup    	        =accountCAshAndBankGroup.isDisplayed();
		boolean actaccountInventoriesGroup    	        =accountInventoriesGroup.isDisplayed();
		boolean actaccountAccountsReceivableGroup    		=accountAccountsReceivableGroup.isDisplayed();
		boolean actaccountInvestmentsGroup    	        =accountInvestmentsGroup.isDisplayed();
		boolean actaccountExpensesGroup    	       	 	=accountExpensesGroup.isDisplayed();
		boolean actaccountDirectExpensesGroup    	   	 	=accountDirectExpensesGroup.isDisplayed();
		boolean actaccountIndirectExpensesGroup    		=accountIndirectExpensesGroup.isDisplayed();
		boolean actaccountAdministrativeExpensesGroup  	=accountAdministrativeExpensesGroup.isDisplayed();
		boolean actaccountEmployeeBenefitsGroup    		=accountEmployeeBenefitsGroup.isDisplayed();
		boolean actaccountFinancialChargesGroup    		=accountFinancialChargesGroup.isDisplayed();
		boolean actaccountGainAndLossGroup    	        =accountGainAndLossGroup.isDisplayed();
		boolean actaccountControlAccountsGroup    	    =accountControlAccountsGroup.isDisplayed();
		boolean actaccountRevenueGroup    	            =accountRevenueGroup.isDisplayed();
		boolean actaccountSalesGroup    	            	=accountSalesGroup.isDisplayed();
		boolean actaccountEqitiesGroup    	            =accountEqitiesGroup.isDisplayed();
		boolean actaccountCapitalGroup    	            =accountCapitalGroup.isDisplayed();
		boolean actaccountLiabilitiesGroup    	        =accountLiabilitiesGroup.isDisplayed();
		boolean actaccountLoanAndBorrowingGroup    		=accountLoanAndBorrowingGroup.isDisplayed();
		boolean actaccountLoansGroup    	            	=accountLoansGroup.isDisplayed();
		boolean actaccountAccruedLiabilitiesGroup    		=accountAccruedLiabilitiesGroup.isDisplayed();
		boolean actaccountTradePayableGroup    	    	=accountTradePayableGroup.isDisplayed();
		boolean actaccountProvisionsGroup    	        	=accountProvisionsGroup.isDisplayed();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxt));	

		boolean actmasterSearchTxt    							=masterSearchTxt.isDisplayed();
		boolean actmasterSearchBtn    							=masterSearchBtn.isDisplayed();
		boolean actmastercmbMasterTxt    							=mastercmbMasterTxt.isDisplayed();
		boolean actmasterCmbMasterExpansionBtn    				=masterCmbMasterExpansionBtn.isDisplayed();
		boolean actmasterCumMasterSettingBtn    					=masterCumMasterSettingBtn.isDisplayed();
		boolean actmasterMoveTheSelectionToNextBookMarkBtn    	=masterMoveTheSelectionToNextBookMarkBtn.isDisplayed();
		boolean actmasterMoveTheSelectionToPrevoiusBookmarkBtn 	=masterMoveTheSelectionToPrevoiusBookmarkBtn.isDisplayed();
		boolean actmasterShowAllRecordsBtn    					=masterShowAllRecordsBtn.isDisplayed();
		boolean actmasterShowAllUnauthorisedRecords    			=masterShowAllUnauthorisedRecords.isDisplayed();
		boolean actmasterShowAllClosedRecordsBtn    				=masterShowAllClosedRecordsBtn.isDisplayed();
		boolean actmasterAutoAdjustColoumnsBtn    				=masterAutoAdjustColoumnsBtn.isDisplayed();
		boolean actmasterRetainSelectionCheckBox    				=masterRetainSelectionCheckBox.isDisplayed();
		boolean actmasterSideBarBtn    							=masterSideBarBtn.isDisplayed();



		boolean expaccountAssestsGroup    	            =true;
		boolean expaccountFixedAssestsGroup    	    	=true;
		boolean expaccountCurrentAssetsGroup    	    	=true;
		boolean expaccountCAshAndBankGroup    	        =true;
		boolean expaccountInventoriesGroup    	        =true;
		boolean expaccountAccountsReceivableGroup    		=true;
		boolean expaccountInvestmentsGroup    	        =true;
		boolean expaccountExpensesGroup    	        	=true;
		boolean expaccountDirectExpensesGroup    	   	 	=true;
		boolean expaccountIndirectExpensesGroup    		=true;
		boolean expaccountAdministrativeExpensesGroup  	=true;
		boolean expaccountEmployeeBenefitsGroup    		=true;
		boolean expaccountFinancialChargesGroup    		=true;
		boolean expaccountGainAndLossGroup    	        =true;
		boolean expaccountControlAccountsGroup    	    =true;
		boolean expaccountRevenueGroup    	            =true;
		boolean expaccountSalesGroup    	            	=true;
		boolean expaccountEqitiesGroup    	            =true;
		boolean expaccountCapitalGroup    	            =true;
		boolean expaccountLiabilitiesGroup    	        =true;
		boolean expaccountLoanAndBorrowingGroup    		=true;
		boolean expaccountLoansGroup    	            	=true;
		boolean expaccountAccruedLiabilitiesGroup    		=true;
		boolean expaccountTradePayableGroup    	    	=true;
		boolean expaccountProvisionsGroup    	        	=true;

		boolean expmasterSearchTxt    							=true;
		boolean expmasterSearchBtn    							=true;
		boolean expmastercmbMasterTxt    							=true;
		boolean expmasterCmbMasterExpansionBtn    				=true;
		boolean expmasterCumMasterSettingBtn    					=true;
		boolean expmasterMoveTheSelectionToNextBookMarkBtn    	=true;
		boolean expmasterMoveTheSelectionToPrevoiusBookmarkBtn 	=true;
		boolean expmasterShowAllRecordsBtn    					=true;
		boolean expmasterShowAllUnauthorisedRecords    			=true;
		boolean expmasterShowAllClosedRecordsBtn    				=true;
		boolean expmasterAutoAdjustColoumnsBtn    				=true;
		boolean expmasterRetainSelectionCheckBox    				=true;
		boolean expmasterSideBarBtn    							=true;

		System.out.println("******************************checkCloseBtnCustomizeMaster***********************************");

		System.out.println("accountAssestsGroup                         : "+actaccountAssestsGroup                         +" Value Expected : "+expaccountAssestsGroup);
		System.out.println("accountFixedAssestsGroup                    : "+actaccountFixedAssestsGroup                    +" Value Expected : "+expaccountFixedAssestsGroup);
		System.out.println("accountCurrentAssetsGroup                   : "+actaccountCurrentAssetsGroup                   +" Value Expected : "+expaccountCurrentAssetsGroup);
		System.out.println("accountCAshAndBankGroup                     : "+actaccountCAshAndBankGroup                     +" Value Expected : "+expaccountCAshAndBankGroup);
		System.out.println("accountInventoriesGroup                     : "+actaccountInventoriesGroup                     +" Value Expected : "+expaccountInventoriesGroup);
		System.out.println("accountAccountsReceivableGroup              : "+actaccountAccountsReceivableGroup              +" Value Expected : "+expaccountAccountsReceivableGroup);
		System.out.println("accountInvestmentsGroup                     : "+actaccountInvestmentsGroup                     +" Value Expected : "+expaccountInvestmentsGroup);
		System.out.println("accountExpensesGroup                        : "+actaccountExpensesGroup                        +" Value Expected : "+expaccountExpensesGroup);
		System.out.println("accountDirectExpensesGroup                  : "+actaccountDirectExpensesGroup                  +" Value Expected : "+expaccountDirectExpensesGroup);
		System.out.println("accountIndirectExpensesGroup                : "+actaccountIndirectExpensesGroup                +" Value Expected : "+expaccountIndirectExpensesGroup);
		System.out.println("accountAdministrativeExpensesGroup          : "+actaccountAdministrativeExpensesGroup          +" Value Expected : "+expaccountAdministrativeExpensesGroup);
		System.out.println("accountEmployeeBenefitsGroup                : "+actaccountEmployeeBenefitsGroup                +" Value Expected : "+expaccountEmployeeBenefitsGroup);
		System.out.println("accountFinancialChargesGroup                : "+actaccountFinancialChargesGroup                +" Value Expected : "+expaccountFinancialChargesGroup);
		System.out.println("accountGainAndLossGroup                     : "+actaccountGainAndLossGroup                     +" Value Expected : "+expaccountGainAndLossGroup);
		System.out.println("accountControlAccountsGroup                 : "+actaccountControlAccountsGroup                 +" Value Expected : "+expaccountControlAccountsGroup);
		System.out.println("accountRevenueGroup                         : "+actaccountRevenueGroup                         +" Value Expected : "+expaccountRevenueGroup);
		System.out.println("accountSalesGroup                           : "+actaccountSalesGroup                           +" Value Expected : "+expaccountSalesGroup);
		System.out.println("accountEqitiesGroup                         : "+actaccountEqitiesGroup                         +" Value Expected : "+expaccountEqitiesGroup);
		System.out.println("accountCapitalGroup                         : "+actaccountCapitalGroup                         +" Value Expected : "+expaccountCapitalGroup);
		System.out.println("accountLiabilitiesGroup                     : "+actaccountLiabilitiesGroup                     +" Value Expected : "+expaccountLiabilitiesGroup);
		System.out.println("accountLoanAndBorrowingGroup                : "+actaccountLoanAndBorrowingGroup                +" Value Expected : "+expaccountLoanAndBorrowingGroup);
		System.out.println("accountLoansGroup                           : "+actaccountLoansGroup                           +" Value Expected : "+expaccountLoansGroup);
		System.out.println("accountAccruedLiabilitiesGroup              : "+actaccountAccruedLiabilitiesGroup              +" Value Expected : "+expaccountAccruedLiabilitiesGroup);
		System.out.println("accountTradePayableGroup                    : "+actaccountTradePayableGroup                    +" Value Expected : "+expaccountTradePayableGroup);
		System.out.println("accountProvisionsGroup                      : "+actaccountProvisionsGroup                      +" Value Expected : "+expaccountProvisionsGroup);
		System.out.println("masterSearchTxt                             : "+actmasterSearchTxt                             +" Value Expected : "+expmasterSearchTxt);
		System.out.println("masterSearchBtn                             : "+actmasterSearchBtn                             +" Value Expected : "+expmasterSearchBtn);
		System.out.println("mastercmbMasterTxt                          : "+actmastercmbMasterTxt                          +" Value Expected : "+expmastercmbMasterTxt);
		System.out.println("masterCmbMasterExpansionBtn                 : "+actmasterCmbMasterExpansionBtn                 +" Value Expected : "+expmasterCmbMasterExpansionBtn);
		System.out.println("masterCumMasterSettingBtn                   : "+actmasterCumMasterSettingBtn                   +" Value Expected : "+expmasterCumMasterSettingBtn);
		System.out.println("masterMoveTheSelectionToNextBookMarkBtn     : "+actmasterMoveTheSelectionToNextBookMarkBtn     +" Value Expected : "+expmasterMoveTheSelectionToNextBookMarkBtn);
		System.out.println("masterMoveTheSelectionToPrevoiusBookmarkBtn : "+actmasterMoveTheSelectionToPrevoiusBookmarkBtn +" Value Expected : "+expmasterMoveTheSelectionToPrevoiusBookmarkBtn);
		System.out.println("masterShowAllRecordsBtn                     : "+actmasterShowAllRecordsBtn                     +" Value Expected : "+expmasterShowAllRecordsBtn);
		System.out.println("masterShowAllUnauthorisedRecords            : "+actmasterShowAllUnauthorisedRecords            +" Value Expected : "+expmasterShowAllUnauthorisedRecords);
		System.out.println("masterShowAllClosedRecordsBtn               : "+actmasterShowAllClosedRecordsBtn               +" Value Expected : "+expmasterShowAllClosedRecordsBtn);
		System.out.println("masterAutoAdjustColoumnsBtn                 : "+actmasterAutoAdjustColoumnsBtn                 +" Value Expected : "+expmasterAutoAdjustColoumnsBtn);
		System.out.println("masterRetainSelectionCheckBox               : "+actmasterRetainSelectionCheckBox               +" Value Expected : "+expmasterRetainSelectionCheckBox);
		System.out.println("masterSideBarBtn                            : "+actmasterSideBarBtn                            +" Value Expected : "+expmasterSideBarBtn);

		if(actaccountAssestsGroup==expaccountAssestsGroup && actaccountFixedAssestsGroup==expaccountFixedAssestsGroup 
				&& actaccountCurrentAssetsGroup==expaccountCurrentAssetsGroup
				&& actaccountCAshAndBankGroup==expaccountCAshAndBankGroup && actaccountInventoriesGroup==expaccountInventoriesGroup 
				&& actaccountAccountsReceivableGroup==expaccountAccountsReceivableGroup &&  actaccountInvestmentsGroup==expaccountInvestmentsGroup 
				&& actaccountExpensesGroup==expaccountExpensesGroup && actaccountDirectExpensesGroup==expaccountDirectExpensesGroup 
				&& actaccountIndirectExpensesGroup==expaccountIndirectExpensesGroup && actaccountAdministrativeExpensesGroup==expaccountAdministrativeExpensesGroup
				&& actaccountEmployeeBenefitsGroup==expaccountEmployeeBenefitsGroup && actaccountFinancialChargesGroup==expaccountFinancialChargesGroup 
				&& actaccountGainAndLossGroup==expaccountGainAndLossGroup && actaccountControlAccountsGroup==expaccountControlAccountsGroup
				&& actaccountRevenueGroup==expaccountRevenueGroup && actaccountSalesGroup==expaccountSalesGroup
				&& actaccountEqitiesGroup==expaccountEqitiesGroup && actaccountCapitalGroup==expaccountCapitalGroup
				&& actaccountLiabilitiesGroup==expaccountLiabilitiesGroup && actaccountLoanAndBorrowingGroup==expaccountLoanAndBorrowingGroup
				&& actaccountLoansGroup==expaccountLoansGroup && actaccountAccruedLiabilitiesGroup==expaccountAccruedLiabilitiesGroup
				&& actaccountTradePayableGroup==expaccountTradePayableGroup && actaccountProvisionsGroup==expaccountProvisionsGroup
				&& actmasterSearchTxt==expmasterSearchTxt && actmasterSearchBtn==expmasterSearchBtn && actmastercmbMasterTxt==expmastercmbMasterTxt
				&& actmasterCmbMasterExpansionBtn==expmasterCmbMasterExpansionBtn && actmasterCumMasterSettingBtn==expmasterCumMasterSettingBtn
				&& actmasterMoveTheSelectionToNextBookMarkBtn==expmasterMoveTheSelectionToNextBookMarkBtn
				&& actmasterMoveTheSelectionToPrevoiusBookmarkBtn==expmasterMoveTheSelectionToPrevoiusBookmarkBtn
				&& actmasterShowAllRecordsBtn==expmasterShowAllRecordsBtn && actmasterShowAllUnauthorisedRecords==expmasterShowAllUnauthorisedRecords
				&& actmasterShowAllClosedRecordsBtn==expmasterShowAllClosedRecordsBtn && actmasterAutoAdjustColoumnsBtn==expmasterAutoAdjustColoumnsBtn
				&& actmasterRetainSelectionCheckBox==expmasterRetainSelectionCheckBox && actmasterSideBarBtn==expmasterSideBarBtn)
		{	
			excelReader.setCellData(xlfile, "Sheet1", 370, 9, resPass);
			return true;
		}	 
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 370, 9, resFail);
			return false;
		}
	}



	public static boolean checkMasterCmbMasters() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastercmbMasterTxt));
		mastercmbMasterTxt.click();
		mastercmbMasterTxt.sendKeys("Vendor B");
		Thread.sleep(3000);
		mastercmbMasterTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
		masterEditBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();

		String actnameTxt  =nameTxt.getAttribute("Value");
		String expnameTxt  ="Vendor B";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editcloseBtn));
		editcloseBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectVendorB));
		selectVendorB.click();

		System.out.println("************************************checkMasterCmbMasters**********************");

		System.out.println("nameTxt  : "+actnameTxt+" Value Expected : "+expnameTxt);

		if(actnameTxt.equalsIgnoreCase(expnameTxt))
		{
			System.out.println("pass");
			excelReader.setCellData(xlfile, "Sheet1", 371, 9, resPass);
			return true;
		}
		else
		{
			System.out.println("fail");
			excelReader.setCellData(xlfile, "Sheet1", 371, 9, resFail);
			return false;
		}
	}


	/* public static boolean checkClickOnAddGroup() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	  excelReader=new ExcelReader(POJOUtility.getExcelPath());
	  xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

      getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterAddGroupBtn));

      masterAddGroupBtn.click();

      getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerGeneralTab));

		 if(headerGeneralTab.isDisplayed() && headerAccountSettingTab.isDisplayed() &&
			 headerDetailsTab.isDisplayed() && headerPrintLayoutTab.isDisplayed() &&
			 SaveBtn.isDisplayed() && closeBtn.isDisplayed() && extraFields_TreeTabUpdate.isDisplayed() &&
		 extraFields_DocumentTab.isDisplayed() && extraFields_CreateTab.isDisplayed())
		 {

			 excelReader.setCellData(xlfile, "Sheet1", 372, 9, resPass);
			 return true;
		 }
		 else
		 {


			 excelReader.setCellData(xlfile, "Sheet1", 372, 9, resFail);
			 return false;
		 }
 }



 public static boolean checkAddGroupGeneralTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";


	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));

	 Select oSelect = new Select(accountTypeDropdown);
	 List <WebElement> elementCount = oSelect.getOptions();



	 int accTypeSize = elementCount.size();
	 System.out.println("Account Type :"+accTypeSize);

	 if(nameTxt.isDisplayed() && codeTxt.isDisplayed() &&
			 accountTypeDropdown.isDisplayed() && creditLimitTxt.isDisplayed() &&
			 creditdaysTxt.isDisplayed()  && chequeDiscountLimitTxt.isDisplayed() &&
			 rateofinterestTxt.isDisplayed() && pdcDicountAccount.isDisplayed()  && bankAccountTxt.isDisplayed() && accTypeSize==24)
	 {

		 excelReader.setCellData(xlfile, "Sheet1", 373, 9, resPass);
		 return true;
	 }
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 373, 9, resFail);
		 return false;
	 }
 }




 public static boolean checkAddGroupSettingsTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerAccountSettingTab));

	 headerAccountSettingTab.click();

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(debitCreditProposalDropdown));

	 if(debitCreditProposalDropdown.isDisplayed() && debitCreditRequiredDropdown.isDisplayed() &&
			 exchangeAdjustmentGainACTxt.isDisplayed() && exchangeAdjustmentLossACTxt.isDisplayed() &&
			 primaryAccountTxt.isDisplayed() && defaultCurrencyTxt.isDisplayed() &&
			 consolidationMethodDropdown.isDisplayed() && paymentTermstxt.isDisplayed() &&
			 reminderTermsTxt.isDisplayed() && financeChargeTermsTxt.isDisplayed())
	 {

		 excelReader.setCellData(xlfile, "Sheet1", 374, 9, resPass);
		 return true;
	 }
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 374, 9, resFail);
		 return false;
	 }
 }



 public static boolean checkAddGroupDetailsTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerDetailsTab));

	 headerDetailsTab.click();

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addressTxt));

	 if(addressTxt.isDisplayed() && cityTxt.isDisplayed() &&
			 deliveryAddressTxt.isDisplayed() && pinTxt.isDisplayed() &&
			 city2Text.isDisplayed() && pin2Txt.isDisplayed() &&
			 sendEmailCheckBox.isDisplayed() && allowCustomerPortalCheckBox.isDisplayed() &&
			 sendEmailTxt.isDisplayed() && passwordTxt.isDisplayed() && 
			 telphoneNumberTxt.isDisplayed() && faxNoTxt.isDisplayed() && 
			 portalEmailTxt.isDisplayed())
	 {

		 excelReader.setCellData(xlfile, "Sheet1", 375, 9, resPass);
		 return true;
	 }
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 375, 9, resFail);
		 return false;
	 }
 }


 public static boolean checkAddGroupPrintLayoutTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerPrintLayoutTab));

	 headerPrintLayoutTab.click();

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridVoucherTypeTxt));

	 gridVoucherTypeTxt.click();

	 if(gridVoucherTypeTxt.isDisplayed() && gridPrintLayoutTxt.isDisplayed())
	 {

		 excelReader.setCellData(xlfile, "Sheet1", 376, 9, resPass);
		 return true;
	 }
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 376, 9, resFail);
		 return false;
	 }
 }





 public static boolean checkAddGroupTreeTabUpdateTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
     excelReader=new ExcelReader(POJOUtility.getExcelPath());
     xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_TreeTabUpdate));

	 extraFields_TreeTabUpdate.click();

	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeIdDropdown));	


	 if(masterTreeIdDropdown.isDisplayed() && 
		 masterTreeViewIDDropdown.isDisplayed() &&
		 masterOptionToHideAccountsGroupTree.isDisplayed() && accountAssestsGroup.isDisplayed())
	 {	
			excelReader.setCellData(xlfile, "Sheet1", 377, 9, resPass);
			return true;
	 }	 
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 377, 9, resFail);
		 return false;
	 }
 }




 public static boolean checkAddGroupDocumentTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_DocumentTab));

	 extraFields_DocumentTab.click();

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PreviewTab_DocumentTab_FileName));


	 if(extraFields_PreviewTab_DocumentTab_FileName.isDisplayed()  && extraFields_PreviewTab_DocumentTab_Document.isDisplayed() &&
			 addGroupDocumentTab_UploadDocument.isDisplayed()  && addGroupDocumentTab_SaveDocument.isDisplayed() &&
			 addGroupDocumentTab_DeleteDocument.isDisplayed()  && extraFields_PreviewTab_DocumentTab_FileSize.isDisplayed())
	 {

		 excelReader.setCellData(xlfile, "Sheet1", 378, 9, resPass);
		 return true;
	 }
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 378, 9, resFail);
		 return false;
	 }
 }



 public static boolean checkAddGroupCreateTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";


	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_CreateTab));

	 extraFields_CreateTab.click();


	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addGroupCreateCreateTab_ExtraFieldUpdate));

	 if(addGroupCreateCreateTab_ExtraFieldUpdate.isDisplayed())
	 {

		 excelReader.setCellData(xlfile, "Sheet1", 379, 9, resPass);
		 return true;
	 }
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 379, 9, resFail);
		 return false;
	 }
 }









 public static boolean checkSaveButtonWithoutInputNameMandatoryFieldsInAddGroup() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	 {

		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerGeneralTab));

		 headerGeneralTab.click();

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));

		 SaveBtn.click();

		 if(validationConfirmationMessage.getText().equalsIgnoreCase("In Tab :General ---> Name Field is Required"))
		 {
			 closeValidationConfirmationMessage.click();
			 excelReader.setCellData(xlfile, "Sheet1", 380, 9, resPass);
			 return true;
		 }
		 else
		 {
			 excelReader.setCellData(xlfile, "Sheet1", 380, 9, resFail);
			 return false;
		 }
   }


	public static boolean checkSaveButtonWithoutInputCodeMandatoryFieldsInAddGroup() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));

		 nameTxt.sendKeys("Vendor Group");

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));

		 SaveBtn.click();

		 if(validationConfirmationMessage.getText().equalsIgnoreCase("In Tab :General ---> Code Field is Required"))
		 {
			 closeValidationConfirmationMessage.click();
			 excelReader.setCellData(xlfile, "Sheet1", 381, 9, resPass);
			 return true;
		 }
		 else
		 {
			 excelReader.setCellData(xlfile, "Sheet1", 381, 9, resFail);
			 return false;
		 }
   }




	public static boolean checkSaveButtonWithInputingMandatoryFieldsInAdGroup() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{

	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));

     codeTxt.click();



     codeTxt.sendKeys("Vendor Group");

     getAction().moveToElement(codeTxt).sendKeys(Keys.TAB).perform();

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));

	 SaveBtn.click();

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));

	 System.out.println("validationConfirmationMessage"+validationConfirmationMessage.getText());

	 System.out.println("validationConfirmationMessage"+validationConfirmationMessage.getAttribute("Value"));

	 if(validationConfirmationMessage.getText().equalsIgnoreCase("Saved Successfully"))
	 {
		 closeValidationConfirmationMessage.click();
		 excelReader.setCellData(xlfile, "Sheet1", 382, 9, resPass);
		 return true;
	 }
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 382, 9, resFail);
		 return false;
	 }
  }



public static boolean checkAddGroupCreationScreenAfterSaving() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{

	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));

	 Select oSelect = new Select(accountTypeDropdown);
	 List <WebElement> elementCount = oSelect.getOptions();

	 int accTypeSize = elementCount.size();
	 System.out.println("Account Type :"+accTypeSize);

	 if(headerGeneralTab.isDisplayed() && headerAccountSettingTab.isDisplayed() &&
		 headerDetailsTab.isDisplayed() && headerPrintLayoutTab.isDisplayed() &&
		 SaveBtn.isDisplayed() && closeBtn.isDisplayed() && nameTxt.isDisplayed() && codeTxt.isDisplayed() &&
		 accountTypeDropdown.isDisplayed() && creditLimitTxt.isDisplayed() &&
		 creditdaysTxt.isDisplayed() && chequeDiscountLimitTxt.isDisplayed() &&
		 rateofinterestTxt.isDisplayed() && bankAccountTxt.isDisplayed() && accTypeSize==24)
	 {

		 excelReader.setCellData(xlfile, "Sheet1", 383, 9, resPass);
		 return true;
	 }
	 else
	 {


		 excelReader.setCellData(xlfile, "Sheet1", 383, 9, resFail);
		 return false;
	 }
  }


public static boolean checkAccountGroupDisplayInAccountGrid() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{

	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";


	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));

	 closeBtn.click();

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountGroupCreation));

	 if(accountGroupCreation.isDisplayed())
	 { 
		 excelReader.setCellData(xlfile, "Sheet1", 384, 9, resPass);
		 return true;
	 }
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 384, 9, resFail);
		 return false;
	 }
  }



public static boolean checkCreateAcountInAccountGroup() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{

	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountGroupCreation));

	 getAction().doubleClick(accountGroupCreation).perform();

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clickOnAccountGroupToDisplayTitle));

	 if(clickOnAccountGroupToDisplayTitle.isDisplayed() && clickOnEmptyGroup.getText().equalsIgnoreCase("No record found"))
	 { 
		 excelReader.setCellData(xlfile, "Sheet1", 385, 9, resPass);
		 return true;
	 }
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 385, 9, resFail);
		 return false;
	 }
  }




public static boolean checkNewButtonInAddGroupToCreateAccount() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{

	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));

	 masterNewBtn.click();

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerGeneralTab));

	 if(headerGeneralTab.isDisplayed() && headerAccountSettingTab.isDisplayed() &&
		 headerDetailsTab.isDisplayed() && headerPrintLayoutTab.isDisplayed() &&
		 SaveBtn.isDisplayed() && closeBtn.isDisplayed() )
	 {

		 excelReader.setCellData(xlfile, "Sheet1", 386, 9, resPass);
		 return true;
	 }
	 else
	 {


		 excelReader.setCellData(xlfile, "Sheet1", 386, 9, resFail);
		 return false;
	 }
  }

public static boolean checkGenralTabOnClickOnNewUnderAddGroup() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{

	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));

	 Select oSelect = new Select(accountTypeDropdown);
	 List <WebElement> elementCount = oSelect.getOptions();

	 int accTypeSize = elementCount.size();
	 System.out.println("Account Type :"+accTypeSize);

	 if(nameTxt.isDisplayed() && codeTxt.isDisplayed() &&
			 accountTypeDropdown.isDisplayed() && creditLimitTxt.isDisplayed() &&
			 creditdaysTxt.isDisplayed() && chequeDiscountLimitTxt.isDisplayed() &&
			 rateofinterestTxt.isDisplayed() && bankAccountTxt.isDisplayed() && accTypeSize==24)
	 {

		 excelReader.setCellData(xlfile, "Sheet1", 387, 9, resPass);
		 return true;
	 }
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 387, 9, resFail);
		 return false;
	 }
  }


public static boolean checkSettingsTabOnClickOnNewUnderAddGroup() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{

	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerAccountSettingTab));

	 headerAccountSettingTab.click();

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(debitCreditProposalDropdown));

	 if(debitCreditProposalDropdown.isDisplayed() && debitCreditRequiredDropdown.isDisplayed() &&
			 exchangeAdjustmentGainACTxt.isDisplayed() && exchangeAdjustmentLossACTxt.isDisplayed() &&
			 primaryAccountTxt.isDisplayed() && defaultCurrencyTxt.isDisplayed() &&
			 consolidationMethodDropdown.isDisplayed() && paymentTermstxt.isDisplayed() &&
			 reminderTermsTxt.isDisplayed() && financeChargeTermsTxt.isDisplayed())
	 {

		 excelReader.setCellData(xlfile, "Sheet1", 388, 9, resPass);
		 return true;
	 }
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 388, 9, resFail);
		 return false;
	 }
  }



public static boolean checkDetailsTabOnClickOnNewUnderAddGroup() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{

	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerDetailsTab));

	 headerDetailsTab.click();

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addressTxt));

	 if(addressTxt.isDisplayed() && cityTxt.isDisplayed() &&
			 deliveryAddressTxt.isDisplayed() && pinTxt.isDisplayed() &&
			 city2Text.isDisplayed() && pin2Txt.isDisplayed() &&
			 sendEmailCheckBox.isDisplayed() && allowCustomerPortalCheckBox.isDisplayed() &&
			 sendEmailTxt.isDisplayed() && passwordTxt.isDisplayed() && 
			 telphoneNumberTxt.isDisplayed() && faxNoTxt.isDisplayed() && 
			 portalEmailTxt.isDisplayed())
	 {

		 excelReader.setCellData(xlfile, "Sheet1", 389, 9, resPass);
		 return true;
	 }
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 389, 9, resFail);
		 return false;
	 }
  }


public static boolean checkPrintlayoutTabOnClickOnNewAddGroup() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{

	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerPrintLayoutTab));

	 headerPrintLayoutTab.click();

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridVoucherTypeTxt));

	 gridVoucherTypeTxt.click();

	 if(gridVoucherTypeTxt.isDisplayed() && gridPrintLayoutTxt.isDisplayed())
	 {

		 excelReader.setCellData(xlfile, "Sheet1", 390, 9, resPass);
		 return true;
	 }
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 390, 9, resFail);
		 return false;
	 }
  }


 public static boolean checkNewAccountUnderAddGroupTreeTabUpdateTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
     excelReader=new ExcelReader(POJOUtility.getExcelPath());
     xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_TreeTabUpdate));

	 extraFields_TreeTabUpdate.click();

	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeIdDropdown));	


	 if(masterTreeIdDropdown.isDisplayed() && 
		 masterTreeViewIDDropdown.isDisplayed() &&
		 masterOptionToHideAccountsGroupTree.isDisplayed() && accountAssestsGroup.isDisplayed())
	 {	
			excelReader.setCellData(xlfile, "Sheet1", 391, 9, resPass);
			return true;
	 }	 
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 391, 9, resFail);
		 return false;
	 }
 }




 public static boolean checkNewUnderAddGroupDocumentTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_DocumentTab));

	 extraFields_DocumentTab.click();

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PreviewTab_DocumentTab_FileName));


	 if(extraFields_PreviewTab_DocumentTab_FileName.isDisplayed()  && extraFields_PreviewTab_DocumentTab_Document.isDisplayed() &&
			 addGroupDocumentTab_UploadDocument.isDisplayed()  && addGroupDocumentTab_SaveDocument.isDisplayed() &&
			 addGroupDocumentTab_DeleteDocument.isDisplayed()  && extraFields_PreviewTab_DocumentTab_FileSize.isDisplayed())
	 {

		 excelReader.setCellData(xlfile, "Sheet1", 392, 9, resPass);
		 return true;
	 }
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 392, 9, resFail);
		 return false;
	 }
 }



 public static boolean checkNewUnderAddGroupCreateTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";


	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_CreateTab));

	 extraFields_CreateTab.click();

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addGroupCreateCreateTab_ExtraFieldUpdate));

	 if(addGroupCreateCreateTab_ExtraFieldUpdate.isDisplayed())
	 {

		 excelReader.setCellData(xlfile, "Sheet1", 393, 9, resPass);
		 return true;
	 }
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 393, 9, resFail);
		 return false;
	 }
 }



 public static boolean checkSaveButtonWithoutInputNameMandatoryFieldsInCreateAccountUnderAddGroup() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	 {

		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerGeneralTab));

		 headerGeneralTab.click();

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));

		 SaveBtn.click();

		 if(validationConfirmationMessage.getText().equalsIgnoreCase("In Tab :General ---> Name Field is Required"))
		 {
			 closeValidationConfirmationMessage.click();
			 excelReader.setCellData(xlfile, "Sheet1", 394, 9, resPass);
			 return true;
		 }
		 else
		 {
			 excelReader.setCellData(xlfile, "Sheet1", 394, 9, resFail);
			 return false;
		 }
   }


	public static boolean checkSaveButtonWithoutInputCodeMandatoryFieldsInCreateAccountUnderAddGroup() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));

		 nameTxt.sendKeys("Vendor C UAG");

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));

		 SaveBtn.click();

		 if(validationConfirmationMessage.getText().equalsIgnoreCase("In Tab :General ---> Code Field is Required"))
		 {
			 closeValidationConfirmationMessage.click();
			 excelReader.setCellData(xlfile, "Sheet1", 395, 9, resPass);
			 return true;
		 }
		 else
		 {
			 excelReader.setCellData(xlfile, "Sheet1", 395, 9, resFail);
			 return false;
		 }
   }




	public static boolean checkSaveButtonWithInputingMandatoryFieldsInCreateAccountUnderAddGroup() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{

	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));

     codeTxt.sendKeys("Vendor C UAG");

     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));

     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_CreateTab));

	 extraFields_CreateTab.click();

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addGroupCreateCreateTab_ExtraFieldUpdate));

	 addGroupCreateCreateTab_ExtraFieldUpdate.sendKeys("Vendor C UAG");

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));

	 SaveBtn.click();

	 if(validationConfirmationMessage.getText().equalsIgnoreCase("Saved Successfully"))
	 {
		 closeValidationConfirmationMessage.click();
		 excelReader.setCellData(xlfile, "Sheet1", 396, 9, resPass);
		 return true;
	 }
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 396, 9, resFail);
		 return false;
	 }
  }



public static boolean checkCreationScreenAfterSavingInCreateAccountUnderAddGroup() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{

	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));

	 Select oSelect = new Select(accountTypeDropdown);
	 List <WebElement> elementCount = oSelect.getOptions();

	 int accTypeSize = elementCount.size();
	 System.out.println("Account Type :"+accTypeSize);

	 if(headerGeneralTab.isDisplayed() && headerAccountSettingTab.isDisplayed() &&
		 headerDetailsTab.isDisplayed() && headerPrintLayoutTab.isDisplayed() &&
		 SaveBtn.isDisplayed() && closeBtn.isDisplayed() && nameTxt.isDisplayed() && codeTxt.isDisplayed() &&
		 accountTypeDropdown.isDisplayed() && creditLimitTxt.isDisplayed() &&
		 creditdaysTxt.isDisplayed() && chequeDiscountLimitTxt.isDisplayed() &&
		 rateofinterestTxt.isDisplayed() && bankAccountTxt.isDisplayed() && accTypeSize==24)
	 {

		 excelReader.setCellData(xlfile, "Sheet1", 397, 9, resPass);
		 return true;
	 }
	 else
	 {


		 excelReader.setCellData(xlfile, "Sheet1", 397, 9, resFail);
		 return false;
	 }
  }


 public static boolean checkGroupOptionToCreateAccount() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));

	 nameTxt.sendKeys("Vendor D");

     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));

     codeTxt.sendKeys("Vendor D");

     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));

     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_CreateTab));

	 extraFields_CreateTab.click();

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addGroupCreateCreateTab_ExtraFieldUpdate));

	 addGroupCreateCreateTab_ExtraFieldUpdate.sendKeys("Vendor D");

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));

	 SaveBtn.click();

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));

	 if(validationConfirmationMessage.getText().equalsIgnoreCase("Saved Successfully"))
	 {
		 closeValidationConfirmationMessage.click();
		 excelReader.setCellData(xlfile, "Sheet1", 398, 9, resPass);
		 return true;
	 }
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 398, 9, resFail);
		 return false;
	 }
 }


 public static boolean checkCloseOptionAccountDisplayInAccountGrid() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {

		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";


		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));

		 closeBtn.click();

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clickOnAccountGroupToDisplayTitle));

		 clickOnAccountGroupToDisplayTitle.click();

         System.out.println("getVendorGr5oup Nam"+clickOnAccountGroupToDisplayTitle.getText());

		 if(clickOnAccountGroupToDisplayTitle.getText().equalsIgnoreCase("Vendor Group"))
		 { 
			 excelReader.setCellData(xlfile, "Sheet1", 399, 9, resPass);
			 return true;
		 }
		 else
		 {
			 excelReader.setCellData(xlfile, "Sheet1", 399, 9, resFail);
			 return false;
		 }	 
      }



 public static boolean checkValidationMessageToClickOnGroupWithoutSelectingAccountToSelectAboveAccount() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {

		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";



		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		

	     masterRibbonToExpandOptions.click();



	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterGroupBtn));

	     masterGroupBtn.click();

	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));

	     if(validationConfirmationMessage.getText().equalsIgnoreCase("Please select a row To Group"))
		 {
			 closeValidationConfirmationMessage.click();
			 excelReader.setCellData(xlfile, "Sheet1", 400, 9, resPass);
			 return true;
		 }
		 else
		 {
			 excelReader.setCellData(xlfile, "Sheet1", 400, 9, resFail);
			 return false;
		 }
      }


 public static boolean checkClickOnGroupWithSelectingAccountToSelectAboveAccount() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {

		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accSelect));

		 accSelect.click();

	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterGroupBtn));

	     masterGroupBtn.click();

	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));

		 Select oSelect = new Select(accountTypeDropdown);
		 List <WebElement> elementCount = oSelect.getOptions();

		 int accTypeSize = elementCount.size();
		 System.out.println("Account Type :"+accTypeSize);

		 if(headerGeneralTab.isDisplayed() && headerAccountSettingTab.isDisplayed() &&
			 headerDetailsTab.isDisplayed() && headerPrintLayoutTab.isDisplayed() &&
			 SaveBtn.isDisplayed() && closeBtn.isDisplayed() && nameTxt.isDisplayed() && codeTxt.isDisplayed() &&
			 accountTypeDropdown.isDisplayed() && creditLimitTxt.isDisplayed() &&
			 creditdaysTxt.isDisplayed() && chequeDiscountLimitTxt.isDisplayed() &&
			 rateofinterestTxt.isDisplayed() && bankAccountTxt.isDisplayed() && accTypeSize==24 &&
			 extraFields_TreeTabUpdate.isDisplayed() &&
			 extraFields_DocumentTab.isDisplayed() && extraFields_CreateTab.isDisplayed())
		 {

			 excelReader.setCellData(xlfile, "Sheet1", 401, 9, resPass);
			 return true;
		 }
		 else
		 {


			 excelReader.setCellData(xlfile, "Sheet1", 401, 9, resFail);
			 return false;
		 }
      }







 public static boolean checkGroupGeneralTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";


	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));

	 Select oSelect = new Select(accountTypeDropdown);
	 List <WebElement> elementCount = oSelect.getOptions();



	 int accTypeSize = elementCount.size();
	 System.out.println("Account Type :"+accTypeSize);

	 if(nameTxt.isDisplayed() && codeTxt.isDisplayed() &&
			 accountTypeDropdown.isDisplayed() && creditLimitTxt.isDisplayed() &&
			 creditdaysTxt.isDisplayed()  && chequeDiscountLimitTxt.isDisplayed() &&
			 rateofinterestTxt.isDisplayed() && pdcDicountAccount.isDisplayed()  && bankAccountTxt.isDisplayed() && accTypeSize==24)
	 {

		 excelReader.setCellData(xlfile, "Sheet1", 402, 9, resPass);
		 return true;
	 }
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 402, 9, resFail);
		 return false;
	 }
 }




 public static boolean checkGroupSettingsTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerAccountSettingTab));

	 headerAccountSettingTab.click();

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(debitCreditProposalDropdown));

	 if(debitCreditProposalDropdown.isDisplayed() && debitCreditRequiredDropdown.isDisplayed() &&
			 exchangeAdjustmentGainACTxt.isDisplayed() && exchangeAdjustmentLossACTxt.isDisplayed() &&
			 primaryAccountTxt.isDisplayed() && defaultCurrencyTxt.isDisplayed() &&
			 consolidationMethodDropdown.isDisplayed() && paymentTermstxt.isDisplayed() &&
			 reminderTermsTxt.isDisplayed() && financeChargeTermsTxt.isDisplayed())
	 {

		 excelReader.setCellData(xlfile, "Sheet1", 403, 9, resPass);
		 return true;
	 }
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 403, 9, resFail);
		 return false;
	 }
 }



 public static boolean checkGroupDetailsTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerDetailsTab));

	 headerDetailsTab.click();

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addressTxt));

	 if(addressTxt.isDisplayed() && cityTxt.isDisplayed() &&
			 deliveryAddressTxt.isDisplayed() && pinTxt.isDisplayed() &&
			 city2Text.isDisplayed() && pin2Txt.isDisplayed() &&
			 sendEmailCheckBox.isDisplayed() && allowCustomerPortalCheckBox.isDisplayed() &&
			 sendEmailTxt.isDisplayed() && passwordTxt.isDisplayed() && 
			 telphoneNumberTxt.isDisplayed() && faxNoTxt.isDisplayed() && 
			 portalEmailTxt.isDisplayed())
	 {

		 excelReader.setCellData(xlfile, "Sheet1", 404, 9, resPass);
		 return true;
	 }
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 404, 9, resFail);
		 return false;
	 }
 }


 public static boolean checkGroupPrintLayoutTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerPrintLayoutTab));

	 headerPrintLayoutTab.click();

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridVoucherTypeTxt));

	 gridVoucherTypeTxt.click();

	 if(gridVoucherTypeTxt.isDisplayed() && gridPrintLayoutTxt.isDisplayed())
	 {

		 excelReader.setCellData(xlfile, "Sheet1", 405, 9, resPass);
		 return true;
	 }
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 405, 9, resFail);
		 return false;
	 }
 }

 public static boolean checkGroupTreeTabUpdateTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
     excelReader=new ExcelReader(POJOUtility.getExcelPath());
     xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_TreeTabUpdate));

	 extraFields_TreeTabUpdate.click();

	  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeIdDropdown));	


	 if(masterTreeIdDropdown.isDisplayed() && 
		 masterTreeViewIDDropdown.isDisplayed() &&
		 masterOptionToHideAccountsGroupTree.isDisplayed() && accountAssestsGroup.isDisplayed())
	 {	
			excelReader.setCellData(xlfile, "Sheet1", 406, 9, resPass);
			return true;
	 }	 
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 406, 9, resFail);
		 return false;
	 }
 }




 public static boolean checkGroupDocumentTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_DocumentTab));

	 extraFields_DocumentTab.click();

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PreviewTab_DocumentTab_FileName));


	 if(extraFields_PreviewTab_DocumentTab_FileName.isDisplayed()  && extraFields_PreviewTab_DocumentTab_Document.isDisplayed() &&
			 addGroupDocumentTab_UploadDocument.isDisplayed()  && addGroupDocumentTab_SaveDocument.isDisplayed() &&
			 addGroupDocumentTab_DeleteDocument.isDisplayed()  && extraFields_PreviewTab_DocumentTab_FileSize.isDisplayed())
	 {

		 excelReader.setCellData(xlfile, "Sheet1", 407, 9, resPass);
		 return true;
	 }
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 407, 9, resFail);
		 return false;
	 }
 }



 public static boolean checkGroupCreateTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
 {
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";


	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_CreateTab));

	 extraFields_CreateTab.click();


	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addGroupCreateCreateTab_ExtraFieldUpdate));

	 if(addGroupCreateCreateTab_ExtraFieldUpdate.isDisplayed())
	 {

		 excelReader.setCellData(xlfile, "Sheet1", 408, 9, resPass);
		 return true;
	 }
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 408, 9, resFail);
		 return false;
	 }
 }









 public static boolean checkInGroupsSaveButtonWithoutInputNameMandatoryFields() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	 {

		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerGeneralTab));

		 headerGeneralTab.click();

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));

		 SaveBtn.click();

		 if(validationConfirmationMessage.getText().equalsIgnoreCase("In Tab :General ---> Name Field is Required"))
		 {
			 closeValidationConfirmationMessage.click();
			 excelReader.setCellData(xlfile, "Sheet1", 409, 9, resPass);
			 return true;
		 }
		 else
		 {
			 excelReader.setCellData(xlfile, "Sheet1", 409, 9, resFail);
			 return false;
		 }
   }


	public static boolean checkGroupsSaveButtonWithoutInputCodeMandatoryFields() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());
		 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));

		 nameTxt.sendKeys("V Group");

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));

		 SaveBtn.click();

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));

		 if(validationConfirmationMessage.getText().equalsIgnoreCase("In Tab :General ---> Code Field is Required"))
		 {
			 closeValidationConfirmationMessage.click();
			 excelReader.setCellData(xlfile, "Sheet1", 410, 9, resPass);
			 return true;
		 }
		 else
		 {
			 excelReader.setCellData(xlfile, "Sheet1", 410, 9, resFail);
			 return false;
		 }
   }




	public static boolean checkGroupsSaveButtonWithInputingMandatoryFields() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{
	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));

     codeTxt.sendKeys("V Group");

     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_CreateTab));

	 extraFields_CreateTab.click();

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addGroupCreateCreateTab_ExtraFieldUpdate));

	 addGroupCreateCreateTab_ExtraFieldUpdate.sendKeys("V Group");

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));

	 SaveBtn.click();

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));

	 if(validationConfirmationMessage.getText().equalsIgnoreCase("Saved Successfully"))
	 {
		 closeValidationConfirmationMessage.click();
		 excelReader.setCellData(xlfile, "Sheet1", 411, 9, resPass);
		 return true;
	 }
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 411, 9, resFail);
		 return false;
	 }
  }



	public static boolean checkEditGroupOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{

	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accSelectBySingleClick));

	 accSelectBySingleClick.click();

     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));

     masterEditBtn.click();

     System.out.println("getCpationOfGroup"+getCpationOfGroup.getText());

     System.out.println("getCpationOfGroup"+getCpationOfGroup.getAttribute("Value"));

     System.out.println("getVendorGroupName"+getVendorGroupName.getText());

     System.out.println("getVendorGroupName"+getVendorGroupName.getAttribute("Value"));

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(getCpationOfGroup));



	 if(getCpationOfGroup.getAttribute("Value").equalsIgnoreCase("V Group")) 
	 {

		 excelReader.setCellData(xlfile, "Sheet1", 412, 9, resPass);
		 return true;
	 }
	 else
	 {   

		 excelReader.setCellData(xlfile, "Sheet1", 412, 9, resFail);
		 return false;
	 }
  }



	public static boolean checkUpdateGroupOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{

	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(getCpationOfGroup));

     getCpationOfGroup.click();

     getCpationOfGroup.clear();

     getCpationOfGroup.sendKeys("V Group Update");

     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));

	 SaveBtn.click();

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));

	 if(validationConfirmationMessage.getText().equalsIgnoreCase("Updated Successfully"))
	 {
		 closeValidationConfirmationMessage.click();
		 excelReader.setCellData(xlfile, "Sheet1", 413, 9, resPass);
		 return true;
	 }
	 else
	 {
		 closeValidationConfirmationMessage.click();
		 excelReader.setCellData(xlfile, "Sheet1", 413, 9, resFail);
		 return false;
	 }

  }




	public static boolean checkDeleteAddGroupByCreatingAccountGroupOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{

	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clickOnAccountGroup));

     clickOnAccountGroup.click();

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterAddGroupBtn));

     masterAddGroupBtn.click();

     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));

	 nameTxt.sendKeys("Vendor Delete Group");

     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));

     codeTxt.sendKeys("Vendor Delete Group");

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));

	 SaveBtn.click();

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));

	 System.out.println(validationConfirmationMessage.getText());

	 if(validationConfirmationMessage.getText().equalsIgnoreCase("Saved Successfully"))
	 {
		 closeValidationConfirmationMessage.click();
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		 closeBtn.click();
		 excelReader.setCellData(xlfile, "Sheet1", 414, 9, resPass);
		 return true;
	 }
	 else
	 {
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		 closeBtn.click();
		 excelReader.setCellData(xlfile, "Sheet1", 414, 9, resFail);
		 return false;
	 }


  }








	public static boolean checkDeleteAddGroupByCreatingAccountInAccountGroupOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{

	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastercmbMasterTxt));

     mastercmbMasterTxt.click();

     mastercmbMasterTxt.sendKeys("Vendor Delete Group");



     getAction().moveToElement(mastercmbMasterTxt).sendKeys(Keys.TAB).perform();

     getAction().moveToElement(mastercmbMasterTxt).sendKeys(Keys.TAB).perform();

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountSecondCheckBox));

	 getAction().doubleClick(accountSecondCheckBox).perform();

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));

	 masterNewBtn.click();

     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));

     nameTxt.click();

     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));

		 nameTxt.sendKeys("Vendor UDG");

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));

     codeTxt.sendKeys("Vendor UDG");

     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_CreateTab));

     extraFields_CreateTab.click();

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addGroupCreateCreateTab_ExtraFieldUpdate));

	 addGroupCreateCreateTab_ExtraFieldUpdate.sendKeys("Vendor UDG");

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));

	 SaveBtn.click(); 

	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));

	 System.out.println(validationConfirmationMessage.getText());

	 if(validationConfirmationMessage.getText().equalsIgnoreCase("Saved Successfully"))
	 {

		 closeValidationConfirmationMessage.click();
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		 closeBtn.click();
		 excelReader.setCellData(xlfile, "Sheet1", 415, 9, resPass);
		 return true;
	 }
	 else
	 {
		 closeValidationConfirmationMessage.click();
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		 closeBtn.click();
		 excelReader.setCellData(xlfile, "Sheet1", 415, 9, resFail);
		 return false;
	 }


}



	public static boolean checkDeleteAddGroup() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{

	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastercmbMasterTxt));

     mastercmbMasterTxt.click();

     mastercmbMasterTxt.sendKeys("Vendor Delete Group");



     getAction().moveToElement(mastercmbMasterTxt).sendKeys(Keys.DOWN).perform();

     getAction().moveToElement(mastercmbMasterTxt).sendKeys(Keys.TAB).perform();         

     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDeleteBtn));

     masterDeleteBtn.click();

     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(getMsgOnDelete));

     System.out.println(getMsgOnDelete.getText());

     System.out.println(getMsgOnDelete.getAttribute("Value"));


	 if(getMsgOnDelete.getText().equalsIgnoreCase("Would you like to delete this selected master"))
	 {

		 excelReader.setCellData(xlfile, "Sheet1", 416, 9, resPass);
		 return true;
	 }
	 else
	 {
		 excelReader.setCellData(xlfile, "Sheet1", 416, 9, resFail);
		 return false;
	 }


}




	public static boolean checkCancelButtonInDeleteAddGroup() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{

	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clickOnCancelInDelete));

     clickOnCancelInDelete.click();




     System.out.println("mastercmbMasterTxt"+mastercmbMasterTxt.getText());

     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastercmbMasterTxt));

     mastercmbMasterTxt.click();

     mastercmbMasterTxt.sendKeys("Vendor Delete Group");



     getAction().moveToElement(mastercmbMasterTxt).sendKeys(Keys.TAB).perform();         



     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));

     masterEditBtn.click();

     //Thread.sleep(9000);

     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(getCpationOfGroup));

     System.out.println("getCpationOfGroup"+getCpationOfGroup.getAttribute("Value"));

     //Thread.sleep(6000);

	 if(getCpationOfGroup.getAttribute("Value").equalsIgnoreCase("Vendor Delete Group")) 
	 {
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		 closeBtn.click();
		 excelReader.setCellData(xlfile, "Sheet1", 417, 9, resPass);
		 return true;
	 }
	 else
	 {   
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		 closeBtn.click();
		 excelReader.setCellData(xlfile, "Sheet1", 417, 9, resFail);
		 return false;
	 }

}


	public static boolean checkYesDeleteAddGroup() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
{

	 excelReader=new ExcelReader(POJOUtility.getExcelPath());
	 xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";


     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastercmbMasterTxt));

     mastercmbMasterTxt.click();

     mastercmbMasterTxt.sendKeys("Vendor Delete Group");



     getAction().moveToElement(mastercmbMasterTxt).sendKeys(Keys.TAB).perform();         

     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDeleteBtn));

     masterDeleteBtn.click();

     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(getMsgOnDelete));

     System.out.println(getMsgOnDelete.getText());

     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clickOnOkInDelete));

     clickOnOkInDelete.click();

     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(validationConfirmationMessage));

     if(validationConfirmationMessage.getText().equalsIgnoreCase("Record Deleted Successfully."))
	 {

		 closeValidationConfirmationMessage.click();
		 excelReader.setCellData(xlfile, "Sheet1", 418, 9, resPass);
		 return true;
	 }
	 else
	 {
		 closeValidationConfirmationMessage.click();
		 excelReader.setCellData(xlfile, "Sheet1", 418, 9, resFail);
		 return false;
	 }	 
}
	 */


	//After Customization adding accounts options


	public static boolean checkSelectAccountGroupSelectionAccountsMasterDisplayInMainPageGridAccountsMenu() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountAccountsReceivableGroup));
		accountAccountsReceivableGroup.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustomerA));
		masterCustomerA.click();

		boolean actmasterCustomerA  =masterCustomerA.isDisplayed();
		boolean actmasterCustomerB  =masterCustomerB.isDisplayed();
		boolean actmasterCustomerC  =masterCustomerC.isDisplayed();

		boolean expmasterCustomerA  =true;
		boolean expmasterCustomerB  =true;
		boolean expmasterCustomerC  =true;

		System.out.println("***********************************checkSelectAccountGroupSelectionAccountsMasterDisplayInMainPageGridAccountsMenu*****************");

		System.out.println("masterCustomerA  : "+actmasterCustomerA+" Value Expected : "+expmasterCustomerA);
		System.out.println("masterCustomerB  : "+actmasterCustomerB+" Value Expected : "+expmasterCustomerB);
		System.out.println("masterCustomerC  : "+actmasterCustomerC+" Value Expected : "+expmasterCustomerC);

		if(actmasterCustomerA==expmasterCustomerA && actmasterCustomerB==expmasterCustomerB && actmasterCustomerC==expmasterCustomerC)
		{
			excelReader.setCellData(xlfile, "Sheet1", 372, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 372, 9, resFail);
			return false;
		}
	}

	public static boolean checkNewButton() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		masterNewBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerGeneralTab));

		boolean actheaderGeneralTab          =headerGeneralTab.isDisplayed();
		boolean actheaderAccountSettingTab   =headerAccountSettingTab.isDisplayed();
		boolean actheaderDetailsTab          =headerDetailsTab.isDisplayed();
		boolean actheaderPrintLayoutTab      =headerPrintLayoutTab.isDisplayed();
		boolean actSaveBtn                   =SaveBtn.isDisplayed();
		boolean actcloseBtn                  =closeBtn.isDisplayed();
		boolean actextraFields_TreeTabUpdate =extraFields_TreeTabUpdate.isDisplayed();
		boolean actextraFields_DocumentTab   =extraFields_DocumentTab.isDisplayed();
		boolean actextraFields_CreateTab     =extraFields_CreateTab.isDisplayed();

		boolean expheaderGeneralTab          =true;
		boolean expheaderAccountSettingTab   =true;
		boolean expheaderDetailsTab          =true;
		boolean expheaderPrintLayoutTab      =true;
		boolean expSaveBtn                   =true;
		boolean expcloseBtn                  =true;
		boolean expextraFields_TreeTabUpdate =true;
		boolean expextraFields_DocumentTab   =true;
		boolean expextraFields_CreateTab     =true;

		System.out.println("***********************************checkNewButton*********************************");

		System.out.println("headerGeneralTab          : "+actheaderGeneralTab         +" Value Expected : "+expheaderGeneralTab);
		System.out.println("headerAccountSettingTab   : "+actheaderAccountSettingTab  +" Value Expected : "+expheaderAccountSettingTab);
		System.out.println("headerDetailsTab          : "+actheaderDetailsTab         +" Value Expected : "+expheaderDetailsTab);
		System.out.println("headerPrintLayoutTab      : "+actheaderPrintLayoutTab     +" Value Expected : "+expheaderPrintLayoutTab);
		System.out.println("SaveBtn                   : "+actSaveBtn                  +" Value Expected : "+expSaveBtn);
		System.out.println("closeBtn                  : "+actcloseBtn                 +" Value Expected : "+expcloseBtn);
		System.out.println("extraFields_TreeTabUpdate : "+actextraFields_TreeTabUpdate+" Value Expected : "+expextraFields_TreeTabUpdate);
		System.out.println("extraFields_DocumentTab   : "+actextraFields_DocumentTab  +" Value Expected : "+expextraFields_DocumentTab);
		System.out.println("extraFields_CreateTab     : "+actextraFields_CreateTab    +" Value Expected : "+expextraFields_CreateTab);

		if(actheaderGeneralTab==expheaderGeneralTab && actheaderAccountSettingTab==expheaderAccountSettingTab && actheaderDetailsTab==expheaderDetailsTab
				&& actheaderPrintLayoutTab==expheaderPrintLayoutTab && actSaveBtn==expSaveBtn && actcloseBtn==expcloseBtn
				&& actextraFields_TreeTabUpdate==expextraFields_TreeTabUpdate && actextraFields_DocumentTab==expextraFields_DocumentTab
				&& actextraFields_CreateTab==expextraFields_CreateTab)
		{
			excelReader.setCellData(xlfile, "Sheet1", 373, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 373, 9, resFail);
			return false;
		}
	}



	public static boolean checkGenralTabOnClickOnNewButton() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));

		Select oSelect = new Select(accountTypeDropdown);
		List <WebElement> elementCount = oSelect.getOptions();
		int actaccTypeSize = elementCount.size();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));

		boolean actnameTxt                =nameTxt.isDisplayed();
		boolean actcodeTxt                =codeTxt.isDisplayed();
		boolean actaccountTypeDropdown    =accountTypeDropdown.isDisplayed();
		boolean actcreditLimitTxt         =creditLimitTxt.isDisplayed();
		boolean actcreditdaysTxt          =creditdaysTxt.isDisplayed();
		boolean actchequeDiscountLimitTxt =chequeDiscountLimitTxt.isDisplayed();
		boolean actrateofinterestTxt      =rateofinterestTxt.isDisplayed();
		boolean actbankAccountTxt         =bankAccountTxt.isDisplayed();


		int     expaccTypeSize            =24;
		boolean expnameTxt                =true;
		boolean expcodeTxt                =true;
		boolean expaccountTypeDropdown    =true;
		boolean expcreditLimitTxt         =true;
		boolean expcreditdaysTxt          =true;
		boolean expchequeDiscountLimitTxt =true;
		boolean exprateofinterestTxt      =true;
		boolean expbankAccountTxt         =true;

		System.out.println("*******************************checkGenralTabOnClickOnNewButton************************");

		System.out.println("nameTxt                 : "+actnameTxt                +" Value Expected : "+expnameTxt);
		System.out.println("codeTxt                 : "+actcodeTxt                +" Value Expected : "+expcodeTxt);
		System.out.println("accountTypeDropdown     : "+actaccountTypeDropdown    +" Value Expected : "+expaccountTypeDropdown);
		System.out.println("creditLimitTxt          : "+actcreditLimitTxt         +" Value Expected : "+expcreditLimitTxt);
		System.out.println("creditdaysTxt           : "+actcreditdaysTxt          +" Value Expected : "+expcreditdaysTxt);
		System.out.println("chequeDiscountLimitTxt  : "+actchequeDiscountLimitTxt +" Value Expected : "+expchequeDiscountLimitTxt);
		System.out.println("rateofinterestTxt       : "+actrateofinterestTxt      +" Value Expected : "+exprateofinterestTxt);
		System.out.println("bankAccountTxt          : "+actbankAccountTxt         +" Value Expected : "+expbankAccountTxt);
		System.out.println("accTypeSize             : "+actaccTypeSize            +" Value Expected : "+expaccTypeSize);


		if(actnameTxt==expnameTxt && actcodeTxt==expcodeTxt && actaccountTypeDropdown==expaccountTypeDropdown 
				&& actcreditLimitTxt==expcreditLimitTxt && actcreditdaysTxt==expcreditdaysTxt && actchequeDiscountLimitTxt==expchequeDiscountLimitTxt
				&& actrateofinterestTxt==exprateofinterestTxt && actbankAccountTxt==expbankAccountTxt && actaccTypeSize==expaccTypeSize)
		{
			excelReader.setCellData(xlfile, "Sheet1", 374, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 374, 9, resFail);
			return false;
		}
	}


	public static boolean checkSettingsTabOnClickOnNewButton() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerAccountSettingTab));
		headerAccountSettingTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(debitCreditProposalDropdown));

		boolean actdebitCreditProposalDropdown                =debitCreditProposalDropdown.isDisplayed();
		boolean actdebitCreditRequiredDropdown                =debitCreditRequiredDropdown.isDisplayed();
		boolean actexchangeAdjustmentGainACTxt                =exchangeAdjustmentGainACTxt.isDisplayed();
		boolean actexchangeAdjustmentLossACTxt                =exchangeAdjustmentLossACTxt.isDisplayed();
		boolean actprimaryAccountTxt               		 	  =primaryAccountTxt.isDisplayed();
		boolean actdefaultCurrencyTxt		                  =defaultCurrencyTxt.isDisplayed();
		boolean actconsolidationMethodDropdown                =consolidationMethodDropdown.isDisplayed();
		boolean actpaymentTermstxt                            =paymentTermstxt.isDisplayed();
		boolean actreminderTermsTxt                           =reminderTermsTxt.isDisplayed();
		boolean actfinanceChargeTermsTxt                      =financeChargeTermsTxt.isDisplayed();

		boolean expdebitCreditProposalDropdown                =true;
		boolean expdebitCreditRequiredDropdown                =true;
		boolean expexchangeAdjustmentGainACTxt                =true;
		boolean expexchangeAdjustmentLossACTxt                =true;
		boolean expprimaryAccountTxt               		  	  =true;
		boolean expdefaultCurrencyTxt		                  =true;
		boolean expconsolidationMethodDropdown                =true;
		boolean exppaymentTermstxt                            =true;
		boolean expreminderTermsTxt                           =true;
		boolean expfinanceChargeTermsTxt                      =true;

		System.out.println("***********************************checkSettingsTabOnClickOnNewButton*************************");

		System.out.println("debitCreditProposalDropdown    : "+actdebitCreditProposalDropdown+" Value Expected : "+expdebitCreditProposalDropdown);
		System.out.println("debitCreditRequiredDropdown    : "+actdebitCreditRequiredDropdown+" Value Expected : "+expdebitCreditRequiredDropdown);
		System.out.println("exchangeAdjustmentGainACTxt    : "+actexchangeAdjustmentGainACTxt+" Value Expected : "+expexchangeAdjustmentGainACTxt);
		System.out.println("exchangeAdjustmentLossACTxt    : "+actexchangeAdjustmentLossACTxt+" Value Expected : "+expexchangeAdjustmentLossACTxt);
		System.out.println("primaryAccountTxt              : "+actprimaryAccountTxt          +" Value Expected : "+expprimaryAccountTxt);
		System.out.println("defaultCurrencyTxt             : "+actdefaultCurrencyTxt         +" Value Expected : "+expdefaultCurrencyTxt);
		System.out.println("consolidationMethodDropdown    : "+actconsolidationMethodDropdown+" Value Expected : "+expconsolidationMethodDropdown);
		System.out.println("paymentTermstxt                : "+actpaymentTermstxt            +" Value Expected : "+exppaymentTermstxt);
		System.out.println("reminderTermsTxt               : "+actreminderTermsTxt           +" Value Expected : "+expreminderTermsTxt);
		System.out.println("financeChargeTermsTxt          : "+actfinanceChargeTermsTxt      +" Value Expected : "+expfinanceChargeTermsTxt);

		if(actdebitCreditProposalDropdown==expdebitCreditProposalDropdown && actdebitCreditRequiredDropdown==expdebitCreditRequiredDropdown
				&& actexchangeAdjustmentGainACTxt==expexchangeAdjustmentGainACTxt && actexchangeAdjustmentLossACTxt==expexchangeAdjustmentLossACTxt
				&& actprimaryAccountTxt==expprimaryAccountTxt && actdefaultCurrencyTxt==expdefaultCurrencyTxt
				&& actconsolidationMethodDropdown==expconsolidationMethodDropdown && actpaymentTermstxt==exppaymentTermstxt
				&& actreminderTermsTxt==expreminderTermsTxt && actfinanceChargeTermsTxt==expfinanceChargeTermsTxt)
		{
			excelReader.setCellData(xlfile, "Sheet1", 375, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 375, 9, resFail);
			return false;
		}
	}



	public static boolean checkDetailsTabOnClickOnNewButton() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerDetailsTab));
		headerDetailsTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addressTxt));

		boolean actaddressTxt           		=addressTxt.isDisplayed();
		boolean actcityTxt           			=cityTxt.isDisplayed();
		boolean actdeliveryAddressTxt           =deliveryAddressTxt.isDisplayed();
		boolean actpinTxt           			=pinTxt.isDisplayed();
		boolean actcity2Text           		    =city2Text.isDisplayed();
		boolean actpin2Txt           			=pin2Txt.isDisplayed();
		boolean actsendEmailCheckBox            =sendEmailCheckBox.isDisplayed();
		boolean actallowCustomerPortalCheckBox  =allowCustomerPortalCheckBox.isDisplayed();
		boolean actsendEmailTxt                 =sendEmailTxt.isDisplayed();
		boolean actpasswordTxt           		=passwordTxt.isDisplayed();
		boolean acttelphoneNumberTxt            =telphoneNumberTxt.isDisplayed();
		boolean actfaxNoTxt           			=faxNoTxt.isDisplayed();

		boolean expaddressTxt           		=true;
		boolean expcityTxt           			=true;
		boolean expdeliveryAddressTxt           =true;
		boolean exppinTxt           			=true;
		boolean expcity2Text           		    =true;
		boolean exppin2Txt           			=true;
		boolean expsendEmailCheckBox            =true;
		boolean expallowCustomerPortalCheckBox  =true;
		boolean expsendEmailTxt                 =true;
		boolean exppasswordTxt           		=true;
		boolean exptelphoneNumberTxt            =true;
		boolean expfaxNoTxt           			=true;

		System.out.println("*********************************checkDetailsTabOnClickOnNewButton**************************");

		System.out.println("addressTxt                  : "+actaddressTxt                  +" Value Expected : "+expaddressTxt);
		System.out.println("cityTxt                     : "+actcityTxt                     +" Value Expected : "+expcityTxt);
		System.out.println("deliveryAddressTxt          : "+actdeliveryAddressTxt          +" Value Expected : "+expdeliveryAddressTxt);
		System.out.println("pinTxt                      : "+actpinTxt                      +" Value Expected : "+exppinTxt);
		System.out.println("city2Text                   : "+actcity2Text                   +" Value Expected : "+expcity2Text);
		System.out.println("pin2Txt                     : "+actpin2Txt                     +" Value Expected : "+exppin2Txt);
		System.out.println("sendEmailCheckBox           : "+actsendEmailCheckBox           +" Value Expected : "+expsendEmailCheckBox);
		System.out.println("allowCustomerPortalCheckBox : "+actallowCustomerPortalCheckBox +" Value Expected : "+expallowCustomerPortalCheckBox);
		System.out.println("sendEmailTxt                : "+actsendEmailTxt                +" Value Expected : "+expsendEmailTxt);
		System.out.println("passwordTxt                 : "+actpasswordTxt                 +" Value Expected : "+exppasswordTxt);
		System.out.println("telphoneNumberTxt           : "+acttelphoneNumberTxt           +" Value Expected : "+exptelphoneNumberTxt);
		System.out.println("faxNoTxt                    : "+actfaxNoTxt                    +" Value Expected : "+expfaxNoTxt);

		if(actaddressTxt==expaddressTxt && actcityTxt==expcityTxt && actdeliveryAddressTxt==expdeliveryAddressTxt
				&& actpinTxt==exppinTxt && actcity2Text==expcity2Text && actpin2Txt==exppin2Txt && actsendEmailCheckBox==expsendEmailCheckBox
				&& actallowCustomerPortalCheckBox==expallowCustomerPortalCheckBox && actsendEmailTxt==expsendEmailTxt && actpasswordTxt==exppasswordTxt
				&& acttelphoneNumberTxt==exptelphoneNumberTxt && actfaxNoTxt==expfaxNoTxt)
		{
			excelReader.setCellData(xlfile, "Sheet1", 376, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 376, 9, resFail);
			return false;
		}
	}


	public static boolean checkPrintlayoutTabOnClickOnNewButton() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerPrintLayoutTab));
		headerPrintLayoutTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridVoucherTypeTxt));
		gridVoucherTypeTxt.click();

		boolean actgridVoucherTypeTxt =gridVoucherTypeTxt.isDisplayed();
		boolean actgridPrintLayoutTxt =gridPrintLayoutTxt.isDisplayed();

		boolean expgridVoucherTypeTxt =true;
		boolean expgridPrintLayoutTxt =true;

		System.out.println("**********************************checkPrintlayoutTabOnClickOnNewButton*************************");

		System.out.println("gridVoucherTypeTxt  : "+actgridVoucherTypeTxt+" Value Expected : "+expgridVoucherTypeTxt);
		System.out.println("gridPrintLayoutTxt  : "+actgridPrintLayoutTxt+" Value Expected : "+expgridPrintLayoutTxt);

		if(actgridVoucherTypeTxt==expgridVoucherTypeTxt && actgridPrintLayoutTxt==expgridPrintLayoutTxt)
		{
			excelReader.setCellData(xlfile, "Sheet1", 377, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 377, 9, resFail);
			return false;
		}
	}



	public static boolean checkNewTreeTabUpdateTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_TreeTabUpdate));
		extraFields_TreeTabUpdate.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeIdDropdown));	

		boolean actmasterTreeIdDropdown    	        =masterTreeIdDropdown.isDisplayed();
		boolean actmasterTreeViewIDDropdown    	    =masterTreeViewIDDropdown.isDisplayed();
		boolean actmasterOptionToHideAccountsGroupTree =masterOptionToHideAccountsGroupTree.isDisplayed();
		boolean actaccountAssestsGroup 				=accountAssestsGroup.isDisplayed();

		boolean expmasterTreeIdDropdown        	    =true;
		boolean expmasterTreeViewIDDropdown    	    =true;
		boolean expmasterOptionToHideAccountsGroupTree =true;
		boolean expaccountAssestsGroup 				=true;

		System.out.println("*********************************checkNewTreeTabUpdateTab****************************");

		System.out.println("masterTreeIdDropdown                  : "+actmasterTreeIdDropdown                  +" Value Expected : "+expmasterTreeIdDropdown);
		System.out.println("masterTreeViewIDDropdown              : "+actmasterTreeViewIDDropdown              +" Value Expected : "+expmasterTreeViewIDDropdown);
		System.out.println("masterOptionToHideAccountsGroupTree   : "+actmasterOptionToHideAccountsGroupTree   +" Value Expected : "+expmasterOptionToHideAccountsGroupTree);
		System.out.println("accountAssestsGroup                   : "+actaccountAssestsGroup                   +" Value Expected : "+expaccountAssestsGroup);

		if(actmasterTreeIdDropdown==expmasterTreeIdDropdown  && actmasterTreeViewIDDropdown==expmasterTreeViewIDDropdown
				&& actmasterOptionToHideAccountsGroupTree==expmasterOptionToHideAccountsGroupTree
				&& actaccountAssestsGroup==expaccountAssestsGroup)
		{	
			excelReader.setCellData(xlfile, "Sheet1", 378, 9, resPass);
			return true;
		}	 
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 378, 9, resFail);
			return false;
		}
	}


	@FindBy(xpath="//input[@id='sFileName1']")
	public static WebElement extraFields_DocumentTab_FileName;

	@FindBy(xpath="//input[@id='biDocument1']")
	public static WebElement extraFields_DocumentTab_Document;

	@FindBy(xpath="//tr[1]//td[5]//div[1]//div[1]//div[1]")
	public static WebElement extraFields_DocumentTab_UploadDocument;

	@FindBy(xpath="//a[@id='SaveImg']")
	public static WebElement extraFields_DocumentTab_SaveDocument;

	@FindBy(xpath="//i[@class='fa fa-eraser RemoveImg']")
	public static WebElement extraFields_DocumentTab_DeleteDocument;

	@FindBy(xpath="//input[@id='iFileSize1']")
	public static WebElement extraFields_DocumentTab_FileSize;



	public static boolean checkNewDocumentTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_DocumentTab));
		extraFields_DocumentTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_DocumentTab_FileName));

		boolean actextraFields_DocumentTab_FileName       =extraFields_DocumentTab_FileName.isDisplayed();
		boolean actextraFields_DocumentTab_UploadDocument =extraFields_DocumentTab_UploadDocument.isDisplayed();
		boolean actextraFields_DocumentTab_SaveDocument   =extraFields_DocumentTab_SaveDocument.isDisplayed();
		boolean actextraFields_DocumentTab_DeleteDocument =extraFields_DocumentTab_DeleteDocument.isDisplayed();
		boolean actextraFields_DocumentTab_FileSize       =extraFields_DocumentTab_FileSize.isDisplayed();

		boolean expextraFields_DocumentTab_FileName       =true;
		boolean expextraFields_DocumentTab_UploadDocument =true;
		boolean expextraFields_DocumentTab_SaveDocument   =true;
		boolean expextraFields_DocumentTab_DeleteDocument =true;
		boolean expextraFields_DocumentTab_FileSize       =true;

		System.out.println("**************************************checkNewDocumentTab***********************************");

		System.out.println("extraFields_DocumentTab_FileName        : "+actextraFields_DocumentTab_FileName       +" Value Expected : "+expextraFields_DocumentTab_FileName);
		System.out.println("extraFields_DocumentTab_UploadDocument  : "+actextraFields_DocumentTab_UploadDocument +" Value Expected : "+expextraFields_DocumentTab_UploadDocument);
		System.out.println("extraFields_DocumentTab_SaveDocument    : "+actextraFields_DocumentTab_SaveDocument   +" Value Expected : "+expextraFields_DocumentTab_SaveDocument);
		System.out.println("extraFields_DocumentTab_DeleteDocument  : "+actextraFields_DocumentTab_DeleteDocument +" Value Expected : "+expextraFields_DocumentTab_DeleteDocument);
		System.out.println("extraFields_DocumentTab_FileSize        : "+actextraFields_DocumentTab_FileSize       +" Value Expected : "+expextraFields_DocumentTab_FileSize);

		if(actextraFields_DocumentTab_FileName==expextraFields_DocumentTab_FileName
				&& actextraFields_DocumentTab_UploadDocument==expextraFields_DocumentTab_UploadDocument
				&& actextraFields_DocumentTab_SaveDocument==expextraFields_DocumentTab_SaveDocument
				&& actextraFields_DocumentTab_DeleteDocument==expextraFields_DocumentTab_DeleteDocument
				&& actextraFields_DocumentTab_FileSize==expextraFields_DocumentTab_FileSize)
		{
			excelReader.setCellData(xlfile, "Sheet1", 379, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 379, 9, resFail);
			return false;
		}
	}



	public static boolean checkNewInCreateTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_CreateTab));
		extraFields_CreateTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addGroupCreateCreateTab_ExtraFieldUpdate));

		boolean actaddGroupCreateCreateTab_ExtraFieldUpdate  =addGroupCreateCreateTab_ExtraFieldUpdate.isDisplayed();
		boolean expaddGroupCreateCreateTab_ExtraFieldUpdate  =true;

		System.out.println("*************************************checkNewInCreateTab************************************");

		System.out.println("addGroupCreateCreateTab_ExtraFieldUpdate : "+actaddGroupCreateCreateTab_ExtraFieldUpdate+" Value Expected : "+expaddGroupCreateCreateTab_ExtraFieldUpdate);

		if(actaddGroupCreateCreateTab_ExtraFieldUpdate==expaddGroupCreateCreateTab_ExtraFieldUpdate)
		{ 
			addGroupCreateCreateTab_ExtraFieldUpdate.click();

			addGroupCreateCreateTab_ExtraFieldUpdate.sendKeys("Test Extra Field Update");

			excelReader.setCellData(xlfile, "Sheet1", 380, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 380, 9, resFail);
			return false;
		}
	}


	public static boolean checkSaveButtonWithoutInputNameMandatoryFieldsInNewOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerGeneralTab));
		headerGeneralTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage="In Tab :General ---> Name Field is Required";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkSaveButtonWithoutInputNameMandatoryFieldsInNewOption***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 381, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 381, 9, resFail);
			return false;
		}
	}


	public static boolean checkSaveButtonWithoutInputCodeMandatoryFieldsInNewOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("Customer");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage="In Tab :General ---> Code Field is Required";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkSaveButtonWithoutInputCodeMandatoryFieldsInNewOption***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 382, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 382, 9, resFail);
			return false;
		}
	}



	public static boolean checkSaveButtonWithInputingMandatoryFields() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("Customer");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage="Saved Successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkSaveButtonWithInputingMandatoryFields***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 383, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 383, 9, resFail);
			return false;
		}
	}



	public static boolean checkAccountsCreationScreenAfterSaving() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();
		nameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.click();
		codeTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));

		Select oSelect = new Select(accountTypeDropdown);
		List <WebElement> elementCount = oSelect.getOptions();
		int actaccTypeSize = elementCount.size();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));

		boolean actnameTxt                =nameTxt.isDisplayed();
		boolean actcodeTxt                =codeTxt.isDisplayed();
		boolean actaccountTypeDropdown    =accountTypeDropdown.isDisplayed();
		boolean actcreditLimitTxt         =creditLimitTxt.isDisplayed();
		boolean actcreditdaysTxt          =creditdaysTxt.isDisplayed();
		boolean actchequeDiscountLimitTxt =chequeDiscountLimitTxt.isDisplayed();
		boolean actrateofinterestTxt      =rateofinterestTxt.isDisplayed();
		boolean actbankAccountTxt         =bankAccountTxt.isDisplayed();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerGeneralTab));

		boolean actheaderGeneralTab          =headerGeneralTab.isDisplayed();
		boolean actheaderAccountSettingTab   =headerAccountSettingTab.isDisplayed();
		boolean actheaderDetailsTab          =headerDetailsTab.isDisplayed();
		boolean actheaderPrintLayoutTab      =headerPrintLayoutTab.isDisplayed();
		boolean actSaveBtn                   =SaveBtn.isDisplayed();
		boolean actcloseBtn                  =closeBtn.isDisplayed();

		int     expaccTypeSize            =24;
		boolean expnameTxt                =true;
		boolean expcodeTxt                =true;
		boolean expaccountTypeDropdown    =true;
		boolean expcreditLimitTxt         =true;
		boolean expcreditdaysTxt          =true;
		boolean expchequeDiscountLimitTxt =true;
		boolean exprateofinterestTxt      =true;
		boolean expbankAccountTxt         =true;

		boolean expheaderGeneralTab          =true;
		boolean expheaderAccountSettingTab   =true;
		boolean expheaderDetailsTab          =true;
		boolean expheaderPrintLayoutTab      =true;
		boolean expSaveBtn                   =true;
		boolean expcloseBtn                  =true;

		System.out.println("*******************************checkAccountsCreationScreenAfterSaving************************");

		System.out.println("nameTxt                   : "+actnameTxt                 +" Value Expected : "+expnameTxt);
		System.out.println("codeTxt                   : "+actcodeTxt                 +" Value Expected : "+expcodeTxt);
		System.out.println("accountTypeDropdown       : "+actaccountTypeDropdown     +" Value Expected : "+expaccountTypeDropdown);
		System.out.println("creditLimitTxt            : "+actcreditLimitTxt          +" Value Expected : "+expcreditLimitTxt);
		System.out.println("creditdaysTxt             : "+actcreditdaysTxt           +" Value Expected : "+expcreditdaysTxt);
		System.out.println("chequeDiscountLimitTxt    : "+actchequeDiscountLimitTxt  +" Value Expected : "+expchequeDiscountLimitTxt);
		System.out.println("rateofinterestTxt         : "+actrateofinterestTxt       +" Value Expected : "+exprateofinterestTxt);
		System.out.println("bankAccountTxt            : "+actbankAccountTxt          +" Value Expected : "+expbankAccountTxt);
		System.out.println("accTypeSize               : "+actaccTypeSize             +" Value Expected : "+expaccTypeSize);
		System.out.println("headerGeneralTab          : "+actheaderGeneralTab        +" Value Expected : "+expheaderGeneralTab);
		System.out.println("headerAccountSettingTab   : "+actheaderAccountSettingTab +" Value Expected : "+expheaderAccountSettingTab);
		System.out.println("headerDetailsTab          : "+actheaderDetailsTab        +" Value Expected : "+expheaderDetailsTab);
		System.out.println("headerPrintLayoutTab      : "+actheaderPrintLayoutTab    +" Value Expected : "+expheaderPrintLayoutTab);
		System.out.println("SaveBtn                   : "+actSaveBtn                 +" Value Expected : "+expSaveBtn);
		System.out.println("closeBtn                  : "+actcloseBtn                +" Value Expected : "+expcloseBtn);

		if(actnameTxt==expnameTxt && actcodeTxt==expcodeTxt && actaccountTypeDropdown==expaccountTypeDropdown 
				&& actcreditLimitTxt==expcreditLimitTxt && actcreditdaysTxt==expcreditdaysTxt && actchequeDiscountLimitTxt==expchequeDiscountLimitTxt
				&& actrateofinterestTxt==exprateofinterestTxt && actbankAccountTxt==expbankAccountTxt && actaccTypeSize==expaccTypeSize
				&& actheaderGeneralTab==expheaderGeneralTab && actheaderAccountSettingTab==expheaderAccountSettingTab && actheaderDetailsTab==expheaderDetailsTab
				&& actheaderPrintLayoutTab==expheaderPrintLayoutTab && actSaveBtn==expSaveBtn && actcloseBtn==expcloseBtn)
		{	
			excelReader.setCellData(xlfile, "Sheet1", 384, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 384, 9, resFail);
			return false;
		}
	}


	public static boolean checkAccountDisplayInAccountGrid() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountNewCreationName));

		String actaccountNewCreationName =accountNewCreationName.getText();
		String expaccountNewCreationName ="Customer";

		System.out.println("****************************checkAccountDisplayInAccountGrid************************");

		System.out.println("accountNewCreationName  : "+actaccountNewCreationName+" Value Expected : "+expaccountNewCreationName);

		if(actaccountNewCreationName.equalsIgnoreCase(expaccountNewCreationName))
		{ 
			excelReader.setCellData(xlfile, "Sheet1", 385, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 385, 9, resFail);
			return false;
		}
	}


	//Add Group before Customization


	public static boolean checkAddGroupButton() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterAddGroupBtn));
		masterAddGroupBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerGeneralTab));

		boolean actheaderGeneralTab          =headerGeneralTab.isDisplayed();
		boolean actheaderAccountSettingTab   =headerAccountSettingTab.isDisplayed();
		boolean actheaderDetailsTab          =headerDetailsTab.isDisplayed();
		boolean actheaderPrintLayoutTab      =headerPrintLayoutTab.isDisplayed();
		boolean actSaveBtn                   =SaveBtn.isDisplayed();
		boolean actcloseBtn                  =closeBtn.isDisplayed();
		boolean actextraFields_TreeTabUpdate =extraFields_TreeTabUpdate.isDisplayed();
		boolean actextraFields_DocumentTab   =extraFields_DocumentTab.isDisplayed();
		boolean actextraFields_CreateTab     =extraFields_CreateTab.isDisplayed();

		boolean expheaderGeneralTab          =true;
		boolean expheaderAccountSettingTab   =true;
		boolean expheaderDetailsTab          =true;
		boolean expheaderPrintLayoutTab      =true;
		boolean expSaveBtn                   =true;
		boolean expcloseBtn                  =true;
		boolean expextraFields_TreeTabUpdate =true;
		boolean expextraFields_DocumentTab   =true;
		boolean expextraFields_CreateTab     =true;

		System.out.println("***********************************checkAddGroupButton*********************************");

		System.out.println("headerGeneralTab          : "+actheaderGeneralTab         +" Value Expected : "+expheaderGeneralTab);
		System.out.println("headerAccountSettingTab   : "+actheaderAccountSettingTab  +" Value Expected : "+expheaderAccountSettingTab);
		System.out.println("headerDetailsTab          : "+actheaderDetailsTab         +" Value Expected : "+expheaderDetailsTab);
		System.out.println("headerPrintLayoutTab      : "+actheaderPrintLayoutTab     +" Value Expected : "+expheaderPrintLayoutTab);
		System.out.println("SaveBtn                   : "+actSaveBtn                  +" Value Expected : "+expSaveBtn);
		System.out.println("closeBtn                  : "+actcloseBtn                 +" Value Expected : "+expcloseBtn);
		System.out.println("extraFields_TreeTabUpdate : "+actextraFields_TreeTabUpdate+" Value Expected : "+expextraFields_TreeTabUpdate);
		System.out.println("extraFields_DocumentTab   : "+actextraFields_DocumentTab  +" Value Expected : "+expextraFields_DocumentTab);
		System.out.println("extraFields_CreateTab     : "+actextraFields_CreateTab    +" Value Expected : "+expextraFields_CreateTab);

		if(actheaderGeneralTab==expheaderGeneralTab && actheaderAccountSettingTab==expheaderAccountSettingTab && actheaderDetailsTab==expheaderDetailsTab
				&& actheaderPrintLayoutTab==expheaderPrintLayoutTab && actSaveBtn==expSaveBtn && actcloseBtn==expcloseBtn
				&& actextraFields_TreeTabUpdate==expextraFields_TreeTabUpdate && actextraFields_DocumentTab==expextraFields_DocumentTab
				&& actextraFields_CreateTab==expextraFields_CreateTab)
		{
			excelReader.setCellData(xlfile, "Sheet1", 386, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 386, 9, resFail);
			return false;
		}
	}



	public static boolean checkGenralTabOnClickOnAddGroupButton() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));

		Select oSelect = new Select(accountTypeDropdown);
		List <WebElement> elementCount = oSelect.getOptions();
		int actaccTypeSize = elementCount.size();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));

		boolean actnameTxt                =nameTxt.isDisplayed();
		boolean actcodeTxt                =codeTxt.isDisplayed();
		boolean actaccountTypeDropdown    =accountTypeDropdown.isDisplayed();
		boolean actcreditLimitTxt         =creditLimitTxt.isDisplayed();
		boolean actcreditdaysTxt          =creditdaysTxt.isDisplayed();
		boolean actchequeDiscountLimitTxt =chequeDiscountLimitTxt.isDisplayed();
		boolean actrateofinterestTxt      =rateofinterestTxt.isDisplayed();
		boolean actbankAccountTxt         =bankAccountTxt.isDisplayed();


		int     expaccTypeSize            =24;
		boolean expnameTxt                =true;
		boolean expcodeTxt                =true;
		boolean expaccountTypeDropdown    =true;
		boolean expcreditLimitTxt         =true;
		boolean expcreditdaysTxt          =true;
		boolean expchequeDiscountLimitTxt =true;
		boolean exprateofinterestTxt      =true;
		boolean expbankAccountTxt         =true;

		System.out.println("*******************************checkGenralTabOnClickOnAddGroupButton************************");

		System.out.println("nameTxt                 : "+actnameTxt                +" Value Expected : "+expnameTxt);
		System.out.println("codeTxt                 : "+actcodeTxt                +" Value Expected : "+expcodeTxt);
		System.out.println("accountTypeDropdown     : "+actaccountTypeDropdown    +" Value Expected : "+expaccountTypeDropdown);
		System.out.println("creditLimitTxt          : "+actcreditLimitTxt         +" Value Expected : "+expcreditLimitTxt);
		System.out.println("creditdaysTxt           : "+actcreditdaysTxt          +" Value Expected : "+expcreditdaysTxt);
		System.out.println("chequeDiscountLimitTxt  : "+actchequeDiscountLimitTxt +" Value Expected : "+expchequeDiscountLimitTxt);
		System.out.println("rateofinterestTxt       : "+actrateofinterestTxt      +" Value Expected : "+exprateofinterestTxt);
		System.out.println("bankAccountTxt          : "+actbankAccountTxt         +" Value Expected : "+expbankAccountTxt);
		System.out.println("accTypeSize             : "+actaccTypeSize            +" Value Expected : "+expaccTypeSize);


		if(actnameTxt==expnameTxt && actcodeTxt==expcodeTxt && actaccountTypeDropdown==expaccountTypeDropdown 
				&& actcreditLimitTxt==expcreditLimitTxt && actcreditdaysTxt==expcreditdaysTxt && actchequeDiscountLimitTxt==expchequeDiscountLimitTxt
				&& actrateofinterestTxt==exprateofinterestTxt && actbankAccountTxt==expbankAccountTxt && actaccTypeSize==expaccTypeSize)
		{
			excelReader.setCellData(xlfile, "Sheet1", 387, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 387, 9, resFail);
			return false;
		}
	}


	public static boolean checkSettingsTabOnClickOnAddGroupButton() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerAccountSettingTab));
		headerAccountSettingTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(debitCreditProposalDropdown));

		boolean actdebitCreditProposalDropdown                =debitCreditProposalDropdown.isDisplayed();
		boolean actdebitCreditRequiredDropdown                =debitCreditRequiredDropdown.isDisplayed();
		boolean actexchangeAdjustmentGainACTxt                =exchangeAdjustmentGainACTxt.isDisplayed();
		boolean actexchangeAdjustmentLossACTxt                =exchangeAdjustmentLossACTxt.isDisplayed();
		boolean actprimaryAccountTxt               		 	  =primaryAccountTxt.isDisplayed();
		boolean actdefaultCurrencyTxt		                  =defaultCurrencyTxt.isDisplayed();
		boolean actconsolidationMethodDropdown                =consolidationMethodDropdown.isDisplayed();
		boolean actpaymentTermstxt                            =paymentTermstxt.isDisplayed();
		boolean actreminderTermsTxt                           =reminderTermsTxt.isDisplayed();
		boolean actfinanceChargeTermsTxt                      =financeChargeTermsTxt.isDisplayed();

		boolean expdebitCreditProposalDropdown                =true;
		boolean expdebitCreditRequiredDropdown                =true;
		boolean expexchangeAdjustmentGainACTxt                =true;
		boolean expexchangeAdjustmentLossACTxt                =true;
		boolean expprimaryAccountTxt               		  	  =true;
		boolean expdefaultCurrencyTxt		                  =true;
		boolean expconsolidationMethodDropdown                =true;
		boolean exppaymentTermstxt                            =true;
		boolean expreminderTermsTxt                           =true;
		boolean expfinanceChargeTermsTxt                      =true;

		System.out.println("***********************************checkSettingsTabOnClickOnAddGroupButton*************************");

		System.out.println("debitCreditProposalDropdown    : "+actdebitCreditProposalDropdown+" Value Expected : "+expdebitCreditProposalDropdown);
		System.out.println("debitCreditRequiredDropdown    : "+actdebitCreditRequiredDropdown+" Value Expected : "+expdebitCreditRequiredDropdown);
		System.out.println("exchangeAdjustmentGainACTxt    : "+actexchangeAdjustmentGainACTxt+" Value Expected : "+expexchangeAdjustmentGainACTxt);
		System.out.println("exchangeAdjustmentLossACTxt    : "+actexchangeAdjustmentLossACTxt+" Value Expected : "+expexchangeAdjustmentLossACTxt);
		System.out.println("primaryAccountTxt              : "+actprimaryAccountTxt          +" Value Expected : "+expprimaryAccountTxt);
		System.out.println("defaultCurrencyTxt             : "+actdefaultCurrencyTxt         +" Value Expected : "+expdefaultCurrencyTxt);
		System.out.println("consolidationMethodDropdown    : "+actconsolidationMethodDropdown+" Value Expected : "+expconsolidationMethodDropdown);
		System.out.println("paymentTermstxt                : "+actpaymentTermstxt            +" Value Expected : "+exppaymentTermstxt);
		System.out.println("reminderTermsTxt               : "+actreminderTermsTxt           +" Value Expected : "+expreminderTermsTxt);
		System.out.println("financeChargeTermsTxt          : "+actfinanceChargeTermsTxt      +" Value Expected : "+expfinanceChargeTermsTxt);

		if(actdebitCreditProposalDropdown==expdebitCreditProposalDropdown && actdebitCreditRequiredDropdown==expdebitCreditRequiredDropdown
				&& actexchangeAdjustmentGainACTxt==expexchangeAdjustmentGainACTxt && actexchangeAdjustmentLossACTxt==expexchangeAdjustmentLossACTxt
				&& actprimaryAccountTxt==expprimaryAccountTxt && actdefaultCurrencyTxt==expdefaultCurrencyTxt
				&& actconsolidationMethodDropdown==expconsolidationMethodDropdown && actpaymentTermstxt==exppaymentTermstxt
				&& actreminderTermsTxt==expreminderTermsTxt && actfinanceChargeTermsTxt==expfinanceChargeTermsTxt)
		{
			excelReader.setCellData(xlfile, "Sheet1", 388, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 388, 9, resFail);
			return false;
		}
	}



	public static boolean checkDetailsTabOnClickOnAddGroupButton() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerDetailsTab));
		headerDetailsTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addressTxt));

		boolean actaddressTxt           		=addressTxt.isDisplayed();
		boolean actcityTxt           			=cityTxt.isDisplayed();
		boolean actdeliveryAddressTxt           =deliveryAddressTxt.isDisplayed();
		boolean actpinTxt           			=pinTxt.isDisplayed();
		boolean actcity2Text           		    =city2Text.isDisplayed();
		boolean actpin2Txt           			=pin2Txt.isDisplayed();
		boolean actsendEmailCheckBox            =sendEmailCheckBox.isDisplayed();
		boolean actallowCustomerPortalCheckBox  =allowCustomerPortalCheckBox.isDisplayed();
		boolean actsendEmailTxt                 =sendEmailTxt.isDisplayed();
		boolean actpasswordTxt           		=passwordTxt.isDisplayed();
		boolean acttelphoneNumberTxt            =telphoneNumberTxt.isDisplayed();
		boolean actfaxNoTxt           			=faxNoTxt.isDisplayed();

		boolean expaddressTxt           		=true;
		boolean expcityTxt           			=true;
		boolean expdeliveryAddressTxt           =true;
		boolean exppinTxt           			=true;
		boolean expcity2Text           		    =true;
		boolean exppin2Txt           			=true;
		boolean expsendEmailCheckBox            =true;
		boolean expallowCustomerPortalCheckBox  =true;
		boolean expsendEmailTxt                 =true;
		boolean exppasswordTxt           		=true;
		boolean exptelphoneNumberTxt            =true;
		boolean expfaxNoTxt           			=true;

		System.out.println("*********************************checkDetailsTabOnClickOnAddGroupButton**************************");

		System.out.println("addressTxt                  : "+actaddressTxt                  +" Value Expected : "+expaddressTxt);
		System.out.println("cityTxt                     : "+actcityTxt                     +" Value Expected : "+expcityTxt);
		System.out.println("deliveryAddressTxt          : "+actdeliveryAddressTxt          +" Value Expected : "+expdeliveryAddressTxt);
		System.out.println("pinTxt                      : "+actpinTxt                      +" Value Expected : "+exppinTxt);
		System.out.println("city2Text                   : "+actcity2Text                   +" Value Expected : "+expcity2Text);
		System.out.println("pin2Txt                     : "+actpin2Txt                     +" Value Expected : "+exppin2Txt);
		System.out.println("sendEmailCheckBox           : "+actsendEmailCheckBox           +" Value Expected : "+expsendEmailCheckBox);
		System.out.println("allowCustomerPortalCheckBox : "+actallowCustomerPortalCheckBox +" Value Expected : "+expallowCustomerPortalCheckBox);
		System.out.println("sendEmailTxt                : "+actsendEmailTxt                +" Value Expected : "+expsendEmailTxt);
		System.out.println("passwordTxt                 : "+actpasswordTxt                 +" Value Expected : "+exppasswordTxt);
		System.out.println("telphoneNumberTxt           : "+acttelphoneNumberTxt           +" Value Expected : "+exptelphoneNumberTxt);
		System.out.println("faxNoTxt                    : "+actfaxNoTxt                    +" Value Expected : "+expfaxNoTxt);

		if(actaddressTxt==expaddressTxt && actcityTxt==expcityTxt && actdeliveryAddressTxt==expdeliveryAddressTxt
				&& actpinTxt==exppinTxt && actcity2Text==expcity2Text && actpin2Txt==exppin2Txt && actsendEmailCheckBox==expsendEmailCheckBox
				&& actallowCustomerPortalCheckBox==expallowCustomerPortalCheckBox && actsendEmailTxt==expsendEmailTxt && actpasswordTxt==exppasswordTxt
				&& acttelphoneNumberTxt==exptelphoneNumberTxt && actfaxNoTxt==expfaxNoTxt)
		{
			excelReader.setCellData(xlfile, "Sheet1", 389, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 389, 9, resFail);
			return false;
		}
	}


	public static boolean checkPrintlayoutTabOnClickOnAddGroupButton() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerPrintLayoutTab));
		headerPrintLayoutTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(gridVoucherTypeTxt));
		gridVoucherTypeTxt.click();

		boolean actgridVoucherTypeTxt =gridVoucherTypeTxt.isDisplayed();
		boolean actgridPrintLayoutTxt =gridPrintLayoutTxt.isDisplayed();

		boolean expgridVoucherTypeTxt =true;
		boolean expgridPrintLayoutTxt =true;

		System.out.println("**********************************checkPrintlayoutTabOnClickOnAddGroupButton*************************");

		System.out.println("gridVoucherTypeTxt  : "+actgridVoucherTypeTxt+" Value Expected : "+expgridVoucherTypeTxt);
		System.out.println("gridPrintLayoutTxt  : "+actgridPrintLayoutTxt+" Value Expected : "+expgridPrintLayoutTxt);

		if(actgridVoucherTypeTxt==expgridVoucherTypeTxt && actgridPrintLayoutTxt==expgridPrintLayoutTxt)
		{
			excelReader.setCellData(xlfile, "Sheet1", 390, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 390, 9, resFail);
			return false;
		}
	}


	public static boolean checkNewTreeTabUpdateTabGroup() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_TreeTabUpdate));
		extraFields_TreeTabUpdate.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTreeIdDropdown));	

		boolean actmasterTreeIdDropdown    	        =masterTreeIdDropdown.isDisplayed();
		boolean actmasterTreeViewIDDropdown    	    =masterTreeViewIDDropdown.isDisplayed();
		boolean actmasterOptionToHideAccountsGroupTree =masterOptionToHideAccountsGroupTree.isDisplayed();
		boolean actaccountAssestsGroup 				=accountAssestsGroup.isDisplayed();

		boolean expmasterTreeIdDropdown        	    =true;
		boolean expmasterTreeViewIDDropdown    	    =true;
		boolean expmasterOptionToHideAccountsGroupTree =true;
		boolean expaccountAssestsGroup 				=true;

		System.out.println("*********************************checkNewTreeTabUpdateTabGroup****************************");

		System.out.println("masterTreeIdDropdown                  : "+actmasterTreeIdDropdown                  +" Value Expected : "+expmasterTreeIdDropdown);
		System.out.println("masterTreeViewIDDropdown              : "+actmasterTreeViewIDDropdown              +" Value Expected : "+expmasterTreeViewIDDropdown);
		System.out.println("masterOptionToHideAccountsGroupTree   : "+actmasterOptionToHideAccountsGroupTree   +" Value Expected : "+expmasterOptionToHideAccountsGroupTree);
		System.out.println("accountAssestsGroup                   : "+actaccountAssestsGroup                   +" Value Expected : "+expaccountAssestsGroup);

		if(actmasterTreeIdDropdown==expmasterTreeIdDropdown  && actmasterTreeViewIDDropdown==expmasterTreeViewIDDropdown
				&& actmasterOptionToHideAccountsGroupTree==expmasterOptionToHideAccountsGroupTree
				&& actaccountAssestsGroup==expaccountAssestsGroup)
		{	
			excelReader.setCellData(xlfile, "Sheet1", 391, 9, resPass);
			return true;
		}	 
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 391, 9, resFail);
			return false;
		}
	}




	public static boolean checkNewDocumentTabGroup() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_DocumentTab));
		extraFields_DocumentTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_DocumentTab_FileName));

		boolean actextraFields_DocumentTab_FileName       =extraFields_DocumentTab_FileName.isDisplayed();
		boolean actextraFields_DocumentTab_UploadDocument =extraFields_DocumentTab_UploadDocument.isDisplayed();
		boolean actextraFields_DocumentTab_SaveDocument   =extraFields_DocumentTab_SaveDocument.isDisplayed();
		boolean actextraFields_DocumentTab_DeleteDocument =extraFields_DocumentTab_DeleteDocument.isDisplayed();
		boolean actextraFields_DocumentTab_FileSize       =extraFields_DocumentTab_FileSize.isDisplayed();

		boolean expextraFields_DocumentTab_FileName       =true;
		boolean expextraFields_DocumentTab_UploadDocument =true;
		boolean expextraFields_DocumentTab_SaveDocument   =true;
		boolean expextraFields_DocumentTab_DeleteDocument =true;
		boolean expextraFields_DocumentTab_FileSize       =true;

		System.out.println("**************************************checkNewDocumentTabGroup***********************************");

		System.out.println("extraFields_DocumentTab_FileName        : "+actextraFields_DocumentTab_FileName       +" Value Expected : "+expextraFields_DocumentTab_FileName);
		System.out.println("extraFields_DocumentTab_UploadDocument  : "+actextraFields_DocumentTab_UploadDocument +" Value Expected : "+expextraFields_DocumentTab_UploadDocument);
		System.out.println("extraFields_DocumentTab_SaveDocument    : "+actextraFields_DocumentTab_SaveDocument   +" Value Expected : "+expextraFields_DocumentTab_SaveDocument);
		System.out.println("extraFields_DocumentTab_DeleteDocument  : "+actextraFields_DocumentTab_DeleteDocument +" Value Expected : "+expextraFields_DocumentTab_DeleteDocument);
		System.out.println("extraFields_DocumentTab_FileSize        : "+actextraFields_DocumentTab_FileSize       +" Value Expected : "+expextraFields_DocumentTab_FileSize);

		if(actextraFields_DocumentTab_FileName==expextraFields_DocumentTab_FileName
				&& actextraFields_DocumentTab_UploadDocument==expextraFields_DocumentTab_UploadDocument
				&& actextraFields_DocumentTab_SaveDocument==expextraFields_DocumentTab_SaveDocument
				&& actextraFields_DocumentTab_DeleteDocument==expextraFields_DocumentTab_DeleteDocument
				&& actextraFields_DocumentTab_FileSize==expextraFields_DocumentTab_FileSize)
		{
			excelReader.setCellData(xlfile, "Sheet1", 392, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 392, 9, resFail);
			return false;
		}
	}



	public static boolean checkNewInCreateTabGroup() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_CreateTab));
		extraFields_CreateTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(addGroupCreateCreateTab_ExtraFieldUpdate));

		boolean actaddGroupCreateCreateTab_ExtraFieldUpdate  =addGroupCreateCreateTab_ExtraFieldUpdate.isDisplayed();
		boolean expaddGroupCreateCreateTab_ExtraFieldUpdate  =true;

		System.out.println("*************************************checkNewInCreateTabGroup************************************");

		System.out.println("addGroupCreateCreateTab_ExtraFieldUpdate : "+actaddGroupCreateCreateTab_ExtraFieldUpdate+" Value Expected : "+expaddGroupCreateCreateTab_ExtraFieldUpdate);

		if(actaddGroupCreateCreateTab_ExtraFieldUpdate==expaddGroupCreateCreateTab_ExtraFieldUpdate)
		{
			excelReader.setCellData(xlfile, "Sheet1", 393, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 393, 9, resFail);
			return false;
		}
	}


	public static boolean checkSaveButtonWithoutInputNameMandatoryFieldsInAddGroupOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		System.err.println("*****************Account Master*****************");
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerGeneralTab));
		headerGeneralTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(SaveBtn));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage="In Tab :General ---> Name Field is Required";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkSaveButtonWithoutInputNameMandatoryFieldsInAddGroupOption***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 394, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 394, 9, resFail);
			return false;
		}
	}


	public static boolean checkSaveButtonWithoutInputCodeMandatoryFieldsInAddGroupOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(nameTxt));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("Customer Group");
		nameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage="In Tab :General ---> Code Field is Required";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkSaveButtonWithoutInputCodeMandatoryFieldsInAddGroupOption***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 395, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 395, 9, resFail);
			return false;
		}
	}



	public static boolean checkSaveButtonInAddGroupWithInputingMandatoryFields() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.click();
		codeTxt.sendKeys("Customer Group");
		codeTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(accountTypeDropdown));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage="Saved Successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkSaveButtonInAddGroupWithInputingMandatoryFields***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 396, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 396, 9, resFail);
			return false;
		}
	}


	public static boolean checkAccountAddGroupCreationScreenAfterSaving() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerGeneralTab));
		headerGeneralTab.click();


		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));

		boolean actnameTxt                =nameTxt.isDisplayed();
		boolean actcodeTxt                =codeTxt.isDisplayed();
		boolean actaccountTypeDropdown    =accountTypeDropdown.isDisplayed();
		boolean actcreditLimitTxt         =creditLimitTxt.isDisplayed();
		boolean actcreditdaysTxt          =creditdaysTxt.isDisplayed();
		boolean actchequeDiscountLimitTxt =chequeDiscountLimitTxt.isDisplayed();
		boolean actrateofinterestTxt      =rateofinterestTxt.isDisplayed();
		boolean actbankAccountTxt         =bankAccountTxt.isDisplayed();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerGeneralTab));

		boolean actheaderGeneralTab          =headerGeneralTab.isDisplayed();
		boolean actheaderAccountSettingTab   =headerAccountSettingTab.isDisplayed();
		boolean actheaderDetailsTab          =headerDetailsTab.isDisplayed();
		boolean actheaderPrintLayoutTab      =headerPrintLayoutTab.isDisplayed();
		boolean actSaveBtn                   =SaveBtn.isDisplayed();
		boolean actcloseBtn                  =closeBtn.isDisplayed();

		boolean expnameTxt                =true;
		boolean expcodeTxt                =true;
		boolean expaccountTypeDropdown    =true;
		boolean expcreditLimitTxt         =true;
		boolean expcreditdaysTxt          =true;
		boolean expchequeDiscountLimitTxt =true;
		boolean exprateofinterestTxt      =true;
		boolean expbankAccountTxt         =true;

		boolean expheaderGeneralTab          =true;
		boolean expheaderAccountSettingTab   =true;
		boolean expheaderDetailsTab          =true;
		boolean expheaderPrintLayoutTab      =true;
		boolean expSaveBtn                   =true;
		boolean expcloseBtn                  =true;

		System.out.println("*******************************checkAccountAddGroupCreationScreenAfterSaving************************");

		System.out.println("nameTxt                   : "+actnameTxt                 +" Value Expected : "+expnameTxt);
		System.out.println("codeTxt                   : "+actcodeTxt                 +" Value Expected : "+expcodeTxt);
		System.out.println("accountTypeDropdown       : "+actaccountTypeDropdown     +" Value Expected : "+expaccountTypeDropdown);
		System.out.println("creditLimitTxt            : "+actcreditLimitTxt          +" Value Expected : "+expcreditLimitTxt);
		System.out.println("creditdaysTxt             : "+actcreditdaysTxt           +" Value Expected : "+expcreditdaysTxt);
		System.out.println("chequeDiscountLimitTxt    : "+actchequeDiscountLimitTxt  +" Value Expected : "+expchequeDiscountLimitTxt);
		System.out.println("rateofinterestTxt         : "+actrateofinterestTxt       +" Value Expected : "+exprateofinterestTxt);
		System.out.println("bankAccountTxt            : "+actbankAccountTxt          +" Value Expected : "+expbankAccountTxt);
		System.out.println("headerGeneralTab          : "+actheaderGeneralTab        +" Value Expected : "+expheaderGeneralTab);
		System.out.println("headerAccountSettingTab   : "+actheaderAccountSettingTab +" Value Expected : "+expheaderAccountSettingTab);
		System.out.println("headerDetailsTab          : "+actheaderDetailsTab        +" Value Expected : "+expheaderDetailsTab);
		System.out.println("headerPrintLayoutTab      : "+actheaderPrintLayoutTab    +" Value Expected : "+expheaderPrintLayoutTab);
		System.out.println("SaveBtn                   : "+actSaveBtn                 +" Value Expected : "+expSaveBtn);
		System.out.println("closeBtn                  : "+actcloseBtn                +" Value Expected : "+expcloseBtn);

		if(actnameTxt==expnameTxt && actcodeTxt==expcodeTxt && actaccountTypeDropdown==expaccountTypeDropdown 
				&& actcreditLimitTxt==expcreditLimitTxt && actcreditdaysTxt==expcreditdaysTxt && actchequeDiscountLimitTxt==expchequeDiscountLimitTxt
				&& actrateofinterestTxt==exprateofinterestTxt && actbankAccountTxt==expbankAccountTxt
				&& actheaderGeneralTab==expheaderGeneralTab && actheaderAccountSettingTab==expheaderAccountSettingTab && actheaderDetailsTab==expheaderDetailsTab
				&& actheaderPrintLayoutTab==expheaderPrintLayoutTab && actSaveBtn==expSaveBtn && actcloseBtn==expcloseBtn) 
		{
			excelReader.setCellData(xlfile, "Sheet1", 397, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 397, 9, resFail);
			return false;
		}
	}



	public static boolean checkAccountAddGroupNewCreateDisplayInAccountGrid() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeAccMasterCreationScreen));
		closeAccMasterCreationScreen.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountNewCreationName));

		String actaccountNewCreationName  =accountNewCreationName.getText();
		String expaccountNewCreationName  ="Customer Group";

		System.out.println("***********************checkAccountAddGroupNewCreateDisplayInAccountGrid************************");

		System.out.println("accountNewCreationName  : "+actaccountNewCreationName+" Value Expected : "+expaccountNewCreationName);

		if(actaccountNewCreationName.equalsIgnoreCase(expaccountNewCreationName))
		{ 
			excelReader.setCellData(xlfile, "Sheet1", 398, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 398, 9, resFail);
			return false;
		}
	}



	//Server Error Elements
	@FindBy(xpath="//div[@id='id_focus_msgbox_main']")
	public static WebElement serverErrorPopup;

	@FindBy(xpath="//div[@id='id_focus_msgbox_title']/div[2]/span")
	public static WebElement serverErrorTitleClose;

	@FindBy(xpath="//div[@id='id_focus_msgbox_main']/div[2]/button")
	public static WebElement serverErrorClose;



	//Edit Option For Add Group

	public static boolean checkEditOptionForNewlyCreateAddGroupAccount() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountFirstCheckBoxToSelection));
		accountFirstCheckBoxToSelection.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
		masterEditBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));

		String actnameTxt =nameTxt.getAttribute("value");
		String expnameTxt ="Customer Group";

		System.out.println("*************************checkEditOptionForNewlyCreateAddGroupAccount***********************");

		System.out.println("nameTxt  : "+actnameTxt+" Value Expected : "+expnameTxt);

		if(actnameTxt.equalsIgnoreCase(expnameTxt))
		{ 
			excelReader.setCellData(xlfile, "Sheet1", 399, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 399, 9, resFail);
			return false;
		}
	}




	public static boolean checkUpateForNewlyCreateAddGroupAccount() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();
		nameTxt.clear();
		nameTxt.sendKeys("Customer Update Group");
		nameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.click();
		codeTxt.clear();
		codeTxt.sendKeys("CG Update");
		codeTxt.sendKeys(Keys.TAB); 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage="Updated Successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkUpateForNewlyCreateAddGroupAccount***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 400, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 400, 9, resFail);
			return false;
		}
	}


	public static boolean checkUpdatedAccountGroupDisplayInAccountGrid() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountNewCreationName));

		String actaccountNewCreationName  =accountNewCreationName.getText();
		String expaccountNewCreationName  ="Customer Update Group";

		System.out.println("************************checkUpdatedAccountGroupDisplayInAccountGrid*********************");

		System.out.println("accountNewCreationName  : "+actaccountNewCreationName+" Value Expected : "+expaccountNewCreationName);

		if(actaccountNewCreationName.equalsIgnoreCase(expaccountNewCreationName))
		{ 
			excelReader.setCellData(xlfile, "Sheet1", 401, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 401, 9, resFail);
			return false;
		}
	}

	//Edit Option for Account

	public static boolean checkEditOptionForNewlyCreateAccount() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(accountSecondCheckBox));
		accountSecondCheckBox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
		masterEditBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));

		String actnameTxt  =nameTxt.getAttribute("value");
		String expnameTxt  ="Customer";

		System.out.println("*******************checkEditOptionForNewlyCreateAccount***********************");

		System.out.println("nameTxt  : "+actnameTxt+" Value Expected : "+expnameTxt);

		if(actnameTxt.equalsIgnoreCase(expnameTxt))
		{ 
			excelReader.setCellData(xlfile, "Sheet1", 402, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 402, 9, resFail);
			return false;
		}
	}


	public static boolean checkUpateForNewlyCreateAccount() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();
		nameTxt.clear();
		nameTxt.sendKeys("Customer Update");
		nameTxt.sendKeys(Keys.TAB); 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.click();
		codeTxt.clear();
		codeTxt.sendKeys("CUpdate");
		codeTxt.sendKeys(Keys.TAB); 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
		accountTypeDropdown.sendKeys(Keys.TAB); 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditLimitTxt));
		creditLimitTxt.sendKeys("193");
		creditLimitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditdaysTxt));
		creditdaysTxt.sendKeys("3");
		creditdaysTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(chequeDiscountLimitTxt)); 
		chequeDiscountLimitTxt.sendKeys("104");
		chequeDiscountLimitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rateofinterestTxt)); 
		rateofinterestTxt.sendKeys("4");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage="Updated Successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkUpateForNewlyCreateAccount***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 403, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 403, 9, resFail);
			return false;
		}
	}


	public static boolean checkUpdatedAccountDisplayInAccountGrid() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(accountNewCreationNameOfLane));

		String actaccountNewCreationNameOfLane =accountNewCreationNameOfLane.getText();
		String expaccountNewCreationNameOfLane ="Customer Update";

		System.out.println("************************checkUpdatedAccountDisplayInAccountGrid****************************");

		System.out.println("accountNewCreationNameOfLane  : "+actaccountNewCreationNameOfLane+" Value Expected : "+expaccountNewCreationNameOfLane);

		if(actaccountNewCreationNameOfLane.equalsIgnoreCase(expaccountNewCreationNameOfLane))
		{ 
			excelReader.setCellData(xlfile, "Sheet1", 404, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 404, 9, resFail);
			return false;
		}
	}


	public static boolean checkClickOnGroupToDisplayEmpty() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountFirstCheckBoxToSelection));
		getAction().doubleClick(accountFirstCheckBoxToSelection).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountGroupTitleDisplay));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clickOnEmptyGroup));

		String actaccountGroupTitleDisplay =accountGroupTitleDisplay.getText();
		String actclickOnEmptyGroup        =clickOnEmptyGroup.getText();

		String expaccountGroupTitleDisplay ="Customer Update Group";
		String expclickOnEmptyGroup        ="No record found";

		System.out.println("******************************checkClickOnGroupToDisplayEmpty******************************");

		System.out.println("accountGroupTitleDisplay  : "+actaccountGroupTitleDisplay+" Value Expected : "+expaccountGroupTitleDisplay);
		System.out.println("clickOnEmptyGroup         : "+actclickOnEmptyGroup       +" Value Expected : "+expclickOnEmptyGroup);

		if(actaccountGroupTitleDisplay.equalsIgnoreCase(expaccountGroupTitleDisplay)
				&& actclickOnEmptyGroup.equalsIgnoreCase(expclickOnEmptyGroup))
		{ 
			excelReader.setCellData(xlfile, "Sheet1", 405, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 405, 9, resFail);
			return false;
		}
	}

	//Close the Account master and Open again to check Clone Options


	public static boolean checkCloseAccountMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloseBtn));
		masterCloseBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));

		boolean actlabelDashboard                  =labelDashboard.isDisplayed();
		boolean actselectDashboard                 =selectDashboard.isDisplayed();
		boolean actnewAddDashBoard                 =newAddDashBoard.isDisplayed();
		boolean actdashboardCustomizationSettings  =dashboardCustomizationSettings.isDisplayed();

		boolean explabelDashboard                  =true;
		boolean expselectDashboard                 =true;
		boolean expnewAddDashBoard                 =true;
		boolean expdashboardCustomizationSettings  =true;

		System.out.println("******************************checkCloseAccountMaster************************");

		System.out.println("labelDashboard                  : "+actlabelDashboard                 +" Value Expected : "+explabelDashboard);
		System.out.println("selectDashboard                 : "+actselectDashboard                +" Value Expected : "+expselectDashboard);
		System.out.println("newAddDashBoard                 : "+actnewAddDashBoard                +" Value Expected : "+expnewAddDashBoard);
		System.out.println("dashboardCustomizationSettings  : "+actdashboardCustomizationSettings +" Value Expected : "+expdashboardCustomizationSettings);

		if(labelDashboard.isDisplayed() && selectDashboard.isDisplayed() && newAddDashBoard.isDisplayed() && dashboardCustomizationSettings.isDisplayed())
		{
			excelReader.setCellData(xlfile, "Sheet1", 406, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 406, 9, resFail);
			return false;
		}
	}



	public static boolean checkCloneOptionWithoutRowSelectToOpenAccountsMenu() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountAccountsReceivableGroup));
		accountAccountsReceivableGroup.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountFirstCheckBoxToSelection));
		getAction().doubleClick(accountFirstCheckBoxToSelection).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloneBtn));
		masterCloneBtn.click();

		String expMessage="Please select a row";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkCloneOptionWithoutRowSelectToOpenAccountsMenu***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 407, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 407, 9, resFail);
			return false;
		}
	}

	//Check Clone and Adding Account in the Group

	public static boolean checkAccountOneCreationWithPropertyAsCDForEachUnderGroup() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		masterNewBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();
		nameTxt.clear();
		nameTxt.sendKeys("Customer Display CD For Each Account One");
		nameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("9001");
		codeTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
		accountTypeDropdown.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditLimitTxt));
		creditLimitTxt.sendKeys("194");
		creditLimitTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditdaysTxt));
		creditdaysTxt.sendKeys("4");
		creditdaysTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(chequeDiscountLimitTxt));
		chequeDiscountLimitTxt.sendKeys("106");
		chequeDiscountLimitTxt.sendKeys(Keys.TAB);

		rateofinterestTxt.sendKeys("9");

		nameTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage="Saved Successfully";

		String actMessage=checkValidationMessage(expMessage);
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();

		System.out.println("********************************checkAccountOneCreationWithPropertyAsCDForEachUnderGroup***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 408, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 408, 9, resFail);
			return false;
		}
	}


	//Clone Option


	public static boolean checkByCloneOptionAccountInformation() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterGridHeader_SelectAllRowsCheckBox));
		masterGridHeader_SelectAllRowsCheckBox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloneBtn));
		masterCloneBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();
		nameTxt.sendKeys("Customer Display CD For Each Account Two");
		nameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("9002");
		codeTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));

		Select oSelect = new Select(accountTypeDropdown);
		List <WebElement> elementCount = oSelect.getOptions();
		int actaccTypeSize = elementCount.size();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));

		boolean actnameTxt                =nameTxt.isDisplayed();
		boolean actcodeTxt                =codeTxt.isDisplayed();
		boolean actaccountTypeDropdown    =accountTypeDropdown.isDisplayed();
		boolean actcreditLimitTxt         =creditLimitTxt.isDisplayed();
		boolean actcreditdaysTxt          =creditdaysTxt.isDisplayed();
		boolean actchequeDiscountLimitTxt =chequeDiscountLimitTxt.isDisplayed();
		boolean actrateofinterestTxt      =rateofinterestTxt.isDisplayed();
		boolean actbankAccountTxt         =bankAccountTxt.isDisplayed();

		String actcreditLimitTxtValue         =creditLimitTxt.getAttribute("value");
		String actcreditdaysTxtValue          =creditdaysTxt.getAttribute("value");
		String actchequeDiscountLimitTxtValue =chequeDiscountLimitTxt.getAttribute("value");
		String actrateofinterestTxtalue       =rateofinterestTxt.getAttribute("value");

		int     expaccTypeSize            =24;
		boolean expnameTxt                =true;
		boolean expcodeTxt                =true;
		boolean expaccountTypeDropdown    =true;
		boolean expcreditLimitTxt         =true;
		boolean expcreditdaysTxt          =true;
		boolean expchequeDiscountLimitTxt =true;
		boolean exprateofinterestTxt      =true;
		boolean expbankAccountTxt         =true;

		String expcreditLimitTxtValue         ="194.000";
		String expcreditdaysTxtValue          ="4";
		String expchequeDiscountLimitTxtValue ="106.000";
		String exprateofinterestTxtalue       ="9.00";

		System.out.println("*******************************checkGenralTabOnClickOnAddGroupButton************************");

		System.out.println("nameTxt                     : "+actnameTxt                     +" Value Expected : "+expnameTxt);
		System.out.println("codeTxt                     : "+actcodeTxt                     +" Value Expected : "+expcodeTxt);
		System.out.println("accountTypeDropdown         : "+actaccountTypeDropdown         +" Value Expected : "+expaccountTypeDropdown);
		System.out.println("creditLimitTxt              : "+actcreditLimitTxt              +" Value Expected : "+expcreditLimitTxt);
		System.out.println("creditdaysTxt               : "+actcreditdaysTxt               +" Value Expected : "+expcreditdaysTxt);
		System.out.println("chequeDiscountLimitTxt      : "+actchequeDiscountLimitTxt      +" Value Expected : "+expchequeDiscountLimitTxt);
		System.out.println("rateofinterestTxt           : "+actrateofinterestTxt           +" Value Expected : "+exprateofinterestTxt);
		System.out.println("bankAccountTxt              : "+actbankAccountTxt              +" Value Expected : "+expbankAccountTxt);
		System.out.println("accTypeSize                 : "+actaccTypeSize                 +" Value Expected : "+expaccTypeSize);
		System.out.println("creditLimitTxtValue         :"+actcreditLimitTxtValue          +" Value Expected :"+expcreditLimitTxtValue);
		System.out.println("creditdaysTxtValue          :"+actcreditdaysTxtValue           +" Value Expected :"+expcreditdaysTxtValue);
		System.out.println("chequeDiscountLimitTxtValue :"+actchequeDiscountLimitTxtValue  +" Value Expected :"+expchequeDiscountLimitTxtValue);
		System.out.println("rateofinterestTxtalue       :"+actrateofinterestTxtalue        +" Value Expected :"+exprateofinterestTxtalue);


		if(actnameTxt==expnameTxt && actcodeTxt==expcodeTxt && actaccountTypeDropdown==expaccountTypeDropdown 
				&& actcreditLimitTxt==expcreditLimitTxt && actcreditdaysTxt==expcreditdaysTxt && actchequeDiscountLimitTxt==expchequeDiscountLimitTxt
				&& actrateofinterestTxt==exprateofinterestTxt && actbankAccountTxt==expbankAccountTxt && actaccTypeSize==expaccTypeSize
				&& actcreditLimitTxtValue.equalsIgnoreCase(expcreditLimitTxtValue) && actcreditdaysTxtValue.equalsIgnoreCase(expcreditdaysTxtValue)
				&& actchequeDiscountLimitTxtValue.equalsIgnoreCase(expchequeDiscountLimitTxtValue)
				&& actrateofinterestTxtalue.equalsIgnoreCase(exprateofinterestTxtalue))
		{
			excelReader.setCellData(xlfile, "Sheet1", 409, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 409, 9, resFail);
			return false;
		}
	}


	public static boolean checkSaveAccountByUsingCloneOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage="Saved Successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkSaveAccountByUsingCloneOption***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 410, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 410, 9, resFail);
			return false;
		}
	}



	public static boolean checkAccountDisplayCreationOfAccountThroughMainClone() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountNewCreationNameOfLane));

		String actaccountNewCreationName  =accountNewCreationName.getText();
		String expaccountNewCreationName  ="Customer Display CD For Each Account Two";

		System.out.println("*********************checkAccountDisplayCreationOfAccountThroughMainClone**************************");

		System.out.println("accountNewCreationName  : "+actaccountNewCreationName+" Value Expected : "+expaccountNewCreationName);

		if(actaccountNewCreationName.equalsIgnoreCase(expaccountNewCreationName))
		{ 
			excelReader.setCellData(xlfile, "Sheet1", 411, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 411, 9, resFail);
			return false;
		}
	}


	//Clone Option in the Edit Account

	public static boolean checkCloneOptionInEditAccount() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountFirstCheckBoxToSelection));
		accountFirstCheckBoxToSelection.click();		 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
		masterEditBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editcloneBtn));
		editcloneBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));

		Select oSelect = new Select(accountTypeDropdown);
		List <WebElement> elementCount = oSelect.getOptions();
		int actaccTypeSize = elementCount.size();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));

		boolean actnameTxt                =nameTxt.isDisplayed();
		boolean actcodeTxt                =codeTxt.isDisplayed();
		boolean actaccountTypeDropdown    =accountTypeDropdown.isDisplayed();
		boolean actcreditLimitTxt         =creditLimitTxt.isDisplayed();
		boolean actcreditdaysTxt          =creditdaysTxt.isDisplayed();
		boolean actchequeDiscountLimitTxt =chequeDiscountLimitTxt.isDisplayed();
		boolean actrateofinterestTxt      =rateofinterestTxt.isDisplayed();
		boolean actbankAccountTxt         =bankAccountTxt.isDisplayed();

		String actcreditLimitTxtValue         =creditLimitTxt.getAttribute("value");
		String actcreditdaysTxtValue          =creditdaysTxt.getAttribute("value");
		String actchequeDiscountLimitTxtValue =chequeDiscountLimitTxt.getAttribute("value");
		String actrateofinterestTxtalue       =rateofinterestTxt.getAttribute("value");

		int     expaccTypeSize            =24;
		boolean expnameTxt                =true;
		boolean expcodeTxt                =true;
		boolean expaccountTypeDropdown    =true;
		boolean expcreditLimitTxt         =true;
		boolean expcreditdaysTxt          =true;
		boolean expchequeDiscountLimitTxt =true;
		boolean exprateofinterestTxt      =true;
		boolean expbankAccountTxt         =true;

		String expcreditLimitTxtValue         ="194.000";
		String expcreditdaysTxtValue          ="4";
		String expchequeDiscountLimitTxtValue ="106.000";
		String exprateofinterestTxtalue       ="9.00";

		System.out.println("*******************************checkCloneOptionInEditAccount************************");

		System.out.println("nameTxt                     : "+actnameTxt                     +" Value Expected : "+expnameTxt);
		System.out.println("codeTxt                     : "+actcodeTxt                     +" Value Expected : "+expcodeTxt);
		System.out.println("accountTypeDropdown         : "+actaccountTypeDropdown         +" Value Expected : "+expaccountTypeDropdown);
		System.out.println("creditLimitTxt              : "+actcreditLimitTxt              +" Value Expected : "+expcreditLimitTxt);
		System.out.println("creditdaysTxt               : "+actcreditdaysTxt               +" Value Expected : "+expcreditdaysTxt);
		System.out.println("chequeDiscountLimitTxt      : "+actchequeDiscountLimitTxt      +" Value Expected : "+expchequeDiscountLimitTxt);
		System.out.println("rateofinterestTxt           : "+actrateofinterestTxt           +" Value Expected : "+exprateofinterestTxt);
		System.out.println("bankAccountTxt              : "+actbankAccountTxt              +" Value Expected : "+expbankAccountTxt);
		System.out.println("accTypeSize                 : "+actaccTypeSize                 +" Value Expected : "+expaccTypeSize);
		System.out.println("creditLimitTxtValue         :"+actcreditLimitTxtValue          +" Value Expected :"+expcreditLimitTxtValue);
		System.out.println("creditdaysTxtValue          :"+actcreditdaysTxtValue           +" Value Expected :"+expcreditdaysTxtValue);
		System.out.println("chequeDiscountLimitTxtValue :"+actchequeDiscountLimitTxtValue  +" Value Expected :"+expchequeDiscountLimitTxtValue);
		System.out.println("rateofinterestTxtalue       :"+actrateofinterestTxtalue        +" Value Expected :"+exprateofinterestTxtalue);


		if(actnameTxt==expnameTxt && actcodeTxt==expcodeTxt && actaccountTypeDropdown==expaccountTypeDropdown 
				&& actcreditLimitTxt==expcreditLimitTxt && actcreditdaysTxt==expcreditdaysTxt && actchequeDiscountLimitTxt==expchequeDiscountLimitTxt
				&& actrateofinterestTxt==exprateofinterestTxt && actbankAccountTxt==expbankAccountTxt && actaccTypeSize==expaccTypeSize
				&& actcreditLimitTxtValue.equalsIgnoreCase(expcreditLimitTxtValue) && actcreditdaysTxtValue.equalsIgnoreCase(expcreditdaysTxtValue)
				&& actchequeDiscountLimitTxtValue.equalsIgnoreCase(expchequeDiscountLimitTxtValue)
				&& actrateofinterestTxtalue.equalsIgnoreCase(exprateofinterestTxtalue))
		{
			excelReader.setCellData(xlfile, "Sheet1", 412, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 412, 9, resFail);
			return false;
		}
	}



	public static boolean checkSaveButtonWithoutInputNameMandatoryFieldsInCloneOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerGeneralTab));
		headerGeneralTab.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage="In Tab :General ---> Name Field is Required";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkSaveButtonWithoutInputNameMandatoryFieldsInCloneOption***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 413, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 413, 9, resFail);
			return false;
		}
	}


	public static boolean checkSaveButtonWithoutInputCodeMandatoryFieldsInCloneOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("Customer Display CD For Each Account Three");
		nameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage="In Tab :General ---> Code Field is Required";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkSaveButtonWithoutInputCodeMandatoryFieldsInCloneOption***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 414, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 414, 9, resFail);
			return false;
		}
	}


	public static boolean checkSaveAccountByUsingEditCloneInMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("9003");
		codeTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
		accountTypeDropdown.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage="Saved Successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkSaveAccountByUsingEditCloneInMaster***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 415, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 415, 9, resFail);
			return false;
		}
	}



	public static boolean checkCloneByEditCreationOfAccountDisplay() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountNewCreationNameOfLane));

		String actaccountNewCreationName  =accountNewCreationName.getText();
		String expaccountNewCreationName  ="Customer Display CD For Each Account Three";

		System.out.println("*********************checkCloneByEditCreationOfAccountDisplay**************************");

		System.out.println("accountNewCreationName  : "+actaccountNewCreationName+" Value Expected : "+expaccountNewCreationName);

		if(actaccountNewCreationName.equalsIgnoreCase(expaccountNewCreationName))
		{ 
			excelReader.setCellData(xlfile, "Sheet1", 416, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 416, 9, resFail);
			return false;
		}
	}


	public static boolean checkCloseAndOpenAccountMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloseBtn));
		masterCloseBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountsTitle));

		String actaccountsTitle  =accountsTitle.getText();
		String expaccountsTitle  ="Account";

		System.out.println("*********************************checkCloseAndOpenAccountMaster**************************");

		System.out.println("accountsTitle  : "+actaccountsTitle+" Value Expected : "+expaccountsTitle);

		if(actaccountsTitle.equalsIgnoreCase(expaccountsTitle))
		{	
			excelReader.setCellData(xlfile, "Sheet1", 417, 9, resPass);
			return true;
		}	 
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 417, 9, resFail);
			return false;
		}
	}


	//Copy and Paste Options


	public static boolean checkCopyOptionByEditAccount() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountFirstCheckBoxToSelection));
		accountFirstCheckBoxToSelection.click();	
		getAction().doubleClick(accountFirstCheckBoxToSelection).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
		masterEditBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copyBtn));
		copyBtn.click();
		copyBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditLimitTxt));
		creditLimitTxt.click();

		String actcreditLimitTxtValue         =creditLimitTxt.getAttribute("value");
		String actcreditdaysTxtValue          =creditdaysTxt.getAttribute("value");
		String actchequeDiscountLimitTxtValue =chequeDiscountLimitTxt.getAttribute("value");
		String actrateofinterestTxtalue       =rateofinterestTxt.getAttribute("value");

		String expcreditLimitTxtValue         ="194.000";
		String expcreditdaysTxtValue          ="4";
		String expchequeDiscountLimitTxtValue ="106.000";
		String exprateofinterestTxtalue       ="9.00";

		System.out.println("*******************************checkCopyOptionByEditAccount************************");

		System.out.println("creditLimitTxtValue         :"+actcreditLimitTxtValue          +" Value Expected :"+expcreditLimitTxtValue);
		System.out.println("creditdaysTxtValue          :"+actcreditdaysTxtValue           +" Value Expected :"+expcreditdaysTxtValue);
		System.out.println("chequeDiscountLimitTxtValue :"+actchequeDiscountLimitTxtValue  +" Value Expected :"+expchequeDiscountLimitTxtValue);
		System.out.println("rateofinterestTxtalue       :"+actrateofinterestTxtalue        +" Value Expected :"+exprateofinterestTxtalue);


		if(actcreditLimitTxtValue.equalsIgnoreCase(expcreditLimitTxtValue) && actcreditdaysTxtValue.equalsIgnoreCase(expcreditdaysTxtValue)
				&& actchequeDiscountLimitTxtValue.equalsIgnoreCase(expchequeDiscountLimitTxtValue)
				&& actrateofinterestTxtalue.equalsIgnoreCase(exprateofinterestTxtalue))
		{
			excelReader.setCellData(xlfile, "Sheet1", 418, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 418, 9, resFail);
			return false;
		}
	}



	public static boolean checkPasteOptionAndClickOnSaveForDuplicateName() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeAccMasterCreationScreen));
		closeAccMasterCreationScreen.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		masterNewBtn.click();		 

		Thread.sleep(3000);

		try
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pasteBtn));
			pasteBtn.click();
		}
		catch(Exception e)
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();

			Thread.sleep(3000);

			Thread.sleep(2000);

			LoginPage lp=new LoginPage(getDriver()); 

			String unamelt="su";

			String pawslt="su";

			Thread.sleep(2000);

			lp.enterUserName(unamelt);

			lp.enterPassword(pawslt);

			lp.clickOnSignInBtn();

			//checkRefershPopOnlogin();

			//checkPopUpWindow();

			Thread.sleep(10000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
			mastersMenu.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
			accounts.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountAccountsReceivableCustomerUpdateGroup));
			accountAccountsReceivableCustomerUpdateGroup.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountFirstCheckBoxToSelection));
			getAction().doubleClick(accountFirstCheckBoxToSelection).build().perform();


			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copyBtn));
			copyBtn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeAccMasterCreationScreen));
			closeAccMasterCreationScreen.click();

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
			masterNewBtn.click();		 

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pasteBtn));
			pasteBtn.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();		 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage="Code Is Unique";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkPasteOptionAndClickOnSaveForDuplicateName***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 419, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 419, 9, resFail);
			return false;
		}
	}






	public static boolean checkSaveUsingCopyAndPasteOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();
		nameTxt.clear();
		nameTxt.sendKeys("Customer Display CD For Each Account Four");
		nameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.clear();
		codeTxt.sendKeys("9004");
		codeTxt.sendKeys(Keys.TAB); 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
		accountTypeDropdown.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage="Saved Successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkSaveUsingCopyAndPasteOption***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 420, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 420, 9, resFail);
			return false;
		}
	}




	public static boolean checkCopyAndPasteCreationOfAccountDisplay() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeAccMasterCreationScreen));
		closeAccMasterCreationScreen.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountNewCreationNameOfLane));

		String actaccountNewCreationName  =accountNewCreationName.getText();
		String expaccountNewCreationName  ="Customer Display CD For Each Account Four";

		System.out.println("*********************checkCopyAndPasteCreationOfAccountDisplay**************************");

		System.out.println("accountNewCreationName  : "+actaccountNewCreationName+" Value Expected : "+expaccountNewCreationName);

		if(actaccountNewCreationName.equalsIgnoreCase(expaccountNewCreationName))
		{ 
			excelReader.setCellData(xlfile, "Sheet1", 421, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 421, 9, resFail);
			return false;
		}
	}



	public static boolean checkCopyPasteAccountInformationOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountFirstCheckBoxToSelection));
		accountFirstCheckBoxToSelection.click();		 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
		masterEditBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(copyBtn));
		copyBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditLimitTxt));
		creditLimitTxt.click();

		String actcreditLimitTxtValue         =creditLimitTxt.getAttribute("value");
		String actcreditdaysTxtValue          =creditdaysTxt.getAttribute("value");
		String actchequeDiscountLimitTxtValue =chequeDiscountLimitTxt.getAttribute("value");
		String actrateofinterestTxtalue       =rateofinterestTxt.getAttribute("value");

		String expcreditLimitTxtValue         ="194.000";
		String expcreditdaysTxtValue          ="4";
		String expchequeDiscountLimitTxtValue ="106.000";
		String exprateofinterestTxtalue       ="9.00";

		System.out.println("*******************************checkCopyPasteAccountInformationOption************************");

		System.out.println("creditLimitTxtValue         :"+actcreditLimitTxtValue          +" Value Expected :"+expcreditLimitTxtValue);
		System.out.println("creditdaysTxtValue          :"+actcreditdaysTxtValue           +" Value Expected :"+expcreditdaysTxtValue);
		System.out.println("chequeDiscountLimitTxtValue :"+actchequeDiscountLimitTxtValue  +" Value Expected :"+expchequeDiscountLimitTxtValue);
		System.out.println("rateofinterestTxtalue       :"+actrateofinterestTxtalue        +" Value Expected :"+exprateofinterestTxtalue);


		if(actcreditLimitTxtValue.equalsIgnoreCase(expcreditLimitTxtValue) && actcreditdaysTxtValue.equalsIgnoreCase(expcreditdaysTxtValue)
				&& actchequeDiscountLimitTxtValue.equalsIgnoreCase(expchequeDiscountLimitTxtValue)
				&& actrateofinterestTxtalue.equalsIgnoreCase(exprateofinterestTxtalue))
		{
			excelReader.setCellData(xlfile, "Sheet1", 422, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 422, 9, resFail);
			return false;
		}
	}


	//Properties Option


	public static boolean checkPropertiesOptionForAccount() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeAccMasterCreationScreen));
		closeAccMasterCreationScreen.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountFirstCheckBoxToSelection));
		accountFirstCheckBoxToSelection.click();		 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterPropertiesBtn));
		masterPropertiesBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountPropertiesLabel));

		boolean actaccountPropertiesLabel    								=accountPropertiesLabel.isDisplayed();
		boolean actnormalRadioBtn    										=normalRadioBtn.isDisplayed();
		boolean actshowSummaryOfTheAccountRadioBtn    						=showSummaryOfTheAccountRadioBtn.isDisplayed();
		boolean actsuspendCreditLimitChkbox    								=suspendCreditLimitChkbox.isDisplayed();
		boolean actdisplayDebitCreditTotalForEachMonthRadioBtn    			=displayDebitCreditTotalForEachMonthRadioBtn.isDisplayed();
		boolean actdisplayDebitCreditTotalForEachDayRadioBtn    			=displayDebitCreditTotalForEachDayRadioBtn.isDisplayed();
		boolean actnoneRadioBtn    											=noneRadioBtn.isDisplayed();
		boolean actconsolidateWhenBothAccountsAreSameRadioBtn    			=consolidateWhenBothAccountsAreSameRadioBtn.isDisplayed();
		boolean actconsolidateAlwaysRadioBtn    							=consolidateAlwaysRadioBtn.isDisplayed();
		boolean actstatusDropdown    										=statusDropdown.isDisplayed();
		boolean actdoNotRestrictSelectionEvenIfRightsNotAllottedCheckbox  	=doNotRestrictSelectionEvenIfRightsNotAllottedCheckbox.isDisplayed();
		boolean actallowOtherCompaniesToViewRecordsCheckbox               	=allowOtherCompaniesToViewRecordsCheckbox.isDisplayed();
		boolean actgenerateLedgerByCurrencyCheckbox    						=generateLedgerByCurrencyCheckbox.isDisplayed();
		boolean actsendSmsEmailWhereverAcDebitedCreditedCheckbox    		=sendSmsEmailWhereverAcDebitedCreditedCheckbox.isDisplayed();
		boolean actproperties_okBtn    										=properties_okBtn.isDisplayed();
		boolean actproperties_cancelBtn    									=properties_cancelBtn.isDisplayed();

		boolean expaccountPropertiesLabel    								=true;
		boolean expnormalRadioBtn    										=true;
		boolean expshowSummaryOfTheAccountRadioBtn    						=true;
		boolean expsuspendCreditLimitChkbox    								=true;
		boolean expdisplayDebitCreditTotalForEachMonthRadioBtn    			=true;
		boolean expdisplayDebitCreditTotalForEachDayRadioBtn    			=true;
		boolean expnoneRadioBtn    											=true;
		boolean expconsolidateWhenBothAccountsAreSameRadioBtn    			=true;
		boolean expconsolidateAlwaysRadioBtn    							=true;
		boolean expstatusDropdown    										=true;
		boolean expdoNotRestrictSelectionEvenIfRightsNotAllottedCheckbox  	=true;
		boolean expallowOtherCompaniesToViewRecordsCheckbox               	=true;
		boolean expgenerateLedgerByCurrencyCheckbox    						=true;
		boolean expsendSmsEmailWhereverAcDebitedCreditedCheckbox    		=true;
		boolean expproperties_okBtn    										=true;
		boolean expproperties_cancelBtn    									=true;


		System.out.println("**********************************checkPropertiesOptionForAccount****************************");

		System.out.println("accountPropertiesLabel                                : "+actaccountPropertiesLabel                                +" Value Expected : "+expaccountPropertiesLabel);
		System.out.println("normalRadioBtn                                        : "+actnormalRadioBtn                                        +" Value Expected : "+expnormalRadioBtn);
		System.out.println("showSummaryOfTheAccountRadioBtn                       : "+actshowSummaryOfTheAccountRadioBtn                       +" Value Expected : "+expshowSummaryOfTheAccountRadioBtn);
		System.out.println("suspendCreditLimitChkbox                              : "+actsuspendCreditLimitChkbox                              +" Value Expected : "+expsuspendCreditLimitChkbox);
		System.out.println("displayDebitCreditTotalForEachMonthRadioBtn           : "+actdisplayDebitCreditTotalForEachMonthRadioBtn           +" Value Expected : "+expdisplayDebitCreditTotalForEachMonthRadioBtn);
		System.out.println("displayDebitCreditTotalForEachDayRadioBtn             : "+actdisplayDebitCreditTotalForEachDayRadioBtn             +" Value Expected : "+expdisplayDebitCreditTotalForEachDayRadioBtn);
		System.out.println("noneRadioBtn                                          : "+actnoneRadioBtn                                          +" Value Expected : "+expnoneRadioBtn);
		System.out.println("consolidateWhenBothAccountsAreSameRadioBtn            : "+actconsolidateWhenBothAccountsAreSameRadioBtn            +" Value Expected : "+expconsolidateWhenBothAccountsAreSameRadioBtn);
		System.out.println("consolidateAlwaysRadioBtn                             : "+actconsolidateAlwaysRadioBtn                             +" Value Expected : "+expconsolidateAlwaysRadioBtn);
		System.out.println("statusDropdown                                        : "+actstatusDropdown                                        +" Value Expected : "+expstatusDropdown);
		System.out.println("doNotRestrictSelectionEvenIfRightsNotAllottedCheckbox : "+actdoNotRestrictSelectionEvenIfRightsNotAllottedCheckbox +" Value Expected : "+expdoNotRestrictSelectionEvenIfRightsNotAllottedCheckbox);
		System.out.println("allowOtherCompaniesToViewRecordsCheckbox              : "+actallowOtherCompaniesToViewRecordsCheckbox              +" Value Expected : "+expallowOtherCompaniesToViewRecordsCheckbox);
		System.out.println("generateLedgerByCurrencyCheckbox                      : "+actgenerateLedgerByCurrencyCheckbox                      +" Value Expected : "+expgenerateLedgerByCurrencyCheckbox);
		System.out.println("sendSmsEmailWhereverAcDebitedCreditedCheckbox         : "+actsendSmsEmailWhereverAcDebitedCreditedCheckbox         +" Value Expected : "+expsendSmsEmailWhereverAcDebitedCreditedCheckbox);
		System.out.println("properties_okBtn                                      : "+actproperties_okBtn                                      +" Value Expected : "+expproperties_okBtn);
		System.out.println("properties_cancelBtn                                  : "+actproperties_cancelBtn                                  +" Value Expected : "+expproperties_cancelBtn);

		if(actaccountPropertiesLabel==expaccountPropertiesLabel && actnormalRadioBtn==expnormalRadioBtn 
				&& actshowSummaryOfTheAccountRadioBtn==expshowSummaryOfTheAccountRadioBtn &&  actsuspendCreditLimitChkbox==expsuspendCreditLimitChkbox
				&& actdisplayDebitCreditTotalForEachMonthRadioBtn==expdisplayDebitCreditTotalForEachMonthRadioBtn
				&& actdisplayDebitCreditTotalForEachDayRadioBtn==expdisplayDebitCreditTotalForEachDayRadioBtn
				&& actnoneRadioBtn==expnoneRadioBtn && actconsolidateWhenBothAccountsAreSameRadioBtn==expconsolidateWhenBothAccountsAreSameRadioBtn
				&& actconsolidateAlwaysRadioBtn==expconsolidateAlwaysRadioBtn && actstatusDropdown==expstatusDropdown
				&& actdoNotRestrictSelectionEvenIfRightsNotAllottedCheckbox==expdoNotRestrictSelectionEvenIfRightsNotAllottedCheckbox
				&& actallowOtherCompaniesToViewRecordsCheckbox==expallowOtherCompaniesToViewRecordsCheckbox
				&& actgenerateLedgerByCurrencyCheckbox==expgenerateLedgerByCurrencyCheckbox
				&& actsendSmsEmailWhereverAcDebitedCreditedCheckbox==expsendSmsEmailWhereverAcDebitedCreditedCheckbox
				&& actproperties_okBtn==expproperties_okBtn && actproperties_cancelBtn==expproperties_cancelBtn)
		{
			excelReader.setCellData(xlfile, "Sheet1", 423, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 423, 9, resFail);
			return false;
		}
	}



	public static boolean checkCancelButtonInPropertiesOptionForAccount() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(properties_cancelBtn));
		properties_cancelBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountNewCreationNameOfLane));

		String actaccountNewCreationName  =accountNewCreationName.getText();
		String expaccountNewCreationName  ="Customer Display CD For Each Account Four";

		System.out.println("*********************checkCancelButtonInPropertiesOptionForAccount**************************");

		System.out.println("accountNewCreationName  : "+actaccountNewCreationName+" Value Expected : "+expaccountNewCreationName);

		if(actaccountNewCreationName.equalsIgnoreCase(expaccountNewCreationName))
		{ 
			excelReader.setCellData(xlfile, "Sheet1", 424, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 424, 9, resFail);
			return false;
		}
	}


	public static boolean checkDeleteOptionWithoutSelectAccount() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDeleteBtn));
		masterDeleteBtn.click();

		String expMessage="Please select the Record to delete";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkDeleteOptionWithoutSelectAccount***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 425, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 425, 9, resFail);
			return false;
		}
	}



	public static boolean checkDeleteOptionWithSelectAccount() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountFirstCheckBoxToSelection));
		accountFirstCheckBoxToSelection.click();		 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDeleteBtn));
		masterDeleteBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(getMsgOnDelete));

		String actgetMsgOnDelete  =getMsgOnDelete.getText();
		String expgetMsgOnDelete ="Would you like to delete this selected master";


		System.out.println("*****************************checkDeleteOptionWithSelectAccount**************************");

		System.out.println("getMsgOnDelete  : "+actgetMsgOnDelete+" Value Expected : "+expgetMsgOnDelete);

		if(actgetMsgOnDelete.equalsIgnoreCase(expgetMsgOnDelete))
		{
			excelReader.setCellData(xlfile, "Sheet1", 426, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 426, 9, resFail);
			return false;
		}
	}	



	public static boolean checkCancelButtonInDeleteAccount() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clickOnCancelInDelete));
		clickOnCancelInDelete.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountNewCreationNameOfLane));

		String actaccountNewCreationName  =accountNewCreationName.getText();
		String expaccountNewCreationName  ="Customer Display CD For Each Account Four";

		System.out.println("*********************checkCancelButtonInDeleteAccount**************************");

		System.out.println("accountNewCreationName  : "+actaccountNewCreationName+" Value Expected : "+expaccountNewCreationName);

		if(actaccountNewCreationName.equalsIgnoreCase(expaccountNewCreationName))
		{ 
			excelReader.setCellData(xlfile, "Sheet1", 427, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 427, 9, resFail);
			return false;
		}
	}


	public static boolean checkYesDeleteAccount() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountFirstCheckBoxToSelection));
		accountFirstCheckBoxToSelection.click();		 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountFirstCheckBoxToSelection));
		accountFirstCheckBoxToSelection.click();	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterDeleteBtn));
		masterDeleteBtn.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(getMsgOnDelete));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clickOnOkInDelete));
		clickOnOkInDelete.click();

		String expMessage="Record Deleted Successfully.";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkYesDeleteAccount***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			excelReader.setCellData(xlfile, "Sheet1", 428, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 428, 9, resFail);
			return false;
		}	 
	}



	public static boolean checkDeleteAccountDisplay() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountNewCreationNameOfLane));

		String actaccountNewCreationName  =accountNewCreationName.getText();
		String expaccountNewCreationName  ="Customer Display CD For Each Account Three";

		System.out.println("*********************checkDeleteAccountDisplay**************************");

		System.out.println("accountNewCreationName  : "+actaccountNewCreationName+" Value Expected : "+expaccountNewCreationName);

		if(actaccountNewCreationName.equalsIgnoreCase(expaccountNewCreationName))
		{ 
			excelReader.setCellData(xlfile, "Sheet1", 429, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 429, 9, resFail);
			return false;
		}
	}




	public static boolean checkPropertiesOptionForAccountGroup() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxt));
		masterSearchTxt.sendKeys("Customer Update Group");
		masterSearchTxt.sendKeys(Keys.ENTER);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountFirstCheckBoxToSelection));
		accountFirstCheckBoxToSelection.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterPropertiesBtn));
		masterPropertiesBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountPropertiesLabel));

		boolean actaccountPropertiesLabel    								=accountPropertiesLabel.isDisplayed();
		boolean actnormalRadioBtn    										=normalRadioBtn.isDisplayed();
		boolean actdisplayDebitCreditTotalForEachAccountUnderGroup			=displayDebitCreditTotalForEachAccountUnderGroup.isDisplayed();
		boolean actsuspendCreditLimitChkbox    								=suspendCreditLimitChkbox.isDisplayed();
		boolean actClubTheTransactionsofAllTheAccountsUnderGroup  			=ClubTheTransactionsofAllTheAccountsUnderGroup.isDisplayed();
		boolean actnoneRadioBtn    											=noneRadioBtn.isDisplayed();
		boolean actconsolidateWhenBothAccountsAreSameRadioBtn    			=consolidateWhenBothAccountsAreSameRadioBtn.isDisplayed();
		boolean actconsolidateAlwaysRadioBtn    							=consolidateAlwaysRadioBtn.isDisplayed();
		boolean actstatusDropdown    										=statusDropdown.isDisplayed();
		boolean actdoNotRestrictSelectionEvenIfRightsNotAllottedCheckbox  	=doNotRestrictSelectionEvenIfRightsNotAllottedCheckbox.isDisplayed();
		boolean actallowOtherCompaniesToViewRecordsCheckbox               	=allowOtherCompaniesToViewRecordsCheckbox.isDisplayed();
		boolean actgenerateLedgerByCurrencyCheckbox    						=generateLedgerByCurrencyCheckbox.isDisplayed();
		boolean actsendSmsEmailWhereverAcDebitedCreditedCheckbox    		=sendSmsEmailWhereverAcDebitedCreditedCheckbox.isDisplayed();
		boolean actproperties_okBtn    										=properties_okBtn.isDisplayed();
		boolean actproperties_cancelBtn    									=properties_cancelBtn.isDisplayed();

		boolean expaccountPropertiesLabel    								=true;
		boolean expnormalRadioBtn    										=true;
		boolean expdisplayDebitCreditTotalForEachAccountUnderGroup			=true;
		boolean expsuspendCreditLimitChkbox    								=true;
		boolean expClubTheTransactionsofAllTheAccountsUnderGroup   			=true;
		boolean expnoneRadioBtn    											=true;
		boolean expconsolidateWhenBothAccountsAreSameRadioBtn    			=true;
		boolean expconsolidateAlwaysRadioBtn    							=true;
		boolean expstatusDropdown    										=true;
		boolean expdoNotRestrictSelectionEvenIfRightsNotAllottedCheckbox  	=true;
		boolean expallowOtherCompaniesToViewRecordsCheckbox               	=true;
		boolean expgenerateLedgerByCurrencyCheckbox    						=true;
		boolean expsendSmsEmailWhereverAcDebitedCreditedCheckbox    		=true;
		boolean expproperties_okBtn    										=true;
		boolean expproperties_cancelBtn    									=true;


		System.out.println("**********************************checkPropertiesOptionForAccountGroup****************************");

		System.out.println("accountPropertiesLabel                                : "+actaccountPropertiesLabel                                +" Value Expected : "+expaccountPropertiesLabel);
		System.out.println("normalRadioBtn                                        : "+actnormalRadioBtn                                        +" Value Expected : "+expnormalRadioBtn);
		System.out.println("displayDebitCreditTotalForEachAccountUnderGroup       : "+actdisplayDebitCreditTotalForEachAccountUnderGroup       +" Value Expected : "+expdisplayDebitCreditTotalForEachAccountUnderGroup);
		System.out.println("suspendCreditLimitChkbox                              : "+actsuspendCreditLimitChkbox                              +" Value Expected : "+expsuspendCreditLimitChkbox);
		System.out.println("ClubTheTransactionsofAllTheAccountsUnderGroup         : "+actClubTheTransactionsofAllTheAccountsUnderGroup         +" Value Expected : "+expClubTheTransactionsofAllTheAccountsUnderGroup);
		System.out.println("noneRadioBtn                                          : "+actnoneRadioBtn                                          +" Value Expected : "+expnoneRadioBtn);
		System.out.println("consolidateWhenBothAccountsAreSameRadioBtn            : "+actconsolidateWhenBothAccountsAreSameRadioBtn            +" Value Expected : "+expconsolidateWhenBothAccountsAreSameRadioBtn);
		System.out.println("consolidateAlwaysRadioBtn                             : "+actconsolidateAlwaysRadioBtn                             +" Value Expected : "+expconsolidateAlwaysRadioBtn);
		System.out.println("statusDropdown                                        : "+actstatusDropdown                                        +" Value Expected : "+expstatusDropdown);
		System.out.println("doNotRestrictSelectionEvenIfRightsNotAllottedCheckbox : "+actdoNotRestrictSelectionEvenIfRightsNotAllottedCheckbox +" Value Expected : "+expdoNotRestrictSelectionEvenIfRightsNotAllottedCheckbox);
		System.out.println("allowOtherCompaniesToViewRecordsCheckbox              : "+actallowOtherCompaniesToViewRecordsCheckbox              +" Value Expected : "+expallowOtherCompaniesToViewRecordsCheckbox);
		System.out.println("generateLedgerByCurrencyCheckbox                      : "+actgenerateLedgerByCurrencyCheckbox                      +" Value Expected : "+expgenerateLedgerByCurrencyCheckbox);
		System.out.println("sendSmsEmailWhereverAcDebitedCreditedCheckbox         : "+actsendSmsEmailWhereverAcDebitedCreditedCheckbox         +" Value Expected : "+expsendSmsEmailWhereverAcDebitedCreditedCheckbox);
		System.out.println("properties_okBtn                                      : "+actproperties_okBtn                                      +" Value Expected : "+expproperties_okBtn);
		System.out.println("properties_cancelBtn                                  : "+actproperties_cancelBtn                                  +" Value Expected : "+expproperties_cancelBtn);

		if(actaccountPropertiesLabel==expaccountPropertiesLabel && actnormalRadioBtn==expnormalRadioBtn 
				&& actdisplayDebitCreditTotalForEachAccountUnderGroup==expdisplayDebitCreditTotalForEachAccountUnderGroup
				&& actsuspendCreditLimitChkbox==expsuspendCreditLimitChkbox
				&& actClubTheTransactionsofAllTheAccountsUnderGroup==expClubTheTransactionsofAllTheAccountsUnderGroup
				&& actnoneRadioBtn==expnoneRadioBtn && actconsolidateWhenBothAccountsAreSameRadioBtn==expconsolidateWhenBothAccountsAreSameRadioBtn
				&& actconsolidateAlwaysRadioBtn==expconsolidateAlwaysRadioBtn && actstatusDropdown==expstatusDropdown
				&& actdoNotRestrictSelectionEvenIfRightsNotAllottedCheckbox==expdoNotRestrictSelectionEvenIfRightsNotAllottedCheckbox
				&& actallowOtherCompaniesToViewRecordsCheckbox==expallowOtherCompaniesToViewRecordsCheckbox
				&& actgenerateLedgerByCurrencyCheckbox==expgenerateLedgerByCurrencyCheckbox
				&& actsendSmsEmailWhereverAcDebitedCreditedCheckbox==expsendSmsEmailWhereverAcDebitedCreditedCheckbox
				&& actproperties_okBtn==expproperties_okBtn && actproperties_cancelBtn==expproperties_cancelBtn)
		{
			excelReader.setCellData(xlfile, "Sheet1", 430, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 430, 9, resFail);
			return false;
		}
	}


	@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div[1]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/table[1]/tbody[1]/tr[1]/td[11]")
	public static WebElement accountCreationNameOfLane; 


	public static boolean checkOkButtonInPropertiesOptionForAccountGroup() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ClubTheTransactionsofAllTheAccountsUnderGroup));
		ClubTheTransactionsofAllTheAccountsUnderGroup.click();		 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(properties_okBtn));
		properties_okBtn.click();		 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountNewCreationName));

		String actaccountNewCreationName  =accountNewCreationName.getText();
		String expaccountNewCreationName  ="Customer Update Group";

		System.out.println("************************checkOkButtonInPropertiesOptionForAccountGroup*********************");

		System.out.println("accountNewCreationName  : "+actaccountNewCreationName+" Value Expected : "+expaccountNewCreationName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		if(actaccountNewCreationName.equalsIgnoreCase(expaccountNewCreationName))
		{ 
			excelReader.setCellData(xlfile, "Sheet1", 431, 9, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 431, 9, resFail);
			return false;
		}
	}

	public static boolean checkSaveCOGSAccount() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		System.out.println("********************* checkSaveCOGSAccount Method Executes.............   *****************************");

		/* getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCreationNameOfLane1));
	        masterCreationNameOfLane1.click();*/

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		masterNewBtn.click();

		//COGS POSTING ACC
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 118, 6));
		nameTxt.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 119, 6));
		codeTxt.sendKeys(Keys.TAB);

		//Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
		accountTypeDropdown.sendKeys(excelReader.getCellData(xlSheetName, 120, 6));
		accountTypeDropdown.sendKeys(Keys.TAB);

		//Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expSaveMessage = excelReader.getCellData(xlSheetName, 119, 7);

		boolean actSaveAccountMessage = checkValidationMessageB(expSaveMessage);
		boolean expSaveAccountMessage = true;

		Thread.sleep(2000);

		//BR COGS ACC INV
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 121, 6));
		nameTxt.sendKeys(Keys.TAB);

		//Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 122, 6));
		codeTxt.sendKeys(Keys.TAB);

		//Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
		accountTypeDropdown.sendKeys(excelReader.getCellData(xlSheetName, 123, 6));
		accountTypeDropdown.sendKeys(Keys.TAB);

		//Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		boolean actSaveBRAccountMessage = checkValidationMessageB(expSaveMessage);
		boolean expSaveBRAccountMessage = true;

		Thread.sleep(2000);

		//FIFO COGS ACC INV
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 124, 6));
		nameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 125, 6));
		codeTxt.sendKeys(Keys.TAB);

		//Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
		accountTypeDropdown.sendKeys(excelReader.getCellData(xlSheetName, 126, 6));
		accountTypeDropdown.sendKeys(Keys.TAB);

		//Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		boolean actSaveFIFOAccountMessage = checkValidationMessageB(expSaveMessage);
		boolean expSaveFIFOAccountMessage = true;

		Thread.sleep(2000);

		//WA COGS ACC INV
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 127, 6));
		nameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 128, 6));
		codeTxt.sendKeys(Keys.TAB);

		//Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
		accountTypeDropdown.sendKeys(excelReader.getCellData(xlSheetName, 129, 6));
		accountTypeDropdown.sendKeys(Keys.TAB);

		//Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		boolean actSaveWAAccountMessage = checkValidationMessageB(expSaveMessage);
		boolean expSaveWAAccountMessage = true;

		Thread.sleep(3000);

		//STD RATE COGS ACC INV
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 130, 6));
		nameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 131, 6));
		codeTxt.sendKeys(Keys.TAB);

		//Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
		accountTypeDropdown.sendKeys(excelReader.getCellData(xlSheetName, 132, 6));
		accountTypeDropdown.sendKeys(Keys.TAB);

		//Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		boolean actSaveSRATEAccountMessage = checkValidationMessageB(expSaveMessage);
		boolean expSaveSRATEAccountMessage = true;

		Thread.sleep(3000);

		//SR COGS POSTING ACC
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 133, 6));
		nameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 134, 6));
		codeTxt.sendKeys(Keys.TAB);

		//Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
		accountTypeDropdown.sendKeys(excelReader.getCellData(xlSheetName, 135, 6));
		accountTypeDropdown.sendKeys(Keys.TAB);

		//Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		boolean actSaveSRAccountMessage = checkValidationMessageB(expSaveMessage);
		boolean expSaveSRAccountMessage = true;

		Thread.sleep(3000);

		//SHORTAGE COGS POSTING ACC
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 136, 6));
		nameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 137, 6));
		codeTxt.sendKeys(Keys.TAB);

		//Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
		accountTypeDropdown.sendKeys(excelReader.getCellData(xlSheetName, 138, 6));
		accountTypeDropdown.sendKeys(Keys.TAB);

		//Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		boolean actSaveSSAccountMessage = checkValidationMessageB(expSaveMessage);
		boolean expSaveSSAccountMessage = true;

		Thread.sleep(3000);

		//EXCESS COGS POSTING ACC
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 139, 6));
		nameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 140, 6));
		codeTxt.sendKeys(Keys.TAB);

		//Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
		accountTypeDropdown.sendKeys(excelReader.getCellData(xlSheetName, 141, 6));
		accountTypeDropdown.sendKeys(Keys.TAB);

		//Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		boolean actStockSaveAccountMessage = checkValidationMessageB(expSaveMessage);
		boolean expStockSaveAccountMessage = true;

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();


		int masterGridBodyListCount=masterGridBodyRowCount.size();


		ArrayList<String> masterGridBodyListArray = new ArrayList<String>();

		for (int i=0;i<masterGridBodyListCount;i++)
		{
			String masterGridBodyNamedata        =masterGridBodyName.get(i).getText();
			String masterGridBodyCodedata        =masterGridBodyCode.get(i).getText();
			String masterGridBodyAccountTypedata =masterGridBodyAccountType.get(i).getText();


			masterGridBodyListArray.add(masterGridBodyNamedata);
			masterGridBodyListArray.add(masterGridBodyCodedata);
			masterGridBodyListArray.add(masterGridBodyAccountTypedata);
		}

		String actmasterGridBodyList=masterGridBodyListArray.toString();

		String expmasterGridBodyList=excelReader.getCellData(xlSheetName, 120, 7);

		boolean actMethod = actSaveAccountMessage==expSaveAccountMessage && actSaveBRAccountMessage==expSaveBRAccountMessage 
				&& actSaveFIFOAccountMessage==expSaveFIFOAccountMessage && actSaveWAAccountMessage==expSaveWAAccountMessage
				&& actSaveSRATEAccountMessage==expSaveSRATEAccountMessage && actSaveSRAccountMessage==expSaveSRAccountMessage 
				&& actSaveSSAccountMessage==expSaveSSAccountMessage && actStockSaveAccountMessage==expStockSaveAccountMessage ;

		String actResult = Boolean.toString(actMethod);

		excelReader.setCellData(xlfile, xlSheetName, 118, 8, actResult.toUpperCase());
		excelReader.setCellData(xlfile, xlSheetName, 120, 8, actmasterGridBodyList);


		System.out.println("masterGridBodyList Actual                   : "+actmasterGridBodyList);
		System.out.println("masterGridBodyList Expected                 : "+expmasterGridBodyList);
		System.out.println("COGS POSTING ACC Save Value Actual          : " + actSaveAccountMessage      + "  Value Expected : " + expSaveAccountMessage);
		System.out.println("BR COGS ACC INV ACC Save Value Actual       : " + actSaveBRAccountMessage    + "  Value Expected : " + expSaveBRAccountMessage);
		System.out.println("FIFO COGS ACC INV ACC Save Value Actual     : " + actSaveFIFOAccountMessage  + "  Value Expected : " + expSaveFIFOAccountMessage);
		System.out.println("WA COGS ACC INV ACC Save Value Actual       : " + actSaveWAAccountMessage    + "  Value Expected : " + expSaveWAAccountMessage);
		System.out.println("STD RATE COGS ACC INV ACC Save Value Actual : " + actSaveSRATEAccountMessage + "  Value Expected : " + expSaveSRATEAccountMessage);
		System.out.println("SR COGS POSTING ACC Save Value Actual       : " + actSaveSRAccountMessage    + "  Value Expected : " + expSaveSRAccountMessage);
		System.out.println("SHORTAGE COGS POSTING ACC Save Value Actual : " + actSaveSSAccountMessage    + "  Value Expected : " + expSaveSSAccountMessage);
		System.out.println("Stock Value Actual                          : " + actStockSaveAccountMessage + "  Value Expected : " + expStockSaveAccountMessage);

		if (actSaveAccountMessage==expSaveAccountMessage && actmasterGridBodyList.equalsIgnoreCase(expmasterGridBodyList)) 
		{
			excelReader.setCellData(xlfile, xlSheetName, 118, 9, resPass);
			return true;
		} 
		else 
		{
			excelReader.setCellData(xlfile, xlSheetName, 118, 9, resFail);
			return false;
		}

	}

	public static String xlSheetName = "SmokeMasters";

	@FindBy(xpath = "//div[@id='idGlobalError']")
	public static WebElement validationConfirmationMessage;

	@FindBy(xpath = "//div[@class='theme_color font-6']")
	public static WebElement validationUpdatingConfirmationMessage;

	@FindBy(xpath = "//*[@id='idGlobalError']/div/table/tbody/tr/td[2]/div[2]")
	public static WebElement newErrorMessage;

	@FindBy(xpath = "//span[@class='icon-reject2 theme_color']")
	public static WebElement newErrorMessageCloseBtn;

	@FindBy(xpath="//*[@id='LandingGridBody']/tr")
	public static List<WebElement> masterGridBodyRowCount;

	@FindBy(xpath="//*[@id='LandingGridBody']/tr/td[8]//input")
	public static List<WebElement> masterGridBodyChkbox;

	@FindBy(xpath="//*[@id='LandingGridBody']/tr/td[11]")
	public static List<WebElement> masterGridBodyName;

	@FindBy(xpath="//*[@id='LandingGridBody']/tr/td[12]")
	public static List<WebElement> masterGridBodyCode;

	@FindBy(xpath="//*[@id='LandingGridBody']/tr/td[13]")
	public static List<WebElement> masterGridBodyAccountType;

	public static boolean checkValidationMessageB(String ExpMessage) throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
	{

		System.out.println("************************************** checkValidationMessage Method Executes............ *******************************************");	

		//validationUpdatingConfirmationMessage
		try
		{  

			//newErrorMessageCloseBtn

			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(validationUpdatingConfirmationMessage));
			String actValidationDisplayMessage = validationUpdatingConfirmationMessage.getText();
			String expValidationDisplayMessage = ExpMessage;

			System.out.println("Getting the Message Text From the Validation Message  : " + actValidationDisplayMessage + " Value Expected : " + expValidationDisplayMessage);

			if (actValidationDisplayMessage.equalsIgnoreCase(expValidationDisplayMessage)) 
			{
				try 
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newErrorMessageCloseBtn));
					newErrorMessageCloseBtn.click();
					System.out.println("TRY TRUE BLOCK");
					return true;
				} 
				catch (Exception e) 
				{
					System.err.println("Close Button Execption Message is not Displayed" + e.getMessage());
					return true;
				}
			} 
			else 
			{
				System.out.println("Actual Message Text is not Equal To Execpected Message Text");
				return false;
			}
		}
		catch (Exception e) 
		{
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ e.getMessage());
			return false;
		}
	} 


	public static boolean checkSaveAccountsByCreatingVATAccounts() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader = new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		System.out.println("********************* checkSaveAccountsByCreatingVATAccounts Method Executes.............  *****************************");

		try
		{
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCreationNameOfLane1));
	        masterCreationNameOfLane1.click();*/

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
			masterNewBtn.click();

			//VAT OUTPUT ACC
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
			nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 142, 6));
			nameTxt.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
			codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 143, 6));
			codeTxt.sendKeys(Keys.TAB);

			//Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
			accountTypeDropdown.sendKeys(excelReader.getCellData(xlSheetName, 144, 6));
			accountTypeDropdown.sendKeys(Keys.TAB);

			//Thread.sleep(3000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
			SaveBtn.click();

			String expSaveMessage = "Saved Successfully";

			boolean actSaveAccountMessage = checkValidationMessageB(expSaveMessage);
			boolean expSaveAccountMessage = true;


			//VAT ADVANCE SALE
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
			nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 145, 6));
			nameTxt.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
			codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 146, 6));
			codeTxt.sendKeys(Keys.TAB);

			//Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
			accountTypeDropdown.sendKeys(excelReader.getCellData(xlSheetName, 147, 6));
			accountTypeDropdown.sendKeys(Keys.TAB);

			//Thread.sleep(3000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
			SaveBtn.click();

			boolean actSaveBRAccountMessage = checkValidationMessageB(expSaveMessage);
			boolean expSaveBRAccountMessage = true;


			//VAT ADVANCE PURCHASE
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
			nameTxt.sendKeys(excelReader.getCellData(xlSheetName, 148, 6));
			nameTxt.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
			codeTxt.sendKeys(excelReader.getCellData(xlSheetName, 149, 6));
			codeTxt.sendKeys(Keys.TAB);

			//Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
			accountTypeDropdown.sendKeys(excelReader.getCellData(xlSheetName, 150, 6));
			accountTypeDropdown.sendKeys(Keys.TAB);

			//Thread.sleep(3000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
			SaveBtn.click();

			boolean actSaveFIFOAccountMessage = checkValidationMessageB(expSaveMessage);
			boolean expSaveFIFOAccountMessage = true;

			// Purchase Variance Account

			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
			nameTxt.sendKeys("PURCHASE VARIANCE");
			nameTxt.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
			codeTxt.sendKeys("PURCHASE VARIANCE");
			codeTxt.sendKeys(Keys.TAB);

			//Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
			accountTypeDropdown.sendKeys("Liabilities");
			accountTypeDropdown.sendKeys(Keys.TAB);

			//Thread.sleep(3000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
			SaveBtn.click();

			boolean actSavePVAccountMessage = checkValidationMessageB(expSaveMessage);
			boolean expSavePVAccountMessage = true;


			Thread.sleep(3000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
			closeBtn.click();


			int masterGridBodyListCount=masterGridBodyRowCount.size();


			ArrayList<String> masterGridBodyListArray = new ArrayList<String>();

			for (int i=0;i<masterGridBodyListCount;i++)
			{
				String masterGridBodyNamedata        =masterGridBodyName.get(i).getText();
				String masterGridBodyCodedata        =masterGridBodyCode.get(i).getText();
				String masterGridBodyAccountTypedata =masterGridBodyAccountType.get(i).getText();


				masterGridBodyListArray.add(masterGridBodyNamedata);
				masterGridBodyListArray.add(masterGridBodyCodedata);
				masterGridBodyListArray.add(masterGridBodyAccountTypedata);
			}

			String actmasterGridBodyList=masterGridBodyListArray.toString();

			String expmasterGridBodyList="[PURCHASE VARIANCE, PURCHASE VARIANCE, Liabilities, VAT ADVANCE PURCHASE, VAT ADVANCE PURCHASE, Assets/Liabilities, VAT ADVANCE SALE, VAT ADVANCE SALE, Liabilities, VAT OUTPUT, VAT OUTPUT, Liabilities, EXCESS COGS POSTING ACC, EXCESS COGS POSTING ACC, Purchases, SHORTAGE COGS POSTING ACC, SHORTAGE COGS POSTING ACC, Purchases, SR COGS POSTING ACC, SR COGS POSTING ACC, Sales, STD RATE COGS ACC INV, STD RATE COGS ACC INV, Inventory, WA COGS ACC INV, WA COGS ACC INV, Inventory, FIFO COGS ACC INV, FIFO COGS ACC INV, Inventory, BR COGS ACC INV, BR COGS ACC INV, Inventory, COGS POSTING ACC, COGS POSTING ACC, Purchases, ASSETS, 001, Assets, EXPENSES, 009, Expenses, CONTROL ACCOUNTS, CA, Control, REVENUE, 007, Income, EQUITIES, 002, Liabilities, LIABILITIES, 003, Liabilities]";

			boolean actMethod = actSaveAccountMessage==expSaveAccountMessage && actSaveBRAccountMessage==expSaveBRAccountMessage 
					&& actSaveFIFOAccountMessage==expSaveFIFOAccountMessage;

			String actResult = Boolean.toString(actMethod);

			excelReader.setCellData(xlfile, xlSheetName, 142, 8, actResult.toUpperCase());
			excelReader.setCellData(xlfile, xlSheetName, 144, 8, actmasterGridBodyList);

			System.out.println("masterGridBodyList Actual              : " +actmasterGridBodyList);
			System.out.println("masterGridBodyList Expected            : " +expmasterGridBodyList);
			System.out.println("VAT OUTPUT ACC Save Value Actual       : " + actSaveAccountMessage     + "  Value Expected : " + expSaveAccountMessage);
			System.out.println("VAT ADVANCE SALE ACC Save Value Actual : " + actSaveBRAccountMessage   + "  Value Expected : " + expSaveBRAccountMessage);
			System.out.println("VAT ADVANCE PURCHASE Save Value Actual : " + actSaveFIFOAccountMessage + "  Value Expected : " + expSaveFIFOAccountMessage);

			if (actSaveAccountMessage==expSaveAccountMessage && actmasterGridBodyList.equalsIgnoreCase(expmasterGridBodyList)) 
			{
				excelReader.setCellData(xlfile, xlSheetName, 142, 9, resPass);
				return true;
			} 
			else 
			{
				excelReader.setCellData(xlfile, xlSheetName, 142, 9, resFail);
				return false;
			}

		}
		catch (Exception e) 
		{
			String exception =e.getMessage().substring(0, 100);
			excelReader.setExceptionInExcel(xlfile, xlSheetName, 142, 10, exception);
			System.err.println("CATCH BLOCK : EXECPTION MESSAGE IS DISPLAY : "+ exception);
			return false;
		}
	}


	public static boolean checkCloseAccountMasterForAccountTestingStop() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCloseBtn));
		masterCloseBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));

		boolean actlabelDashboard                  =labelDashboard.isDisplayed();
		boolean actselectDashboard                 =selectDashboard.isDisplayed();
		boolean actnewAddDashBoard                 =newAddDashBoard.isDisplayed();
		boolean actdashboardCustomizationSettings  =dashboardCustomizationSettings.isDisplayed();

		boolean explabelDashboard                  =true;
		boolean expselectDashboard                 =true;
		boolean expnewAddDashBoard                 =true;
		boolean expdashboardCustomizationSettings  =true;

		System.out.println("******************************checkCloseAccountMasterForAccountTestingStop************************");

		System.out.println("labelDashboard                  : "+actlabelDashboard                 +" Value Expected : "+explabelDashboard);
		System.out.println("selectDashboard                 : "+actselectDashboard                +" Value Expected : "+expselectDashboard);
		System.out.println("newAddDashBoard                 : "+actnewAddDashBoard                +" Value Expected : "+expnewAddDashBoard);
		System.out.println("dashboardCustomizationSettings  : "+actdashboardCustomizationSettings +" Value Expected : "+expdashboardCustomizationSettings);

		if(labelDashboard.isDisplayed() && selectDashboard.isDisplayed() && newAddDashBoard.isDisplayed() && dashboardCustomizationSettings.isDisplayed())
		{
			excelReader.setCellData(xlfile, "Sheet1", 432, 9, resPass);
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
			userNameDisplay.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();

			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, "Sheet1", 432, 9, resFail);

			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
			userNameDisplay.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();

			return false;
		}
	}




	public static boolean checkOpenCustomizeMasterInAccounts() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		getDriver().navigate().refresh();
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterFieldsCreateTab));
		masterFieldsCreateTab.click();

		Thread.sleep(2000);

		boolean actCreateTab = masterFieldsCreateTab.isDisplayed();
		boolean expCreateTab = true;

		System.out.println("***********************************checkOpenCustomizeMasterInAccounts*********************************");

		System.out.println("CreateTabIsDisplaying   : "+actCreateTab  +"  value expected  "+expCreateTab);

		if(actCreateTab==expCreateTab)
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}








	public static boolean checkAddFieldWithoutDefaultValueInCreateTabCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabHeaderDetailsAddFieldsBtn));
		createTabHeaderDetailsAddFieldsBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsTab));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();
		extraFields_FieldDetailsCaption.sendKeys("CreateTab_TextField");
		extraFields_FieldDetailsCaption.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		Select dataTypeDropdown = new Select(extraFields_FieldDetailsDatTypeDropdown);

		dataTypeDropdown.selectByValue("0");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMessage = "Field Added Successfully.";
		String actMessage = checkValidationMessage(expMessage);

		if (actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}





	@FindBy (xpath="//div[@id='HeaderDetails_6']/div/div/table/tbody/tr/td[4]")
	public static List<WebElement> CreateTabfieldCaptionTxtList;

	@FindBy (xpath="//div[@id='HeaderDetails_6']/div/div/table/tbody/tr/td[1]/i[1]")
	public static List<WebElement> CreateTabeditFieldList;

	@FindBy (xpath="//div[@id='HeaderDetails_6']/div/div/table/tbody/tr/td[1]/i[2]")
	public static List<WebElement> deleteFieldList;


	public static boolean checkEditFieldUpdateWithDefaultValueInCreateTabCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		int count = CreateTabfieldCaptionTxtList.size();

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_TextField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsDefaultValue));
		extraFields_FieldDetailsDefaultValue.click();
		extraFields_FieldDetailsDefaultValue.sendKeys("TextField_DefaultValue");
		extraFields_FieldDetailsDefaultValue.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsBannerText));
		extraFields_FieldDetailsBannerText.click();
		extraFields_FieldDetailsBannerText.sendKeys("TextField_BannerText");
		extraFields_FieldDetailsBannerText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsToolTipText));
		extraFields_FieldDetailsToolTipText.click();
		extraFields_FieldDetailsToolTipText.sendKeys("TextField_ToolTipText");
		extraFields_FieldDetailsToolTipText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMessage = "Field Updated Successfully";
		String actMessage = checkValidationMessage(expMessage);

		if (actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}







	public static boolean checkAddFieldWithDataTypeAsNumberInCreateTabCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabHeaderDetailsAddFieldsBtn));
		createTabHeaderDetailsAddFieldsBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsTab));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();
		extraFields_FieldDetailsCaption.sendKeys("CreateTab_NumberField");
		extraFields_FieldDetailsCaption.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		Select dataTypeDropdown = new Select(extraFields_FieldDetailsDatTypeDropdown);

		dataTypeDropdown.selectByValue("1");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsBannerText));
		extraFields_FieldDetailsBannerText.click();
		extraFields_FieldDetailsBannerText.sendKeys("NumberField_BannerText");
		extraFields_FieldDetailsBannerText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsToolTipText));
		extraFields_FieldDetailsToolTipText.click();
		extraFields_FieldDetailsToolTipText.sendKeys("NumberField_ToolTipText");
		extraFields_FieldDetailsToolTipText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMessage = "Field Added Successfully.";
		String actMessage = checkValidationMessage(expMessage);

		if (actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}







	public static boolean checkAddFieldWithDataTypeAsBooleanInCreateTabCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabHeaderDetailsAddFieldsBtn));
		createTabHeaderDetailsAddFieldsBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsTab));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();
		extraFields_FieldDetailsCaption.sendKeys("CreateTab_BooleanField");
		extraFields_FieldDetailsCaption.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		Select dataTypeDropdown = new Select(extraFields_FieldDetailsDatTypeDropdown);

		dataTypeDropdown.selectByValue("2");

		Thread.sleep(2000);

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsDefaultValueChkbox));
		boolean actDefaultValue = extraFields_FieldDetailsDefaultValueChkbox.isEnabled();
		boolean expDefaultValue = true;*/

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsToolTipText));
		extraFields_FieldDetailsToolTipText.click();
		extraFields_FieldDetailsToolTipText.sendKeys("BooleanField_ToolTipText");
		extraFields_FieldDetailsToolTipText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		/*System.out.println("Default Value Checkbox is Enabled  : "+actDefaultValue+"  Value Expected  "+expDefaultValue);*/

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMessage = "Field Added Successfully.";
		String actMessage = checkValidationMessage(expMessage);

		if (/*actDefaultValue==expDefaultValue*/  actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}








	public static boolean checkAddFieldWithDataTypeAsDateTimeInCreateTabCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabHeaderDetailsAddFieldsBtn));
		createTabHeaderDetailsAddFieldsBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsTab));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();
		extraFields_FieldDetailsCaption.sendKeys("CreateTab_DateTimeField");
		extraFields_FieldDetailsCaption.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		Select dataTypeDropdown = new Select(extraFields_FieldDetailsDatTypeDropdown);

		dataTypeDropdown.selectByValue("3");

		Thread.sleep(2000);
		/*
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsDefaultValueDrpdwn));
		boolean actDefaultValueDrpdwn = extraFields_FieldDetailsDefaultValueDrpdwn.isEnabled();
		boolean expDefaultValueDrpdwn = true;*/

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsToolTipText));
		extraFields_FieldDetailsToolTipText.click();
		extraFields_FieldDetailsToolTipText.sendKeys("DateTimeField_ToolTipText");
		extraFields_FieldDetailsToolTipText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		/*System.out.println("Default Value Dropdown is Enabled  : "+actDefaultValueDrpdwn+"  Value Expected  "+expDefaultValueDrpdwn);
		 */
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMessage = "Field Added Successfully.";
		String actMessage = checkValidationMessage(expMessage);

		if (/*actDefaultValueDrpdwn==expDefaultValueDrpdwn &&*/ actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}


	public static boolean checkAddFieldWithDataTypeAsDateInCreateTabCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabHeaderDetailsAddFieldsBtn));
		createTabHeaderDetailsAddFieldsBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsTab));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();
		extraFields_FieldDetailsCaption.sendKeys("CreateTab_DateField");
		extraFields_FieldDetailsCaption.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		Select dataTypeDropdown = new Select(extraFields_FieldDetailsDatTypeDropdown);

		dataTypeDropdown.selectByValue("4");

		Thread.sleep(2000);

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsDefaultValueDrpdwn));
		boolean actDefaultValueDrpdwn = extraFields_FieldDetailsDefaultValueDrpdwn.isEnabled();
		boolean expDefaultValueDrpdwn = true;*/

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsToolTipText));
		extraFields_FieldDetailsToolTipText.click();
		extraFields_FieldDetailsToolTipText.sendKeys("DateField_ToolTipText");
		extraFields_FieldDetailsToolTipText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		/*System.out.println("Default Value Dropdown is Enabled  : "+actDefaultValueDrpdwn+"  Value Expected  "+expDefaultValueDrpdwn);
		 */
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMessage = "Field Added Successfully.";
		String actMessage = checkValidationMessage(expMessage);

		if (/*actDefaultValueDrpdwn==expDefaultValueDrpdwn &&*/ actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}







	public static boolean checkAddFieldWithDataTypeAsTimeInCreateTabCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabHeaderDetailsAddFieldsBtn));
		createTabHeaderDetailsAddFieldsBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsTab));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();
		extraFields_FieldDetailsCaption.sendKeys("CreateTab_TimeField");
		extraFields_FieldDetailsCaption.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		Select dataTypeDropdown = new Select(extraFields_FieldDetailsDatTypeDropdown);

		dataTypeDropdown.selectByValue("5");

		Thread.sleep(2000);

		/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsDefaultValueDrpdwn));
		boolean actDefaultValueDrpdwn = extraFields_FieldDetailsDefaultValueDrpdwn.isEnabled();
		boolean expDefaultValueDrpdwn = true;*/

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsToolTipText));
		extraFields_FieldDetailsToolTipText.click();
		extraFields_FieldDetailsToolTipText.sendKeys("TimeField_ToolTipText");
		extraFields_FieldDetailsToolTipText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		/*System.out.println("Default Value Dropdown is Enabled  : "+actDefaultValueDrpdwn+"  Value Expected  "+expDefaultValueDrpdwn);
		 */
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMessage = "Field Added Successfully.";
		String actMessage = checkValidationMessage(expMessage);

		if (/*actDefaultValueDrpdwn==expDefaultValueDrpdwn && */actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}








	public static boolean checkAddFieldWithDataTypeAsFractionInCreateTabCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabHeaderDetailsAddFieldsBtn));
		createTabHeaderDetailsAddFieldsBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsTab));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();
		extraFields_FieldDetailsCaption.sendKeys("CreateTab_FractionField");
		extraFields_FieldDetailsCaption.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		Select dataTypeDropdown = new Select(extraFields_FieldDetailsDatTypeDropdown);

		dataTypeDropdown.selectByValue("6");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsBannerText));
		extraFields_FieldDetailsBannerText.click();
		extraFields_FieldDetailsBannerText.sendKeys("FractionField_BannerText");
		extraFields_FieldDetailsBannerText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsToolTipText));
		extraFields_FieldDetailsToolTipText.click();
		extraFields_FieldDetailsToolTipText.sendKeys("FractionField_ToolTipText");
		extraFields_FieldDetailsToolTipText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMessage = "Field Added Successfully.";
		String actMessage = checkValidationMessage(expMessage);

		if (actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}










	public static boolean checkAddFieldWithDataTypeAsPictureInCreateTabCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabHeaderDetailsAddFieldsBtn));
		createTabHeaderDetailsAddFieldsBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsTab));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();
		extraFields_FieldDetailsCaption.sendKeys("CreateTab_PictureField");
		extraFields_FieldDetailsCaption.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		Select dataTypeDropdown = new Select(extraFields_FieldDetailsDatTypeDropdown);

		dataTypeDropdown.selectByValue("7");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsToolTipText));
		extraFields_FieldDetailsToolTipText.click();
		extraFields_FieldDetailsToolTipText.sendKeys("PictureField_ToolTipText");
		extraFields_FieldDetailsToolTipText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMessage = "Field Added Successfully.";
		String actMessage = checkValidationMessage(expMessage);

		if (actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}









	public static boolean checkAddFieldWithDataTypeAsStringListInCreateTabCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabHeaderDetailsAddFieldsBtn));
		createTabHeaderDetailsAddFieldsBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsTab));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();
		extraFields_FieldDetailsCaption.sendKeys("CreateTab_StringListField");
		extraFields_FieldDetailsCaption.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		Select dataTypeDropdown = new Select(extraFields_FieldDetailsDatTypeDropdown);

		dataTypeDropdown.selectByValue("8");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsDefaultValue));
		extraFields_FieldDetailsDefaultValue.click();
		extraFields_FieldDetailsDefaultValue.sendKeys("DataTypeField_DefaultValueText1");
		extraFields_FieldDetailsDefaultValue.sendKeys(",");
		extraFields_FieldDetailsDefaultValue.sendKeys("DataTypeField_DefaultValueText2");
		extraFields_FieldDetailsDefaultValue.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();
		Thread.sleep(1000);

		String expMessage = "Field Added Successfully.";
		String actMessage = checkValidationMessage(expMessage);

		if (actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}



	public static boolean checkAddFieldWithDataTypeAsNumberListInCreateTabCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabHeaderDetailsAddFieldsBtn));
		createTabHeaderDetailsAddFieldsBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsTab));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();
		extraFields_FieldDetailsCaption.sendKeys("CreateTab_NumberListField");
		extraFields_FieldDetailsCaption.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		Select dataTypeDropdown = new Select(extraFields_FieldDetailsDatTypeDropdown);

		dataTypeDropdown.selectByValue("9");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsDefaultValue));
		extraFields_FieldDetailsDefaultValue.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_NumberListDatTypeRow1Col1));
		extraFields_NumberListDatTypeRow1Col1.click();
		extraFields_NumberListDatTypeRow1Col1.sendKeys("01234");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_NumberListDatTypeRow1Col2));
		extraFields_NumberListDatTypeRow1Col2.click();
		extraFields_NumberListDatTypeRow1Col2.sendKeys("NumberListName");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_NumberListDatTypeOkBtn));
		extraFields_NumberListDatTypeOkBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMessage = "Field Added Successfully.";
		String actMessage = checkValidationMessage(expMessage);

		if (actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}







	public static boolean checkAddFieldWithDataTypeAsDocumentViewerInCreateTabCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabHeaderDetailsAddFieldsBtn));
		createTabHeaderDetailsAddFieldsBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsTab));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();
		extraFields_FieldDetailsCaption.sendKeys("CreateTab_DocumentViewerField");
		extraFields_FieldDetailsCaption.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		Select dataTypeDropdown = new Select(extraFields_FieldDetailsDatTypeDropdown);

		dataTypeDropdown.selectByValue("10");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();
		Thread.sleep(1000);

		String expMessage = "Field Added Successfully.";
		String actMessage = checkValidationMessage(expMessage);

		if (actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}


	public static boolean checkAddFieldWithDataTypeAsMasterInCreateTabCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabHeaderDetailsAddFieldsBtn));
		createTabHeaderDetailsAddFieldsBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsTab));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();
		extraFields_FieldDetailsCaption.sendKeys("CreateTab_MasterField");
		extraFields_FieldDetailsCaption.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		Select dataTypeDropdown = new Select(extraFields_FieldDetailsDatTypeDropdown);

		dataTypeDropdown.selectByValue("12");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsBannerText));
		extraFields_FieldDetailsBannerText.click();
		extraFields_FieldDetailsBannerText.sendKeys("MasterField_BannerText");
		extraFields_FieldDetailsBannerText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsToolTipText));
		extraFields_FieldDetailsToolTipText.click();
		extraFields_FieldDetailsToolTipText.sendKeys("MasterField_ToolTipText");
		extraFields_FieldDetailsToolTipText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraField_FieldDetailsMasterToLinkDropDown));
		extraField_FieldDetailsMasterToLinkDropDown.sendKeys("Account");		
		Thread.sleep(2000);
		extraField_FieldDetailsMasterToLinkDropDown.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraField_FieldDetailsMandatoryFields));
		boolean actualValue = extraField_FieldDetailsMandatoryFields.isDisplayed();
		boolean expectedValue = true;

		String FieldValues = extraField_FieldDetailsMandatoryFields.getText();
		System.out.println(FieldValues);



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();
		Thread.sleep(2000);

		String expMessage = "Field Added Successfully.";
		String actMessage = checkValidationMessage(expMessage);

		if (actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}


	public static boolean checkAddFieldWithDataTypeAsBigNumberInCreateTabCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabHeaderDetailsAddFieldsBtn));
		createTabHeaderDetailsAddFieldsBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsTab));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();
		extraFields_FieldDetailsCaption.sendKeys("CreateTab_BigNumberField");
		extraFields_FieldDetailsCaption.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		Select dataTypeDropdown = new Select(extraFields_FieldDetailsDatTypeDropdown);

		dataTypeDropdown.selectByValue("13");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsBannerText));
		extraFields_FieldDetailsBannerText.click();
		extraFields_FieldDetailsBannerText.sendKeys("BigNumberField_BannerText");
		extraFields_FieldDetailsBannerText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsToolTipText));
		extraFields_FieldDetailsToolTipText.click();
		extraFields_FieldDetailsToolTipText.sendKeys("BigNumberField_ToolTipText");
		extraFields_FieldDetailsToolTipText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMessage = "Field Added Successfully.";
		String actMessage = checkValidationMessage(expMessage);

		if (actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}




	@FindBy(xpath="//*[@id='ExtraField_TableName']")
	public static WebElement extraFields_FieldDetailsTableNameText;

	@FindBy(xpath="//*[@id='ExtraField_MandatoryFields']")
	public static WebElement extraFields_FieldDetailsMandatoryFileds;

	@FindBy(xpath="//*[@id='MandatoryFieldsDiv_ExtraField']/div/div[1]/label[1]/input")
	public static WebElement extraFields_FieldDetailsMandatoryFiledsSelectCheckBox;

	@FindBy(xpath="//*[@id='MandatoryFieldsDiv_ExtraField']/div/div[1]/button")
	public static WebElement extraFields_FieldDetailsMandatoryFiledsOkBtn;



	public static boolean checkAddFieldWithDataTypeAsExternalTableInCreateTabCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabHeaderDetailsAddFieldsBtn));
		createTabHeaderDetailsAddFieldsBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsTab));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();
		extraFields_FieldDetailsCaption.sendKeys("CreateTab_ExternalTableField");
		extraFields_FieldDetailsCaption.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		Select dataTypeDropdown = new Select(extraFields_FieldDetailsDatTypeDropdown);

		dataTypeDropdown.selectByValue("14");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsBannerText));
		extraFields_FieldDetailsBannerText.click();
		extraFields_FieldDetailsBannerText.sendKeys("ExternalTableField_ExternalTableText");
		extraFields_FieldDetailsBannerText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsToolTipText));
		extraFields_FieldDetailsToolTipText.click();
		extraFields_FieldDetailsToolTipText.sendKeys("ExternalTableField_ToolTipText");
		extraFields_FieldDetailsToolTipText.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsTableNameText));
		extraFields_FieldDetailsTableNameText.click();
		extraFields_FieldDetailsTableNameText.sendKeys("mcore_account");
		extraFields_FieldDetailsTableNameText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMessage = "Field Added Successfully.";
		String actMessage = checkValidationMessage(expMessage);

		if (actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}






	public static boolean checkAddFieldWithDataTypeAsSmallNumberInCreateTabCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabHeaderDetailsAddFieldsBtn));
		createTabHeaderDetailsAddFieldsBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsTab));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();
		extraFields_FieldDetailsCaption.sendKeys("CreateTab_SmallNumberField");
		extraFields_FieldDetailsCaption.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		Select dataTypeDropdown = new Select(extraFields_FieldDetailsDatTypeDropdown);

		dataTypeDropdown.selectByValue("15");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsDefaultValue));
		extraFields_FieldDetailsDefaultValue.click();
		extraFields_FieldDetailsDefaultValue.sendKeys("0");
		extraFields_FieldDetailsDefaultValue.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsBannerText));
		extraFields_FieldDetailsBannerText.click();
		extraFields_FieldDetailsBannerText.sendKeys("SmallNumberField_BannerText");
		extraFields_FieldDetailsBannerText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsToolTipText));
		extraFields_FieldDetailsToolTipText.click();
		extraFields_FieldDetailsToolTipText.sendKeys("SmallNumberField_ToolTipText");
		extraFields_FieldDetailsToolTipText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMessage = "Field Added Successfully.";
		String actMessage = checkValidationMessage(expMessage);

		if (actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}


	public static boolean checkAddFieldWithDataTypeAsTinyNumberInCreateTabCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabHeaderDetailsAddFieldsBtn));
		createTabHeaderDetailsAddFieldsBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsTab));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();
		extraFields_FieldDetailsCaption.sendKeys("CreateTab_TinyNumberField");
		extraFields_FieldDetailsCaption.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		Select dataTypeDropdown = new Select(extraFields_FieldDetailsDatTypeDropdown);

		dataTypeDropdown.selectByValue("16");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsDefaultValue));
		extraFields_FieldDetailsDefaultValue.click();
		extraFields_FieldDetailsDefaultValue.sendKeys("TinyNumberField_DefaultValue");
		extraFields_FieldDetailsDefaultValue.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsBannerText));
		extraFields_FieldDetailsBannerText.click();
		extraFields_FieldDetailsBannerText.sendKeys("TinyNumberField_BannerText");
		extraFields_FieldDetailsBannerText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsToolTipText));
		extraFields_FieldDetailsToolTipText.click();
		extraFields_FieldDetailsToolTipText.sendKeys("TinyNumberField_ToolTipText");
		extraFields_FieldDetailsToolTipText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();
		Thread.sleep(1000);

		String expMessage = "Field Added Successfully.";
		String actMessage = checkValidationMessage(expMessage);

		if (actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}



	public static boolean checkAddFieldWithDataTypeAsGregorianInCreateTabCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabHeaderDetailsAddFieldsBtn));
		createTabHeaderDetailsAddFieldsBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsTab));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();
		extraFields_FieldDetailsCaption.sendKeys("CreateTab_GregorianField");
		extraFields_FieldDetailsCaption.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		Select dataTypeDropdown = new Select(extraFields_FieldDetailsDatTypeDropdown);

		dataTypeDropdown.selectByValue("17");

		Thread.sleep(2000);

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsDefaultValueDrpdwn));
		boolean actDefaultValueDrpdwn = extraFields_FieldDetailsDefaultValueDrpdwn.isEnabled();
		boolean expDefaultValueDrpdwn = true;
		 */

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsBannerText));
		extraFields_FieldDetailsBannerText.click();
		extraFields_FieldDetailsBannerText.sendKeys("GregorianField_BannerText");
		extraFields_FieldDetailsBannerText.sendKeys(Keys.TAB);*/

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsToolTipText));
		extraFields_FieldDetailsToolTipText.click();
		extraFields_FieldDetailsToolTipText.sendKeys("GregorianField_ToolTipText");
		extraFields_FieldDetailsToolTipText.sendKeys(Keys.TAB);

		/*System.out.println("Default Value Dropdown is Enabled  : "+actDefaultValueDrpdwn+"  Value Expected  "+expDefaultValueDrpdwn);
		 */
		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMessage = "Field Added Successfully.";
		String actMessage = checkValidationMessage(expMessage);

		if (actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}

	public static boolean checkAddFieldWithDataTypeAsHijriInCreateTabCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabHeaderDetailsAddFieldsBtn));
		createTabHeaderDetailsAddFieldsBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsTab));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();
		extraFields_FieldDetailsCaption.sendKeys("CreateTab_HijriField");
		extraFields_FieldDetailsCaption.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		Select dataTypeDropdown = new Select(extraFields_FieldDetailsDatTypeDropdown);

		dataTypeDropdown.selectByValue("18");

		Thread.sleep(2000);

		/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsDefaultValueDrpdwn));
		boolean actDefaultValueDrpdwn = extraFields_FieldDetailsDefaultValueDrpdwn.isEnabled();
		boolean expDefaultValueDrpdwn = true;*/


		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsBannerText));
		extraFields_FieldDetailsBannerText.click();
		extraFields_FieldDetailsBannerText.sendKeys("HijriField_BannerText");
		extraFields_FieldDetailsBannerText.sendKeys(Keys.TAB);*/

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsToolTipText));
		extraFields_FieldDetailsToolTipText.click();
		extraFields_FieldDetailsToolTipText.sendKeys("HijriField_ToolTipText");
		extraFields_FieldDetailsToolTipText.sendKeys(Keys.TAB);


		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();
		Thread.sleep(1000);

		String expMessage = "Field Added Successfully.";
		String actMessage = checkValidationMessage(expMessage);

		if (actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}

	public static boolean checkAddFieldWithDataTypeAsShamsiInCreateTabCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabHeaderDetailsAddFieldsBtn));
		createTabHeaderDetailsAddFieldsBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsTab));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();
		extraFields_FieldDetailsCaption.sendKeys("CreateTab_ShamsiField");
		extraFields_FieldDetailsCaption.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		Select dataTypeDropdown = new Select(extraFields_FieldDetailsDatTypeDropdown);

		dataTypeDropdown.selectByValue("19");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsDefaultValueDrpdwn));
		boolean actDefaultValueDrpdwn = extraFields_FieldDetailsDefaultValueDrpdwn.isEnabled();
		boolean expDefaultValueDrpdwn = true;


		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsBannerText));
		extraFields_FieldDetailsBannerText.click();
		extraFields_FieldDetailsBannerText.sendKeys("ShamsiField_BannerText");
		extraFields_FieldDetailsBannerText.sendKeys(Keys.TAB);*/

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsToolTipText));
		extraFields_FieldDetailsToolTipText.click();
		extraFields_FieldDetailsToolTipText.sendKeys("ShamsiField_ToolTipText");
		extraFields_FieldDetailsToolTipText.sendKeys(Keys.TAB);

		System.out.println("Default Value Dropdown is Enabled  : "+actDefaultValueDrpdwn+"  Value Expected  "+expDefaultValueDrpdwn);

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();
		Thread.sleep(2000);

		String expMessage = "Field Added Successfully.";
		String actMessage = checkValidationMessage(expMessage);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtnInCreateTabCustomizeMasetrWarehouse));
		closeBtnInCreateTabCustomizeMasetrWarehouse.click();
		

		if (actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}














	
	@FindBy(xpath="//span[text()='Purchases Voucher VAT']")
	public static WebElement  purchaseVouchersVat;



	public static boolean checkLogoutAndLogin() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{	
		
		
		Thread.sleep(2000);
		
		getDriver().navigate().refresh();
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(LogoutDropdown));
		LogoutDropdown.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();

		Thread.sleep(4000);

		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt="su";

		String pawslt="su";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
		username.click();
		Thread.sleep(2000);
		username.clear();
		Thread.sleep(2000);
		username.sendKeys(unamelt);
		getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
		password.click();
		Thread.sleep(2000);
		password.clear();*/
		Thread.sleep(2000);
		password.sendKeys(pawslt);

		String compname="Account Properties And Customization";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		int zqSize=cSize+1;

		System.out.println("CompanyDropdownList Count :"+cqSize);

		System.out.println("Company dropdown is :"+ zqSize);


		//Select dropdown= new Select(lp.companyDropDownList);
		int i;

		//List<WebElement> list = dropdown.getOptions();

		//List<String> text = new ArrayList<>();
		for(i=0; i<elementCount.size(); i++) 
		{
			elementCount.get(i).getText();
			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}	
		}

		lp.clickOnSignInBtn();
		
		reLogin(unamelt, pawslt, "Account Properties And Customization");

		//checkRefershPopOnlogin();

		//checkPopUpWindow();

		Thread.sleep(8000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameTxt));
		userNameTxt.click();

		String userInfo=userNameTxt.getText();

		System.out.println("User Info : "+userInfo);

		System.out.println("User Info Capture Text :"+userNameTxt.getText());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogoImg));

		companyLogoImg.click();

		String getCompanyTxt=companyName.getText();
		String getLoginCompanyName=getCompanyTxt.substring(0, 36);
		System.out.println("company name :"+ getLoginCompanyName);
		companyLogoImg.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dashboardName));

		String getDashboard=dashboardName.getText();

		System.out.println(getDashboard);


		String expuserInfo            ="SU";
		String expLoginCompanyName    ="Account Properties And Customization";
		String expDashboard			  ="Graph with Active and setAsDefault";


		System.out.println("***********************************checkLogin*********************************");

		System.out.println("User Info                        : "+userInfo               +"  value expected  "+expuserInfo);
		System.out.println("Login Company Name               : "+getLoginCompanyName    +"  value expected  "+expLoginCompanyName);
		System.out.println("Dashboard                        : "+getDashboard           +"  value expected  "+expDashboard);


		if(/*userInfo.equalsIgnoreCase(expuserInfo) && */getLoginCompanyName.equalsIgnoreCase(expLoginCompanyName))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}






	public static boolean checkOpenAccountsAndValidateFieldCreatedInCreateTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));	
		masterNewBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("Demo Account");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("Demo Code");

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTab));
		accountHeaderCreateTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabTextFieldTxt));
		String actDefaultText = accountHeaderCreateTabTextFieldTxt.getAttribute("value");
		String expDefaultText = "TextField_DefaultValue";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabNumberFieldTxt));
		String actDefaultNumber = accountHeaderCreateTabNumberFieldTxt.getAttribute("value");
		String expDefaultNumber = "0";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabBooleanFieldChkbox));
		boolean actBooleanChkbox = accountHeaderCreateTabBooleanFieldChkbox.isDisplayed();
		boolean expBooleanChkbox = true;



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabDateTimeField));
		String actDefaultTimeDate = accountHeaderCreateTabDateTimeField.getText();

		StringBuffer stringBuffer = new StringBuffer();
		Date now = new Date();
		SimpleDateFormat simpleDateTimeFormat = new SimpleDateFormat("M/d/yyyy hh:mm a");
		/* SimpleDateFormat simpleDateTimeFormat = new SimpleDateFormat("M/d/yyyy hh");*/
		String expDefaultTimeDate = simpleDateTimeFormat.format(now); 


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabTimeFieldTxt));
		String actDefaultTime = accountHeaderCreateTabTimeFieldTxt.getAttribute("value");

		SimpleDateFormat simpleTimeFormat = new SimpleDateFormat("HH:mm");
		/*SimpleDateFormat simpleTimeFormat = new SimpleDateFormat("HH");*/
		String expDefaultTime = simpleTimeFormat.format(now);



		boolean actDefaultDate = accountHeaderCreateTabDateField.isDisplayed();
		boolean expDefaultDate = true;


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabFractionFieldTxt));
		String actDefaultFraction = accountHeaderCreateTabFractionFieldTxt.getAttribute("value");
		String expDefaultFraction = "0.00";


		boolean actPictureBrowseBtn = accountHeaderCreateTabPictureFieldBrowseBtn.isDisplayed();
		boolean expPictureBrowseBtn = true; 

		boolean actPictureSaveBtn = accountHeaderCreateTabPictureFieldSaveBtn.isDisplayed();
		boolean expPictureSaveBtn = true; 

		boolean actPictureDeleteBtn = accountHeaderCreateTabPictureFieldDeleteBtn.isDisplayed();
		boolean expPictureDeleteBtn = true;


		ArrayList<String> actStringList = new ArrayList<String>(); 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabStringListFieldDropdown));
		Select drpdwn = new Select(accountHeaderCreateTabStringListFieldDropdown);

		int count = drpdwn.getOptions().size();

		for (int i = 0; i < count; i++) 
		{
			String data = drpdwn.getOptions().get(i).getAttribute("value");
			actStringList.add(data);
		}

		String actStringListTxt = actStringList.toString();
		String expStringListTxt = "[DataTypeField_DefaultValueText1, DataTypeField_DefaultValueText2]";



		ArrayList<String> actNumberList = new ArrayList<String>(); 
		Select numbdrpdwn = new Select(accountHeaderCreateTabNumberListFieldDropdown);

		int count1 = numbdrpdwn.getOptions().size();

		for (int i = 0; i < count1; i++) 
		{
			String data = numbdrpdwn.getOptions().get(i).getText();
			actNumberList.add(data);
		}

		String actNumberListTxt = actNumberList.toString();
		String expNumberListTxt = "[NumberListName]";



		boolean actDocumentViewerBrowseBtn = accountHeaderCreateTabDocumentViewerBrowseBtn.isDisplayed();
		boolean expDocumentViewerBrowseBtn = true;

		boolean actDocumentViewerSaveBtn = accountHeaderCreateTabDocumentViewerSaveBtn.isDisplayed();
		boolean expDocumentViewerSaveBtn = true;

		boolean actDocumentViewerEraseBtn = accountHeaderCreateTabDocumentViewerEraseBtn.isDisplayed();
		boolean expDocumentViewerEraseBtn = true;

		boolean actMasterFieldDropdown = accountHeaderCreateTabMasterFieldTxt.isDisplayed();
		boolean expMasterFieldDropdown = true;

		//boolean actExternalTableFieldDropdown = accountHeaderCreateTabExternalFieldDropdown.isDisplayed();
		//boolean expExternalTableFieldDropdown = true;


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabBigNumberField));
		String actDefaultBigNumberValue = accountHeaderCreateTabBigNumberField.getAttribute("value");
		String expDefaultBigNumberValue = "0";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabSmallNumberField));
		String actDefaultSmallNumberValue = accountHeaderCreateTabSmallNumberField.getAttribute("value");
		String expDefaultSmallNumberValue = "0";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabTinyNumberField));
		String actDefaultTinyNumberValue = accountHeaderCreateTabTinyNumberField.getAttribute("value");
		String expDefaultTinyNumberValue = "0";


		boolean actDefaultGregorianFieldDate = accountHeaderCreateTabGregorianDateField.isDisplayed();
		boolean expDefaultGregorianFieldDate = true;

		boolean actHijriCheckbox = accountHeaderCreateTabHijriFieldCheckBox.isDisplayed();
		boolean expHijriCheckbox = true;

		boolean actShamiCheckbox = accountHeaderCreateTabShamsiFieldCheckBox.isDisplayed();
		boolean expShamiCheckbox = true;




		System.out.println("***********************************checkOpenAccountsAndValidateFieldCreatedInCreateTab*********************************");

		System.out.println("DefaultText        "+actDefaultText		+"  Value Expected  "+expDefaultText);
		System.out.println("DefaultNumber      "+actDefaultNumber	+"  Value Expected  "+expDefaultNumber);
		System.out.println("BooleanChkbox      "+actBooleanChkbox	+"  Value Expected  "+expBooleanChkbox);
		System.out.println("DefaultTimeDate    "+actDefaultTimeDate	+"  Value Expected  "+expDefaultTimeDate);
		System.out.println("DefaultTime        "+actDefaultTime		+"  Value Expected  "+expDefaultTime);
		System.out.println("DefaultDate        "+actDefaultDate		+"  Value Expected  "+expDefaultDate);
		System.out.println("DefaultFraction    "+actDefaultFraction	+"  Value Expected  "+expDefaultFraction);
		System.out.println("PictureBrowseBtn   "+actPictureBrowseBtn+"  Value Expected  "+expPictureBrowseBtn);
		System.out.println("PictureSaveBtn     "+actPictureSaveBtn	+"  Value Expected  "+expPictureSaveBtn);
		System.out.println("PictureDeleteBtn   "+actPictureDeleteBtn+"  Value Expected  "+expPictureDeleteBtn);
		System.out.println(actStringListTxt);
		System.out.println(expStringListTxt);
		System.out.println(actNumberListTxt);
		System.out.println(expNumberListTxt);
		System.out.println("DocumentViewerBrowseBtn      "+actDocumentViewerBrowseBtn		+"  Value Expected  "+expDocumentViewerBrowseBtn);
		System.out.println("DocumentViewerSaveBtn        "+actDocumentViewerSaveBtn			+"  Value Expected  "+expDocumentViewerSaveBtn);
		System.out.println("DocumentViewerEraseBtn       "+actDocumentViewerEraseBtn		+"  Value Expected  "+expDocumentViewerEraseBtn);
		System.out.println("MasterFieldDropdown          "+actMasterFieldDropdown			+"  Value Expected  "+expMasterFieldDropdown);
		//System.out.println("ExternalTableFieldDropdown   "+actExternalTableFieldDropdown	+"  Value Expected  "+expExternalTableFieldDropdown);
		System.out.println("DefaultBigNumberValue        "+actDefaultBigNumberValue			+"  Value Expected  "+expDefaultBigNumberValue);
		System.out.println("DefaultSmallNumberValue      "+actDefaultSmallNumberValue		+"  Value Expected  "+expDefaultSmallNumberValue);
		System.out.println("DefaultTinyNumberValue       "+actDefaultTinyNumberValue		+"  Value Expected  "+expDefaultTinyNumberValue);
		System.out.println("DefaultGregorianFieldDate    "+actDefaultGregorianFieldDate		+"  Value Expected  "+expDefaultGregorianFieldDate);
		System.out.println("HijriCheckbox                "+actHijriCheckbox					+"  Value Expected  "+expHijriCheckbox);
		System.out.println("ShamiCheckbox                "+actShamiCheckbox					+"  Value Expected  "+expShamiCheckbox);

		if(actDefaultText.equalsIgnoreCase(expDefaultText) && actDefaultNumber.equalsIgnoreCase(expDefaultNumber) &&
				actBooleanChkbox==expBooleanChkbox && /*actDefaultTimeDate.equalsIgnoreCase(expDefaultTimeDate) &&
			 actDefaultTime.equalsIgnoreCase(expDefaultTime) && */actDefaultDate==expDefaultDate &&
			 actDefaultFraction.equalsIgnoreCase(expDefaultFraction) && actPictureSaveBtn==expPictureSaveBtn &&
			 actPictureBrowseBtn==expPictureBrowseBtn && actPictureDeleteBtn==expPictureDeleteBtn && 
			 actStringListTxt.equalsIgnoreCase(expStringListTxt) && actNumberListTxt.equalsIgnoreCase(expNumberListTxt) &&
			/* actDocumentViewerBrowseBtn==expDocumentViewerBrowseBtn && */actDocumentViewerSaveBtn==expDocumentViewerSaveBtn &&
			 actDocumentViewerEraseBtn==expDocumentViewerEraseBtn && actMasterFieldDropdown==expMasterFieldDropdown && 
			 /*actExternalTableFieldDropdown==expExternalTableFieldDropdown &&*/ actDefaultBigNumberValue.equalsIgnoreCase(expDefaultBigNumberValue) &&
			 actDefaultSmallNumberValue.equalsIgnoreCase(expDefaultSmallNumberValue) && actDefaultTinyNumberValue.equalsIgnoreCase(expDefaultTinyNumberValue) &&
			 actDefaultGregorianFieldDate==expDefaultGregorianFieldDate && actHijriCheckbox==expHijriCheckbox && actShamiCheckbox==expShamiCheckbox)
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}







	public static boolean checkSavingDemoAccount() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage="Saved Successfully";

		String actMessage=checkValidationMessage(expMessage);


		System.out.println("***********************************checkSavingDemoAccount*********************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}








	public static boolean checkEnableMandatoryCheckboxInAllFieldsProperties() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();



		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterFieldsCreateTab));
		masterFieldsCreateTab.click();

		Thread.sleep(2000);

		int count = CreateTabfieldCaptionTxtList.size();

		//Text Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_TextField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expTextFieldMsg = "Field Updated Successfully";
		String actTextFieldMsg = checkValidationMessage(expTextFieldMsg);



		//Number Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_NumberField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expNumberFieldMsg = "Field Updated Successfully";
		String actNumbertFieldMsg = checkValidationMessage(expNumberFieldMsg);




		//Boolean Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_BooleanField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expBooleanFieldMsg = "Field Updated Successfully";
		String actBooleanFieldMsg = checkValidationMessage(expBooleanFieldMsg);



		//Date Time Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_DateTimeField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expDateTimeFieldMsg = "Field Updated Successfully";
		String actDateTimeFieldMsg = checkValidationMessage(expDateTimeFieldMsg);



		//Date Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_DateField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expDateFieldMsg = "Field Updated Successfully";
		String actDateFieldMsg = checkValidationMessage(expDateFieldMsg);



		//Time Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_TimeField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expTimeFieldMsg = "Field Updated Successfully";
		String actTimeFieldMsg = checkValidationMessage(expTimeFieldMsg);



		//Fraction Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_FractionField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expFractionFieldMsg = "Field Updated Successfully";
		String actFractionFieldMsg = checkValidationMessage(expFractionFieldMsg);



		//Picture Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_PictureField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expPictureFieldMsg = "Field Updated Successfully";
		String actPictureFieldMsg = checkValidationMessage(expPictureFieldMsg);



		//String List Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_StringListField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expStringListFieldMsg = "Field Updated Successfully";
		String actStringListFieldMsg = checkValidationMessage(expStringListFieldMsg);



		//Number List Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_NumberListField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expNumberListFieldMsg = "Field Updated Successfully";
		String actNumberListFieldMsg = checkValidationMessage(expNumberListFieldMsg);

/*

		//Document Viewer Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_DocumentViewerField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekbox.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expDocumentViewerFieldMsg = "Field Updated Successfully";
		String actDocumentViewerFieldMsg = checkValidationMessage(expDocumentViewerFieldMsg);



		//Master Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_MasterField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMasterFieldMsg = "Field Updated Successfully";
		String actMasterFieldMsg = checkValidationMessage(expMasterFieldMsg);
*/



		//Big Number Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_BigNumberField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expBigNumberFieldMsg = "Field Updated Successfully";
		String actBigNumberFieldMsg = checkValidationMessage(expBigNumberFieldMsg);



		Thread.sleep(2000);
		//Small Number Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_SmallNumberField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expSmallNumberFieldMsg = "Field Updated Successfully";
		String actSmallNumberFieldMsg = checkValidationMessage(expSmallNumberFieldMsg);


		Thread.sleep(2000);

		//Tiny Number Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_TinyNumberField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expTinyNumberFieldMsg = "Field Updated Successfully";
		String actTinyNumberFieldMsg = checkValidationMessage(expTinyNumberFieldMsg);


/*

		//Gregorian Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_GregorianField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expGregorianFieldMsg = "Field Updated Successfully";
		String actGregorianFieldMsg = checkValidationMessage(expGregorianFieldMsg);



		//Hijri Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_HijriField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expHijriFieldMsg = "Field Updated Successfully";
		String actHijriFieldMsg = checkValidationMessage(expHijriFieldMsg);



		//Shamsi Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_ShamsiField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expShamsiFieldMsg = "Field Updated Successfully";
		String actShamsiFieldMsg = checkValidationMessage(expShamsiFieldMsg);*/
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtnInCreateTabCustomizeMasetrWarehouse));
		closeBtnInCreateTabCustomizeMasetrWarehouse.click();


		System.out.println("***********************************checkEnableMandatoryCheckboxInAllFieldsProperties*********************************");

		System.out.println("TextFieldMsg            : "+actTextFieldMsg				+"  Value Expected  "+expTextFieldMsg);
		System.out.println("NumbertFieldMsg         : "+actNumbertFieldMsg			+"  Value Expected  "+expNumberFieldMsg);
		System.out.println("BooleanFieldMsg         : "+actBooleanFieldMsg			+"  Value Expected  "+expBooleanFieldMsg);
		System.out.println("DateTimeFieldMsg        : "+actDateTimeFieldMsg			+"  Value Expected  "+expDateTimeFieldMsg);
		System.out.println("DateFieldMsg            : "+actDateFieldMsg				+"  Value Expected  "+expDateFieldMsg);
		System.out.println("TimeFieldMsg            : "+actTimeFieldMsg				+"  Value Expected  "+expTimeFieldMsg);
		System.out.println("FractionFieldMsg        : "+actFractionFieldMsg			+"  Value Expected  "+expFractionFieldMsg);
		System.out.println("PictureFieldMsg         : "+actPictureFieldMsg			+"  Value Expected  "+expPictureFieldMsg);
		System.out.println("StringListFieldMsg      : "+actStringListFieldMsg		+"  Value Expected  "+expStringListFieldMsg);
		System.out.println("NumberListFieldMsg      : "+actNumberListFieldMsg		+"  Value Expected  "+expNumberListFieldMsg);
		/*System.out.println("DocumentViewerFieldMsg  : "+actDocumentViewerFieldMsg	+"  Value Expected  "+expDocumentViewerFieldMsg);
		System.out.println("MasterFieldMsg          : "+actMasterFieldMsg			+"  Value Expected  "+expMasterFieldMsg);*/
		System.out.println("BigNumberFieldMsg       : "+actBigNumberFieldMsg		+"  Value Expected  "+expBigNumberFieldMsg);
		System.out.println("SmallNumberFieldMsg     : "+actSmallNumberFieldMsg		+"  Value Expected  "+expSmallNumberFieldMsg);
		System.out.println("TinyNumberFieldMsg      : "+actTinyNumberFieldMsg		+"  Value Expected  "+expTinyNumberFieldMsg);
	/*	System.out.println("GregorianFieldMsg       : "+actGregorianFieldMsg		+"  Value Expected  "+expGregorianFieldMsg);
		System.out.println("HijriFieldMsg           : "+actHijriFieldMsg			+"  Value Expected  "+expHijriFieldMsg);
		System.out.println("ShamsiFieldMsg          : "+actShamsiFieldMsg			+"  Value Expected  "+expShamsiFieldMsg);*/

		if(actTextFieldMsg.equalsIgnoreCase(expTextFieldMsg) && actNumbertFieldMsg.equalsIgnoreCase(expNumberFieldMsg) 
				&& actBooleanFieldMsg.equalsIgnoreCase(expBooleanFieldMsg) /*&& actDateTimeFieldMsg.equalsIgnoreCase(expDateTimeFieldMsg) 
			&& actDateFieldMsg.equalsIgnoreCase(expDateFieldMsg) && actTimeFieldMsg.equalsIgnoreCase(expTimeFieldMsg) */
				&& actFractionFieldMsg.equalsIgnoreCase(expFractionFieldMsg) && actPictureFieldMsg.equalsIgnoreCase(expPictureFieldMsg) 
				&& actStringListFieldMsg.equalsIgnoreCase(expStringListFieldMsg) && actNumberListFieldMsg.equalsIgnoreCase(expNumberListFieldMsg) 
				/*&& actDocumentViewerFieldMsg.equalsIgnoreCase(expDocumentViewerFieldMsg) && actMasterFieldMsg.equalsIgnoreCase(expMasterFieldMsg) */
				&& actBigNumberFieldMsg.equalsIgnoreCase(expBigNumberFieldMsg) && actSmallNumberFieldMsg.equalsIgnoreCase(expSmallNumberFieldMsg) 
				&& actTinyNumberFieldMsg.equalsIgnoreCase(expTinyNumberFieldMsg) /*&& actGregorianFieldMsg.equalsIgnoreCase(expGregorianFieldMsg) 
				&& actHijriFieldMsg.equalsIgnoreCase(expHijriFieldMsg) && actShamsiFieldMsg.equalsIgnoreCase(expShamsiFieldMsg)*/)
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}







	public static boolean checkLogoutAndLoginAfterEnablingMandatoryCheckboxInFieldsProperties() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		
		
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(LogoutDropdown));
		LogoutDropdown.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();

		Thread.sleep(4000);

		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt="su";

		String pawslt="su";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
		username.click();
		Thread.sleep(2000);
		username.clear();
		Thread.sleep(2000);
		username.sendKeys(unamelt);
		getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
		password.click();
		Thread.sleep(2000);
		password.clear();*/
		Thread.sleep(2000);
		password.sendKeys(pawslt);

		String compname="Account Properties And Customization";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		int zqSize=cSize+1;

		System.out.println("CompanyDropdownList Count :"+cqSize);

		System.out.println("Company dropdown is :"+ zqSize);


		//Select dropdown= new Select(lp.companyDropDownList);
		int i;

		//List<WebElement> list = dropdown.getOptions();

		//List<String> text = new ArrayList<>();
		for(i=0; i<elementCount.size(); i++) 
		{
			elementCount.get(i).getText();
			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}	
		}


		lp.clickOnSignInBtn();


		reLogin(unamelt, pawslt, compname);

		//checkRefershPopOnlogin();

		//checkPopUpWindow();

		Thread.sleep(8000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameTxt));
		userNameTxt.click();

		String userInfo=userNameTxt.getText();

		System.out.println("User Info : "+userInfo);

		System.out.println("User Info Capture Text :"+userNameTxt.getText());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogoImg));

		companyLogoImg.click();

		String getCompanyTxt=companyName.getText();
		String getLoginCompanyName=getCompanyTxt.substring(0, 36);
		System.out.println("company name :"+ getLoginCompanyName);
		companyLogoImg.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dashboardName));

		String getDashboard=dashboardName.getText();

		System.out.println(getDashboard);


		String expuserInfo            ="SU";
		String expLoginCompanyName    ="Account Properties And Customization";
		String expDashboard			  ="Graph with Active and setAsDefault";


		System.out.println("***********************************checkLogoutAndLoginAfterEnablingMandatoryCheckboxInFieldsProperties*********************************");

		System.out.println("User Info                        : "+userInfo               +"  value expected  "+expuserInfo);
		System.out.println("Login Company Name               : "+getLoginCompanyName    +"  value expected  "+expLoginCompanyName);
		System.out.println("Dashboard                        : "+getDashboard           +"  value expected  "+expDashboard);


		if(/*userInfo.equalsIgnoreCase(expuserInfo) &&*/ getLoginCompanyName.equalsIgnoreCase(expLoginCompanyName))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}





	/*@FindBy(xpath="(//input[@id='CreateTabPictureFieldName'])[1]")
	public static WebElement accountHeaderCreateTabAddedPictureName;*/

	@FindBy(xpath="(//input[@id='CreateTabDocumentViewerFieldName'])[1]")
	public static WebElement accountHeaderCreateTabAddedDocumentName;




	public static boolean checkOpenAccountsAndValidateMandatoryFieldCreatedInCreateTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));	
		masterNewBtn.click();

		Thread.sleep(2000);



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("Mandatory Account");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("Mandatory Code");

		Thread.sleep(4000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTab));
		accountHeaderCreateTab.click();

		Thread.sleep(2000);

		System.out.println("***********************************checkOpenAccountsAndValidateMandatoryFieldCreatedInCreateTab*********************************");

		StringBuffer stringBuffer = new StringBuffer();
		Date now = new Date();
		SimpleDateFormat simpleDateTimeFormat = new SimpleDateFormat("M/d/yyyy h:mm a");
		String expDefaultTimeDate = simpleDateTimeFormat.format(now); 


		SimpleDateFormat simpleTimeFormat = new SimpleDateFormat("HH:mm");
		String expDefaultTime = simpleTimeFormat.format(now);
		
		Calendar cal=Calendar.getInstance();
		SimpleDateFormat f = new SimpleDateFormat("dd/MM/yyyy");
	    String currentDate = f.format(cal.getTime());

		// Text Field

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabTextFieldTxt));
		accountHeaderCreateTabTextFieldTxt.click();
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.END);
		Thread.sleep(2000);
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.BACK_SPACE);
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMandatoryTextMsg = "In Tab :Create Tab ---> CreateTab_TextField Field is Required";

		String actMandatoryTextMsg = checkValidationMessage(expMandatoryTextMsg);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabTextFieldTxt));
		accountHeaderCreateTabTextFieldTxt.click();
		accountHeaderCreateTabTextFieldTxt.sendKeys("TextField_DefaultValue");
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.TAB);



		//Number Field

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabNumberFieldTxt));

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMandatoryNumberMsg = "In Tab :Create Tab ---> CreateTab_NumberField Field is Required";

		String actMandatoryNumberMsg = checkValidationMessage(expMandatoryNumberMsg);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabNumberFieldTxt));
		accountHeaderCreateTabNumberFieldTxt.click();
		accountHeaderCreateTabNumberFieldTxt.sendKeys(Keys.END);
		Thread.sleep(2000);
		accountHeaderCreateTabNumberFieldTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		accountHeaderCreateTabNumberFieldTxt.sendKeys(Keys.BACK_SPACE);
		accountHeaderCreateTabNumberFieldTxt.sendKeys("3");
		accountHeaderCreateTabNumberFieldTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();
		
		
		String expMandatoryDateMsg = "In Tab :Create Tab ---> CreateTab_DateField Field is Required";

		String actMandatoryDateMsg = checkValidationMessage(expMandatoryNumberMsg);

		
		 
		datePicker.click();
		
		getDate.click();
		
		accountHeaderCreateTabDateField.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

	

		//Fraction Field

		
		String expMandatoryFractionMsg = "In Tab :Create Tab ---> CreateTab_FractionField Field is Required";

		String actMandatoryFractionMsg = checkValidationMessage(expMandatoryFractionMsg);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabFractionFieldTxt));
		accountHeaderCreateTabFractionFieldTxt.click();
		accountHeaderCreateTabFractionFieldTxt.sendKeys(Keys.END);
		Thread.sleep(2000);
		accountHeaderCreateTabFractionFieldTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		accountHeaderCreateTabFractionFieldTxt.sendKeys(Keys.BACK_SPACE);
		accountHeaderCreateTabFractionFieldTxt.sendKeys("2.00");
		accountHeaderCreateTabFractionFieldTxt.sendKeys(Keys.TAB);



		//Picture Field

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMandatoryPictureMsg = "In Tab :Create Tab ---> CreateTab_PictureField Field is Required";

		String actMandatoryPictureMsg = checkValidationMessage(expMandatoryPictureMsg);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabPictureFieldBrowseBtn));
		accountHeaderCreateTabPictureFieldBrowseBtn.click();

		Thread.sleep(3000);

		Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\PictureImportInCustomizeMasterField.exe");

		Thread.sleep(4000);

		String actPictureAttached = accountHeaderCreateTabAddedPictureName.getAttribute("value");
		String expPictureAttached = "PictureValidation.jpg";

		System.out.println("PictureAdded  : "+actPictureAttached+"  Value Expected  "+expPictureAttached);



		//String List Field

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabStringListFieldDropdown));
		Select drpdwn = new Select(accountHeaderCreateTabStringListFieldDropdown);

		String actStringListTxt = drpdwn.getFirstSelectedOption().getAttribute("value");
		String expStringListTxt = "DataTypeField_DefaultValueText1";

		System.out.println("StringListTxt  : "+actStringListTxt+"  Value Expected  "+expStringListTxt);



		//Number List Field

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabNumberListFieldDropdown));
		Select numbdrpdwn = new Select(accountHeaderCreateTabNumberListFieldDropdown);

		String actNumberListTxt = numbdrpdwn.getFirstSelectedOption().getText();
		String expNumberListTxt = "NumberListName";

		System.out.println("NumberListTxt  : "+actNumberListTxt+"  Value Expected  "+expNumberListTxt);


/*
		//Document Field

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMandatoryDocumentMsg = "In Tab :Create Tab ---> CreateTab_DocumentViewerField Field is Required";

		String actMandatoryDocumentMsg = checkValidationMessage(expMandatoryDocumentMsg);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabDocumentViewerBrowseBtn));
		accountHeaderCreateTabDocumentViewerBrowseBtn.click();

		Thread.sleep(3000);

		Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\DocumentImportInCustomizeMasterField.exe");

		Thread.sleep(4000);

		String actDocumentViewerAttached = accountHeaderCreateTabAddedDocumentName.getAttribute("value");
		String expDocumentViewerAttached = "DocumentViewerValidation.pdf";

		System.out.println("DocumentViewerAttached  : "+actDocumentViewerAttached+"  Value Expected  "+expDocumentViewerAttached);


		// Master Field

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMandatoryMasterMsg = "In Tab :Create Tab ---> CreateTab_MasterField Field is Required";

		String actMandatoryMasterMsg = checkValidationMessage(expMandatoryMasterMsg);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabMasterFieldTxt));
		accountHeaderCreateTabMasterFieldTxt.click();
		accountHeaderCreateTabMasterFieldTxt.sendKeys("Cash");
		Thread.sleep(3000);
		accountHeaderCreateTabMasterFieldTxt.sendKeys(Keys.TAB);



*/
		//Big Number Field

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMandatoryBigNumberMsg = "In Tab :Create Tab ---> CreateTab_BigNumberField Field is Required";

		String actMandatoryBigNumberMsg = checkValidationMessage(expMandatoryBigNumberMsg);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabBigNumberField));
		accountHeaderCreateTabBigNumberField.click();
		accountHeaderCreateTabBigNumberField.sendKeys(Keys.END);
		Thread.sleep(2000);
		accountHeaderCreateTabBigNumberField.sendKeys(Keys.SHIFT,Keys.HOME);
		accountHeaderCreateTabBigNumberField.sendKeys(Keys.BACK_SPACE);
		accountHeaderCreateTabBigNumberField.sendKeys("5");
		accountHeaderCreateTabBigNumberField.sendKeys(Keys.TAB);




		//Small Number Field

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMandatorySmallNumberMsg = "In Tab :Create Tab ---> CreateTab_SmallNumberField Field is Required";

		String actMandatorySmallNumberMsg = checkValidationMessage(expMandatorySmallNumberMsg);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabSmallNumberField));
		accountHeaderCreateTabSmallNumberField.click();
		accountHeaderCreateTabSmallNumberField.sendKeys(Keys.END);
		Thread.sleep(2000);
		accountHeaderCreateTabSmallNumberField.sendKeys(Keys.SHIFT,Keys.HOME);
		accountHeaderCreateTabSmallNumberField.sendKeys(Keys.BACK_SPACE);
		accountHeaderCreateTabSmallNumberField.sendKeys("4");
		accountHeaderCreateTabSmallNumberField.sendKeys(Keys.TAB);



		//Tiny Number Field

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabTinyNumberField));
		accountHeaderCreateTabTinyNumberField.click();
		accountHeaderCreateTabTinyNumberField.sendKeys(Keys.END);
		Thread.sleep(2000);
		accountHeaderCreateTabTinyNumberField.sendKeys(Keys.SHIFT,Keys.HOME);
		accountHeaderCreateTabTinyNumberField.sendKeys(Keys.BACK_SPACE);
		accountHeaderCreateTabTinyNumberField.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMandatoryTinyNumberMsg = "In Tab :Create Tab ---> CreateTab_TinyNumberField Field is Required";

		String actMandatoryTinyNumberMsg = checkValidationMessage(expMandatoryTinyNumberMsg);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabTinyNumberField));
		accountHeaderCreateTabTinyNumberField.click();
		accountHeaderCreateTabTinyNumberField.sendKeys("1");
		accountHeaderCreateTabTinyNumberField.sendKeys(Keys.TAB);



		//Boolean Field

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabBooleanFieldChkbox));
		accountHeaderCreateTabBooleanFieldChkbox.click();

		Thread.sleep(2000);

		boolean actMandatoryBoolean = accountHeaderCreateTabBooleanFieldChkbox.isSelected();
		boolean expMandatoryBoolean = true;

		System.out.println("Boolean Checkbox isSelected  : "+actMandatoryBoolean+"  Value Expected  "+expMandatoryBoolean);



		//Time Date Field

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabDateTimeField));
		String actDefaultTimeDate = accountHeaderCreateTabDateTimeField.getText();

		System.out.println("Time Date Field  : "+actDefaultTimeDate+"  Value Expected  "+expDefaultTimeDate);



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMandatoryMsg = "Saved Successfully";

		String actMandatoryMsg = checkValidationMessage(expMandatoryMsg);

		if(actMandatoryTextMsg.equalsIgnoreCase(expMandatoryTextMsg) && actMandatoryNumberMsg.equalsIgnoreCase(expMandatoryNumberMsg) 
				&& actMandatoryBoolean==expMandatoryBoolean && /*actDefaultTimeDate.equalsIgnoreCase(expDefaultTimeDate) && actDefaultDate.equalsIgnoreCase(expDefaultDate)
			&& actDefaultTime.equalsIgnoreCase(expDefaultTime) &&*/ actMandatoryFractionMsg.equalsIgnoreCase(expMandatoryFractionMsg) && actMandatoryPictureMsg.equalsIgnoreCase(expMandatoryPictureMsg)
			&& actPictureAttached.equalsIgnoreCase(expPictureAttached) && actStringListTxt.equalsIgnoreCase(expStringListTxt) 
			&& actNumberListTxt.equalsIgnoreCase(expNumberListTxt) /*&& actMandatoryDocumentMsg.equalsIgnoreCase(expMandatoryDocumentMsg) 
			&& actDocumentViewerAttached.equalsIgnoreCase(expDocumentViewerAttached) && actMandatoryMasterMsg.equalsIgnoreCase(expMandatoryMasterMsg)*/
			&& actMandatoryBigNumberMsg.equalsIgnoreCase(expMandatoryBigNumberMsg) && actMandatorySmallNumberMsg.equalsIgnoreCase(expMandatorySmallNumberMsg)
			&& actMandatoryTinyNumberMsg.equalsIgnoreCase(expMandatoryTinyNumberMsg)/* && actGregorianDefaultDate.equalsIgnoreCase(expGregorianDefaultDate)*/
			/*&& actHijriCheckbox==expHijriCheckbox && actShamsiCheckbox==expShamsiCheckbox && actMandatoryMsg.equalsIgnoreCase(expMandatoryMsg)*/)
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}



















	public static boolean checkEnableMandatoryInGroupCheckboxInAllFieldsProperties() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();



		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterFieldsCreateTab));
		masterFieldsCreateTab.click();

		Thread.sleep(2000);

		int count = CreateTabfieldCaptionTxtList.size();

		//Text Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_TextField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expTextFieldMsg = "Field Updated Successfully";
		String actTextFieldMsg = checkValidationMessage(expTextFieldMsg);



		//Number Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_NumberField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expNumberFieldMsg = "Field Updated Successfully";
		String actNumbertFieldMsg = checkValidationMessage(expNumberFieldMsg);




		//Boolean Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_BooleanField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expBooleanFieldMsg = "Field Updated Successfully";
		String actBooleanFieldMsg = checkValidationMessage(expBooleanFieldMsg);





		//Date Time Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_DateTimeField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expDateTimeFieldMsg = "Field Updated Successfully";
		String actDateTimeFieldMsg = checkValidationMessage(expDateTimeFieldMsg);



		//Date Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_DateField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expDateFieldMsg = "Field Updated Successfully";
		String actDateFieldMsg = checkValidationMessage(expDateFieldMsg);



		//Time Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_TimeField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expTimeFieldMsg = "Field Updated Successfully";
		String actTimeFieldMsg = checkValidationMessage(expTimeFieldMsg);



		//Fraction Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_FractionField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expFractionFieldMsg = "Field Updated Successfully";
		String actFractionFieldMsg = checkValidationMessage(expFractionFieldMsg);



		//Picture Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_PictureField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expPictureFieldMsg = "Field Updated Successfully";
		String actPictureFieldMsg = checkValidationMessage(expPictureFieldMsg);


		Thread.sleep(2000);
		//String List Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_StringListField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expStringListFieldMsg = "Field Updated Successfully";
		String actStringListFieldMsg = checkValidationMessage(expStringListFieldMsg);



		//Number List Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_NumberListField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expNumberListFieldMsg = "Field Updated Successfully";
		String actNumberListFieldMsg = checkValidationMessage(expNumberListFieldMsg);


/*
		//Document Viewer Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_DocumentViewerField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expDocumentViewerFieldMsg = "Field Updated Successfully";
		String actDocumentViewerFieldMsg = checkValidationMessage(expDocumentViewerFieldMsg);



		//Master Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_MasterField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMasterFieldMsg = "Field Updated Successfully";
		String actMasterFieldMsg = checkValidationMessage(expMasterFieldMsg);

*/


		//Big Number Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_BigNumberField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expBigNumberFieldMsg = "Field Updated Successfully";
		String actBigNumberFieldMsg = checkValidationMessage(expBigNumberFieldMsg);




		//Small Number Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_SmallNumberField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expSmallNumberFieldMsg = "Field Updated Successfully";
		String actSmallNumberFieldMsg = checkValidationMessage(expSmallNumberFieldMsg);




		//Tiny Number Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_TinyNumberField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expTinyNumberFieldMsg = "Field Updated Successfully";
		String actTinyNumberFieldMsg = checkValidationMessage(expTinyNumberFieldMsg);



/*
		//Gregorian Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_GregorianField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expGregorianFieldMsg = "Field Updated Successfully";
		String actGregorianFieldMsg = checkValidationMessage(expGregorianFieldMsg);



		//Hijri Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_HijriField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expHijriFieldMsg = "Field Updated Successfully";
		String actHijriFieldMsg = checkValidationMessage(expHijriFieldMsg);



		//Shamsi Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_ShamsiField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryChekbox));

		if (extraFields_PropertiesMandatoryChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expShamsiFieldMsg = "Field Updated Successfully";
		String actShamsiFieldMsg = checkValidationMessage(expShamsiFieldMsg);*/

		System.out.println("***********************************checkEnableMandatoryInGroupCheckboxInAllFieldsProperties*********************************");

		System.out.println("TextFieldMsg            : "+actTextFieldMsg				+"  Value Expected  "+expTextFieldMsg);
		System.out.println("NumbertFieldMsg         : "+actNumbertFieldMsg			+"  Value Expected  "+expNumberFieldMsg);
		System.out.println("BooleanFieldMsg         : "+actBooleanFieldMsg			+"  Value Expected  "+expBooleanFieldMsg);
		System.out.println("DateTimeFieldMsg        : "+actDateTimeFieldMsg			+"  Value Expected  "+expDateTimeFieldMsg);
		System.out.println("DateFieldMsg            : "+actDateFieldMsg				+"  Value Expected  "+expDateFieldMsg);
		System.out.println("TimeFieldMsg            : "+actTimeFieldMsg				+"  Value Expected  "+expTimeFieldMsg);
		System.out.println("FractionFieldMsg        : "+actFractionFieldMsg			+"  Value Expected  "+expFractionFieldMsg);
		System.out.println("PictureFieldMsg         : "+actPictureFieldMsg			+"  Value Expected  "+expPictureFieldMsg);
		System.out.println("StringListFieldMsg      : "+actStringListFieldMsg		+"  Value Expected  "+expStringListFieldMsg);
		System.out.println("NumberListFieldMsg      : "+actNumberListFieldMsg		+"  Value Expected  "+expNumberListFieldMsg);
		/*System.out.println("DocumentViewerFieldMsg  : "+actDocumentViewerFieldMsg	+"  Value Expected  "+expDocumentViewerFieldMsg);
		System.out.println("MasterFieldMsg          : "+actMasterFieldMsg			+"  Value Expected  "+expMasterFieldMsg);*/
		System.out.println("BigNumberFieldMsg       : "+actBigNumberFieldMsg		+"  Value Expected  "+expBigNumberFieldMsg);
		System.out.println("SmallNumberFieldMsg     : "+actSmallNumberFieldMsg		+"  Value Expected  "+expSmallNumberFieldMsg);
		System.out.println("TinyNumberFieldMsg      : "+actTinyNumberFieldMsg		+"  Value Expected  "+expTinyNumberFieldMsg);
	/*	System.out.println("GregorianFieldMsg       : "+actGregorianFieldMsg		+"  Value Expected  "+expGregorianFieldMsg);
		System.out.println("HijriFieldMsg           : "+actHijriFieldMsg			+"  Value Expected  "+expHijriFieldMsg);
		System.out.println("ShamsiFieldMsg          : "+actShamsiFieldMsg			+"  Value Expected  "+expShamsiFieldMsg);*/
		
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtnInCreateTabCustomizeMasetrWarehouse));
		closeBtnInCreateTabCustomizeMasetrWarehouse.click();

		if(actTextFieldMsg.equalsIgnoreCase(expTextFieldMsg) && actNumbertFieldMsg.equalsIgnoreCase(expNumberFieldMsg) 
				&& actBooleanFieldMsg.equalsIgnoreCase(expBooleanFieldMsg) /*&& actDateTimeFieldMsg.equalsIgnoreCase(expDateTimeFieldMsg) 
			&& actDateFieldMsg.equalsIgnoreCase(expDateFieldMsg) && actTimeFieldMsg.equalsIgnoreCase(expTimeFieldMsg) */
				&& actFractionFieldMsg.equalsIgnoreCase(expFractionFieldMsg) && actPictureFieldMsg.equalsIgnoreCase(expPictureFieldMsg) 
				&& actStringListFieldMsg.equalsIgnoreCase(expStringListFieldMsg) && actNumberListFieldMsg.equalsIgnoreCase(expNumberListFieldMsg) 
				/*&& actDocumentViewerFieldMsg.equalsIgnoreCase(expDocumentViewerFieldMsg) && actMasterFieldMsg.equalsIgnoreCase(expMasterFieldMsg) */
				&& actBigNumberFieldMsg.equalsIgnoreCase(expBigNumberFieldMsg) && actSmallNumberFieldMsg.equalsIgnoreCase(expSmallNumberFieldMsg) 
				&& actTinyNumberFieldMsg.equalsIgnoreCase(expTinyNumberFieldMsg) /*&& actGregorianFieldMsg.equalsIgnoreCase(expGregorianFieldMsg) 
				&& actHijriFieldMsg.equalsIgnoreCase(expHijriFieldMsg) && actShamsiFieldMsg.equalsIgnoreCase(expShamsiFieldMsg)*/)
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}








	public static boolean checkLogoutAndLoginAfterEnablingMandatoryInGroupCheckboxInFieldsProperties() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(LogoutDropdown));
		LogoutDropdown.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();

		Thread.sleep(4000);

		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt="su";

		String pawslt="su";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
		username.click();
		Thread.sleep(2000);
		username.clear();
		Thread.sleep(2000);
		username.sendKeys(unamelt);
		getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

	/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
		password.click();
		Thread.sleep(2000);
		password.clear();*/
		Thread.sleep(2000);
		password.sendKeys(pawslt);



		String compname="Account Properties And Customization";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		int zqSize=cSize+1;

		System.out.println("CompanyDropdownList Count :"+cqSize);

		System.out.println("Company dropdown is :"+ zqSize);


		//Select dropdown= new Select(lp.companyDropDownList);
		int i;

		//List<WebElement> list = dropdown.getOptions();

		//List<String> text = new ArrayList<>();
		for(i=0; i<elementCount.size(); i++) 
		{
			elementCount.get(i).getText();
			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}	
		}
		lp.clickOnSignInBtn();
		
		reLogin(unamelt, pawslt, compname);

		//checkRefershPopOnlogin();

		//checkPopUpWindow();

		Thread.sleep(8000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameTxt));
		userNameTxt.click();

		String userInfo=userNameTxt.getText();

		System.out.println("User Info : "+userInfo);

		System.out.println("User Info Capture Text :"+userNameTxt.getText());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogoImg));

		companyLogoImg.click();

		String getCompanyTxt=companyName.getText();
		String getLoginCompanyName=getCompanyTxt.substring(0, 36);
		System.out.println("company name :"+ getLoginCompanyName);
		companyLogoImg.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dashboardName));

		String getDashboard=dashboardName.getText();

		System.out.println(getDashboard);


		String expuserInfo            ="SU";
		String expLoginCompanyName    ="Automation Company ";
		String expDashboard			  ="Graph with Active and setAsDefault";


		System.out.println("***********************************checkLogoutAndLoginAfterEnablingMandatoryInGroupCheckboxInFieldsProperties*********************************");

		System.out.println("User Info                        : "+userInfo               +"  value expected  "+expuserInfo);
		System.out.println("Login Company Name               : "+getLoginCompanyName    +"  value expected  "+expLoginCompanyName);
		System.out.println("Dashboard                        : "+getDashboard           +"  value expected  "+expDashboard);


		if(/*userInfo.equalsIgnoreCase(expuserInfo) && */getLoginCompanyName.equalsIgnoreCase(expLoginCompanyName))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}


	public static boolean checkOpenAccountsAndValidateMandatoryInGroupFieldCreatedInCreateTab() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{	
		Thread.sleep(1000);
		getDriver().navigate().refresh();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterAddGroupBtn));	
		masterAddGroupBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("Mandatory Group");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("Mandatory Group Code");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTab));
		accountHeaderCreateTab.click();

		Thread.sleep(2000);

		System.out.println("***********************************checkOpenAccountsAndValidateMandatoryInGroupFieldCreatedInCreateTab*********************************");



		StringBuffer stringBuffer = new StringBuffer();
		Date now = new Date();
		SimpleDateFormat simpleDateTimeFormat = new SimpleDateFormat("M/d/yyyy h:mm a");
		String expDefaultTimeDate = simpleDateTimeFormat.format(now); 


		SimpleDateFormat simpleTimeFormat = new SimpleDateFormat("HH:mm");
		String expDefaultTime = simpleTimeFormat.format(now);
		
		Calendar cal=Calendar.getInstance();
		SimpleDateFormat f = new SimpleDateFormat("dd/MM/yyyy");
	    String currentDate = f.format(cal.getTime());

		// Text Field

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabTextFieldTxt));
		accountHeaderCreateTabTextFieldTxt.click();
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.END);
		Thread.sleep(2000);
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.BACK_SPACE);
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMandatoryTextMsg = "In Tab :Create Tab ---> CreateTab_TextField Field is Required";

		String actMandatoryTextMsg = checkValidationMessage(expMandatoryTextMsg);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabTextFieldTxt));
		accountHeaderCreateTabTextFieldTxt.click();
		accountHeaderCreateTabTextFieldTxt.sendKeys("TextField_DefaultValue");
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.TAB);



		//Number Field

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabNumberFieldTxt));

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMandatoryNumberMsg = "In Tab :Create Tab ---> CreateTab_NumberField Field is Required";

		String actMandatoryNumberMsg = checkValidationMessage(expMandatoryNumberMsg);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabNumberFieldTxt));
		accountHeaderCreateTabNumberFieldTxt.click();
		accountHeaderCreateTabNumberFieldTxt.sendKeys(Keys.END);
		Thread.sleep(2000);
		accountHeaderCreateTabNumberFieldTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		accountHeaderCreateTabNumberFieldTxt.sendKeys(Keys.BACK_SPACE);
		accountHeaderCreateTabNumberFieldTxt.sendKeys("3");
		accountHeaderCreateTabNumberFieldTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();
		
		
		String expMandatoryDateMsg = "In Tab :Create Tab ---> CreateTab_DateField Field is Required";

		String actMandatoryDateMsg = checkValidationMessage(expMandatoryNumberMsg);

		
		 
		datePicker.click();
		
		getDate.click();
		
		accountHeaderCreateTabDateField.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

	

		//Fraction Field

		
		String expMandatoryFractionMsg = "In Tab :Create Tab ---> CreateTab_FractionField Field is Required";

		String actMandatoryFractionMsg = checkValidationMessage(expMandatoryFractionMsg);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabFractionFieldTxt));
		accountHeaderCreateTabFractionFieldTxt.click();
		accountHeaderCreateTabFractionFieldTxt.sendKeys(Keys.END);
		Thread.sleep(2000);
		accountHeaderCreateTabFractionFieldTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		accountHeaderCreateTabFractionFieldTxt.sendKeys(Keys.BACK_SPACE);
		accountHeaderCreateTabFractionFieldTxt.sendKeys("2.00");
		accountHeaderCreateTabFractionFieldTxt.sendKeys(Keys.TAB);



		//Picture Field

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMandatoryPictureMsg = "In Tab :Create Tab ---> CreateTab_PictureField Field is Required";

		String actMandatoryPictureMsg = checkValidationMessage(expMandatoryPictureMsg);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabPictureFieldBrowseBtn));
		accountHeaderCreateTabPictureFieldBrowseBtn.click();

		Thread.sleep(3000);

		Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\PictureImportInCustomizeMasterField.exe");

		Thread.sleep(4000);

		String actPictureAttached = accountHeaderCreateTabAddedPictureName.getAttribute("value");
		String expPictureAttached = "PictureValidation.jpg";

		System.out.println("PictureAdded  : "+actPictureAttached+"  Value Expected  "+expPictureAttached);



		//String List Field

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabStringListFieldDropdown));
		Select drpdwn = new Select(accountHeaderCreateTabStringListFieldDropdown);

		String actStringListTxt = drpdwn.getFirstSelectedOption().getAttribute("value");
		String expStringListTxt = "DataTypeField_DefaultValueText1";

		System.out.println("StringListTxt  : "+actStringListTxt+"  Value Expected  "+expStringListTxt);



		//Number List Field

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabNumberListFieldDropdown));
		Select numbdrpdwn = new Select(accountHeaderCreateTabNumberListFieldDropdown);

		String actNumberListTxt = numbdrpdwn.getFirstSelectedOption().getText();
		String expNumberListTxt = "NumberListName";

		System.out.println("NumberListTxt  : "+actNumberListTxt+"  Value Expected  "+expNumberListTxt);



/*
		//Document Field

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMandatoryDocumentMsg = "In Tab :Create Tab ---> CreateTab_DocumentViewerField Field is Required";

		String actMandatoryDocumentMsg = checkValidationMessage(expMandatoryDocumentMsg);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabDocumentViewerBrowseBtn));
		accountHeaderCreateTabDocumentViewerBrowseBtn.click();

		Thread.sleep(3000);

		Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\DocumentImportInCustomizeMasterField.exe");

		Thread.sleep(4000);

		String actDocumentViewerAttached = accountHeaderCreateTabAddedDocumentName.getAttribute("value");
		String expDocumentViewerAttached = "DocumentViewerValidation.pdf";

		System.out.println("DocumentViewerAttached  : "+actDocumentViewerAttached+"  Value Expected  "+expDocumentViewerAttached);


		// Master Field

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMandatoryMasterMsg = "In Tab :Create Tab ---> CreateTab_MasterField Field is Required";

		String actMandatoryMasterMsg = checkValidationMessage(expMandatoryMasterMsg);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabMasterFieldTxt));
		accountHeaderCreateTabMasterFieldTxt.click();
		accountHeaderCreateTabMasterFieldTxt.sendKeys("Cash");
		Thread.sleep(3000);
		accountHeaderCreateTabMasterFieldTxt.sendKeys(Keys.TAB);

*/


		//Big Number Field


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMandatoryBigNumberMsg = "In Tab :Create Tab ---> CreateTab_BigNumberField Field is Required";

		String actMandatoryBigNumberMsg = checkValidationMessage(expMandatoryBigNumberMsg);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabBigNumberField));
		accountHeaderCreateTabBigNumberField.click();
		accountHeaderCreateTabBigNumberField.sendKeys(Keys.END);
		Thread.sleep(2000);
		accountHeaderCreateTabBigNumberField.sendKeys(Keys.SHIFT,Keys.HOME);
		accountHeaderCreateTabBigNumberField.sendKeys(Keys.BACK_SPACE);
		accountHeaderCreateTabBigNumberField.sendKeys("5");
		accountHeaderCreateTabBigNumberField.sendKeys(Keys.TAB);




		//Small Number Field

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMandatorySmallNumberMsg = "In Tab :Create Tab ---> CreateTab_SmallNumberField Field is Required";

		String actMandatorySmallNumberMsg = checkValidationMessage(expMandatorySmallNumberMsg);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabSmallNumberField));
		accountHeaderCreateTabSmallNumberField.click();
		accountHeaderCreateTabSmallNumberField.sendKeys(Keys.END);
		Thread.sleep(2000);
		accountHeaderCreateTabSmallNumberField.sendKeys(Keys.SHIFT,Keys.HOME);
		accountHeaderCreateTabSmallNumberField.sendKeys(Keys.BACK_SPACE);
		accountHeaderCreateTabSmallNumberField.sendKeys("4");
		accountHeaderCreateTabSmallNumberField.sendKeys(Keys.TAB);



		//Tiny Number Field

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabTinyNumberField));
		accountHeaderCreateTabTinyNumberField.click();
		accountHeaderCreateTabTinyNumberField.sendKeys(Keys.END);
		Thread.sleep(2000);
		accountHeaderCreateTabTinyNumberField.sendKeys(Keys.SHIFT,Keys.HOME);
		accountHeaderCreateTabTinyNumberField.sendKeys(Keys.BACK_SPACE);
		accountHeaderCreateTabTinyNumberField.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMandatoryTinyNumberMsg = "In Tab :Create Tab ---> CreateTab_TinyNumberField Field is Required";

		String actMandatoryTinyNumberMsg = checkValidationMessage(expMandatoryTinyNumberMsg);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabTinyNumberField));
		accountHeaderCreateTabTinyNumberField.click();
		accountHeaderCreateTabTinyNumberField.sendKeys("1");
		accountHeaderCreateTabTinyNumberField.sendKeys(Keys.TAB);



		//Boolean Field

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabBooleanFieldChkbox));
		accountHeaderCreateTabBooleanFieldChkbox.click();

		Thread.sleep(2000);

		boolean actMandatoryBoolean = accountHeaderCreateTabBooleanFieldChkbox.isSelected();
		boolean expMandatoryBoolean = true;

		System.out.println("Boolean Checkbox isSelected  : "+actMandatoryBoolean+"  Value Expected  "+expMandatoryBoolean);



		//Time Date Field

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabDateTimeField));
		String actDefaultTimeDate = accountHeaderCreateTabDateTimeField.getText();

		System.out.println("Time Date Field  : "+actDefaultTimeDate+"  Value Expected  "+expDefaultTimeDate);



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMandatoryMsg = "Saved Successfully";

		String actMandatoryMsg = checkValidationMessage(expMandatoryMsg);

		if(actMandatoryTextMsg.equalsIgnoreCase(expMandatoryTextMsg) && actMandatoryNumberMsg.equalsIgnoreCase(expMandatoryNumberMsg) 
				&& actMandatoryBoolean==expMandatoryBoolean && /*actDefaultTimeDate.equalsIgnoreCase(expDefaultTimeDate) && actDefaultDate.equalsIgnoreCase(expDefaultDate)
			&& actDefaultTime.equalsIgnoreCase(expDefaultTime) &&*/ actMandatoryFractionMsg.equalsIgnoreCase(expMandatoryFractionMsg) && actMandatoryPictureMsg.equalsIgnoreCase(expMandatoryPictureMsg)
			&& actPictureAttached.equalsIgnoreCase(expPictureAttached) && actStringListTxt.equalsIgnoreCase(expStringListTxt) 
			&& actNumberListTxt.equalsIgnoreCase(expNumberListTxt) /*&& actMandatoryDocumentMsg.equalsIgnoreCase(expMandatoryDocumentMsg) 
			&& actDocumentViewerAttached.equalsIgnoreCase(expDocumentViewerAttached) && actMandatoryMasterMsg.equalsIgnoreCase(expMandatoryMasterMsg)*/
			&& actMandatoryBigNumberMsg.equalsIgnoreCase(expMandatoryBigNumberMsg) && actMandatorySmallNumberMsg.equalsIgnoreCase(expMandatorySmallNumberMsg)
			&& actMandatoryTinyNumberMsg.equalsIgnoreCase(expMandatoryTinyNumberMsg)/* && actGregorianDefaultDate.equalsIgnoreCase(expGregorianDefaultDate)*/
			/*&& actHijriCheckbox==expHijriCheckbox && actShamsiCheckbox==expShamsiCheckbox && actMandatoryMsg.equalsIgnoreCase(expMandatoryMsg)*/)
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}



	public static boolean checkEnableHiddenCheckboxInAllFieldsProperties() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterFieldsCreateTab));
		masterFieldsCreateTab.click();

		Thread.sleep(2000);

		int count = CreateTabfieldCaptionTxtList.size();

		//Text Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_TextField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));
		extraFields_PropertiesHiddenChekbox.click();

		extraFields_OkBtn.click();
		
		Thread.sleep(2000);

		String expTextFieldMsg = "Field Updated Successfully";
		String actTextFieldMsg = checkValidationMessage(expTextFieldMsg);



		//Number Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_NumberField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));
		extraFields_PropertiesHiddenChekbox.click();

		extraFields_OkBtn.click();
		Thread.sleep(2000);

		String expNumberFieldMsg = "Field Updated Successfully";
		String actNumbertFieldMsg = checkValidationMessage(expNumberFieldMsg);

		//Boolean Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_BooleanField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));
		extraFields_PropertiesHiddenChekbox.click();

		extraFields_OkBtn.click();
		Thread.sleep(2000);

		String expBooleanFieldMsg = "Field Updated Successfully";
		String actBooleanFieldMsg = checkValidationMessage(expBooleanFieldMsg);

		//DateTime Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_DateTimeField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));
		extraFields_PropertiesHiddenChekbox.click();

		extraFields_OkBtn.click();
		Thread.sleep(2000);

		String expDateTimeFieldMsg = "Field Updated Successfully";
		String actDateTimeFieldMsg = checkValidationMessage(expDateTimeFieldMsg);

		//Date Field


		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_DateField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));
		extraFields_PropertiesHiddenChekbox.click();

		extraFields_OkBtn.click();
		Thread.sleep(2000);

		String expDateFieldMsg = "Field Updated Successfully";
		String actDateFieldMsg = checkValidationMessage(expDateFieldMsg);

		//Time field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_TimeField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));
		extraFields_PropertiesHiddenChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();
		Thread.sleep(2000);

		String expTimeFieldMsg = "Field Updated Successfully";
		String actTimeFieldMsg = checkValidationMessage(expTimeFieldMsg);

		//Fraction Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_FractionField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));
		extraFields_PropertiesHiddenChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();
		Thread.sleep(2000);

		String expFractionFieldMsg = "Field Updated Successfully";
		String actFractionFieldMsg = checkValidationMessage(expFractionFieldMsg);

		//Picture Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_PictureField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));
		extraFields_PropertiesHiddenChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();
		
		Thread.sleep(2000);
		String expPictureFieldMsg = "Field Updated Successfully";
		String actPictureFieldMsg = checkValidationMessage(expPictureFieldMsg);

		//String List Field

		Thread.sleep(2000);


		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_StringListField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));
		extraFields_PropertiesHiddenChekbox.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();
		Thread.sleep(2000);

		String expStringListFieldMsg = "Field Updated Successfully";
		String actStringListFieldMsg = checkValidationMessage(expStringListFieldMsg);

		//Number List

		Thread.sleep(2000);

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_NumberListField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));
		extraFields_PropertiesHiddenChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();
		
		Thread.sleep(2000);
		String expNumberListFieldMsg = "Field Updated Successfully";
		String actNumberListFieldMsg = checkValidationMessage(expNumberListFieldMsg);

		//DocumentViewer Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_DocumentViewerField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));
		extraFields_PropertiesHiddenChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();
		Thread.sleep(2000);

		String expDocumentViewerFieldMsg = "Field Updated Successfully";
		String actDocumentViewerFieldMsg = checkValidationMessage(expDocumentViewerFieldMsg);

		//Master Field

		Thread.sleep(2000);

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_MasterField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));
		extraFields_PropertiesHiddenChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();
		Thread.sleep(2000);

		String expMasterFieldMsg = "Field Updated Successfully";
		String actMasterFieldMsg = checkValidationMessage(expMasterFieldMsg);

		Thread.sleep(2000);

		//BigNumber Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_BigNumberField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));
		extraFields_PropertiesHiddenChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();
		
		Thread.sleep(2000);

		String expBigNumberFieldMsg = "Field Updated Successfully";
		String actBigNumberFieldMsg = checkValidationMessage(expBigNumberFieldMsg);

		/*
				//External Table Field

				for (int i = 0; i < count; i++) 
				{
					String data = CreateTabfieldCaptionTxtList.get(i).getText();

					if (data.equalsIgnoreCase("CreateTab_ExternalTableField")) 
					{
						CreateTabeditFieldList.get(i).click();
						break;
					} 
				}

				Thread.sleep(2000);

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
				extraFields_PropertiesTab.click();

				Thread.sleep(2000);

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

				if (extraFields_PropertiesMandatoryInGroupChekbox.isSelected()==true) 
				{
					extraFields_PropertiesMandatoryInGroupChekbox.click();
				}
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));
				extraFields_PropertiesHiddenChekbox.click();

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
				extraFields_OkBtn.click();

				String expExternalTableFieldMsg = "Field Updated Successfully";
				String actExternalTableFieldMsg = checkValidationMessage(expExternalTableFieldMsg);*/

		//Small Number Field
		Thread.sleep(2000);


		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_SmallNumberField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));
		extraFields_PropertiesHiddenChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();
		
		Thread.sleep(2000);

		String expSmallNumberFieldMsg = "Field Updated Successfully";
		String actSmallNumberFieldMsg = checkValidationMessage(expSmallNumberFieldMsg);

		//Tiny Number field
		Thread.sleep(2000);


		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_TinyNumberField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));
		extraFields_PropertiesHiddenChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();
		
		Thread.sleep(2000);

		String expTinyNumberFieldMsg = "Field Updated Successfully";
		String actTinyNumberFieldMsg = checkValidationMessage(expTinyNumberFieldMsg);

		//Gregirian Field
		Thread.sleep(2000);


		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_GregorianField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));
		extraFields_PropertiesHiddenChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();
		
		Thread.sleep(2000);

		String expGregorianFieldMsg = "Field Updated Successfully";
		String actGregorianFieldMsg = checkValidationMessage(expGregorianFieldMsg);

		//Hijri Field 
		Thread.sleep(2000);


		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_HijriField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));
		extraFields_PropertiesHiddenChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		Thread.sleep(2000);
		String expHijriFieldMsg = "Field Updated Successfully";
		String actHijriFieldMsg = checkValidationMessage(expHijriFieldMsg);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtnInCreateTabCustomizeMasetrWarehouse));
		closeBtnInCreateTabCustomizeMasetrWarehouse.click();

		//Shamsi Field

		/*for (int i = 0; i < count; i++) 
				{
					String data = CreateTabfieldCaptionTxtList.get(i).getText();

					if (data.equalsIgnoreCase("CreateTab_ShamsiField")) 
					{
						CreateTabeditFieldList.get(i).click();
						break;
					} 
				}

				Thread.sleep(2000);

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
				extraFields_PropertiesTab.click();

				Thread.sleep(2000);

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

				if (extraFields_PropertiesMandatoryInGroupChekbox.isSelected()==true) 
				{
					extraFields_PropertiesMandatoryInGroupChekbox.click();
				}

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));
				extraFields_PropertiesHiddenChekbox.click();

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
				extraFields_OkBtn.click();

				String expShamsiFieldMsg = "Field Updated Successfully";
				String actShamsiFieldMsg = checkValidationMessage(expShamsiFieldMsg);*/

		System.out.println("***********************************checkEnableHiddenCheckboxInAllFieldsProperties*********************************");

		System.out.println("TextFieldMsg            : "+actTextFieldMsg				+"  Value Expected  "+expTextFieldMsg);
		System.out.println("NumbertFieldMsg         : "+actNumbertFieldMsg			+"  Value Expected  "+expNumberFieldMsg);
		System.out.println("BooleanFieldMsg         : "+actBooleanFieldMsg			+"  Value Expected  "+expBooleanFieldMsg);
		System.out.println("DateTimeFieldMsg        : "+actDateTimeFieldMsg			+"  Value Expected  "+expDateTimeFieldMsg);
		System.out.println("DateFieldMsg            : "+actDateFieldMsg				+"  Value Expected  "+expDateFieldMsg);
		System.out.println("TimeFieldMsg            : "+actTimeFieldMsg				+"  Value Expected  "+expTimeFieldMsg);
		System.out.println("FractionFieldMsg        : "+actFractionFieldMsg			+"  Value Expected  "+expFractionFieldMsg);
		System.out.println("PictureFieldMsg         : "+actPictureFieldMsg			+"  Value Expected  "+expPictureFieldMsg);
		System.out.println("StringListFieldMsg      : "+actStringListFieldMsg		+"  Value Expected  "+expStringListFieldMsg);
		System.out.println("NumberListFieldMsg      : "+actNumberListFieldMsg		+"  Value Expected  "+expNumberListFieldMsg);
		System.out.println("DocumentViewerFieldMsg  : "+actDocumentViewerFieldMsg	+"  Value Expected  "+expDocumentViewerFieldMsg);
		System.out.println("MasterFieldMsg          : "+actMasterFieldMsg			+"  Value Expected  "+expMasterFieldMsg);
		System.out.println("BigNumberFieldMsg       : "+actBigNumberFieldMsg		+"  Value Expected  "+expBigNumberFieldMsg);
		System.out.println("SmallNumberFieldMsg     : "+actSmallNumberFieldMsg		+"  Value Expected  "+expSmallNumberFieldMsg);
		System.out.println("TinyNumberFieldMsg      : "+actTinyNumberFieldMsg		+"  Value Expected  "+expTinyNumberFieldMsg);
		System.out.println("GregorianFieldMsg       : "+actGregorianFieldMsg		+"  Value Expected  "+expGregorianFieldMsg);
		System.out.println("HijriFieldMsg           : "+actHijriFieldMsg			+"  Value Expected  "+expHijriFieldMsg);
		//System.out.println("ShamsiFieldMsg          : "+actShamsiFieldMsg			+"  Value Expected  "+expShamsiFieldMsg);

		if(actTextFieldMsg.equalsIgnoreCase(expTextFieldMsg) && actNumbertFieldMsg.equalsIgnoreCase(expNumberFieldMsg) 
				&& actBooleanFieldMsg.equalsIgnoreCase(expBooleanFieldMsg) && /*actDateTimeFieldMsg.equalsIgnoreCase(expDateTimeFieldMsg) 
				&& actDateFieldMsg.equalsIgnoreCase(expDateFieldMsg) && actTimeFieldMsg.equalsIgnoreCase(expTimeFieldMsg) 
				&& */actFractionFieldMsg.equalsIgnoreCase(expFractionFieldMsg) && actPictureFieldMsg.equalsIgnoreCase(expPictureFieldMsg) 
				&& actStringListFieldMsg.equalsIgnoreCase(expStringListFieldMsg) && actNumberListFieldMsg.equalsIgnoreCase(expNumberListFieldMsg) 
				&& actDocumentViewerFieldMsg.equalsIgnoreCase(expDocumentViewerFieldMsg) && actMasterFieldMsg.equalsIgnoreCase(expMasterFieldMsg) 
				&& actBigNumberFieldMsg.equalsIgnoreCase(expBigNumberFieldMsg) && actSmallNumberFieldMsg.equalsIgnoreCase(expSmallNumberFieldMsg) 
				&& actTinyNumberFieldMsg.equalsIgnoreCase(expTinyNumberFieldMsg) && actGregorianFieldMsg.equalsIgnoreCase(expGregorianFieldMsg) 
				&& actHijriFieldMsg.equalsIgnoreCase(expHijriFieldMsg) /*&& actShamsiFieldMsg.equalsIgnoreCase(expShamsiFieldMsg)*/)
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}



	public static boolean checkLogoutAndLoginAfterEnablingHiddenCheckboxInFieldsProperties() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(LogoutDropdown));
		LogoutDropdown.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();

		Thread.sleep(4000);

		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt="su";

		String pawslt="su";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
		username.click();
		Thread.sleep(2000);
		username.clear();
		Thread.sleep(2000);
		username.sendKeys(unamelt);
		getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

	/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
		password.click();
		Thread.sleep(2000);
		password.clear();*/
		Thread.sleep(2000);
		password.sendKeys(pawslt);

		String compname="Account Properties And Customization";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		int zqSize=cSize+1;

		System.out.println("CompanyDropdownList Count :"+cqSize);

		System.out.println("Company dropdown is :"+ zqSize);


		//Select dropdown= new Select(lp.companyDropDownList);
		int i;

		//List<WebElement> list = dropdown.getOptions();

		//List<String> text = new ArrayList<>();
		for(i=0; i<elementCount.size(); i++) 
		{
			elementCount.get(i).getText();
			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}	
		}


		lp.clickOnSignInBtn();

		reLogin(unamelt, pawslt, compname);
		//checkRefershPopOnlogin();

		//checkPopUpWindow();

		Thread.sleep(8000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameTxt));
		userNameTxt.click();

		String userInfo=userNameTxt.getText();

		System.out.println("User Info : "+userInfo);

		System.out.println("User Info Capture Text :"+userNameTxt.getText());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogoImg));

		companyLogoImg.click();

		String getCompanyTxt=companyName.getText();
		String getLoginCompanyName=getCompanyTxt.substring(0, 36);
		System.out.println("company name :"+ getLoginCompanyName);
		companyLogoImg.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dashboardName));

		String getDashboard=dashboardName.getText();

		System.out.println(getDashboard);


		String expuserInfo            ="SU";
		String expLoginCompanyName    ="Account Properties And Customization";
		String expDashboard			  ="Graph with Active and setAsDefault";


		System.out.println("***********************************checkLogoutAndLoginAfterEnablingMandatoryCheckboxInFieldsProperties*********************************");

		System.out.println("User Info                        : "+userInfo               +"  value expected  "+expuserInfo);
		System.out.println("Login Company Name               : "+getLoginCompanyName    +"  value expected  "+expLoginCompanyName);
		System.out.println("Dashboard                        : "+getDashboard           +"  value expected  "+expDashboard);


		if(/*userInfo.equalsIgnoreCase(expuserInfo) &&*/ getLoginCompanyName.equalsIgnoreCase(expLoginCompanyName))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}

	@FindBy(xpath="(//input[@id='CreateTabPictureFieldName'])[1]")
	public static WebElement accountHeaderCreateTabAddedPictureName;

	@FindBy(xpath="//*[@id='btnMasterSaveClick']/i")
	public static WebElement accountSaveBtnn;

	@FindBy(xpath="//*[@id='GenerateNewMasterModel']/div/div[1]/div[2]/div/ul/li[2]/button[6]")
	public static WebElement accountCloseBtnn;

	@FindBy(xpath="//*[@id='GenerateNewMasterModel']/div/div[1]/div[2]/div/ul/li[2]/button[5]")
	public static WebElement accountCloseBtnInGroup;

	@FindBy(xpath="//*[@id='divBtnGroup6']/div/a")
	public static WebElement accountCreateTabTab;


	public static boolean checkHiddenFieldsAreDisplayingInCreateTab() throws InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));	
		masterNewBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("HiddAccount");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("HiddCode");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTab));
		accountHeaderCreateTab.click();

		Thread.sleep(2000);



		boolean actCreateTabTextFieldValue=accountHeaderCreateTabTextFieldTxt.isDisplayed();
		boolean expCreateTabTextFieldValue= false;

		boolean actCreateTabNumberFieldValue=accountHeaderCreateTabNumberFieldTxt.isDisplayed();
		boolean expCreateTabNumberFieldValue= false;

		boolean actCreateTabBooleanFieldValue=accountHeaderCreateTabBooleanFieldChkbox.isDisplayed();
		boolean expCreateTabBooleanFieldValue= false;

		boolean actCreateTabDateTimeFieldValue=accountHeaderCreateTabDateTimeField.isDisplayed();
		boolean expCreateTabDateTimeFieldValue= false;

		boolean actCreateTabDateFieldValue=accountHeaderCreateTabDateField.isDisplayed();
		boolean expCreateTabDateFieldValue= false;

		boolean actCreateTabTimeFieldValue=accountHeaderCreateTabTimeFieldTxt.isDisplayed();
		boolean expCreateTabTimeFieldValue= false;

		boolean actCreateTabFractionFieldValue=accountHeaderCreateTabFractionFieldTxt.isDisplayed();
		boolean expCreateTabFractionFieldValue= false;

		boolean actCreateTabPictureBrowseBtnValue=accountHeaderCreateTabPictureFieldBrowseBtn.isDisplayed();
		boolean expCreateTabPictureBrowseBtnValue= false;

		boolean actCreateTabPictureSaveBtnValue=accountHeaderCreateTabPictureFieldSaveBtn.isDisplayed();
		boolean expCreateTabPictureSaveBtnValue= false;

		boolean actCreatTabPictureFieldDeleteBtnValue=accountHeaderCreateTabPictureFieldDeleteBtn.isDisplayed();
		boolean expCreatTabPictureFieldDeleteBtnValue= false;

		boolean actCreateTabStringListValue=accountHeaderCreateTabStringListFieldDropdown.isDisplayed();
		boolean expCreateTabStringListValue= false;

		boolean actCreateTabDocumentViewerValue=accountHeaderCreateTabDocumentViewerField.isDisplayed();
		boolean expCreateTabDocumentViewerValue= false;

		boolean actCreateTabDocumentViewerBrowseBtnValue=accountHeaderCreateTabDocumentViewerBrowseBtn.isDisplayed();
		boolean expCreateTabDocumentViewerBrowseBtnValue= false;

		boolean actCreatTabPictureFieldSaveBtnValue=accountHeaderCreateTabDocumentViewerSaveBtn.isDisplayed();
		boolean expCreatTabPictureFieldSaveBtnValue= false;

		boolean actCreateTabNumberListValue=accountHeaderCreateTabNumberListFieldDropdown.isDisplayed();
		boolean expCreateTabNumberListValue= false;


		/*boolean actCreateTabMasterFieldDropDownValue=accountHeaderCreateTabMasterFieldDropdown.isDisplayed();
		boolean expCreateTabMasterFieldDropDownValue= false;*/

		boolean actCreateTabBigNumberFiledValue=accountHeaderCreateTabBigNumberField.isDisplayed();
		boolean expCreateTabBigNumberFiledValue= false;

		/* boolean actCreateTabExternalFiledDropdownValue=accountHeaderCreateTabExternalFieldDropdown.isDisplayed();
		 boolean expCreateTabExternalFiledDropdownValue= false;*/

		boolean actCreateTabSmallNumberField=accountHeaderCreateTabSmallNumberField.isDisplayed();
		boolean expCreateTabSmallNumberField= false;


		boolean actCreateTabTinyNumberField=accountHeaderCreateTabTinyNumberField.isDisplayed();
		boolean expCreateTabTinyNumberField= false;

		boolean actCreateTabGregorianDateField=accountHeaderCreateTabGregorianDateField.isDisplayed();
		boolean expCreateTabGregorianDateField= false;

		boolean actCreateTabHijriDateField=accountHeaderCreateTabHijriFieldDate.isDisplayed();
		boolean expCreateTabHijriDateField= false;



		Thread.sleep(2000);
		System.out.println("************************************checkHiddenFieldsAreDisplayingInCreateTab***********************************************");

		System.out.println("TextField            : 		"+actCreateTabTextFieldValue				+"  Value Expected  "+expCreateTabTextFieldValue);
		System.out.println("NumbertField       	 : 		"+actCreateTabNumberFieldValue				+"  Value Expected  "+expCreateTabNumberFieldValue);
		System.out.println("BooleanField         : 		"+actCreateTabBooleanFieldValue				+"  Value Expected  "+expCreateTabBooleanFieldValue);
		System.out.println("DateTimeField        :		"+actCreateTabDateTimeFieldValue			+"  Value Expected  "+expCreateTabDateTimeFieldValue);
		System.out.println("DateField            : 		"+actCreateTabDateFieldValue				+"  Value Expected  "+expCreateTabDateFieldValue);
		System.out.println("TimeField            : 		"+actCreateTabTimeFieldValue				+"  Value Expected  "+expCreateTabTimeFieldValue);
		System.out.println("FractionField        : 		"+actCreateTabFractionFieldValue			+"  Value Expected  "+expCreateTabFractionFieldValue);
		System.out.println("PictureField         : 		"+actCreateTabPictureBrowseBtnValue			+"  Value Expected  "+expCreateTabPictureBrowseBtnValue);
		System.out.println("StringListField      : 		"+actCreateTabStringListValue				+"  Value Expected  "+expCreateTabStringListValue);
		System.out.println("NumberListField      : 		"+actCreateTabNumberListValue				+"  Value Expected  "+expCreateTabNumberListValue);
		System.out.println("DocumentViewerField  : 		"+actCreateTabDocumentViewerValue			+"  Value Expected  "+expCreateTabDocumentViewerValue);
	/*	System.out.println("MasterField          : 		"+actCreateTabMasterFieldDropDownValue		+"  Value Expected  "+expCreateTabMasterFieldDropDownValue);*/
		System.out.println("BigNumberField       : 		"+actCreateTabBigNumberFiledValue			+"  Value Expected  "+expCreateTabBigNumberFiledValue);
		System.out.println("SmallNumberField     :		"+actCreateTabSmallNumberField				+"  Value Expected  "+expCreateTabSmallNumberField);
		System.out.println("TinyNumberField      : 		"+actCreateTabTinyNumberField				+"  Value Expected  "+expCreateTabTinyNumberField);
		System.out.println("GregorianField       : 		"+actCreateTabGregorianDateField			+"  Value Expected  "+expCreateTabGregorianDateField);
		System.out.println("HijriField           : 		"+actCreateTabHijriDateField				+"  Value Expected  "+actCreateTabHijriDateField);



		if(actCreateTabTextFieldValue==expCreateTabTextFieldValue && actCreateTabNumberFieldValue==expCreateTabNumberFieldValue 
				&& actCreateTabBooleanFieldValue==expCreateTabBooleanFieldValue && /*actCreateTabDateTimeFieldValue==expCreateTabDateTimeFieldValue 
			&& actCreateTabDateFieldValue==expCreateTabDateFieldValue && actCreateTabTimeFieldValue==expCreateTabTimeFieldValue 
			&& */actCreateTabFractionFieldValue==expCreateTabFractionFieldValue && actCreateTabPictureBrowseBtnValue==expCreateTabPictureBrowseBtnValue 
			&& actCreateTabStringListValue==expCreateTabStringListValue && actCreateTabNumberListValue==expCreateTabNumberListValue 
			&& actCreateTabDocumentViewerValue==expCreateTabDocumentViewerValue /*&& actCreateTabMasterFieldDropDownValue==expCreateTabMasterFieldDropDownValue */
			&& actCreateTabBigNumberFiledValue==expCreateTabBigNumberFiledValue && actCreateTabSmallNumberField==expCreateTabSmallNumberField 
			&& actCreateTabTinyNumberField==expCreateTabTinyNumberField /*&& actCreateTabGregorianDateField==expCreateTabGregorianDateField 
			&& actCreateTabHijriDateField==actCreateTabHijriDateField*/)
		{	
			return true;
		}	 
		else
		{
			return false;
		}

	}



	public static boolean checkCreateTabEnableHiddenCheckboxInShasmiFieldProperties() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterFieldsCreateTab));
		masterFieldsCreateTab.click();

		Thread.sleep(2000);

		int count = CreateTabfieldCaptionTxtList.size();


		//Shamsi Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_ShamsiField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMandatoryInGroupChekbox));

		if (extraFields_PropertiesMandatoryInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMandatoryInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));
		extraFields_PropertiesHiddenChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expShamsiFieldMsg = "Field Updated Successfully";
		String actShamsiFieldMsg = checkValidationMessage(expShamsiFieldMsg);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtnInCreateTabCustomizeMasetrWarehouse));
		closeBtnInCreateTabCustomizeMasetrWarehouse.click();

		System.out.println("***********************************checkCreateTabEnableHiddenCheckboxInShasmiFieldProperties*********************************");

		System.out.println("ShamsiFieldMsg          : "+actShamsiFieldMsg			+"  Value Expected  "+expShamsiFieldMsg);

		if(actShamsiFieldMsg.equalsIgnoreCase(expShamsiFieldMsg))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}









	public static boolean checkCreateTabIsHiddenInAccount() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));	
		masterNewBtn.click();

		Thread.sleep(2000);

		boolean actCreateTabValue = accountHeaderCreateTab.isDisplayed();
		boolean expCreateTabValue = false;

		System.out.println("accountHeaderCreateTab  : "+actCreateTabValue+"  Value Expected  "+expCreateTabValue);

		if (actCreateTabValue==expCreateTabValue) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}











	public static boolean checkEnableHiddenInGroupCheckboxInAllFieldsProperties() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterFieldsCreateTab));
		masterFieldsCreateTab.click();

		Thread.sleep(2000);

		int count = CreateTabfieldCaptionTxtList.size();

		//Text Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_TextField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));

		if (extraFields_PropertiesHiddenChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));
		extraFields_PropertiesHiddenInGroupChekbox.click();

		extraFields_OkBtn.click();

		String expTextFieldMsg = "Field Updated Successfully";
		String actTextFieldMsg = checkValidationMessage(expTextFieldMsg);



		//Number Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_NumberField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));

		if (extraFields_PropertiesHiddenChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));
		extraFields_PropertiesHiddenInGroupChekbox.click();

		extraFields_OkBtn.click();

		String expNumberFieldMsg = "Field Updated Successfully";
		String actNumbertFieldMsg = checkValidationMessage(expNumberFieldMsg);

		//Boolean Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_BooleanField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));

		if (extraFields_PropertiesHiddenChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));
		extraFields_PropertiesHiddenInGroupChekbox.click();

		extraFields_OkBtn.click();

		String expBooleanFieldMsg = "Field Updated Successfully";
		String actBooleanFieldMsg = checkValidationMessage(expBooleanFieldMsg);

		//DateTime Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_DateTimeField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));

		if (extraFields_PropertiesHiddenChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));
		extraFields_PropertiesHiddenInGroupChekbox.click();

		extraFields_OkBtn.click();

		String expDateTimeFieldMsg = "Field Updated Successfully";
		String actDateTimeFieldMsg = checkValidationMessage(expDateTimeFieldMsg);

		//Date Field


		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_DateField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));

		if (extraFields_PropertiesHiddenChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));
		extraFields_PropertiesHiddenInGroupChekbox.click();

		extraFields_OkBtn.click();

		String expDateFieldMsg = "Field Updated Successfully";
		String actDateFieldMsg = checkValidationMessage(expDateFieldMsg);

		//Time field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_TimeField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));

		if (extraFields_PropertiesHiddenChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));
		extraFields_PropertiesHiddenInGroupChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expTimeFieldMsg = "Field Updated Successfully";
		String actTimeFieldMsg = checkValidationMessage(expTimeFieldMsg);

		//Fraction Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_FractionField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));

		if (extraFields_PropertiesHiddenChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));
		extraFields_PropertiesHiddenInGroupChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expFractionFieldMsg = "Field Updated Successfully";
		String actFractionFieldMsg = checkValidationMessage(expFractionFieldMsg);

		//Picture Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_PictureField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));

		if (extraFields_PropertiesHiddenChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));
		extraFields_PropertiesHiddenInGroupChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expPictureFieldMsg = "Field Updated Successfully";
		String actPictureFieldMsg = checkValidationMessage(expPictureFieldMsg);

		//String List Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_StringListField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));

		if (extraFields_PropertiesHiddenChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));
		extraFields_PropertiesHiddenInGroupChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expStringListFieldMsg = "Field Updated Successfully";
		String actStringListFieldMsg = checkValidationMessage(expStringListFieldMsg);

		//Number List

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_NumberListField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));

		if (extraFields_PropertiesHiddenChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));
		extraFields_PropertiesHiddenInGroupChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expNumberListFieldMsg = "Field Updated Successfully";
		String actNumberListFieldMsg = checkValidationMessage(expNumberListFieldMsg);

		//DocumentViewer Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_DocumentViewerField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));

		if (extraFields_PropertiesHiddenChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));
		extraFields_PropertiesHiddenInGroupChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expDocumentViewerFieldMsg = "Field Updated Successfully";
		String actDocumentViewerFieldMsg = checkValidationMessage(expDocumentViewerFieldMsg);

		//Master Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_MasterField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));

		if (extraFields_PropertiesHiddenChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));
		extraFields_PropertiesHiddenInGroupChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMasterFieldMsg = "Field Updated Successfully";
		String actMasterFieldMsg = checkValidationMessage(expMasterFieldMsg);

		//BigNumber Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_BigNumberField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));

		if (extraFields_PropertiesHiddenChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));
		extraFields_PropertiesHiddenInGroupChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expBigNumberFieldMsg = "Field Updated Successfully";
		String actBigNumberFieldMsg = checkValidationMessage(expBigNumberFieldMsg);

		/*
				//External Table Field

				for (int i = 0; i < count; i++) 
				{
					String data = CreateTabfieldCaptionTxtList.get(i).getText();

					if (data.equalsIgnoreCase("CreateTab_ExternalTableField")) 
					{
						CreateTabeditFieldList.get(i).click();
						break;
					} 
				}

				Thread.sleep(2000);

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
				extraFields_PropertiesTab.click();

				Thread.sleep(2000);

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));

				if (extraFields_PropertiesHiddenChekbox.isSelected()==true) 
				{
					extraFields_PropertiesHiddenChekbox.click();
				}

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));
				extraFields_PropertiesHiddenInGroupChekbox.click();

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
				extraFields_OkBtn.click();

				String expExternalTableFieldMsg = "Field Updated Successfully";
				String actExternalTableFieldMsg = checkValidationMessage(expExternalTableFieldMsg);*/

		//Small Number Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_SmallNumberField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));

		if (extraFields_PropertiesHiddenChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));
		extraFields_PropertiesHiddenInGroupChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expSmallNumberFieldMsg = "Field Updated Successfully";
		String actSmallNumberFieldMsg = checkValidationMessage(expSmallNumberFieldMsg);

		//Tiny Number field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_TinyNumberField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));

		if (extraFields_PropertiesHiddenChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));
		extraFields_PropertiesHiddenInGroupChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();
		
		Thread.sleep(2000);


		String expTinyNumberFieldMsg = "Field Updated Successfully";
		String actTinyNumberFieldMsg = checkValidationMessage(expTinyNumberFieldMsg);

		//Gregirian Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_GregorianField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));

		if (extraFields_PropertiesHiddenChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));
		extraFields_PropertiesHiddenInGroupChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();
		Thread.sleep(2000);


		String expGregorianFieldMsg = "Field Updated Successfully";
		String actGregorianFieldMsg = checkValidationMessage(expGregorianFieldMsg);

		//Hijri Field 

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_HijriField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));

		if (extraFields_PropertiesHiddenChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));
		extraFields_PropertiesHiddenInGroupChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();
		Thread.sleep(2000);


		String expHijriFieldMsg = "Field Updated Successfully";
		String actHijriFieldMsg = checkValidationMessage(expHijriFieldMsg);

		//Shamsi Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_ShamsiField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenChekbox));

		if (extraFields_PropertiesHiddenChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));
		extraFields_PropertiesHiddenInGroupChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();
		
		Thread.sleep(2000);
		String expShamsiFieldMsg = "Field Updated Successfully";
		String actShamsiFieldMsg = checkValidationMessage(expShamsiFieldMsg);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtnInCreateTabCustomizeMasetrWarehouse));
		closeBtnInCreateTabCustomizeMasetrWarehouse.click();

		System.out.println("***********************************checkEnableHiddenCheckboxInAllFieldsProperties*********************************");

		System.out.println("TextFieldMsg            : "+actTextFieldMsg				+"  Value Expected  "+expTextFieldMsg);
		System.out.println("NumbertFieldMsg         : "+actNumbertFieldMsg			+"  Value Expected  "+expNumberFieldMsg);
		System.out.println("BooleanFieldMsg         : "+actBooleanFieldMsg			+"  Value Expected  "+expBooleanFieldMsg);
		System.out.println("DateTimeFieldMsg        : "+actDateTimeFieldMsg			+"  Value Expected  "+expDateTimeFieldMsg);
		System.out.println("DateFieldMsg            : "+actDateFieldMsg				+"  Value Expected  "+expDateFieldMsg);
		System.out.println("TimeFieldMsg            : "+actTimeFieldMsg				+"  Value Expected  "+expTimeFieldMsg);
		System.out.println("FractionFieldMsg        : "+actFractionFieldMsg			+"  Value Expected  "+expFractionFieldMsg);
		System.out.println("PictureFieldMsg         : "+actPictureFieldMsg			+"  Value Expected  "+expPictureFieldMsg);
		System.out.println("StringListFieldMsg      : "+actStringListFieldMsg		+"  Value Expected  "+expStringListFieldMsg);
		System.out.println("NumberListFieldMsg      : "+actNumberListFieldMsg		+"  Value Expected  "+expNumberListFieldMsg);
		System.out.println("DocumentViewerFieldMsg  : "+actDocumentViewerFieldMsg	+"  Value Expected  "+expDocumentViewerFieldMsg);
		System.out.println("MasterFieldMsg          : "+actMasterFieldMsg			+"  Value Expected  "+expMasterFieldMsg);
		System.out.println("BigNumberFieldMsg       : "+actBigNumberFieldMsg		+"  Value Expected  "+expBigNumberFieldMsg);
		System.out.println("SmallNumberFieldMsg     : "+actSmallNumberFieldMsg		+"  Value Expected  "+expSmallNumberFieldMsg);
		System.out.println("TinyNumberFieldMsg      : "+actTinyNumberFieldMsg		+"  Value Expected  "+expTinyNumberFieldMsg);
		System.out.println("GregorianFieldMsg       : "+actGregorianFieldMsg		+"  Value Expected  "+expGregorianFieldMsg);
		System.out.println("HijriFieldMsg           : "+actHijriFieldMsg			+"  Value Expected  "+expHijriFieldMsg);
		System.out.println("ShamsiFieldMsg          : "+actShamsiFieldMsg			+"  Value Expected  "+expShamsiFieldMsg);

		if(actTextFieldMsg.equalsIgnoreCase(expTextFieldMsg) && actNumbertFieldMsg.equalsIgnoreCase(expNumberFieldMsg) 
				&& actBooleanFieldMsg.equalsIgnoreCase(expBooleanFieldMsg) /*&& actDateTimeFieldMsg.equalsIgnoreCase(expDateTimeFieldMsg) 
				&& actDateFieldMsg.equalsIgnoreCase(expDateFieldMsg) && actTimeFieldMsg.equalsIgnoreCase(expTimeFieldMsg) */
				&& actFractionFieldMsg.equalsIgnoreCase(expFractionFieldMsg) && actPictureFieldMsg.equalsIgnoreCase(expPictureFieldMsg) 
				&& actStringListFieldMsg.equalsIgnoreCase(expStringListFieldMsg) && actNumberListFieldMsg.equalsIgnoreCase(expNumberListFieldMsg) 
				&& actDocumentViewerFieldMsg.equalsIgnoreCase(expDocumentViewerFieldMsg) && actMasterFieldMsg.equalsIgnoreCase(expMasterFieldMsg) 
				&& actBigNumberFieldMsg.equalsIgnoreCase(expBigNumberFieldMsg) && actSmallNumberFieldMsg.equalsIgnoreCase(expSmallNumberFieldMsg) 
				&& actTinyNumberFieldMsg.equalsIgnoreCase(expTinyNumberFieldMsg) && actGregorianFieldMsg.equalsIgnoreCase(expGregorianFieldMsg) 
				&& actHijriFieldMsg.equalsIgnoreCase(expHijriFieldMsg) && actShamsiFieldMsg.equalsIgnoreCase(expShamsiFieldMsg))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}






	public static boolean checkLogoutAndLoginAfterEnablingHiddenInGroupCheckboxInFieldsProperties() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(LogoutDropdown));
		LogoutDropdown.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();

		Thread.sleep(4000);

		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt="su";

		String pawslt="su";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
		username.click();
		Thread.sleep(2000);
		username.clear();
		Thread.sleep(2000);
		username.sendKeys(unamelt);
		getAction().moveToElement(username).sendKeys(Keys.TAB).perform();
/*
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
		password.click();
		Thread.sleep(2000);
		password.clear();*/
		Thread.sleep(2000);
		password.sendKeys(pawslt);


		String compname="Account Properties And Customization";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		int zqSize=cSize+1;

		System.out.println("CompanyDropdownList Count :"+cqSize);

		System.out.println("Company dropdown is :"+ zqSize);


		//Select dropdown= new Select(lp.companyDropDownList);
		int i;

		//List<WebElement> list = dropdown.getOptions();

		//List<String> text = new ArrayList<>();
		for(i=0; i<elementCount.size(); i++) 
		{
			elementCount.get(i).getText();
			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}	
		}
		lp.clickOnSignInBtn();
		
		reLogin(unamelt, pawslt, compname);

		//checkRefershPopOnlogin();

		//checkPopUpWindow();

		Thread.sleep(8000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameTxt));
		userNameTxt.click();

		String userInfo=userNameTxt.getText();

		System.out.println("User Info : "+userInfo);

		System.out.println("User Info Capture Text :"+userNameTxt.getText());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogoImg));

		companyLogoImg.click();

		String getCompanyTxt=companyName.getText();
		String getLoginCompanyName=getCompanyTxt.substring(0, 36);
		System.out.println("company name :"+ getLoginCompanyName);
		companyLogoImg.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dashboardName));

		String getDashboard=dashboardName.getText();

		System.out.println(getDashboard);


		String expuserInfo            ="SU";
		String expLoginCompanyName    ="Account Properties And Customization";
		String expDashboard			  ="Graph with Active and setAsDefault";

		System.out.println("***********************************checkLogoutAndLoginAfterEnablingMandatoryCheckboxInFieldsProperties*********************************");

		System.out.println("User Info                        : "+userInfo               +"  value expected  "+expuserInfo);
		System.out.println("Login Company Name               : "+getLoginCompanyName    +"  value expected  "+expLoginCompanyName);
		System.out.println("Dashboard                        : "+getDashboard           +"  value expected  "+expDashboard);


		if(/*userInfo.equalsIgnoreCase(expuserInfo) &&*/ getLoginCompanyName.equalsIgnoreCase(expLoginCompanyName))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}




	@FindBy(xpath="//*[@id='CreateTabMasterField_input_image']/span")
	public static WebElement accountHeaderCreateTabMasterFieldDropdown;



	public static boolean checkHiddenFieldsAreDisplayingInCreateTabInGroupAccount() throws InterruptedException
	{

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterAddGroupBtn));	
		masterAddGroupBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("HidGrpAccount");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("HidGrpCode");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTab));
		accountHeaderCreateTab.click();

		Thread.sleep(2000);



		boolean actCreateTabTextFieldValue=accountHeaderCreateTabTextFieldTxt.isDisplayed();
		boolean expCreateTabTextFieldValue= false;

		boolean actCreateTabNumberFieldValue=accountHeaderCreateTabNumberFieldTxt.isDisplayed();
		boolean expCreateTabNumberFieldValue= false;

		boolean actCreateTabBooleanFieldValue=accountHeaderCreateTabBooleanFieldChkbox.isDisplayed();
		boolean expCreateTabBooleanFieldValue= false;

		boolean actCreateTabDateTimeFieldValue=accountHeaderCreateTabDateTimeField.isDisplayed();
		boolean expCreateTabDateTimeFieldValue= false;

		boolean actCreateTabDateFieldValue=accountHeaderCreateTabDateField.isDisplayed();
		boolean expCreateTabDateFieldValue= false;

		boolean actCreateTabTimeFieldValue=accountHeaderCreateTabTimeFieldTxt.isDisplayed();
		boolean expCreateTabTimeFieldValue= false;

		boolean actCreateTabFractionFieldValue=accountHeaderCreateTabFractionFieldTxt.isDisplayed();
		boolean expCreateTabFractionFieldValue= false;

		boolean actCreateTabPictureBrowseBtnValue=accountHeaderCreateTabPictureFieldBrowseBtn.isDisplayed();
		boolean expCreateTabPictureBrowseBtnValue= false;


		boolean actCreateTabPictureSaveBtnValue=accountHeaderCreateTabPictureFieldSaveBtn.isDisplayed();
		boolean expCreateTabPictureSaveBtnValue= false;


		boolean actCreatTabPictureFieldDeleteBtnValue=accountHeaderCreateTabPictureFieldDeleteBtn.isDisplayed();
		boolean expCreatTabPictureFieldDeleteBtnValue= false;

		boolean actCreateTabStringListValue=accountHeaderCreateTabStringListFieldDropdown.isDisplayed();
		boolean expCreateTabStringListValue= false;

		boolean actCreateTabDocumentViewerValue=accountHeaderCreateTabDocumentViewerField.isDisplayed();
		boolean expCreateTabDocumentViewerValue= false;


		boolean actCreateTabDocumentViewerBrowseBtnValue=accountHeaderCreateTabDocumentViewerBrowseBtn.isDisplayed();
		boolean expCreateTabDocumentViewerBrowseBtnValue= false;


		boolean actCreatTabPictureFieldSaveBtnValue=accountHeaderCreateTabDocumentViewerSaveBtn.isDisplayed();
		boolean expCreatTabPictureFieldSaveBtnValue= false;


		boolean actCreateTabNumberListValue=accountHeaderCreateTabNumberListFieldDropdown.isDisplayed();
		boolean expCreateTabNumberListValue= false;

/*
		boolean actCreateTabMasterFieldDropDownValue=accountHeaderCreateTabMasterFieldDropdown.isDisplayed();
		boolean expCreateTabMasterFieldDropDownValue= false;*/

		boolean actCreateTabBigNumberFiledValue=accountHeaderCreateTabBigNumberField.isDisplayed();
		boolean expCreateTabBigNumberFiledValue= false;

		/* boolean actCreateTabExternalFiledDropdownValue=accountHeaderCreateTabExternalFieldDropdown.isDisplayed();
		 boolean expCreateTabExternalFiledDropdownValue= false;*/

		boolean actCreateTabSmallNumberField=accountHeaderCreateTabSmallNumberField.isDisplayed();
		boolean expCreateTabSmallNumberField= false;


		boolean actCreateTabTinyNumberField=accountHeaderCreateTabTinyNumberField.isDisplayed();
		boolean expCreateTabTinyNumberField= false;

		boolean actCreateTabGregorianDateField=accountHeaderCreateTabGregorianDateField.isDisplayed();
		boolean expCreateTabGregorianDateField= false;


		boolean actCreateTabHijriDateField=accountHeaderCreateTabHijriFieldDate.isDisplayed();
		boolean expCreateTabHijriDateField= false;



		Thread.sleep(2000);

		System.out.println("**********************************checkHiddenFieldsAreDisplayingInCreateTabInGroupAccountAfterHiddenInGroup****************************************");

		System.out.println("TextField            : 		"+actCreateTabTextFieldValue				+"  Value Expected  "+expCreateTabTextFieldValue);
		System.out.println("NumbertField       	 : 		"+actCreateTabNumberFieldValue				+"  Value Expected  "+expCreateTabNumberFieldValue);
		System.out.println("BooleanField         : 		"+actCreateTabBooleanFieldValue				+"  Value Expected  "+expCreateTabBooleanFieldValue);
		System.out.println("DateTimeField        :		"+actCreateTabDateTimeFieldValue			+"  Value Expected  "+expCreateTabDateTimeFieldValue);
		System.out.println("DateField            : 		"+actCreateTabDateFieldValue				+"  Value Expected  "+expCreateTabDateFieldValue);
		System.out.println("TimeField            : 		"+actCreateTabTimeFieldValue				+"  Value Expected  "+expCreateTabTimeFieldValue);
		System.out.println("FractionField        : 		"+actCreateTabFractionFieldValue			+"  Value Expected  "+expCreateTabFractionFieldValue);
		System.out.println("PictureField         : 		"+actCreateTabPictureBrowseBtnValue			+"  Value Expected  "+expCreateTabPictureBrowseBtnValue);
		System.out.println("StringListField      : 		"+actCreateTabStringListValue				+"  Value Expected  "+expCreateTabStringListValue);
		System.out.println("NumberListField      : 		"+actCreateTabNumberListValue				+"  Value Expected  "+expCreateTabNumberListValue);
		System.out.println("DocumentViewerField  : 		"+actCreateTabDocumentViewerValue			+"  Value Expected  "+expCreateTabDocumentViewerValue);
		/*System.out.println("MasterField          : 		"+actCreateTabMasterFieldDropDownValue		+"  Value Expected  "+expCreateTabMasterFieldDropDownValue);*/
		System.out.println("BigNumberField       : 		"+actCreateTabBigNumberFiledValue			+"  Value Expected  "+expCreateTabBigNumberFiledValue);
		System.out.println("SmallNumberField     :		"+actCreateTabSmallNumberField				+"  Value Expected  "+expCreateTabSmallNumberField);
		System.out.println("TinyNumberField      : 		"+actCreateTabTinyNumberField				+"  Value Expected  "+expCreateTabTinyNumberField);
		System.out.println("GregorianField       : 		"+actCreateTabGregorianDateField			+"  Value Expected  "+expCreateTabGregorianDateField);
		System.out.println("HijriField           : 		"+actCreateTabHijriDateField				+"  Value Expected  "+actCreateTabHijriDateField);



		if(actCreateTabTextFieldValue==expCreateTabTextFieldValue && actCreateTabNumberFieldValue==expCreateTabNumberFieldValue 
				&& actCreateTabBooleanFieldValue==expCreateTabBooleanFieldValue /*&& actCreateTabDateTimeFieldValue==expCreateTabDateTimeFieldValue 
			&& actCreateTabDateFieldValue==expCreateTabDateFieldValue && actCreateTabTimeFieldValue==expCreateTabTimeFieldValue */
				&& actCreateTabFractionFieldValue==expCreateTabFractionFieldValue && actCreateTabPictureBrowseBtnValue==expCreateTabPictureBrowseBtnValue 
				&& actCreateTabStringListValue==expCreateTabStringListValue && actCreateTabNumberListValue==expCreateTabNumberListValue 
				&& actCreateTabDocumentViewerValue==expCreateTabDocumentViewerValue /*&& actCreateTabMasterFieldDropDownValue==expCreateTabMasterFieldDropDownValue */
				&& actCreateTabBigNumberFiledValue==expCreateTabBigNumberFiledValue && actCreateTabSmallNumberField==expCreateTabSmallNumberField 
				&& actCreateTabTinyNumberField==expCreateTabTinyNumberField /*&& actCreateTabGregorianDateField==expCreateTabGregorianDateField 
			&& actCreateTabHijriDateField==actCreateTabHijriDateField*/)
		{	
			return true;
		}	 
		else
		{
			return false;
		}

	}









	public static boolean checkEnableSpellCheckBoxInAllFieldProperties() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterFieldsCreateTab));
		masterFieldsCreateTab.click();

		Thread.sleep(2000);

		int count = CreateTabfieldCaptionTxtList.size();

		//Text Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_TextField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesSpellCheckChekbox));
		extraFields_PropertiesSpellCheckChekbox.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMassUpdateChekbox));
		extraFields_PropertiesMassUpdateChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expTextFieldMsg = "Field Updated Successfully";
		String actTextFieldMsg = checkValidationMessage(expTextFieldMsg);



		//Number Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_NumberField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		extraFields_OkBtn.click();

		String expNumberFieldMsg = "Field Updated Successfully";
		String actNumbertFieldMsg = checkValidationMessage(expNumberFieldMsg);

		//Boolean Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_BooleanField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		extraFields_OkBtn.click();

		String expBooleanFieldMsg = "Field Updated Successfully";
		String actBooleanFieldMsg = checkValidationMessage(expBooleanFieldMsg);

		//DateTime Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_DateTimeField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		extraFields_OkBtn.click();

		String expDateTimeFieldMsg = "Field Updated Successfully";
		String actDateTimeFieldMsg = checkValidationMessage(expDateTimeFieldMsg);

		//Date Field


		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_DateField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		extraFields_OkBtn.click();

		String expDateFieldMsg = "Field Updated Successfully";
		String actDateFieldMsg = checkValidationMessage(expDateFieldMsg);

		//Time field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_TimeField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expTimeFieldMsg = "Field Updated Successfully";
		String actTimeFieldMsg = checkValidationMessage(expTimeFieldMsg);

		//Fraction Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_FractionField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expFractionFieldMsg = "Field Updated Successfully";
		String actFractionFieldMsg = checkValidationMessage(expFractionFieldMsg);

		//Picture Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_PictureField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expPictureFieldMsg = "Field Updated Successfully";
		String actPictureFieldMsg = checkValidationMessage(expPictureFieldMsg);

		//String List Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_StringListField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expStringListFieldMsg = "Field Updated Successfully";
		String actStringListFieldMsg = checkValidationMessage(expStringListFieldMsg);

		//Number List

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_NumberListField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expNumberListFieldMsg = "Field Updated Successfully";
		String actNumberListFieldMsg = checkValidationMessage(expNumberListFieldMsg);

		//DocumentViewer Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_DocumentViewerField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expDocumentViewerFieldMsg = "Field Updated Successfully";
		String actDocumentViewerFieldMsg = checkValidationMessage(expDocumentViewerFieldMsg);

		//Master Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_MasterField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMasterFieldMsg = "Field Updated Successfully";
		String actMasterFieldMsg = checkValidationMessage(expMasterFieldMsg);

		//BigNumber Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_BigNumberField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expBigNumberFieldMsg = "Field Updated Successfully";
		String actBigNumberFieldMsg = checkValidationMessage(expBigNumberFieldMsg);



		//Small Number Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_SmallNumberField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expSmallNumberFieldMsg = "Field Updated Successfully";
		String actSmallNumberFieldMsg = checkValidationMessage(expSmallNumberFieldMsg);

		//Tiny Number field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_TinyNumberField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expTinyNumberFieldMsg = "Field Updated Successfully";
		String actTinyNumberFieldMsg = checkValidationMessage(expTinyNumberFieldMsg);

		//Gregirian Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_GregorianField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expGregorianFieldMsg = "Field Updated Successfully";
		String actGregorianFieldMsg = checkValidationMessage(expGregorianFieldMsg);

		//Hijri Field 

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_HijriField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expHijriFieldMsg = "Field Updated Successfully";
		String actHijriFieldMsg = checkValidationMessage(expHijriFieldMsg);

		//Shamsi Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_ShamsiField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expShamsiFieldMsg = "Field Updated Successfully";
		String actShamsiFieldMsg = checkValidationMessage(expShamsiFieldMsg);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtnInCreateTabCustomizeMasetrWarehouse));
		closeBtnInCreateTabCustomizeMasetrWarehouse.click();

		System.out.println("***********************************checkEnableHiddenCheckboxInAllFieldsProperties*********************************");

		System.out.println("TextFieldMsg            : "+actTextFieldMsg				+"  Value Expected  "+expTextFieldMsg);
		System.out.println("NumbertFieldMsg         : "+actNumbertFieldMsg			+"  Value Expected  "+expNumberFieldMsg);
		System.out.println("BooleanFieldMsg         : "+actBooleanFieldMsg			+"  Value Expected  "+expBooleanFieldMsg);
		System.out.println("DateTimeFieldMsg        : "+actDateTimeFieldMsg			+"  Value Expected  "+expDateTimeFieldMsg);
		System.out.println("DateFieldMsg            : "+actDateFieldMsg				+"  Value Expected  "+expDateFieldMsg);
		System.out.println("TimeFieldMsg            : "+actTimeFieldMsg				+"  Value Expected  "+expTimeFieldMsg);
		System.out.println("FractionFieldMsg        : "+actFractionFieldMsg			+"  Value Expected  "+expFractionFieldMsg);
		System.out.println("PictureFieldMsg         : "+actPictureFieldMsg			+"  Value Expected  "+expPictureFieldMsg);
		System.out.println("StringListFieldMsg      : "+actStringListFieldMsg		+"  Value Expected  "+expStringListFieldMsg);
		System.out.println("NumberListFieldMsg      : "+actNumberListFieldMsg		+"  Value Expected  "+expNumberListFieldMsg);
		System.out.println("DocumentViewerFieldMsg  : "+actDocumentViewerFieldMsg	+"  Value Expected  "+expDocumentViewerFieldMsg);
		System.out.println("MasterFieldMsg          : "+actMasterFieldMsg			+"  Value Expected  "+expMasterFieldMsg);
		System.out.println("BigNumberFieldMsg       : "+actBigNumberFieldMsg		+"  Value Expected  "+expBigNumberFieldMsg);
		System.out.println("SmallNumberFieldMsg     : "+actSmallNumberFieldMsg		+"  Value Expected  "+expSmallNumberFieldMsg);
		System.out.println("TinyNumberFieldMsg      : "+actTinyNumberFieldMsg		+"  Value Expected  "+expTinyNumberFieldMsg);
		System.out.println("GregorianFieldMsg       : "+actGregorianFieldMsg		+"  Value Expected  "+expGregorianFieldMsg);
		System.out.println("HijriFieldMsg           : "+actHijriFieldMsg			+"  Value Expected  "+expHijriFieldMsg);
		System.out.println("ShamsiFieldMsg          : "+actShamsiFieldMsg			+"  Value Expected  "+expShamsiFieldMsg);

		if(actTextFieldMsg.equalsIgnoreCase(expTextFieldMsg) && actNumbertFieldMsg.equalsIgnoreCase(expNumberFieldMsg) 
				&& actBooleanFieldMsg.equalsIgnoreCase(expBooleanFieldMsg)/* && actDateTimeFieldMsg.equalsIgnoreCase(expDateTimeFieldMsg) 
			&& actDateFieldMsg.equalsIgnoreCase(expDateFieldMsg) && actTimeFieldMsg.equalsIgnoreCase(expTimeFieldMsg) */
				&& actFractionFieldMsg.equalsIgnoreCase(expFractionFieldMsg) && actPictureFieldMsg.equalsIgnoreCase(expPictureFieldMsg) 
				&& actStringListFieldMsg.equalsIgnoreCase(expStringListFieldMsg) && actNumberListFieldMsg.equalsIgnoreCase(expNumberListFieldMsg) 
				&& actDocumentViewerFieldMsg.equalsIgnoreCase(expDocumentViewerFieldMsg) && actMasterFieldMsg.equalsIgnoreCase(expMasterFieldMsg) 
				&& actBigNumberFieldMsg.equalsIgnoreCase(expBigNumberFieldMsg) && actSmallNumberFieldMsg.equalsIgnoreCase(expSmallNumberFieldMsg) 
				&& actTinyNumberFieldMsg.equalsIgnoreCase(expTinyNumberFieldMsg) && actGregorianFieldMsg.equalsIgnoreCase(expGregorianFieldMsg) 
				&& actHijriFieldMsg.equalsIgnoreCase(expHijriFieldMsg) && actShamsiFieldMsg.equalsIgnoreCase(expShamsiFieldMsg))
		{	
			return true;
		}	 
		else
		{
			return false;
		}



	}









	public static boolean checkEnableMassUpdateCheckBoxInAllFieldProperties() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(3000);
		getDriver().navigate().refresh();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterFieldsCreateTab));
		masterFieldsCreateTab.click();

		Thread.sleep(2000);
		
		////////
		
		int count = CreateTabfieldCaptionTxtList.size();
		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_TextField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}
		
		

		if (extraFields_PropertiesMassUpdateChekboxSelected.isSelected()==false) 
		{
			extraFields_PropertiesMassUpdateChekbox.click();
		}
		

		extraFields_OkBtn.click();

		String expTextFieldMsg = "Field Updated Successfully";
		String actTextFieldMsg = checkValidationMessage(expTextFieldMsg);



		//Number Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_NumberField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMassUpdateChekbox));
		extraFields_PropertiesMassUpdateChekbox.click();

		extraFields_OkBtn.click();

		String expNumberFieldMsg = "Field Updated Successfully";
		String actNumbertFieldMsg = checkValidationMessage(expNumberFieldMsg);

		//Boolean Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_BooleanField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		extraFields_OkBtn.click();

		String expBooleanFieldMsg = "Field Updated Successfully";
		String actBooleanFieldMsg = checkValidationMessage(expBooleanFieldMsg);

		//DateTime Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_DateTimeField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		extraFields_OkBtn.click();

		String expDateTimeFieldMsg = "Field Updated Successfully";
		String actDateTimeFieldMsg = checkValidationMessage(expDateTimeFieldMsg);

		//Date Field


		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_DateField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		extraFields_OkBtn.click();

		String expDateFieldMsg = "Field Updated Successfully";
		String actDateFieldMsg = checkValidationMessage(expDateFieldMsg);

		//Time field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_TimeField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expTimeFieldMsg = "Field Updated Successfully";
		String actTimeFieldMsg = checkValidationMessage(expTimeFieldMsg);

		//Fraction Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_FractionField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expFractionFieldMsg = "Field Updated Successfully";
		String actFractionFieldMsg = checkValidationMessage(expFractionFieldMsg);

		//Picture Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_PictureField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expPictureFieldMsg = "Field Updated Successfully";
		String actPictureFieldMsg = checkValidationMessage(expPictureFieldMsg);

		//String List Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_StringListField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expStringListFieldMsg = "Field Updated Successfully";
		String actStringListFieldMsg = checkValidationMessage(expStringListFieldMsg);

		//Number List

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_NumberListField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expNumberListFieldMsg = "Field Updated Successfully";
		String actNumberListFieldMsg = checkValidationMessage(expNumberListFieldMsg);

		//DocumentViewer Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_DocumentViewerField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expDocumentViewerFieldMsg = "Field Updated Successfully";
		String actDocumentViewerFieldMsg = checkValidationMessage(expDocumentViewerFieldMsg);

		//Master Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_MasterField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMasterFieldMsg = "Field Updated Successfully";
		String actMasterFieldMsg = checkValidationMessage(expMasterFieldMsg);

		//BigNumber Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_BigNumberField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expBigNumberFieldMsg = "Field Updated Successfully";
		String actBigNumberFieldMsg = checkValidationMessage(expBigNumberFieldMsg);



		//Small Number Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_SmallNumberField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expSmallNumberFieldMsg = "Field Updated Successfully";
		String actSmallNumberFieldMsg = checkValidationMessage(expSmallNumberFieldMsg);

		//Tiny Number field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_TinyNumberField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expTinyNumberFieldMsg = "Field Updated Successfully";
		String actTinyNumberFieldMsg = checkValidationMessage(expTinyNumberFieldMsg);

		//Gregirian Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_GregorianField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expGregorianFieldMsg = "Field Updated Successfully";
		String actGregorianFieldMsg = checkValidationMessage(expGregorianFieldMsg);

		//Hijri Field 

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_HijriField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expHijriFieldMsg = "Field Updated Successfully";
		String actHijriFieldMsg = checkValidationMessage(expHijriFieldMsg);

		//Shamsi Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_ShamsiField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesHiddenInGroupChekbox));

		if (extraFields_PropertiesHiddenInGroupChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesHiddenInGroupChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expShamsiFieldMsg = "Field Updated Successfully";
		String actShamsiFieldMsg = checkValidationMessage(expShamsiFieldMsg);
		
		

		System.out.println("***********************************checkEnableHiddenCheckboxInAllFieldsProperties*********************************");

		System.out.println("TextFieldMsg            : "+actTextFieldMsg				+"  Value Expected  "+expTextFieldMsg);
		System.out.println("NumbertFieldMsg         : "+actNumbertFieldMsg			+"  Value Expected  "+expNumberFieldMsg);
		System.out.println("BooleanFieldMsg         : "+actBooleanFieldMsg			+"  Value Expected  "+expBooleanFieldMsg);
		System.out.println("DateTimeFieldMsg        : "+actDateTimeFieldMsg			+"  Value Expected  "+expDateTimeFieldMsg);
		System.out.println("DateFieldMsg            : "+actDateFieldMsg				+"  Value Expected  "+expDateFieldMsg);
		System.out.println("TimeFieldMsg            : "+actTimeFieldMsg				+"  Value Expected  "+expTimeFieldMsg);
		System.out.println("FractionFieldMsg        : "+actFractionFieldMsg			+"  Value Expected  "+expFractionFieldMsg);
		System.out.println("PictureFieldMsg         : "+actPictureFieldMsg			+"  Value Expected  "+expPictureFieldMsg);
		System.out.println("StringListFieldMsg      : "+actStringListFieldMsg		+"  Value Expected  "+expStringListFieldMsg);
		System.out.println("NumberListFieldMsg      : "+actNumberListFieldMsg		+"  Value Expected  "+expNumberListFieldMsg);
		System.out.println("DocumentViewerFieldMsg  : "+actDocumentViewerFieldMsg	+"  Value Expected  "+expDocumentViewerFieldMsg);
		System.out.println("MasterFieldMsg          : "+actMasterFieldMsg			+"  Value Expected  "+expMasterFieldMsg);
		System.out.println("BigNumberFieldMsg       : "+actBigNumberFieldMsg		+"  Value Expected  "+expBigNumberFieldMsg);
		System.out.println("SmallNumberFieldMsg     : "+actSmallNumberFieldMsg		+"  Value Expected  "+expSmallNumberFieldMsg);
		System.out.println("TinyNumberFieldMsg      : "+actTinyNumberFieldMsg		+"  Value Expected  "+expTinyNumberFieldMsg);
		System.out.println("GregorianFieldMsg       : "+actGregorianFieldMsg		+"  Value Expected  "+expGregorianFieldMsg);
		System.out.println("HijriFieldMsg           : "+actHijriFieldMsg			+"  Value Expected  "+expHijriFieldMsg);
		System.out.println("ShamsiFieldMsg          : "+actShamsiFieldMsg			+"  Value Expected  "+expShamsiFieldMsg);

		
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtnInCreateTabCustomizeMasetrWarehouse));
		closeBtnInCreateTabCustomizeMasetrWarehouse.click();

		
		if(actTextFieldMsg.equalsIgnoreCase(expTextFieldMsg) && actNumbertFieldMsg.equalsIgnoreCase(expNumberFieldMsg) 
				&& actBooleanFieldMsg.equalsIgnoreCase(expBooleanFieldMsg)/* && actDateTimeFieldMsg.equalsIgnoreCase(expDateTimeFieldMsg) 
			&& actDateFieldMsg.equalsIgnoreCase(expDateFieldMsg) && actTimeFieldMsg.equalsIgnoreCase(expTimeFieldMsg) */
				&& actFractionFieldMsg.equalsIgnoreCase(expFractionFieldMsg) && actPictureFieldMsg.equalsIgnoreCase(expPictureFieldMsg) 
				&& actStringListFieldMsg.equalsIgnoreCase(expStringListFieldMsg) && actNumberListFieldMsg.equalsIgnoreCase(expNumberListFieldMsg) 
				&& actDocumentViewerFieldMsg.equalsIgnoreCase(expDocumentViewerFieldMsg) && actMasterFieldMsg.equalsIgnoreCase(expMasterFieldMsg) 
				&& actBigNumberFieldMsg.equalsIgnoreCase(expBigNumberFieldMsg) && actSmallNumberFieldMsg.equalsIgnoreCase(expSmallNumberFieldMsg) 
				&& actTinyNumberFieldMsg.equalsIgnoreCase(expTinyNumberFieldMsg) && actGregorianFieldMsg.equalsIgnoreCase(expGregorianFieldMsg) 
				&& actHijriFieldMsg.equalsIgnoreCase(expHijriFieldMsg) && actShamsiFieldMsg.equalsIgnoreCase(expShamsiFieldMsg))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}







	@FindBy(xpath="//div[@id='massUpdateModal']//table/tbody/tr/td/label/span")
	public static List<WebElement> massUpdateFieldsChkbox;

	@FindBy(xpath="//div[@id='massUpdateModal']//table/tbody/tr/td/label")
	public static List<WebElement> massUpdateFieldsNames;

	@FindBy(xpath="//*[@id='div4']/div[2]/input")
	public static WebElement massUpdateCreateTabTextFieldTxt;

	@FindBy(xpath="//*[@id='1104_2_AdvanceFilter_']/table/tbody/tr/td[1]/select")
	public static WebElement massUpdateConjunctionDrpdwn; 

	@FindBy(xpath="//*[@id='1104_2_AdvanceFilter_']/table/tbody/tr/td[2]/input")
	public static WebElement massUpdateSelectField; 

	@FindBy(xpath="//div[@id='filterTree_1104_2_AdvanceFilter_']//ul//li/a")
	public static List<WebElement> massUpdateSelectFieldList;

	@FindBy(xpath="//*[@id='1104_2_AdvanceFilter_']/table/tbody/tr/td[3]/select")
	public static WebElement massUpdateSelectOperatorDrpdwn;

	@FindBy(xpath="//*[@id='1104_2_AdvanceFilter_']/table/tbody/tr/td[4]/select")
	public static WebElement massUpdateCompareWithDrpdwn;

	@FindBy(xpath="//*[@id='advancefilter_SelectOptionControl_1104_2']")
	public static WebElement massUpdateValueDrpdwn;

	@FindBy(xpath="//*[@id='div5']/div[2]/input")
	public static WebElement massUpdateCreateTabNumberFieldTxt;

	@FindBy(xpath="//div[@class='form-control innerDiv CreateTabBooleanField']/div[2]/input")
	public static WebElement massUpdateCreateTabBooleanFieldTxt;

	@FindBy(xpath="//input[@id='id_DateTime7_checkbox']")
	public static WebElement massUpdateCreateTabDateTimeChkbox;

	@FindBy(xpath="//input[@id='id_DateTime7']")
	public static WebElement massUpdateCreateTabDateTimeTxt;

	@FindBy(xpath="//input[@id='id_Date8_checkbox']")
	public static WebElement massUpdateCreateTabDateChkbox;

	@FindBy(xpath="//input[@id='id_Date8']")
	public static WebElement massUpdateCreateTabDateTxt;

	@FindBy(xpath="//input[@id='id_Time9']")
	public static WebElement massUpdateCreateTabTimeTxt;


	@FindBy(xpath="//div[@id='div10']/div[2]/input")
	public static WebElement massUpdateCreateTabFractionFieldTxt;


	@FindBy(xpath="//input[@id='uploadBtn']")
	public static WebElement massUpdateCreateTabPictureUploadBtn;

	@FindBy(xpath="//input[@id='uploadBtn2']")
	public static WebElement massUpdateCreateTabDocumentUploadBtn;

	@FindBy(xpath="//*[@id='btnUpdateForMass']/i")
	public static WebElement massUpdateUpdateBtn;

	@FindBy(xpath="//*[@id='divMassUpdate']/ul/li[2]/span/i")
	public static WebElement massUpdateCloseBtn;
	

	@FindBy(xpath="//*[@id='chkHeader5']/following-sibling::span")
	public static WebElement createTabTxtFld;
	

	@FindBy(xpath="//*[@id='chkHeader6']/following-sibling::span")
	public static WebElement createTabNumField;



	public static boolean checkAccountsMassUpdatingFieldsValues() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterMassUpdateBtn));		
		masterMassUpdateBtn.click();

		Thread.sleep(2000);

		createTabTxtFld.click();
		Thread.sleep(2000);
		createTabNumField.click();
		Thread.sleep(2000);
		
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(massUpdateCreateTabTextFieldTxt));
				massUpdateCreateTabTextFieldTxt.sendKeys("MassUpdate");

				Thread.sleep(2000);

				Select conjunction = new Select(massUpdateConjunctionDrpdwn);
				conjunction.selectByValue("0");

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(massUpdateSelectField));
				massUpdateSelectField.click();

				int count1 = massUpdateSelectFieldList.size();

				for (int j = 0; j < count1; j++) 
				{
					String data1 = massUpdateSelectFieldList.get(j).getText();

					if (data1.equalsIgnoreCase("Account Type")) 
					{
						massUpdateSelectFieldList.get(j).click();
						break;
					}
				}


				Select operator = new Select(massUpdateSelectOperatorDrpdwn);
				operator.selectByValue("0");


				Select compareWith = new Select(massUpdateCompareWithDrpdwn);
				compareWith.selectByValue("0");


				Select value = new Select(massUpdateValueDrpdwn);
				value.selectByVisibleText("Assets");
		
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(massUpdateCreateTabNumberFieldTxt));
				massUpdateCreateTabNumberFieldTxt.sendKeys("123");

				Thread.sleep(2000);

		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(massUpdateUpdateBtn));
		massUpdateUpdateBtn.click();

		getWaitForAlert();

		String actAlert1 = getAlert().getText();
		String expAlert1 = "Would you like to Mass Update the selected Fields"; 

		getAlert().accept();


		getWaitForAlert();

		String actAlert2 = getAlert().getText();
		String expAlert2 = "This will Update all the Records for fields selected Are You sure to continue"; 

		getAlert().accept();

		Thread.sleep(4000);

		boolean actMasterSearch = masterSearchTxt.isDisplayed();
		boolean expMasterSearch = true; 

		System.out.println("***********************************checkAccountsMassUpdatingFieldsValues*********************************");

		System.out.println("Alert1  : "+actAlert1+"  Value Expected "+expAlert1);
		System.out.println("Alert2  : "+actAlert2+"  Value Expected "+expAlert2);
		System.out.println("Search is Displaying  : "+actMasterSearch+"  Value Expected "+expMasterSearch);

		if(actAlert1.equalsIgnoreCase(expAlert1) && actAlert2.equalsIgnoreCase(expAlert2) && actMasterSearch==expMasterSearch)
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}









	public static boolean checkOpenAccountsAndValidateFieldValuesUpdatedInMassUpdateMandatoryGroup() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(2000);

		int count = masterGridBodyName.size();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();

			if (data.equalsIgnoreCase("Mandatory Group")) 
			{
				masterGridBodyChkbox.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
		masterEditBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTab));
		accountHeaderCreateTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabTextFieldTxt));
		String actDefaultText = accountHeaderCreateTabTextFieldTxt.getAttribute("value");
		String expDefaultText = "TextField_DefaultValue";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabNumberFieldTxt));
		String actDefaultNumber = accountHeaderCreateTabNumberFieldTxt.getAttribute("value");
		String expDefaultNumber = "3";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabBooleanFieldChkbox));
		boolean actBooleanChkbox = accountHeaderCreateTabBooleanFieldChkbox.isDisplayed();
		boolean expBooleanChkbox = true;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountCloseBtnn));
		accountCloseBtnn.click();

		System.out.println("***********************************checkOpenAccountsAndValidateFieldValuesUpdatedInMassUpdateMandatoryGroup*********************************");

		System.out.println("DefaultText        "+actDefaultText		+"  Value Expected  "+expDefaultText);
		System.out.println("DefaultNumber      "+actDefaultNumber	+"  Value Expected  "+expDefaultNumber);
		System.out.println("BooleanChkbox      "+actBooleanChkbox	+"  Value Expected  "+expBooleanChkbox);


		if(actDefaultText.equalsIgnoreCase(expDefaultText) && actDefaultNumber.equalsIgnoreCase(expDefaultNumber) &&
				actBooleanChkbox==expBooleanChkbox)
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}








	public static boolean checkOpenAccountsAndValidateFieldValuesUpdatedInMassUpdateMandatoryAccount() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		int count = masterGridBodyName.size();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();

			if (data.equalsIgnoreCase("Mandatory Group")) 
			{
				if (masterGridBodyChkbox.get(i).isSelected()==true) 
				{
					masterGridBodyChkbox.get(i).click();
					break;
				}
			}
		}

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();

			if (data.equalsIgnoreCase("Mandatory Account")) 
			{
				masterGridBodyChkbox.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
		masterEditBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTab));
		accountHeaderCreateTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabTextFieldTxt));
		String actDefaultText = accountHeaderCreateTabTextFieldTxt.getAttribute("value");
		String expDefaultText = "TextField_DefaultValue";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabNumberFieldTxt));
		String actDefaultNumber = accountHeaderCreateTabNumberFieldTxt.getAttribute("value");
		String expDefaultNumber = "3";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabBooleanFieldChkbox));
		boolean actBooleanChkbox = accountHeaderCreateTabBooleanFieldChkbox.isDisplayed();
		boolean expBooleanChkbox = true;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountCloseBtnn));
		accountCloseBtnn.click();

		System.out.println("***********************************checkOpenAccountsAndValidateFieldValuesUpdatedInMassUpdateMandatoryAccount*********************************");

		System.out.println("DefaultText        "+actDefaultText		+"  Value Expected  "+expDefaultText);
		System.out.println("DefaultNumber      "+actDefaultNumber	+"  Value Expected  "+expDefaultNumber);
		System.out.println("BooleanChkbox      "+actBooleanChkbox	+"  Value Expected  "+expBooleanChkbox);


		if(actDefaultText.equalsIgnoreCase(expDefaultText) && actDefaultNumber.equalsIgnoreCase(expDefaultNumber) &&
				actBooleanChkbox==expBooleanChkbox)
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}









	public static boolean checkAddFieldAsCannotImportInCreateTabCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getDriver().navigate().refresh();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterFieldsCreateTab));
		masterFieldsCreateTab.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabHeaderDetailsAddFieldsBtn));
		createTabHeaderDetailsAddFieldsBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsTab));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();
		extraFields_FieldDetailsCaption.sendKeys("CreateTab_CannotImport");
		Thread.sleep(1000);
		extraFields_FieldDetailsCaption.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		Select dataTypeDropdown = new Select(extraFields_FieldDetailsDatTypeDropdown);

		dataTypeDropdown.selectByValue("0");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsDefaultValue));
		//extraFields_FieldDetailsDefaultValue.click();
		//extraFields_FieldDetailsDefaultValue.sendKeys("CannotImportField_DefaultValue");
		//extraFields_FieldDetailsDefaultValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsBannerText));
		//extraFields_FieldDetailsBannerText.click();
		//extraFields_FieldDetailsBannerText.sendKeys("CannotImportField_BannerText");
		//extraFields_FieldDetailsBannerText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsToolTipText));
		//extraFields_FieldDetailsToolTipText.click();
		//extraFields_FieldDetailsToolTipText.sendKeys("CannotImportFiled_ToolTipText");
		//extraFields_FieldDetailsToolTipText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMessage = "Field Added Successfully.";
		String actMessage = checkValidationMessage(expMessage);

		if (actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}



	public static boolean checkEnableCannotImportCheckboxInCannotImportField() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterFieldsCreateTab));
		masterFieldsCreateTab.click();

		Thread.sleep(2000);

		int count = CreateTabfieldCaptionTxtList.size();

		//CannotImport Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_CannotImport")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesCannotBeImportedChekbox));
		extraFields_PropertiesCannotBeImportedChekbox.click();

		Thread.sleep(2000);

		extraFields_OkBtn.click();

		String expTextFieldMsg = "Field Updated Successfully";
		String actTextFieldMsg = checkValidationMessage(expTextFieldMsg);

		if(actTextFieldMsg.equalsIgnoreCase(expTextFieldMsg))
		{
			return true;
		}
		else 
		{
			return false;
		}

	}

	public static boolean checkAddFieldAsCannotExportInCreateTabCustomizeMaster() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{	

		Thread.sleep(3000);
		getDriver().navigate().refresh();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterFieldsCreateTab));
		masterFieldsCreateTab.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabHeaderDetailsAddFieldsBtn));
		createTabHeaderDetailsAddFieldsBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsTab));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();
		extraFields_FieldDetailsCaption.sendKeys("CreateTab_CannotExport");
		extraFields_FieldDetailsCaption.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		Select dataTypeDropdown = new Select(extraFields_FieldDetailsDatTypeDropdown);

		dataTypeDropdown.selectByValue("0");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsDefaultValue));
		extraFields_FieldDetailsDefaultValue.click();
		extraFields_FieldDetailsDefaultValue.sendKeys("CannotExportField_DefaultValue");
		extraFields_FieldDetailsDefaultValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsBannerText));
		extraFields_FieldDetailsBannerText.click();
		extraFields_FieldDetailsBannerText.sendKeys("CannotExportField_BannerText");
		extraFields_FieldDetailsBannerText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsToolTipText));
		extraFields_FieldDetailsToolTipText.click();
		extraFields_FieldDetailsToolTipText.sendKeys("CannotExportFiled_ToolTipText");
		extraFields_FieldDetailsToolTipText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMessage = "Field Added Successfully.";
		String actMessage = checkValidationMessage(expMessage);

		if (actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}



	public static boolean checkEnableCannotExportCheckboxInCannotExportField() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException 
	{

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterFieldsCreateTab));
		masterFieldsCreateTab.click();

		Thread.sleep(2000);

		int count = CreateTabfieldCaptionTxtList.size();

		//CannotExport Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_CannotExport")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesCannotBeExportedChekbox));
		extraFields_PropertiesCannotBeExportedChekbox.click();

		Thread.sleep(2000);

		extraFields_OkBtn.click();

		String expTextFieldMsg = "Field Updated Successfully";
		String actTextFieldMsg = checkValidationMessage(expTextFieldMsg);

		if(actTextFieldMsg.equalsIgnoreCase(expTextFieldMsg))
		{
			return true;
		}
		else 
		{
			return false;
		}

	}



	@FindBy(xpath="//*[@id='btnFile']")
	public static WebElement fieldNameInAdvanceMasterImportOrExport;


	@FindBy(xpath="//*[@id='CreateTabCannotImport']")
	public static WebElement cannotImportFieldInCreateTab;

	@FindBy(xpath="//div[@id='AllContentsDiv']/div[8]/ul/li/label")
	public static List<WebElement> createTabheaderFieldsInExportPopup;

	@FindBy(xpath="//*[@id='HeaderDetails_6']/div/div/table/tbody/tr/td[4]")
	public static List<WebElement> createTabHeaderFieldsInCustomizeMaster;


	@FindBy(xpath="//div[@class='clsFieldButtons_MCust_div']//li[@id='btnCloseMasterCutomizationFromMasterScreen']/a/i")
	public static WebElement closeBtnInExtraFields;

	@FindBy(xpath="//*[@id='GenerateNewMasterModel']/div/div[1]/div[2]/div/ul/li[2]/button[5]/i")
	public static WebElement closeButton;


	public static boolean checkCannotExportFieldCheckboxExistsInExportPopup() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		Thread.sleep(3000);
		getDriver().navigate().refresh();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		masterNewBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("ExportAccount");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("ExpCode");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		checkValidationMessage("Saved Successfully");
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeButton));
		closeButton.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(firstCheckBox));
		firstCheckBox.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterFieldsCreateTab));	
		masterFieldsCreateTab.click();


		int noofFieldsInCreateTab = createTabHeaderFieldsInCustomizeMaster.size();
		int expnoofFieldsInCreateTab = 20;
		System.out.println("**No of Fields in createTab** "+noofFieldsInCreateTab);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtnInExtraFields));	

		closeBtnInExtraFields.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterAdvanceMasterImportORExportBtn));		
		masterAdvanceMasterImportORExportBtn.click();
		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(exportBtnInAdvanceMasterImportOrExport));		
		exportBtnInAdvanceMasterImportOrExport.click();

		Thread.sleep(3000);

		int count = tabsListInExportPopUp.size();

		//CreateTab
		for (int i = 0; i < count; i++) 
		{
			String data = tabsListInExportPopUp.get(i).getText();

			if (data.equalsIgnoreCase("Create Tab")) 
			{
				tabsListInExportPopUp.get(i).click();

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerFieldTabInExportPopup));		
				headerFieldTabInExportPopup.click();
				break;
			}

		}

		boolean fieldNotExist = true;

		int createTabHeaderFieldsList = createTabheaderFieldsInExportPopup.size();
		int expcreateTabHeaderFieldsList = 19;

		System.out.println("No.of fields in create tab "+createTabHeaderFieldsList);

		for(int i = 0; i < createTabHeaderFieldsList; i++)
		{
			String data = createTabheaderFieldsInExportPopup.get(i).getText();

			if(data.equalsIgnoreCase("CreateTab_CannotExport"))
			{
				System.out.println("The filed CreateTab_CannotExport Exist");
				fieldNotExist = false;
				break;
			}
		}

		if(fieldNotExist==true && noofFieldsInCreateTab==expnoofFieldsInCreateTab && createTabHeaderFieldsList==expcreateTabHeaderFieldsList)
		{
			return true;
		}	
		else
		{
			return false;
		}



	}



	@FindBy(xpath="(//input[@name='chkRowCheck'])[1]")
	public static WebElement firstCheckBox;

	@FindBy(xpath="(//input[@name='chkRowCheck'])[7]")
	public static WebElement lastCheckbox;

	@FindBy(xpath="//*[@id='btnProformaExportForAdvanceMasterPopUp']/i")
	public static WebElement exportBtnInAdvanceMasterImportOrExport;

	@FindBy(xpath="//*[@id='btnImportDataForAdvanceMasterPopUp']/i")
	public static WebElement importDataBtnInAdvanceMasterImportOrExport; //*[@id="divAdvMasterImportExport"]/ul/li[2]/span[4]/i

	@FindBy(xpath="//*[@id='divAdvMasterImportExport']/ul/li[2]/span[4]/i")
	public static WebElement closeBtnInAdvanceMasterImportOrExport;

	@FindBy(xpath="//ul[@id='ulMasterExportTab']/li")
	public static List<WebElement> tabsListInExportPopUp;

	@FindBy(xpath="//*[@id='ulMasterExportRightTab']/li[1]/a/span")
	//*[@id="ulMasterExportRightTab"]/li[13]/a/span
	public static WebElement mainTabInExportPopup;

	@FindBy(xpath="//*[@id='ulMasterExportRightTab']/li[13]/a/span")
	public static WebElement headerFieldTabInExportPopup;

	@FindBy(xpath="//*[@id='ulMasterExportRightTab']/li[14]/a/span")
	public static WebElement bodyFieldTabInExportPopup;

	@FindBy(xpath="//*[@id='ulMasterExportRightTab']/li[2]/a/span")
	public static WebElement headerTabInExportPopup;

	@FindBy(xpath="//*[@id='btnMasterAdvanceExportSelectAll']")
	public static WebElement selectAllCheckboxInExportPopup;

	@FindBy(xpath="//*[@id='btnMasterAdvanceExport']/i")
	public static WebElement exportBtnInExportPopup;

	@FindBy(xpath="//*[@id='divAdvMasterExport']/ul/li/span[3]/i")
	public static WebElement closeBtnInExportPopup;

	@FindBy(xpath="//select[@id='ddlMasterAdvanceExportType']")
	public static WebElement accountTypeSideDropdown;



	public static boolean checkAdvancedImportOrExportAfterEnablingExportCheckBoxesInCreateTab() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getDriver().navigate().refresh();

		Thread.sleep(3000);

		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\Account.zip");

		if(Efile.exists())
		{
			Efile.delete();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();


		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(firstCheckBox));
		firstCheckBox.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterAdvanceMasterImportORExportBtn));		
		masterAdvanceMasterImportORExportBtn.click();

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(exportBtnInAdvanceMasterImportOrExport));		
		exportBtnInAdvanceMasterImportOrExport.click();

		Thread.sleep(3000);

		int count = tabsListInExportPopUp.size();

		//CreateTab
		for (int i = 0; i < count; i++) 
		{
			String data = tabsListInExportPopUp.get(i).getText();

			if (data.equalsIgnoreCase("Create Tab")) 
			{
				tabsListInExportPopUp.get(i).click();


				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAllCheckboxInExportPopup));		
				selectAllCheckboxInExportPopup.click();
				Thread.sleep(2000);

				break;

			}
		}
		
		Thread.sleep(2000);
		Select exportsc =new Select(accountTypeSideDropdown);
		exportsc.selectByValue("1");
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(exportBtnInExportPopup));		
		exportBtnInExportPopup.click();

		Thread.sleep(8000);

		String actExportedFileName = checkDownloadedFileName(getDriver());
		String expExportedFileName = "Account.zip" ;

		System.out.println("Exported File Name : "+actExportedFileName+"  Value Expected  "+expExportedFileName);

		if (actExportedFileName.equalsIgnoreCase(expExportedFileName))
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}

	public static boolean checkAdvancedImportOrExportAfterEnablingImportCheckBoxesInCreateTab1() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{

		Thread.sleep(2000);
		getDriver().navigate().refresh();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(firstCheckBox));
		firstCheckBox.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterAdvanceMasterImportORExportBtn));		
		masterAdvanceMasterImportORExportBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fieldNameInAdvanceMasterImportOrExport));		
		fieldNameInAdvanceMasterImportOrExport.click();


		Thread.sleep(2000);


		Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\Account.exe");

		Thread.sleep(6000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(importDataBtnInAdvanceMasterImportOrExport));		
		importDataBtnInAdvanceMasterImportOrExport.click();

		Thread.sleep(3000);
		getDriver().navigate().refresh();
		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(2000);

		int count = masterGridBodyName.size();

		ArrayList<String> AccountNames = new ArrayList<String>();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();
			AccountNames.add(data);

			if (data.equalsIgnoreCase("Vendor B Import")) 
			{
				getAction().doubleClick(masterGridBodyChkbox.get(i)).build().perform();
				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTab));
		accountHeaderCreateTab.click();    

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cannotImportFieldInCreateTab));
		boolean actValue = cannotImportFieldInCreateTab.getAttribute("value").isEmpty();
		boolean expValue = true;

		System.out.println("****************Actual Value*******************"+actValue);
		Thread.sleep(2000);

		if (actValue==expValue) 
		{
			return true;
		}
		else
		{
			return false;

		}
	}


	@FindBy(xpath="//*[@id='id_focus_msgbox_title']/div[2]/span")
	public static WebElement serverErrorCloseBtn;

	public static void checkServerErrorMessage()
	{

		try {

			if(serverErrorCloseBtn.isDisplayed()==true)
			{
				Thread.sleep(2000);

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(serverErrorCloseBtn));
				serverErrorCloseBtn.click();

				Thread.sleep(2000);
				getDriver().navigate().refresh();
				Thread.sleep(2000);
				System.err.println("  *********************************************SERVER ERROR MESSAGE DISPLAYED " );
			}

		} catch (Exception e) 
		{

			System.err.println("**********************************  SERVER ERROR MESSAGE  Not DISPLAYED " );
			System.out.println(" Expection  : "+e);

		}
	}



	public static boolean checkAdvancedImportOrExportAfterEnablingExportCheckBoxesInCreateTabAccountTypeAsData() throws InterruptedException
	{


		Thread.sleep(3000);

		File Efile=new File(getBaseDir()+"\\autoIt\\ExportFiles\\Account.zip");

		if(Efile.exists())
		{
			Efile.delete();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();


		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(firstCheckBox));
		firstCheckBox.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterAdvanceMasterImportORExportBtn));		
		masterAdvanceMasterImportORExportBtn.click();

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(exportBtnInAdvanceMasterImportOrExport));		
		exportBtnInAdvanceMasterImportOrExport.click();

		Thread.sleep(3000);

		int count = tabsListInExportPopUp.size();

		//CreateTab
		for (int i = 0; i < count; i++) 
		{
			String data = tabsListInExportPopUp.get(i).getText();

			if (data.equalsIgnoreCase("Create Tab")) 
			{
				tabsListInExportPopUp.get(i).click();


				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAllCheckboxInExportPopup));		
				selectAllCheckboxInExportPopup.click();
				Thread.sleep(2000);

				break;

			}
		}

		/*Select exportsc =new Select(accountTypeSideDropdown);
				exportsc.selectByValue("1");
				Thread.sleep(2000);*/

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(exportBtnInExportPopup));		
		exportBtnInExportPopup.click();

		Thread.sleep(8000);

		String actExportedFileName = checkDownloadedFileName(getDriver());
		String expExportedFileName = "Account.zip" ;

		System.out.println("Exported File Name : "+actExportedFileName+"  Value Expected  "+expExportedFileName);

		Thread.sleep(3000);

		getDriver().navigate().refresh();
		Thread.sleep(2000);

		
		if (actExportedFileName.equalsIgnoreCase(expExportedFileName))
		{
			return true;
		} 
		else 
		{
			checkServerErrorMessage();
			return false;
		}
	}





	public static boolean checkEnableReadOnlyCheckBoxInFieldProperties() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(1999);

		getDriver().navigate().refresh();
		Thread.sleep(1999);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterFieldsCreateTab));
		masterFieldsCreateTab.click();

		Thread.sleep(2000);

		int count = CreateTabfieldCaptionTxtList.size();

		//Text Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_TextField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMassUpdateChekbox));

		if (extraFields_PropertiesMassUpdateChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMassUpdateChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesReadOnlyChekbox));
		extraFields_PropertiesReadOnlyChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expTextFieldMsg = "Field Updated Successfully";
		String actTextFieldMsg = checkValidationMessage(expTextFieldMsg);




		//Number Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_NumberField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesMassUpdateChekbox));

		if (extraFields_PropertiesMassUpdateChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesMassUpdateChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesReadOnlyChekbox));
		extraFields_PropertiesReadOnlyChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expNumberFieldMsg = "Field Updated Successfully";
		String actNumbertFieldMsg = checkValidationMessage(expNumberFieldMsg);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtnInCreateTabCustomizeMasetrWarehouse));
		closeBtnInCreateTabCustomizeMasetrWarehouse.click();


		System.out.println("***********************************checkEnableReadOnlyCheckBoxInFieldProperties*********************************");

		System.out.println("TextFieldMsg            : "+actTextFieldMsg				+"  Value Expected  "+expTextFieldMsg);
		System.out.println("NumbertFieldMsg         : "+actNumbertFieldMsg			+"  Value Expected  "+expNumberFieldMsg);

		if(actTextFieldMsg.equalsIgnoreCase(expTextFieldMsg) && actNumbertFieldMsg.equalsIgnoreCase(expNumberFieldMsg))
		{	
			return true;
		}	 
		else


		{
			checkServerErrorMessage();
			return false;
		}
	}









	public static boolean checkOpenAccountsAndValidateFieldsWithReadOnlyOptionInMandatoryGroup() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		getAction().moveToElement(homeMenu).click().build().perform();		

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(2000);

		int count = masterGridBodyName.size();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();

			if (data.equalsIgnoreCase("Mandatory Group")) 
			{
				masterGridBodyChkbox.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
		masterEditBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTab));
		accountHeaderCreateTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabTextFieldTxt));
		accountHeaderCreateTabTextFieldTxt.click();
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.HOME);
		accountHeaderCreateTabTextFieldTxt.sendKeys("ReadOnly");
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.TAB);
		String actDefaultText = accountHeaderCreateTabTextFieldTxt.getAttribute("value");
		String expDefaultText = "MassUpdate";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabNumberFieldTxt));
		accountHeaderCreateTabNumberFieldTxt.click();
		accountHeaderCreateTabNumberFieldTxt.sendKeys(Keys.HOME);
		accountHeaderCreateTabNumberFieldTxt.sendKeys("12345");
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.TAB);
		String actDefaultNumber = accountHeaderCreateTabNumberFieldTxt.getAttribute("value");
		String expDefaultNumber = "123";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountCloseBtnn));
		accountCloseBtnn.click();

		System.out.println("***********************************checkOpenAccountsAndValidateFieldsWithReadOnlyOptionInMandatoryGroup*********************************");

		System.out.println("DefaultText        "+actDefaultText		+"  Value Expected  "+expDefaultText);
		System.out.println("DefaultNumber      "+actDefaultNumber	+"  Value Expected  "+expDefaultNumber);


		if(actDefaultText.equalsIgnoreCase(expDefaultText) && actDefaultNumber.equalsIgnoreCase(expDefaultNumber))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}






	public static boolean checkOpenAccountsAndValidateFieldsWithReadOnlyOptionInMandatoryAccount() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		int count = masterGridBodyName.size();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();

			if (data.equalsIgnoreCase("Mandatory Group")) 
			{
				if (masterGridBodyChkbox.get(i).isSelected()==true) 
				{
					masterGridBodyChkbox.get(i).click();
					break;
				}
			}
		}

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();

			if (data.equalsIgnoreCase("Mandatory Account")) 
			{
				masterGridBodyChkbox.get(i).click();
				break;
			}
		}

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
		masterEditBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTab));
		accountHeaderCreateTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabTextFieldTxt));
		accountHeaderCreateTabTextFieldTxt.click();
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.HOME);
		accountHeaderCreateTabTextFieldTxt.sendKeys("ReadOnly");
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.TAB);
		String actDefaultText = accountHeaderCreateTabTextFieldTxt.getAttribute("value");
		String expDefaultText = "TextField_DefaultValue";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabNumberFieldTxt));
		accountHeaderCreateTabNumberFieldTxt.click();
		accountHeaderCreateTabNumberFieldTxt.sendKeys(Keys.HOME);
		accountHeaderCreateTabNumberFieldTxt.sendKeys("12345");
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.TAB);
		String actDefaultNumber = accountHeaderCreateTabNumberFieldTxt.getAttribute("value");
		String expDefaultNumber = "3";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountCloseBtnn));
		accountCloseBtnn.click();

		System.out.println("***********************************checkOpenAccountsAndValidateFieldsWithReadOnlyOptionInMandatoryAccount*********************************");

		System.out.println("DefaultText        "+actDefaultText		+"  Value Expected  "+expDefaultText);
		System.out.println("DefaultNumber      "+actDefaultNumber	+"  Value Expected  "+expDefaultNumber);

		if(actDefaultText.equalsIgnoreCase(expDefaultText) && actDefaultNumber.equalsIgnoreCase(expDefaultNumber))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}


	public static boolean checkEnableCopyFromParentCheckBoxInFieldProperties() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();



		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterFieldsCreateTab));
		masterFieldsCreateTab.click();

		Thread.sleep(2000);

		int count = CreateTabfieldCaptionTxtList.size();

		//Text Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_TextField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesReadOnlyChekbox));

		if (extraFields_PropertiesReadOnlyChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesReadOnlyChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesCopyFromParentChekbox));
		extraFields_PropertiesCopyFromParentChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expTextFieldMsg = "Field Updated Successfully";
		String actTextFieldMsg = checkValidationMessage(expTextFieldMsg);




		//Number Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_NumberField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesReadOnlyChekbox));

		if (extraFields_PropertiesReadOnlyChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesReadOnlyChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesCopyFromParentChekbox));
		extraFields_PropertiesCopyFromParentChekbox.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expNumberFieldMsg = "Field Updated Successfully";
		String actNumbertFieldMsg = checkValidationMessage(expNumberFieldMsg);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtnInCreateTabCustomizeMasetrWarehouse));
		closeBtnInCreateTabCustomizeMasetrWarehouse.click();


		System.out.println("***********************************checkEnableCopyFromParentCheckBoxInFieldProperties*********************************");

		System.out.println("TextFieldMsg            : "+actTextFieldMsg				+"  Value Expected  "+expTextFieldMsg);
		System.out.println("NumbertFieldMsg         : "+actNumbertFieldMsg			+"  Value Expected  "+expNumberFieldMsg);

		if(actTextFieldMsg.equalsIgnoreCase(expTextFieldMsg) && actNumbertFieldMsg.equalsIgnoreCase(expNumberFieldMsg))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}










	public static boolean checkOpenAccountsAndValidateFieldsValueWithCopyFromParentOptionInMandatoryGroup() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{	
		Thread.sleep(3000);
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		getAction().moveToElement(homeMenu).click().build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(2000);

		int count = masterGridBodyName.size();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();

			if (data.equalsIgnoreCase("Mandatory Group")) 
			{
				masterGridBodyChkbox.get(i).click();
				break;
			}
		}


		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
		masterEditBtn.click();
		
		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTab));
		accountHeaderCreateTab.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabTextFieldTxt));
		String actDefaultText = accountHeaderCreateTabTextFieldTxt.getAttribute("value");
		String expDefaultText = "TextField_DefaultValue";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabNumberFieldTxt));
		String actDefaultNumber = accountHeaderCreateTabNumberFieldTxt.getAttribute("value");
		String expDefaultNumber = "3";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountCloseBtnInGroup));
		accountCloseBtnInGroup.click();

		System.out.println("***********************************checkOpenAccountsAndValidateFieldsValueWithCopyFromParentOptionInMandatoryGroup*********************************");

		System.out.println("DefaultText        "+actDefaultText		+"  Value Expected  "+expDefaultText);
		System.out.println("DefaultNumber      "+actDefaultNumber	+"  Value Expected  "+expDefaultNumber);


		if(actDefaultText.equalsIgnoreCase(expDefaultText) && actDefaultNumber.equalsIgnoreCase(expDefaultNumber))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}









	public static boolean checkEnableInformationFieldCheckBoxInFieldProperties() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		getAction().moveToElement(homeMenu).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();



		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterFieldsCreateTab));
		masterFieldsCreateTab.click();

		Thread.sleep(2000);

		int count = CreateTabfieldCaptionTxtList.size();

		//Text Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_TextField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesCopyFromParentChekbox));

		if (extraFields_PropertiesCopyFromParentChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesCopyFromParentChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesInformationFieldChekbox));
		extraFields_PropertiesInformationFieldChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expTextFieldMsg = "Field Updated Successfully";
		String actTextFieldMsg = checkValidationMessage(expTextFieldMsg);




		//Number Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_NumberField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesCopyFromParentChekbox));

		if (extraFields_PropertiesCopyFromParentChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesCopyFromParentChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesInformationFieldChekbox));
		extraFields_PropertiesInformationFieldChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expNumberFieldMsg = "Field Updated Successfully";
		String actNumbertFieldMsg = checkValidationMessage(expNumberFieldMsg);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtnInCreateTabCustomizeMasetrWarehouse));
		closeBtnInCreateTabCustomizeMasetrWarehouse.click();


		System.out.println("***********************************checkEnableInformationFieldCheckBoxInFieldProperties*********************************");

		System.out.println("TextFieldMsg            : "+actTextFieldMsg				+"  Value Expected  "+expTextFieldMsg);
		System.out.println("NumbertFieldMsg         : "+actNumbertFieldMsg			+"  Value Expected  "+expNumberFieldMsg);

		if(actTextFieldMsg.equalsIgnoreCase(expTextFieldMsg) && actNumbertFieldMsg.equalsIgnoreCase(expNumberFieldMsg))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}









	public static boolean checkOpenAccountsAndValidateFieldsWithInformationFieldOptionInMandatoryGroup() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		getAction().moveToElement(homeMenu).click().build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(2000);

		int count = masterGridBodyName.size();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();

			if (data.equalsIgnoreCase("Mandatory Group")) 
			{
				masterGridBodyChkbox.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
		masterEditBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTab));
		accountHeaderCreateTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabTextFieldTxt));
		accountHeaderCreateTabTextFieldTxt.click();
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.HOME);
		accountHeaderCreateTabTextFieldTxt.sendKeys("ReadOnly");
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.TAB);
		String actDefaultText = accountHeaderCreateTabTextFieldTxt.getAttribute("value");
		String expDefaultText = "TextField_DefaultValue";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabNumberFieldTxt));
		accountHeaderCreateTabNumberFieldTxt.click();
		accountHeaderCreateTabNumberFieldTxt.sendKeys(Keys.HOME);
		accountHeaderCreateTabNumberFieldTxt.sendKeys("12345");
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.TAB);
		String actDefaultNumber = accountHeaderCreateTabNumberFieldTxt.getAttribute("value");
		String expDefaultNumber = "3";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountCloseBtnn));
		accountCloseBtnn.click();

		System.out.println("***********************************checkOpenAccountsAndValidateFieldsWithInformationFieldOptionInMandatoryGroup*********************************");

		System.out.println("DefaultText        "+actDefaultText		+"  Value Expected  "+expDefaultText);
		System.out.println("DefaultNumber      "+actDefaultNumber	+"  Value Expected  "+expDefaultNumber);


		if(actDefaultText.equalsIgnoreCase(expDefaultText) && actDefaultNumber.equalsIgnoreCase(expDefaultNumber))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}






	public static boolean checkOpenAccountsAndValidateFieldsWithInformationFieldOptionInMandatoryAccount() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		int count = masterGridBodyName.size();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();

			if (data.equalsIgnoreCase("Mandatory Group")) 
			{
				if (masterGridBodyChkbox.get(i).isSelected()==true) 
				{
					masterGridBodyChkbox.get(i).click();
					break;
				}
			}
		}

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();

			if (data.equalsIgnoreCase("Mandatory Account")) 
			{
				masterGridBodyChkbox.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterEditBtn));
		masterEditBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTab));
		accountHeaderCreateTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabTextFieldTxt));
		accountHeaderCreateTabTextFieldTxt.click();
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.HOME);
		accountHeaderCreateTabTextFieldTxt.sendKeys("ReadOnly");
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.TAB);
		String actDefaultText = accountHeaderCreateTabTextFieldTxt.getAttribute("value");
		String expDefaultText = "TextField_DefaultValue";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabNumberFieldTxt));
		accountHeaderCreateTabNumberFieldTxt.click();
		accountHeaderCreateTabNumberFieldTxt.sendKeys(Keys.HOME);
		accountHeaderCreateTabNumberFieldTxt.sendKeys("12345");
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.TAB);
		String actDefaultNumber = accountHeaderCreateTabNumberFieldTxt.getAttribute("value");
		String expDefaultNumber = "3";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountCloseBtnn));
		accountCloseBtnn.click();

		System.out.println("***********************************checkOpenAccountsAndValidateFieldsWithInformationFieldOptionInMandatoryAccount*********************************");

		System.out.println("DefaultText        "+actDefaultText		+"  Value Expected  "+expDefaultText);
		System.out.println("DefaultNumber      "+actDefaultNumber	+"  Value Expected  "+expDefaultNumber);

		if(actDefaultText.equalsIgnoreCase(expDefaultText) && actDefaultNumber.equalsIgnoreCase(expDefaultNumber))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}







	public static boolean checkEnableNotAvailableForReportsCheckBoxInFieldProperties() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		getAction().moveToElement(homeMenu).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterFieldsCreateTab));
		masterFieldsCreateTab.click();

		Thread.sleep(2000);

		int count = CreateTabfieldCaptionTxtList.size();

		//Text Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_TextField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesInformationFieldChekbox));

		if (extraFields_PropertiesInformationFieldChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesInformationFieldChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesNotAvailableForReportsChekbox));
		extraFields_PropertiesNotAvailableForReportsChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expTextFieldMsg = "Field Updated Successfully";
		String actTextFieldMsg = checkValidationMessage(expTextFieldMsg);




		//Number Field

		for (int i = 0; i < count; i++) 
		{
			String data = CreateTabfieldCaptionTxtList.get(i).getText();

			if (data.equalsIgnoreCase("CreateTab_NumberField")) 
			{
				CreateTabeditFieldList.get(i).click();
				break;
			} 
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesInformationFieldChekbox));

		if (extraFields_PropertiesInformationFieldChekboxSelected.isSelected()==true) 
		{
			extraFields_PropertiesInformationFieldChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesNotAvailableForReportsChekbox));
		extraFields_PropertiesNotAvailableForReportsChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expNumberFieldMsg = "Field Updated Successfully";
		String actNumbertFieldMsg = checkValidationMessage(expNumberFieldMsg);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtnInCreateTabCustomizeMasetrWarehouse));
		closeBtnInCreateTabCustomizeMasetrWarehouse.click();


		System.out.println("***********************************checkEnableNotAvailableForReportsCheckBoxInFieldProperties*********************************");

		System.out.println("TextFieldMsg            : "+actTextFieldMsg				+"  Value Expected  "+expTextFieldMsg);
		System.out.println("NumbertFieldMsg         : "+actNumbertFieldMsg			+"  Value Expected  "+expNumberFieldMsg);

		if(actTextFieldMsg.equalsIgnoreCase(expTextFieldMsg) && actNumbertFieldMsg.equalsIgnoreCase(expNumberFieldMsg))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}




	@FindBy(xpath="//td[@id='id_header_2_input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
	public static WebElement  dateTxt_CalenderBtn;

	@FindBy(xpath="//tr[@id='id_header_2_day_today']//span[@class='theme_color-inverse'][contains(text(),'Today')]")
	public static WebElement  calender_TodayBtn;


	@FindBy(xpath="//input[@id='id_header_268435460']")
	public static WebElement  warehouseTxt;

	@FindBy(xpath="//tbody[@id='id_header_268435460_table_body']/tr/td[2]")
	public static List<WebElement> warehouseHeaderComboList;

	@FindBy(xpath="//tbody[@id='id_body_23_table_body']/tr/td[2]")
	public static List<WebElement> itemComboList;



	@FindBy(xpath="//*[@id='2008']/span")
	public static WebElement  purchaseVoucher;

	@FindBy(xpath="//*[@id='2009']/span")
	public static WebElement  purchaseReturnsVoucher;

	@FindBy(xpath="//*[@id='2050']/span")
	public static WebElement  purchaseVoucherN;



	@FindBy(xpath="//input[@id='id_header_4']")
	public static WebElement vendorAccountTxt;


	@FindBy(xpath="//tbody[@id='id_header_4_table_body']/tr/td[2]")
	public static List<WebElement> vendorAccountComboList;

	@FindBy(xpath="//tbody[@id='id_header_4_table_body']/tr/td[2]")
	public static List<WebElement> customerAccountComboList;

	@FindBy(xpath="//tbody[@id='id_header_10_table_body']/tr/td[2]")
	public static List<WebElement> currencyComboList;

	@FindBy(xpath="//tbody[@id='id_header_268435459_table_body']/tr/td[2]")
	public static List<WebElement> departmentComboList;

	@FindBy(xpath="//tbody[@id='id_body_536870916_table_body']/tr/td[2]")
	public static List<WebElement> warehouseBodyComboList;

	@FindBy(xpath="//tbody[@id='id_header_86_table_body']/tr/td[2]")
	public static List<WebElement> st_warehouse1HeaderComboList;

	@FindBy(xpath="//tbody[@id='id_body_87_table_body']/tr/td[2]")
	public static List<WebElement> st_warehouse2BodyComboList;

	@FindBy(xpath="//input[@id='id_body_536870916']")
	public static WebElement enter_WarehouseTxt;

	@FindBy(xpath="//*[@id='id_body_536870916_table_body']/tr")
	public static List<WebElement> pvvGridWarehouseList;

	@FindBy(xpath="//*[@id='id_body_23_table_body']/tr")
	public static List<WebElement> pvvGridItemList;

	@FindBy(xpath="//input[@id='id_body_33554522']")
	public static WebElement enter_PvTaxable;

	@FindBy(xpath="//tbody[@id='id_body_16777307_table_body']/tr/td[2]")
	public static List<WebElement> pvvGridTaxCodeList;

	@FindBy(xpath="//input[@id='id_body_16777323']")
	public static WebElement enter_PvTaxCode;

	@FindBy(xpath="//input[@id='id_body_33554490']")
	public static WebElement enter_PVDiscount;


	@FindBy(xpath="//*[@id='id_Pick']/a/span")
	public static WebElement pickBtn;

	@FindBy(xpath="//input[@id='txtNewReference']")
	public static WebElement newReferenceTxt;

	@FindBy(xpath="//*[@id='id_Ok']/a/span")
	public static WebElement Bill_OkBtn;



	@FindBy(xpath="//input[@id='id_header_4']")
	public static WebElement  purchaseAccountTxt;

	@FindBy(xpath="//tbody[@id='id_header_4_table_body']/tr/td[2]")
	public static List<WebElement> vendorAccountListCount; 

	@FindBy(xpath="//input[@id='id_header_6']")
	public static WebElement  voucherHeaderDueDate;

	@FindBy(xpath="//*[@id='id_header_6_input_container']/div[1]/i[2]")
	public static WebElement  voucherHeaderDueDateCalenderBtn;

	@FindBy(xpath="//tr[@id='id_header_6_day_today']/td/span[1]")
	public static WebElement  voucherHeaderDueDateCalenderTodayBtn;

	@FindBy(xpath="//input[@id='id_header_10']")
	public static WebElement  voucherHeaderCurrency;

	@FindBy(xpath="//tbody[@id='id_header_10_table_body']/tr/td[2]")
	public static List<WebElement> currencyListCount;	

	@FindBy(xpath="//input[@id='id_header_268435459']")
	public static WebElement  departmentTxt;

	@FindBy(xpath="//*[@id='id_header_268435459_table_body']/tr/td[2]")
	public static List<WebElement> openingBalDepartmentList;

	@FindBy(xpath="//input[@id='id_body_12']")
	public static WebElement  enter_AccountTxt;

	@FindBy(xpath="//*[@id='id_body_12_table_body']/tr")
	public static List<WebElement> openingBalAccountListInGrid;

	@FindBy(xpath="//input[@id='id_body_18']")
	public static WebElement  enter_DebitTxt;

	@FindBy(xpath="//input[@id='id_body_19']")
	public static WebElement  enter_CreditTxt;

	@FindBy(xpath="//*[@id='lblAccount']")
	public static WebElement  billRefPartyName;

	@FindBy(xpath="//table[@id='id_Adjustment_Grid']")
	public static WebElement billRefAdjustBillsGrid;

	@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr")
	public static List<WebElement> billRefAdjustBillsGridList;

	@FindBy(xpath="//tbody[@id='id_header_268435459_table_body']/tr/td[2]")
	public static List<WebElement> departmentListCount;

	@FindBy(xpath="//input[@id='id_header_268435470']")
	public static WebElement  placeOFSupplyTxt;

	@FindBy(xpath="//input[@id='id_header_268435471']")
	public static WebElement  jurisdictionTxt;


	@FindBy(xpath="//input[@id='id_body_23']")
	public static WebElement  enter_ItemTxt;

	@FindBy(xpath="//input[@id='id_body_12']")
	public static WebElement  enter_SalesAccountTxt;

	@FindBy(xpath="//input[@id='id_body_24']")
	public static WebElement  enter_UnitTxt;

	@FindBy(xpath="//input[@id='id_body_26']")
	public static WebElement  enter_Quantity;

	@FindBy(xpath="//input[@id='id_body_27']")
	public static WebElement  enter_Rate;

	@FindBy(xpath="//input[@id='id_body_28']")
	public static WebElement  enter_Gross;

	@FindBy (xpath="//input[@id='id_body_38']")
	public static WebElement enter_RMA;

	@FindBy(xpath="//input[@id='id_body_13']")
	public static WebElement  enter_Batch;

	@FindBy(xpath="//input[@id='id_body_12']")
	public static WebElement  enter_DebitACTxt;


	@FindBy(xpath="//input[@id='id_body_37']")
	public static WebElement enter_Expirydate;

	@FindBy(xpath="//input[@id='id_body_36']")
	public static WebElement enter_MfgDate;

	@FindBy(xpath="//input[@id='id_body_108']")
	public static WebElement enter_BatchRate;

	@FindBy(xpath="//input[@id='id_body_109']")
	public static WebElement enter_BatchRateValue1;

	@FindBy(xpath="//input[@id='id_body_110']")
	public static WebElement enter_BatchRateValue2;

	@FindBy(xpath="//*[@id='id_transactionentry_previous']")
	public static WebElement  previousBtn;

	@FindBy(xpath="//*[@id='id_transactionentry_next']")
	public static WebElement  nextBtn;

	@FindBy(xpath="//*[@id='id_transactionentry_print']")
	public static WebElement  new_PrintBtn;

	@FindBy(xpath="//*[@id='id_transactionentry_suspend']")
	public static WebElement  new_SuspendBtn;

	@FindBy(xpath="//*[@id='id_transactionentry_close']")
	public static WebElement  new_CloseBtn;

	@FindBy(xpath="//div[@id='id_transactionentry_delete']//span[contains(@class,'icon-delete icon-font6')]")
	public static WebElement  new_DeleteBtn;

	@FindBy(xpath="//input[@id='id_body_16777323']")
	public static WebElement  enter_TaxCode;

	@FindBy(xpath="//input[@id='id_body_12']")
	public static WebElement  enter_PurchaseAccountTxt;

	@FindBy(xpath="//input[@id='id_body_33554521']")
	public static WebElement enter_PvVat;

	@FindBy(xpath="//*[@id='id_transactionentry_save']")
	public static WebElement  voucherSaveBtn;

	@FindBy(xpath="//*[@id='id_transactionentry_close']/a/span")  
	public static WebElement  voucherhomeCloseBtn;

	public static boolean checkSavingPurchaseVoucherVATVoucher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		getAction().moveToElement(financialsMenu).click().build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
		financialsTransactionsPurchaseMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
		purchaseVouchersVat.click();

		Thread.sleep(2000);

		/*checkDeleteLinkStatus();

		Thread.sleep(2000);*/

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.click();

		vendorAccountTxt.sendKeys("v");	

		ArrayList<String>  actVendorAccountList= new ArrayList<String>(); 

		int count=vendorAccountListCount.size();

		System.err.println(count);

		for(int i=0 ; i < count ;i++)
		{
			String data=vendorAccountListCount.get(i).getText();

			if (data.equalsIgnoreCase("Vendor B")) 
			{
				vendorAccountListCount.get(i).click();
				break;
			}
		}

		vendorAccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderDueDate));
		voucherHeaderDueDate.click();
		voucherHeaderDueDate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		voucherHeaderCurrency.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		voucherHeaderCurrency.sendKeys(Keys.SPACE);

		int currencycount=currencyListCount.size();

		System.err.println(currencycount);

		for(int i=0 ; i < currencycount ;i++)
		{
			String data=currencyListCount.get(i).getText();

			if (data.equalsIgnoreCase("INR")) 
			{
				currencyListCount.get(i).click();
				break;
			}
		}

		voucherHeaderCurrency.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.SPACE);	

		ArrayList<String> actDepartmentList= new ArrayList<String>(); 

		int departmentCount=departmentListCount.size();

		System.err.println(departmentCount);

		for(int i=0 ; i < departmentCount ;i++)
		{
			String data=departmentListCount.get(i).getText();

			if (data.equalsIgnoreCase("INDIA")) 
			{
				departmentListCount.get(i).click();
				break;
			}
		}

		departmentTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		placeOFSupplyTxt.click();
		placeOFSupplyTxt.sendKeys("Abu Dhabi");
		Thread.sleep(2000);
		placeOFSupplyTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		jurisdictionTxt.click();
		jurisdictionTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		jurisdictionTxt.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		  enter_WarehouseTxt.click();*/
		

		enter_WarehouseTxt.sendKeys(Keys.SPACE);

		int warehousecount=warehouseBodyComboList.size();

		for(int i=0 ; i < warehousecount ;i++)
		{
			String data=warehouseBodyComboList.get(i).getText();

			if (data.equalsIgnoreCase("HYDERABAD")) 
			{
				warehouseBodyComboList.get(i).click();
				break;
			}
		}

		enter_WarehouseTxt.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.click();
		enter_ItemTxt.sendKeys(Keys.SPACE);
		int pvvGridItemListCount=pvvGridItemList.size();
		for (int i = 0; i < pvvGridItemListCount; i++) 
		{
			String Item=pvvGridItemList.get(i).getText();
			if (Item.equalsIgnoreCase("STD RATE COGS ITEM")) 
			{
				pvvGridItemList.get(i).click();
				break;
			}
		}
		enter_ItemTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
		enter_TaxCode.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PurchaseAccountTxt));
		enter_PurchaseAccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		enter_Quantity.click();
		enter_Quantity.clear();
		enter_Quantity.sendKeys("2");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.click();
		enter_Rate.clear();
		enter_Rate.sendKeys("10");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvVat));
		enter_PvVat.click();

		enter_PvVat.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxable));
		enter_PvTaxable.click();
		enter_PvTaxable.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));
		voucherSaveBtn.click();

		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newReferenceTxt));
		newReferenceTxt.click();

		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
		Bill_OkBtn.click();

		String expMessage1="Voucher saved successfully";
		String expMessage2="1";

		String actMessage=checkValidationMessage(expMessage1);

		Thread.sleep(2000);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}




	@FindBy(xpath="//*[@id='81']/span")
	public static WebElement  financialsReportsMenu; 

	@FindBy(xpath="//*[@id='500']/span")
	public static WebElement  ledger;

	@FindBy(xpath="//select[@id='DateOptions_']")
	public static WebElement sl_DateOptionDropdown;

	@FindBy(xpath="//tbody[@id='LandingGridBody']/tr")
	public static List<WebElement> stockLedgerHometableRowCount;

	@FindBy(xpath="//*[@class='icon-ok hiconright2']")
	public static WebElement sl_OkBtn;
	
	@FindBy(xpath="//*[@class='icon-ok hiconright2']")
	public static WebElement sl_OkBtn1;
	
	//*[@id="id_mainreportmenuheadings"]/ul/li[9]/a/i

	@FindBy(xpath="//i[contains(@class,'icon-font6 icon-close')]")
	public static WebElement sl_CloseBtn;

	@FindBy(xpath="//div[@id='REPORTRENDERNEWControls']/ul/li/span[12]")
	public static WebElement report_CloseBtn;

	@FindBy(xpath="//*[@id='dvReportInputs']/div[1]/div/label/span")
	public static WebElement sl_SelectAllItemsChkBox;

	@FindBy(xpath="//div[@id='id_reportmenudisplay']/ul/li[9]")
	public static WebElement report_FilterBtn;

	@FindBy(xpath="//span[@id='idFilterCustomizeIcon']")
	public static WebElement  report_FilterCustomizeBtn;

	@FindBy(xpath="//*[@id='FilterFields_500_0']/li[1]/a/i")
	public static WebElement filterAccountExpandBtn;


	@FindBy (xpath="//ul[@id='FilterFields_500_0']/ul[1]/li/div/label")
	public static List<WebElement> filterAccountsList;
	
	@FindBy(xpath="//*[text()='Filter']")
	public static WebElement FilterBtnInFilterDropdown;
	
	

	public static boolean checkFinanacialLedgerReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
		financialsReportsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledger));
		ledger.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		sl_DateOptionDropdown.click();
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
		sl_SelectAllItemsChkBox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
		report_FilterBtn.click();

		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(FilterBtnInFilterDropdown));
		FilterBtnInFilterDropdown.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
		report_FilterCustomizeBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(filterAccountExpandBtn));
		filterAccountExpandBtn.click();

		Thread.sleep(2000);

		boolean NotAvailableForReports = true;

		int count = filterAccountsList.size();

		for (int i = 0; i < count; i++) 
		{
			String data = filterAccountsList.get(i).getAttribute("data-text");

			System.err.println(data);

			if (data.equalsIgnoreCase("CreateTab_TextField") || data.equalsIgnoreCase("CreateTab_NumberField")) 
			{
				NotAvailableForReports=false;
				break;
			}
		}

		System.err.println(NotAvailableForReports);



		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
		report_CloseBtn.click();*/

		if(NotAvailableForReports)
		{
			return true;
		}
		else
		{
			return false;
		}
	}








	public static boolean checkMoveUpOptionInMasterAccounts() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getDriver().navigate().refresh();

		Thread.sleep(3000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		getAction().moveToElement(homeMenu).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		int count = masterGridBodyName.size();

		ArrayList<String> AccountNames = new ArrayList<String>();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();
			AccountNames.add(data);

			if (data.equalsIgnoreCase("Mandatory Account")) 
			{
				masterGridBodyChkbox.get(i).click();
			}
		}

		System.out.println("***********************************checkMoveUpOptionInMasterAccounts*********************************");

		String actAccountNamesList = AccountNames.toString();
		String expAccountNamesList = "[Mandatory Group, Mandatory Account, Demo Account, Cust_Display Debit/Credit totals for each Account under group, Cust_ClubTransactionsOf_AllAccounts_Group, cust_display_ledger_by_currency, DoNot_Restrict_If_Rights_Are_Not_Allotted, cust_display_when_StatusIsActive, Consolidate_Always, Consolidate_When_Both_Accounts_Are_Same, Display_Un-Realize_GainOrLoss_In_Ledger, cust_display_dr/cr_total_for_each_day, cust_display_dr/cr_total_for_each_month, Round off Exchange gain / loss, ASSETS, EXPENSES, CONTROL ACCOUNTS, REVENUE, EQUITIES, LIABILITIES, COGS POSTING ACC, BR COGS ACC INV, FIFO COGS ACC INV, WA COGS ACC INV, STD RATE COGS ACC INV, SR COGS POSTING ACC, SHORTAGE COGS POSTING ACC, EXCESS COGS POSTING ACC, VAT OUTPUT, VAT ADVANCE SALE, VAT ADVANCE PURCHASE, PURCHASE VARIANCE, VAT INPUT, Test Master, HDFC]";

		System.out.println(actAccountNamesList);
		System.out.println(expAccountNamesList);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterMoveUpBtn));	
		masterMoveUpBtn.click();

		Thread.sleep(2000);

		ArrayList<String> afterMoveUpAccountNames = new ArrayList<String>();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();
			afterMoveUpAccountNames.add(data);
		}

		String actAccountNamesListAfterMoveUp = afterMoveUpAccountNames.toString();
		String expAccountNamesListAfterMoveUp = "[Mandatory Account, Mandatory Group, Demo Account, Cust_Display Debit/Credit totals for each Account under group, Cust_ClubTransactionsOf_AllAccounts_Group, cust_display_ledger_by_currency, DoNot_Restrict_If_Rights_Are_Not_Allotted, cust_display_when_StatusIsActive, Consolidate_Always, Consolidate_When_Both_Accounts_Are_Same, Display_Un-Realize_GainOrLoss_In_Ledger, cust_display_dr/cr_total_for_each_day, cust_display_dr/cr_total_for_each_month, Round off Exchange gain / loss, ASSETS, EXPENSES, CONTROL ACCOUNTS, REVENUE, EQUITIES, LIABILITIES, COGS POSTING ACC, BR COGS ACC INV, FIFO COGS ACC INV, WA COGS ACC INV, STD RATE COGS ACC INV, SR COGS POSTING ACC, SHORTAGE COGS POSTING ACC, EXCESS COGS POSTING ACC, VAT OUTPUT, VAT ADVANCE SALE, VAT ADVANCE PURCHASE, PURCHASE VARIANCE, VAT INPUT, Test Master, HDFC]";

		System.out.println(actAccountNamesListAfterMoveUp);
		System.out.println(expAccountNamesListAfterMoveUp);

		Thread.sleep(2000);

		if(actAccountNamesList.equalsIgnoreCase(expAccountNamesList) && actAccountNamesListAfterMoveUp.equalsIgnoreCase(expAccountNamesListAfterMoveUp))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}







	public static boolean checkMoveDownOptionInMasterAccounts() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		int count = masterGridBodyName.size();

		ArrayList<String> AccountNames = new ArrayList<String>();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();
			AccountNames.add(data);

			if (data.equalsIgnoreCase("Mandatory Account")) 
			{
				masterGridBodyChkbox.get(i).click();
			}
		}

		System.out.println("***********************************checkMoveDownOptionInMasterAccounts*********************************");

		String actAccountNamesList = AccountNames.toString();
		String expAccountNamesList = "[Mandatory Account, Mandatory Group, Demo Account, Cust_Display Debit/Credit totals for each Account under group, Cust_ClubTransactionsOf_AllAccounts_Group, cust_display_ledger_by_currency, DoNot_Restrict_If_Rights_Are_Not_Allotted, cust_display_when_StatusIsActive, Consolidate_Always, Consolidate_When_Both_Accounts_Are_Same, Display_Un-Realize_GainOrLoss_In_Ledger, cust_display_dr/cr_total_for_each_day, cust_display_dr/cr_total_for_each_month, Round off Exchange gain / loss, ASSETS, EXPENSES, CONTROL ACCOUNTS, REVENUE, EQUITIES, LIABILITIES, COGS POSTING ACC, BR COGS ACC INV, FIFO COGS ACC INV, WA COGS ACC INV, STD RATE COGS ACC INV, SR COGS POSTING ACC, SHORTAGE COGS POSTING ACC, EXCESS COGS POSTING ACC, VAT OUTPUT, VAT ADVANCE SALE, VAT ADVANCE PURCHASE, PURCHASE VARIANCE, VAT INPUT, Test Master, HDFC]";

		System.out.println(actAccountNamesList);
		System.out.println(expAccountNamesList);

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		Thread.sleep(3000);*/

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterMoveDownBtn));	
		masterMoveDownBtn.click();

		Thread.sleep(2000);

		ArrayList<String> afterMoveUpAccountNames = new ArrayList<String>();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();
			afterMoveUpAccountNames.add(data);
		}

		String actAccountNamesListAfterMoveUp = afterMoveUpAccountNames.toString();
		String expAccountNamesListAfterMoveUp = "[Cust_Display Debit/Credit totals for each Account under group, Demo Account, Cust_ClubTransactionsOf_AllAccounts_Group, cust_display_ledger_by_currency, DoNot_Restrict_If_Rights_Are_Not_Allotted, cust_display_when_StatusIsActive, Consolidate_Always, Consolidate_When_Both_Accounts_Are_Same, Display_Un-Realize_GainOrLoss_In_Ledger, cust_display_dr/cr_total_for_each_day, cust_display_dr/cr_total_for_each_month, Round off Exchange gain / loss, ASSETS, EXPENSES, CONTROL ACCOUNTS, REVENUE, EQUITIES, LIABILITIES, COGS POSTING ACC, BR COGS ACC INV, FIFO COGS ACC INV, WA COGS ACC INV, STD RATE COGS ACC INV, SR COGS POSTING ACC, SHORTAGE COGS POSTING ACC, EXCESS COGS POSTING ACC, VAT OUTPUT, VAT ADVANCE SALE, VAT ADVANCE PURCHASE, PURCHASE VARIANCE, VAT INPUT, Test Master, HDFC]";

		System.out.println(actAccountNamesListAfterMoveUp);
		System.out.println(expAccountNamesListAfterMoveUp);

		if(actAccountNamesList.equalsIgnoreCase(expAccountNamesList) && actAccountNamesListAfterMoveUp.equalsIgnoreCase(expAccountNamesListAfterMoveUp))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}






	@FindBy(xpath="//td[@id='MasterSortTable_col_1-1']")
	public static WebElement selectMasterSortingSelectFieldRow1;

	@FindBy(xpath="//select[@id='MasterSortTable_SelectField']")
	public static WebElement selectMasterSortingSelectFieldDrpdwn;

	@FindBy(xpath="//td[@id='MasterSortTable_col_1-2']")
	public static WebElement selectMasterSortingOrderRow1;

	@FindBy(xpath="//select[@id='MasterSortTable_SortingOrder']")
	public static WebElement selectMasterSortingOrderDrpdwn;

	@FindBy(xpath="//td[@id='MasterSortTable_col_2-1']")
	public static WebElement selectMasterSortingSelectFieldRow2;

	@FindBy(xpath="//td[@id='MasterSortTable_col_2-2']")
	public static WebElement selectMasterSortingOrderRow2;

	@FindBy(xpath="//span[@id='btnMasterSortingOK']")
	public static WebElement selectMasterSortingOkBtn;

	@FindBy(xpath="//*[@id='divMasterSort']/ul/li[2]/span/i")
	public static WebElement selectMasterSortingCancelBtn;



	public static boolean checkSortingOptionInMasterAccountsWithAscendingAndDescendingAccountName() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		int count = masterGridBodyName.size();

		ArrayList<String> AccountNames = new ArrayList<String>();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();
			AccountNames.add(data);
		}

		System.out.println("***********************************checkSortingOptionInMasterAccountsWithAscendingAndDescendingAccountName*********************************");

		String actAccountNamesList = AccountNames.toString();
		String expAccountNamesList = "[Mandatory Group, Mandatory Account, Demo Account, Cust_Display Debit/Credit totals for each Account under group, Cust_ClubTransactionsOf_AllAccounts_Group, cust_display_ledger_by_currency, DoNot_Restrict_If_Rights_Are_Not_Allotted, cust_display_when_StatusIsActive, Consolidate_Always, Consolidate_When_Both_Accounts_Are_Same, Display_Un-Realize_GainOrLoss_In_Ledger, cust_display_dr/cr_total_for_each_day, cust_display_dr/cr_total_for_each_month, Round off Exchange gain / loss, ASSETS, EXPENSES, CONTROL ACCOUNTS, REVENUE, EQUITIES, LIABILITIES, COGS POSTING ACC, BR COGS ACC INV, FIFO COGS ACC INV, WA COGS ACC INV, STD RATE COGS ACC INV, SR COGS POSTING ACC, SHORTAGE COGS POSTING ACC, EXCESS COGS POSTING ACC, VAT OUTPUT, VAT ADVANCE SALE, VAT ADVANCE PURCHASE, PURCHASE VARIANCE, VAT INPUT, Test Master, HDFC]";

		System.out.println(actAccountNamesList);
		System.out.println(expAccountNamesList);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSortBtn));	
		masterSortBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectMasterSortingSelectFieldRow1));
		selectMasterSortingSelectFieldRow1.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectMasterSortingSelectFieldDrpdwn));

		Select selectField = new Select(selectMasterSortingSelectFieldDrpdwn);

		selectField.selectByVisibleText("Name");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectMasterSortingOrderRow1));
		selectMasterSortingOrderRow1.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectMasterSortingOrderDrpdwn));

		Select selectOrder = new Select(selectMasterSortingOrderDrpdwn);

		selectOrder.selectByValue("0");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectMasterSortingOkBtn));
		selectMasterSortingOkBtn.click();

		String expAscendingMsg = "success";
		String actAscendingMsg = checkValidationMessage(expAscendingMsg);

		ArrayList<String> AccountNamesSortingAscending = new ArrayList<String>();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();
			AccountNamesSortingAscending.add(data);
		}

		String actAccountNamesSortingAscending = AccountNamesSortingAscending.toString();
		String expAccountNamesSortingAscending = "[ASSETS, BR COGS ACC INV, COGS POSTING ACC, Consolidate_Always, Consolidate_When_Both_Accounts_Are_Same, CONTROL ACCOUNTS, Cust_ClubTransactionsOf_AllAccounts_Group, Cust_Display Debit/Credit totals for each Account under group, cust_display_dr/cr_total_for_each_day, cust_display_dr/cr_total_for_each_month, cust_display_ledger_by_currency, cust_display_when_StatusIsActive, Demo Account, Display_Un-Realize_GainOrLoss_In_Ledger, DoNot_Restrict_If_Rights_Are_Not_Allotted, EQUITIES, EXCESS COGS POSTING ACC, EXPENSES, FIFO COGS ACC INV, HDFC, LIABILITIES, Mandatory Account, Mandatory Group, PURCHASE VARIANCE, REVENUE, Round off Exchange gain / loss, SHORTAGE COGS POSTING ACC, SR COGS POSTING ACC, STD RATE COGS ACC INV, Test Master, VAT ADVANCE PURCHASE, VAT ADVANCE SALE, VAT INPUT, VAT OUTPUT, WA COGS ACC INV]";

		System.out.println(actAccountNamesSortingAscending);
		System.out.println(expAccountNamesSortingAscending);

		Thread.sleep(2000);




		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSortBtn));	
		masterSortBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectMasterSortingSelectFieldRow1));
		selectMasterSortingSelectFieldRow1.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectMasterSortingSelectFieldDrpdwn));

		selectField.selectByVisibleText("Name");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectMasterSortingOrderRow1));
		selectMasterSortingOrderRow1.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectMasterSortingOrderDrpdwn));

		selectOrder.selectByVisibleText("Descending");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectMasterSortingOkBtn));
		selectMasterSortingOkBtn.click();

		String expDescendingMsg = "success";
		String actDescendingMsg = checkValidationMessage(expDescendingMsg);

		ArrayList<String> AccountNamesSortingDescending = new ArrayList<String>();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();
			AccountNamesSortingDescending.add(data);
		}

		String actAccountNamesSortingDescending = AccountNamesSortingDescending.toString();
		String expAccountNamesSortingDescending = "[WA COGS ACC INV, VAT OUTPUT, VAT INPUT, VAT ADVANCE SALE, VAT ADVANCE PURCHASE, Test Master, STD RATE COGS ACC INV, SR COGS POSTING ACC, SHORTAGE COGS POSTING ACC, Round off Exchange gain / loss, REVENUE, PURCHASE VARIANCE, Mandatory Group, Mandatory Account, LIABILITIES, HDFC, FIFO COGS ACC INV, EXPENSES, EXCESS COGS POSTING ACC, EQUITIES, DoNot_Restrict_If_Rights_Are_Not_Allotted, Display_Un-Realize_GainOrLoss_In_Ledger, Demo Account, cust_display_when_StatusIsActive, cust_display_ledger_by_currency, cust_display_dr/cr_total_for_each_month, cust_display_dr/cr_total_for_each_day, Cust_Display Debit/Credit totals for each Account under group, Cust_ClubTransactionsOf_AllAccounts_Group, CONTROL ACCOUNTS, Consolidate_When_Both_Accounts_Are_Same, Consolidate_Always, COGS POSTING ACC, BR COGS ACC INV, ASSETS]";

		System.out.println(actAccountNamesSortingDescending);
		System.out.println(expAccountNamesSortingDescending);

		Thread.sleep(2000);

		if(actAccountNamesSortingAscending.equalsIgnoreCase(expAccountNamesSortingAscending)
				&& actAscendingMsg.equalsIgnoreCase(expAscendingMsg) && actAccountNamesSortingDescending.equalsIgnoreCase(expAccountNamesSortingDescending)
				&& actDescendingMsg.equalsIgnoreCase(expDescendingMsg))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}







	@FindBy (xpath="//table[@id='landgridData']/thead/tr/th/span")
	public static List<WebElement> masterGridHeaderList;

	@FindBy (xpath="//tbody[@id='GridCustomizeTblBody']/tr/td/div/input")
	public static List<WebElement> masterCustomizeTreePopupChkboxList;

	@FindBy (xpath="//tbody[@id='GridCustomizeTblBody']/tr/td/div/label")
	public static List<WebElement> masterCustomizeTreePopupFieldsList;

	@FindBy (xpath="//*[@id='btnOk']")
	public static WebElement masterCustomizeTreePopupOkBtn;





	public static boolean checkCustomizeTreeOptionAddingCreateTab_TextField() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getDriver().navigate().refresh();

		Thread.sleep(3000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		getAction().moveToElement(homeMenu).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		int count = masterGridHeaderList.size();

		ArrayList<String> AccountHeader = new ArrayList<String>();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridHeaderList.get(i).getText();
			AccountHeader.add(data);
		}

		System.out.println("***********************************checkCustomizeTreeOptionAddingCreateTab_TextField*********************************");

		String actAccountHeaderList = AccountHeader.toString();
		String expAccountHeaderList = "[, , MasterId, Name, Code, Account Type]";

		System.out.println(actAccountHeaderList);
		System.out.println(expAccountHeaderList);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastercustamizeTreeBtn));	
		mastercustamizeTreeBtn.click();

		Thread.sleep(2000);

		int count1 = masterCustomizeTreePopupFieldsList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = masterCustomizeTreePopupFieldsList.get(i).getText();
			System.err.println(data);
			((JavascriptExecutor) getDriver()).executeScript("arguments[0].scrollIntoView(true);", masterCustomizeTreePopupFieldsList.get(i));

			if (data.equalsIgnoreCase("CreateTab_TextField")) 
			{
				masterCustomizeTreePopupChkboxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustomizeTreePopupOkBtn));
		masterCustomizeTreePopupOkBtn.click();

		Thread.sleep(2000);



		int count2 = masterGridHeaderList.size();

		ArrayList<String> AccountHeaderAfterAddingColumn = new ArrayList<String>();

		for (int i = 0; i < count2; i++) 
		{
			String data = masterGridHeaderList.get(i).getText();
			AccountHeaderAfterAddingColumn.add(data);
		}

		String actAccountHeaderAfterAddingColumn = AccountHeaderAfterAddingColumn.toString();
		String expAccountHeaderAfterAddingColumn = "[, , MasterId, Name, Code, Account Type, CreateTab_TextField]";

		System.out.println(actAccountHeaderAfterAddingColumn);
		System.out.println(expAccountHeaderAfterAddingColumn);

		Thread.sleep(2000);

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		Thread.sleep(3000);

		masterRibbonControlNextBtn.click(); 
		masterRibbonControlNextBtn.click();
		masterRibbonControlNextBtn.click();
		masterRibbonControlNextBtn.click();
		masterRibbonControlNextBtn.click();*/
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastercustamizeTreeBtn));	
		mastercustamizeTreeBtn.click();

		Thread.sleep(2000);

		for (int i = 0; i < count1; i++) 
		{
			String data = masterCustomizeTreePopupFieldsList.get(i).getText();
			System.err.println(data);
			((JavascriptExecutor) getDriver()).executeScript("arguments[0].scrollIntoView(true);", masterCustomizeTreePopupFieldsList.get(i));

			if (data.equalsIgnoreCase("CreateTab_TextField")) 
			{
				masterCustomizeTreePopupChkboxList.get(i).click();
				break;
			}
		}

		for (int i = 0; i < count1; i++) 
		{
			String data = masterCustomizeTreePopupFieldsList.get(i).getText();
			System.err.println(data);
			((JavascriptExecutor) getDriver()).executeScript("arguments[0].scrollIntoView(true);", masterCustomizeTreePopupFieldsList.get(i));

			if (data.equalsIgnoreCase("CreateTab_NumberField")) 
			{
				masterCustomizeTreePopupChkboxList.get(i).click();
				break;
			}
		}


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustomizeTreePopupOkBtn));
		masterCustomizeTreePopupOkBtn.click();

		Thread.sleep(2000);



		int count3 = masterGridHeaderList.size();

		ArrayList<String> AccountHeaderAfterDeletingColumn = new ArrayList<String>();

		for (int i = 0; i < count3; i++) 
		{
			String data = masterGridHeaderList.get(i).getText();
			AccountHeaderAfterDeletingColumn.add(data);
		}


		String actAccountHeaderAfterDeletingColumn = AccountHeaderAfterDeletingColumn.toString();
		String expAccountHeaderAfterDeletingColumn = "[, , MasterId, Name, Code, Account Type, CreateTab_NumberField]";

		System.out.println(actAccountHeaderAfterDeletingColumn);
		System.out.println(expAccountHeaderAfterDeletingColumn);

		Thread.sleep(2000);

		if(actAccountHeaderList.equalsIgnoreCase(expAccountHeaderList) && actAccountHeaderAfterAddingColumn.equalsIgnoreCase(expAccountHeaderAfterAddingColumn)
				&& actAccountHeaderAfterDeletingColumn.equalsIgnoreCase(expAccountHeaderAfterDeletingColumn))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}





	@FindBy (xpath="//label[text()='Vendor B']")
	public static WebElement backtrackOfAccount;

	@FindBy (xpath="//select[@id='ddlBackrTrackFilter']")
	public static WebElement filterByYearDrpdwn;

	@FindBy (xpath="//div[@id='divbackTrack']//table/tbody/tr/td/label")
	public static List<WebElement> accountBackTrackTableList;

	@FindBy (xpath="//div[@id='divbackTrack']//table/tbody/tr/td[2]/label")
	public static List<WebElement> accountBackTrackTableColumn1List;

	@FindBy (xpath="//div[@id='backTrackModal']//i[@class='icon-close hiconright2']")
	public static WebElement masterAccountBacktrackCancelBtn;



	public static boolean checkMasterAccountBackTrackOptionForVendorB() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getDriver().navigate().refresh();

		Thread.sleep(3000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		getAction().moveToElement(homeMenu).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxt));
		masterSearchTxt.click();
		masterSearchTxt.sendKeys("Vendor B");
		masterSearchTxt.sendKeys(Keys.ENTER);

		Thread.sleep(2000);

		int count = masterGridBodyName.size();

		ArrayList<String> AccountNames = new ArrayList<String>();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();
			AccountNames.add(data);

			if (data.equalsIgnoreCase("Vendor B")) 
			{
				masterGridBodyChkbox.get(i).click();
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		Thread.sleep(3000);



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterBackTrackBtn));
		masterBackTrackBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(backtrackOfAccount));
		String actBacktrackOfAccount = backtrackOfAccount.getText();
		String expBacktrackOfAccount = "Vendor B";

		System.out.println("BacktrackOfAccount  : "+actBacktrackOfAccount+"  Value Expected  "+expBacktrackOfAccount);

		Thread.sleep(2000);
		Select yearDrpdwn = new Select(filterByYearDrpdwn);

		String actYear = yearDrpdwn.getFirstSelectedOption().getText();
		String expYear = "2022";

		ArrayList<String> backtracktable = new ArrayList<String>();

		int count1 = accountBackTrackTableList.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = accountBackTrackTableList.get(i).getText();
			backtracktable.add(data);
		}

		Date now = new Date();
		SimpleDateFormat simpleDateTimeFormat = new SimpleDateFormat("M");
		String actmonth = simpleDateTimeFormat.format(now); 
		int month = Integer.parseInt(actmonth);

		System.err.println("Current Month : "+month);


		SimpleDateFormat yr = new SimpleDateFormat("yyyy");

		String year = yr.format(now);

		ArrayList<String> backtracktables = new ArrayList<String>();

		for (int i = 1; i <= month; i++) 
		{ 
			if (i==month) 
			{
				backtracktables.add(year+Month.of(i)+", "+year+", 0.0000000000, 0.0000000000, 21.0000000000, 21.0000000000");
				break;
			} 
			else 
			{
				backtracktables.add(year+Month.of(i)+", "+year+", 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000");
			}
		}


		String actBacktrackMonthList = backtracktable.toString();
		String expBacktrackMonthList = backtracktables.toString();



		for (int i = month; i <= month; i++) 
		{
			int temp = i-1;
			getAction().doubleClick(accountBackTrackTableColumn1List.get(temp)).build().perform();
			Thread.sleep(2000);
		}





		ArrayList<String> backtrackdaystable = new ArrayList<String>();

		int dayscount = accountBackTrackTableList.size();

		for (int i = 0; i < dayscount; i++) 
		{
			String data = accountBackTrackTableList.get(i).getText();
			backtrackdaystable.add(data);
		}


		SimpleDateFormat DateFormat = new SimpleDateFormat("d");
		String actdate = DateFormat.format(now); 
		int date = Integer.parseInt(actdate);

		System.err.println("Current Date : "+date);


		SimpleDateFormat my = new SimpleDateFormat("-MMMM-yyyy");

		String MonthYear = my.format(now);

		System.err.println(MonthYear);


		ArrayList<String> backtrackdaystables = new ArrayList<String>();

		for (int i = 1; i <= date; i++) 
		{ 
			if (i==date) 
			{
				backtrackdaystables.add(i+MonthYear+", "+year+", 0.0000000000, 0.0000000000, 21.0000000000, 21.0000000000");
				break;
			} 
			else 
			{
				backtrackdaystables.add(i+MonthYear+", "+year+", 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000");
			}
		}


		String actBacktrackDaysList = backtrackdaystable.toString();
		String expBacktrackDaysList = backtrackdaystables.toString();


		System.out.println("***********************************checkMasterAccountBackTrackOptionForVendorB*********************************");

		System.out.println("BacktrackOfAccount  : "+actBacktrackOfAccount+"  Value Expected  "+expBacktrackOfAccount);
		System.out.println("Year  : "+actYear+"  Value Expected  "+expYear);
		System.out.println(actBacktrackMonthList);
		System.out.println(expBacktrackMonthList);
		System.out.println(actBacktrackDaysList);
		System.out.println(expBacktrackDaysList);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterAccountBacktrackCancelBtn));
		masterAccountBacktrackCancelBtn.click();

		Thread.sleep(2000);
/*
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterAccountBacktrackCancelBtn));
		masterAccountBacktrackCancelBtn.click();
*/
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountCloseBtn));
		accountCloseBtn.click();

		if(actBacktrackOfAccount.equalsIgnoreCase(expBacktrackOfAccount) && actYear.equalsIgnoreCase(expYear) && actBacktrackMonthList.equalsIgnoreCase(expBacktrackMonthList)
				&& actBacktrackDaysList.equalsIgnoreCase(expBacktrackDaysList))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}








	@FindBy(xpath="//label[text()=' Vendor B']")
	public static WebElement transferSelectedMasterTxtvendorB;
	
	@FindBy(xpath="//label[text()=' Vendor A']")
	public static WebElement transferSelectedMasterTxtvendorA;
	
	

	@FindBy(xpath="//input[@id='id_Transfer']")
	public static WebElement accountTransferToCombo;

	@FindBy(xpath="//*[@id='btnTransferOk']")
	public static WebElement accountTransferOkBtn;

	@FindBy(xpath="//*[@class='FButton-Primary closeMasterPartial']")
	public static WebElement accountTransferCancelBtn;







	public static boolean checkMasterAccountTransferOptionFromVendorBToVendorA() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		
		
		getDriver().navigate().refresh();

		Thread.sleep(3000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		getAction().moveToElement(homeMenu).click().build().perform();
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxt));
		masterSearchTxt.click();
		masterSearchTxt.sendKeys("Vendor B");
		masterSearchTxt.sendKeys(Keys.ENTER);

		Thread.sleep(2000);

		int count = masterGridBodyName.size();

		ArrayList<String> AccountNames = new ArrayList<String>();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();
			AccountNames.add(data);

			if (data.equalsIgnoreCase("Vendor B")) 
			{
				masterGridBodyChkbox.get(i).click();
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		Thread.sleep(3000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTranferBtn));	
		masterTranferBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transferSelectedMasterTxtvendorB));
		String actTransferSelectedAccount = transferSelectedMasterTxtvendorB.getText();
		String expTransferSelectedAccount = "Vendor B";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTransferToCombo));
		accountTransferToCombo.click();
		accountTransferToCombo.sendKeys("Vendor A");
		Thread.sleep(2000);
		accountTransferToCombo.sendKeys(Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTransferOkBtn));
		accountTransferOkBtn.click();
		
		
		
		try {
			if(errorMessage.isDisplayed())
			{
				System.out.println(" *********error Message displayed ");
			}
			
		} catch (Exception e) {


			if(getIsAlertPresent())
			{
				String actAlertTxt = getAlert().getText();
				
				System.out.println(actAlertTxt);
				getAlert().accept();
			}
			
			
		}
		
		/*
		if (actAlertTxt.equalsIgnoreCase("Bill Wise Info will be lost ,Do you Want to Proceed"))
		{
		
		

		Thread.sleep(2000);
		}

		
		else
		{
			System.err.println("Alert is not Present for account transfer");
			//System.err.println("Exception: "+e);
		
		System.out.println("***********************************checkMasterAccountTransferOptionFromVendorBToVendorA*********************************");
		}*/
		
		System.out.println("***********************************checkMasterAccountTransferOptionFromVendorBToVendorA*********************************");
		String expMessage = "Transfered Successfully"; 
		String actMessage = checkValidationMessage(expMessage);


		Thread.sleep(3000);
		

		if(/*actAlertTxt.equalsIgnoreCase(expAlertTxt) && */actMessage.equalsIgnoreCase(expMessage))
		{	
			getDriver().navigate().refresh();
			Thread.sleep(3000);
			return true;
		}	 
		else
		{
			getDriver().navigate().refresh();
			Thread.sleep(3000);
			return false;
		}
		
		}
		

	public static boolean checkLedgerIsEmptyForVendorBAfterTransfer() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		getAction().moveToElement(homeMenu).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxt));
		masterSearchTxt.click();
		masterSearchTxt.sendKeys("Vendor B");
		masterSearchTxt.sendKeys(Keys.ENTER);

		Thread.sleep(2000);

		int count = masterGridBodyName.size();

		ArrayList<String> AccountNames = new ArrayList<String>();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();
			AccountNames.add(data);

			if (data.equalsIgnoreCase("Vendor B")) 
			{
				masterGridBodyChkbox.get(i).click();
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		Thread.sleep(2000);
		
		
		scrollToElementJSE(masterLedgerBtn);
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(masterLedgerBtn));
		masterLedgerBtn.click();

		Thread.sleep(5000);

		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());

		int actOpenWindowsCount = getDriver().getWindowHandles().size();

		getDriver().switchTo().window(openTabs.get(0));

		Thread.sleep(2000);

		getDriver().switchTo().window(openTabs.get(1));

		
		checkValidationMessage("No Dashlate Available for this Dashboard");
		
		Thread.sleep(2000);
		String expMessage = "No transaction exists for the selected master(s).";
		
		String actMessage = checkValidationMessage(expMessage);
		
/*
		boolean actTableIsEmpty = ledgerTable.getText().isEmpty();
		boolean expTableIsEmpty = true; */

		System.out.println("****************************************checkLedgerIsEmptyForVendorBAfterTransfer************************************");

		System.out.println("Ledger Table isEmpty : "+actMessage+"  Value Expected  "+expMessage);

		getDriver().switchTo().window(openTabs.get(0));

		Thread.sleep(2000);

		getDriver().switchTo().window(openTabs.get(1)).close();

		Thread.sleep(2000);

		getDriver().switchTo().window(openTabs.get(0));

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			getDriver().navigate().refresh();
			Thread.sleep(3000);
			return true;
		}
		else
		{
			getDriver().navigate().refresh();
			Thread.sleep(3000);
			return false;
		}
	}




	@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody")
	public static WebElement ledgerTable;

	// Reports Table Row List  


	@FindBy(xpath="//table[@class='CommonReportTable']/tbody/tr[5]/td")
	public static List<WebElement> reportsRow5List;

	@FindBy(xpath="//table[@class='CommonReportTable']/tbody/tr[6]/td")
	public static List<WebElement> reportsRow6List;

	@FindBy(xpath="//table[@class='CommonReportTable']/tbody/tr[7]/td")
	public static List<WebElement> reportsRow7List;

	@FindBy(xpath="//table[@class='CommonReportTable']/tbody/tr[8]/td")
	public static List<WebElement> reportsRow8List;

	@FindBy(xpath="//table[@class='CommonReportTable']/tbody/tr[9]/td")
	public static List<WebElement> reportsRow9List;

	@FindBy(xpath="//table[@class='CommonReportTable']/tbody/tr[10]/td")
	public static List<WebElement> reportsRow10List;

	@FindBy(xpath="//table[@class='CommonReportTable']/tbody/tr[11]/td")
	public static List<WebElement> reportsRow11List;

	@FindBy(xpath="//table[@class='CommonReportTable']/tbody/tr[12]/td")
	public static List<WebElement> reportsRow12List;

	@FindBy(xpath="//table[@class='CommonReportTable']/tbody/tr[13]/td")
	public static List<WebElement> reportsRow13List;

	@FindBy(xpath="//table[@class='CommonReportTable']/tbody/tr[14]/td")
	public static List<WebElement> reportsRow14List;




	public static boolean checkLedgerReportForAccountVendorAAfterTransfer() throws InterruptedException
	{
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		getAction().moveToElement(homeMenu).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxt));
		masterSearchTxt.click();
		masterSearchTxt.sendKeys("Vendor A");
		masterSearchTxt.sendKeys(Keys.ENTER);

		Thread.sleep(2000);

		int count = masterGridBodyName.size();

		ArrayList<String> AccountNames = new ArrayList<String>();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();
			AccountNames.add(data);

			if (data.equalsIgnoreCase("Vendor A")) 
			{
				masterGridBodyChkbox.get(i).click();
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		Thread.sleep(2000);


		scrollToElementJSE(masterLedgerBtn);
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(masterLedgerBtn));
		masterLedgerBtn.click();

		Thread.sleep(4000);

		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());

		int actOpenWindowsCount = getDriver().getWindowHandles().size();

		getDriver().switchTo().window(openTabs.get(0));

		Thread.sleep(2000);

		getDriver().switchTo().window(openTabs.get(1));

		Thread.sleep(2000);

		int reportsByWarehouseRow1ListCount = reportsRow1List.size();
		ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
		{
			String data = reportsRow1List.get(i).getText();
			reportsByWarehouseRow1ListArray.add(data);
		}
		String actRow1List = reportsByWarehouseRow1ListArray.toString();
		String expRow1List = "[Vendor A [033-001]]";


		int reportsByWarehouseRow2ListCount = reportsRow2List.size();
		ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
		for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
		{
			String data = reportsRow2List.get(i).getText();
			reportsByWarehouseRow2ListArray.add(data);
		}
		String actRow2List = reportsByWarehouseRow2ListArray.toString();
		String expRow2List = "[NDT52 : 1, STD RATE COGS ACC INV, , 21.00, 21.00, , 1.47, 1.47, , 21.00, 21.00, Indian Rupees]";


		int reportsByWarehouseRow3ListCount = reportsRow3List.size();
		ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
		{
			String data = reportsRow3List.get(i).getText();
			reportsByWarehouseRow3ListArray.add(data);
		}
		String actRow3List = reportsByWarehouseRow3ListArray.toString();
		String expRow3List = "[Total, , , , 21.00, 21.00, , 1.47, 1.47, , 21.00, 21.00, ]";


		System.out.println("*********************************checkLedgerReportForAccountVendorAAfterTransfer*****************************************");

		System.out.println("ActualRow1List Values   " +actRow1List);
		System.out.println("ExpectedRow1List Values " +expRow1List);

		System.out.println("ActualRow2List Values  " +actRow2List);
		System.out.println("ExpectedRow1List Values" +expRow2List);

		System.out.println("ActualRow3List Values  " +actRow3List);
		System.out.println("ExpectedRow3List Values" +expRow3List);

		getDriver().switchTo().window(openTabs.get(0));

		Thread.sleep(2000);

		getDriver().switchTo().window(openTabs.get(1)).close();

		Thread.sleep(2000);

		getDriver().switchTo().window(openTabs.get(0));

		if (actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) 
				&& actRow3List.equalsIgnoreCase(expRow3List))
		{
			getDriver().navigate().refresh();
			Thread.sleep(3000);
			return true;
		} 
		else
		{
			getDriver().navigate().refresh();
			Thread.sleep(3000);
			return false;
		}
	}







	public static boolean checkMasterAccountTransferOptionFromVendorAToVendorB() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		getAction().moveToElement(homeMenu).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxt));
		masterSearchTxt.click();
		masterSearchTxt.sendKeys("Vendor A");
		masterSearchTxt.sendKeys(Keys.ENTER);

		Thread.sleep(2000);

		int count = masterGridBodyName.size();

		ArrayList<String> AccountNames = new ArrayList<String>();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();
			AccountNames.add(data);

			if (data.equalsIgnoreCase("Vendor A")) 
			{
				masterGridBodyChkbox.get(i).click();
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		Thread.sleep(3000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTranferBtn));	
		masterTranferBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transferSelectedMasterTxtvendorA));
		String actTransferSelectedAccount = transferSelectedMasterTxtvendorA.getText();
		String expTransferSelectedAccount = "Vendor A";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTransferToCombo));
		accountTransferToCombo.click();
		accountTransferToCombo.sendKeys("Vendor B");
		Thread.sleep(2000);
		accountTransferToCombo.sendKeys(Keys.TAB);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTransferOkBtn));
		accountTransferOkBtn.click();
		


	try {
		if(errorMessage.isDisplayed())
		{
			System.out.println(" *********error Message displayed ");
		}
		
	} catch (Exception e) {


		if(getIsAlertPresent())
		{
			String actAlertTxt = getAlert().getText();
			
			System.out.println(actAlertTxt);
			getAlert().accept();
		}
		
		
	}
		
			
			System.out.println("***********************************checkMasterAccountTransferOptionFromVendorAToVendorB*********************************");

			String expMessage = "Transfered Successfully"; 
			String actMessage = checkValidationMessage(expMessage);

			Thread.sleep(3000);

			if(actMessage.equalsIgnoreCase(expMessage))
			{	
				getDriver().navigate().refresh();
				Thread.sleep(3000);
				return true;
			}	 
			else
			{
				getDriver().navigate().refresh();
				Thread.sleep(3000);
				return false;
			}
			
		}







	public static boolean checkLedgerReportForAccountVendorBAfterTransfer() throws InterruptedException
	{
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		getAction().moveToElement(homeMenu).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxt));
		masterSearchTxt.click();
		masterSearchTxt.sendKeys("Vendor B");
		masterSearchTxt.sendKeys(Keys.ENTER);

		Thread.sleep(2000);

		int count = masterGridBodyName.size();

		ArrayList<String> AccountNames = new ArrayList<String>();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();
			AccountNames.add(data);

			if (data.equalsIgnoreCase("Vendor B")) 
			{
				masterGridBodyChkbox.get(i).click();
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		Thread.sleep(2000);



		scrollToElementJSE(masterLedgerBtn);
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(masterLedgerBtn));
		masterLedgerBtn.click();

		Thread.sleep(4000);

		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());

		int actOpenWindowsCount = getDriver().getWindowHandles().size();

		getDriver().switchTo().window(openTabs.get(0));

		Thread.sleep(2000);

		getDriver().switchTo().window(openTabs.get(1));

		Thread.sleep(2000);

		int reportsByWarehouseRow1ListCount = reportsRow1List.size();
		ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
		{
			String data = reportsRow1List.get(i).getText();
			reportsByWarehouseRow1ListArray.add(data);
		}
		String actRow1List = reportsByWarehouseRow1ListArray.toString();
		String expRow1List = "[Vendor B [033-002]]";


		int reportsByWarehouseRow2ListCount = reportsRow2List.size();
		ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
		for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
		{
			String data = reportsRow2List.get(i).getText();
			reportsByWarehouseRow2ListArray.add(data);
		}
		String actRow2List = reportsByWarehouseRow2ListArray.toString();
		String expRow2List = "[NDT52 : 1, STD RATE COGS ACC INV, , 21.00, 21.00, , 1.47, 1.47, , 21.00, 21.00, Indian Rupees]";


		int reportsByWarehouseRow3ListCount = reportsRow3List.size();
		ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
		{
			String data = reportsRow3List.get(i).getText();
			reportsByWarehouseRow3ListArray.add(data);
		}
		String actRow3List = reportsByWarehouseRow3ListArray.toString();
		String expRow3List = "[Total, , , , 21.00, 21.00, , 1.47, 1.47, , 21.00, 21.00, ]";


		System.out.println("*********************************checkLedgerReportForAccountVendorBAfterTransfer*****************************************");

		System.out.println("ActualRow1List Values   " +actRow1List);
		System.out.println("ExpectedRow1List Values " +expRow1List);

		System.out.println("ActualRow2List Values  " +actRow2List);
		System.out.println("ExpectedRow1List Values" +expRow2List);

		System.out.println("ActualRow3List Values  " +actRow3List);
		System.out.println("ExpectedRow3List Values" +expRow3List);

		getDriver().switchTo().window(openTabs.get(0));

		Thread.sleep(2000);

		getDriver().switchTo().window(openTabs.get(1)).close();

		Thread.sleep(2000);

		getDriver().switchTo().window(openTabs.get(0));

		if (actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) 
				&& actRow3List.equalsIgnoreCase(expRow3List))
		{
			getDriver().navigate().refresh();
			Thread.sleep(3000);
			return true;
		} 
		else
		{
			getDriver().navigate().refresh();
			Thread.sleep(3000);
			return false;
		}
	}



	@FindBy(xpath="//div[@id='divPanel_2']/div[2]/div/div/table/tbody[2]/tr/td/label")
	public static List<WebElement> infoPanelCustAgeingAnalysisTableList;

	@FindBy(xpath="//div[@id='divPanel_4']/div[2]/div/div/table/tbody[2]/tr/td/label")
	public static List<WebElement> infoPanelCustAgeingAnalysisBaseTableList;

	@FindBy(xpath="//div[@id='divPanel_5']/div[2]/div/div/table/tbody[2]/tr/td/label")
	public static List<WebElement> infoPanelCustAgeingAnalysisLocalTableList;

	@FindBy(xpath="//div[@id='divPanel_6']/div[2]/div/div/table/tbody/tr/td/label")
	public static List<WebElement> infoPanelAuthorizationTableList;


	public static boolean checkCustomizeMasterInfoPanelCustomization() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getDriver().navigate().refresh();

		Thread.sleep(4000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		getAction().moveToElement(homeMenu).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemInfoPanelCustomizationTab));
		itemInfoPanelCustomizationTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelCustCreditHistory));
		boolean actCreditHistoryPanel = infoPanelCustCreditHistory.isDisplayed();
		boolean expCreditHistoryPanel = true;


		boolean actAgeingAnalysisPanel = infoPanelCustAgeingAnalysis.isDisplayed();
		boolean expAgeingAnalysisPanel = true;

		int count = infoPanelCustAgeingAnalysisTableList.size();

		ArrayList<String> AgeingAnalysisTable = new ArrayList<String>();

		for (int i = 0; i < count; i++) 
		{
			String data = infoPanelCustAgeingAnalysisTableList.get(i).getText();
			AgeingAnalysisTable.add(data);
		}

		String actAgeingAnalysisTableList = AgeingAnalysisTable.toString();
		String expAgeingAnalysisTableList = "[0-30 Days, 0, 0, 30-60 Days, 0, 0, 60-180 Days, 0, 0, 180-360 Days, 0, 0, >360 Days, 0, 0, Ledger Balance, 0, 0, PDC Amount, 0, 0, Unadjusted Amount, 0, 0, Balance Amount, 0, 0]"; 



		boolean actAgeingAnalysisBasePanel = infoPanelCustAgeingAnalysisBase.isDisplayed();
		boolean expAgeingAnalysisBasePanel = true;

		int count1 = infoPanelCustAgeingAnalysisBaseTableList.size();

		ArrayList<String> AgeingAnalysisBaseTable = new ArrayList<String>();

		for (int i = 0; i < count1; i++) 
		{
			String data = infoPanelCustAgeingAnalysisBaseTableList.get(i).getText();
			AgeingAnalysisBaseTable.add(data);
		}

		String actAgeingAnalysisBaseTableList = AgeingAnalysisBaseTable.toString();
		String expAgeingAnalysisBaseTableList = "[0-30 Days, 0, 0, 30-60 Days, 0, 0, 60-180 Days, 0, 0, 180-360 Days, 0, 0, >360 Days, 0, 0, Ledger Balance, 0, 0, PDC Amount, 0, 0, Unadjusted Amount, 0, 0, Balance Amount, 0, 0]";



		boolean actAgeingAnalysisLocalPanel = infoPanelCustAgeingAnalysisLocal.isDisplayed();
		boolean expAgeingAnalysisLocalPanel = true;

		int count2 = infoPanelCustAgeingAnalysisLocalTableList.size();

		ArrayList<String> AgeingAnalysisLocalTable = new ArrayList<String>();

		for (int i = 0; i < count2; i++)
		{
			String data = infoPanelCustAgeingAnalysisLocalTableList.get(i).getText();
			AgeingAnalysisLocalTable.add(data);
		}

		String actAgeingAnalysisLocalTableList = AgeingAnalysisLocalTable.toString();
		String expAgeingAnalysisLocalTableList = "[0-30 Days, 0, 0, 30-60 Days, 0, 0, 60-180 Days, 0, 0, 180-360 Days, 0, 0, >360 Days, 0, 0, Ledger Balance, 0, 0, PDC Amount, 0, 0, Unadjusted Amount, 0, 0, Balance Amount, 0, 0]";



		boolean actAuthorizationPanel = infoPanelAuthorization.isDisplayed();
		boolean expAuthorizationPanel = true;

		int count3 = infoPanelAuthorizationTableList.size();

		ArrayList<String> AuthorizationTable = new ArrayList<String>();

		for (int i = 0; i < count3; i++) 
		{
			String data = infoPanelAuthorizationTableList.get(i).getText();
			AuthorizationTable.add(data);
		}

		String actAuthorizationTableList = AuthorizationTable.toString();
		String expAuthorizationTableList = "[AuthorisedBy, , iAuthDate, , iAuthTime, , Status, ]";


		System.out.println("***********************************checkCustomizeMasterInfoPanelCustomization*********************************");

		System.out.println("CreditHistoryPanel            : "+actCreditHistoryPanel            +"  Value Expected  "+expCreditHistoryPanel);
		System.out.println("AgeingAnalysisPanel           : "+actAgeingAnalysisPanel           +"  Value Expected  "+expAgeingAnalysisPanel);
		System.out.println(actAgeingAnalysisTableList);
		System.out.println(expAgeingAnalysisTableList);
		System.out.println("AgeingAnalysisBasePanel       : "+actAgeingAnalysisBasePanel       +"  Value Expected  "+expAgeingAnalysisBasePanel);
		System.out.println(actAgeingAnalysisBaseTableList);
		System.out.println(expAgeingAnalysisBaseTableList);
		System.out.println("AgeingAnalysisLocalPanel      : "+actAgeingAnalysisLocalPanel      +"  Value Expected  "+expAgeingAnalysisLocalPanel);
		System.out.println(actAgeingAnalysisLocalTableList);
		System.out.println(expAgeingAnalysisLocalTableList);
		System.out.println("AuthorizationPanel            : "+actAuthorizationPanel            +"  Value Expected  "+expAuthorizationPanel);
		System.out.println(actAuthorizationTableList);
		System.out.println(expAuthorizationTableList);

		if(actCreditHistoryPanel==expCreditHistoryPanel && actAgeingAnalysisPanel==expAgeingAnalysisPanel 
				&& actAgeingAnalysisTableList.equalsIgnoreCase(expAgeingAnalysisTableList) && actAgeingAnalysisBasePanel==expAgeingAnalysisBasePanel 
				&& actAgeingAnalysisBaseTableList.equalsIgnoreCase(expAgeingAnalysisBaseTableList) && actAgeingAnalysisLocalPanel==expAgeingAnalysisLocalPanel 
				&& actAgeingAnalysisLocalTableList.equalsIgnoreCase(expAgeingAnalysisLocalTableList) && actAuthorizationPanel==expAuthorizationPanel
				&& actAuthorizationTableList.equalsIgnoreCase(expAuthorizationTableList))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}


	@FindBy(xpath="//*[@id='infoPanelSetting_save']")
	public static WebElement infoPanelSettingSaveBtn;

	@FindBy(xpath="//button[@id='infoPanelSetting_Cancel']")
	public static WebElement infoPanelSettingCancelBtn;

	@FindBy(xpath="(//span[@id='btnCancel'])[2]")
	public static WebElement infoPanelSettingCloseBtn;

	@FindBy(xpath="//input[@id='txt_InfoPanel_PanelName']")
	public static WebElement infoPanelSettingsPanelNameTxt;

	@FindBy(xpath="//table[@id='id_tblBuildFrom_master']/tbody/tr[1]/td[2]/input")
	public static WebElement infoPanelSettingsMasterFieldsNameRow1;

	@FindBy(xpath="//table[@id='id_tblBuildFrom_master']/tbody/tr[2]/td[2]/input")
	public static WebElement infoPanelSettingsMasterFieldsNameRow2;

	@FindBy(xpath="//table[@id='id_tblBuildFrom_master']/tbody/tr[1]/td[3]/input")
	public static WebElement infoPanelSettingsMasterFieldsCaptionRow1;

	@FindBy(xpath="//table[@id='id_tblBuildFrom_master']/tbody/tr[2]/td[3]/input")
	public static WebElement infoPanelSettingsMasterFieldsCaptionRow2;

	@FindBy(xpath="//select[@id='MasterFields_OptionNames']")
	public static WebElement infoPanelSettingsFieldNameDrpdwn;

	@FindBy(xpath="//div[@id='id_tblBuildFrom_master_details']/table/tbody")
	public static WebElement infoPanelSettingsPreviewField; 





	public static boolean checkCustomizeMasterInfoPanelCustomizationAddingPanel() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{	
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(iteminfoPanelCust_AddBtn));
		iteminfoPanelCust_AddBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelSettingSaveBtn));
		infoPanelSettingSaveBtn.click();

		String expMessageWithoutPanelName = "Enter panel name";
		String actMessageWithoutPanelName = checkValidationMessage(expMessageWithoutPanelName);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelSettingsPanelNameTxt));
		infoPanelSettingsPanelNameTxt.click();
		infoPanelSettingsPanelNameTxt.sendKeys("Trial Info Panel");
		infoPanelSettingsPanelNameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelSettingSaveBtn));
		infoPanelSettingSaveBtn.click();

		String expMessageWithoutFieldName = "Select atleast one field";
		String actMessageWithoutFieldName = checkValidationMessage(expMessageWithoutFieldName);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelSettingsMasterFieldsCaptionRow1));
		getAction().doubleClick(infoPanelSettingsMasterFieldsNameRow1).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelSettingsFieldNameDrpdwn));

		Select fieldNameDrpdwn = new Select(infoPanelSettingsFieldNameDrpdwn);
		fieldNameDrpdwn.selectByVisibleText("Name");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelSettingsMasterFieldsCaptionRow1));
		infoPanelSettingsMasterFieldsCaptionRow1.click();

		Thread.sleep(2000);

		String actPreview = infoPanelSettingsPreviewField.getText();
		String expPreview = "Name Data goes here";


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelSettingSaveBtn));
		infoPanelSettingSaveBtn.click();

		String expMessage = "Panel Details Saved Successfully";
		String actMessage = checkValidationMessage(expMessage);

		System.out.println("***********************************checkCustomizeMasterInfoPanelCustomizationAddingPanel*********************************");

		System.out.println("MessageWithoutPanelName : "+actMessageWithoutPanelName +"  Value Expected  "+expMessageWithoutPanelName);
		System.out.println("MessageWithoutFieldName : "+actMessageWithoutFieldName +"  Value Expected  "+expMessageWithoutFieldName);
		System.out.println("Preview                 : "+actPreview                 +"  Value Expected  "+expPreview);
		System.out.println("Message                 : "+actMessage                 +"  Value Expected  "+expMessage);

		if(actMessageWithoutPanelName.equalsIgnoreCase(expMessageWithoutPanelName) && actMessageWithoutFieldName.equalsIgnoreCase(expMessageWithoutFieldName) 
				&& actPreview.equalsIgnoreCase(expPreview) && actMessage.equalsIgnoreCase(expMessage))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}







	@FindBy(xpath="//*[@id='infoPanelContainer_div']/div/div")
	public static List<WebElement> infoPanelCustPanelsList;


	@FindBy(xpath="//*[@id='divPanel_7']/div[1]/label/strong")
	public static WebElement infoPanelCustCreatedPanel;

	@FindBy(xpath="//*[@id='divPanel_7']/div[2]//tbody//td[1]")
	public static WebElement infoPanelCustCreatedPanelTableTxt;


	public static boolean checkCustomizeMasterInfoPanelCustomizationValidatingPanelAdded() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		getAction().moveToElement(homeMenu).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		Thread.sleep(2000);



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemInfoPanelCustomizationTab));
		itemInfoPanelCustomizationTab.click();

		Thread.sleep(2000);

		int actPanelsCount = infoPanelCustPanelsList.size();
		int expPanelsCount = 6;

		boolean actCreatedPanelIsDisplaying = infoPanelCustCreatedPanel.isDisplayed();
		boolean expCreatedPanelIsDisplaying = true;

		String actCreatedPanel = infoPanelCustCreatedPanel.getText();
		String expCreatedPanel = "Trial Info Panel";

		String actinfoPanelCustCreatedPanelTableTxt = infoPanelCustCreatedPanelTableTxt.getText();
		String expinfoPanelCustCreatedPanelTableTxt = "Name";

		System.out.println("***********************************checkCustomizeMasterInfoPanelCustomizationValidatingPanelAdded*********************************");

		System.out.println("PanelsCount                       : "+actPanelsCount              +"  Value Expected  "+expPanelsCount);
		System.out.println("CreatedPanelIsDisplaying          : "+actCreatedPanelIsDisplaying +"  Value Expected  "+expCreatedPanelIsDisplaying);
		System.out.println("CreatedPanel                      : "+actCreatedPanel             +"  Value Expected  "+expCreatedPanel);
		System.out.println("infoPanelCustCreatedPanelTableTxt : "+actinfoPanelCustCreatedPanelTableTxt+"  Value Expected  "+expinfoPanelCustCreatedPanelTableTxt);

		if(actPanelsCount==expPanelsCount && actCreatedPanelIsDisplaying==expCreatedPanelIsDisplaying && actCreatedPanel.equalsIgnoreCase(expCreatedPanel) 
				&& actinfoPanelCustCreatedPanelTableTxt.equalsIgnoreCase(expinfoPanelCustCreatedPanelTableTxt))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}






	@FindBy(xpath="//table[@id='tbl_infoPanel_names']/tbody/tr/td[2]")
	public static List<WebElement> masterCustInfoPanelNameList;
	
	@FindBy(xpath="//table[@id='tbl_infoPanel_names']/tbody/tr/td[4]/i")
	public static List<WebElement> masterCustInfoPanelAddOrDeleteBtnList;

	@FindBy(xpath="//table[@id='tbl_infoPanel_names']/tbody/tr/td[3]")
	public static List<WebElement> masterCustInfoPanelDetailsList;

	@FindBy(xpath="//*[@id='Customize_RemoveOne_InfoPanel']/i")
	public static WebElement masterCustInfoPanelAddOrDeleteBtn;
	
	
	@FindBy(xpath="//*[@id='btnYes_DelInfoPanel']")
	public static WebElement deleteYesBtn;
	

	public static boolean checkValidatingCreatedInfoPanelInMasterAccount() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelCust_CloseBtn));
		infoPanelCust_CloseBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSideBarBtn));
		masterSideBarBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterInfoPanelCustammizeBtn));
		masterInfoPanelCustammizeBtn.click();

		Thread.sleep(2000);

		int count1 = masterCustInfoPanelNameList.size();

		ArrayList<String> panelDetails = new ArrayList<String>();

		for (int i = 0; i < count1; i++) 
		{
			String data = masterCustInfoPanelNameList.get(i).getText();
			panelDetails.add(data);
		}

		String actPanelDetailsList = panelDetails.toString();
		String expPanelDetailsList = "[Credit History, Ageing Analysis, Ageing Analysis Base, Ageing Analysis Local, Authorization, Trial Info Panel]";
		

		int count = masterCustInfoPanelNameList.size();
		
		ArrayList<String> panelName = new ArrayList<String>();
		
		for (int i = 0; i < count; i++) 
		{
			String data = masterCustInfoPanelNameList.get(i).getText();
			panelName.add(data);
			
			if (data.equalsIgnoreCase("Trial Info Panel")) 
			{
				masterCustInfoPanelAddOrDeleteBtnList.get(i).click();
			}
		}
		
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPane_PopDeatilsSaveBtn));
		infoPane_PopDeatilsSaveBtn.click();

		Thread.sleep(2000);

		String expMessage = "Panel saved!!";
		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(3000);

		System.out.println("***********************************checkValidatingCreatedInfoPanelInMasterAccount*********************************");

	/*	System.out.println(actPanelNameList);
		System.out.println(expPanelNameList);*/
		System.out.println(actPanelDetailsList);
		System.out.println(expPanelDetailsList);

		if(/*actPanelNameList.equalsIgnoreCase(expPanelNameList) && */actPanelDetailsList.equalsIgnoreCase(expPanelDetailsList)
				&& actMessage.equalsIgnoreCase(expMessage))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}




	@FindBy(xpath="//div[@id='divInfoPanel']/div/div/div[1]/label")
	public static List<WebElement> infoPanelDashletsList;

	@FindBy(xpath="//div[@id='divInfoPanel']//table/tbody/tr/td")
	public static List<WebElement> infoPanelDashlet1Details;

	@FindBy(xpath="//div[@id='divInfoPanel']//table/tbody/tr/td/label")
	public static List<WebElement> infoPanelDashlet2Details;


	public static boolean checkValidatingDashletAddedInInfoPanelBySelectingTestMaster() throws InterruptedException
	{
		getDriver().navigate().refresh();
		Thread.sleep(2000);
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		getAction().moveToElement(homeMenu).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSideBarBtn));
		masterSideBarBtn.click();

		Thread.sleep(2000);

		int dashletcount = infoPanelDashletsList.size();

		ArrayList<String> dashlet = new ArrayList<String>();

		for (int i = 0; i < dashletcount; i++) 
		{
			String data = infoPanelDashletsList.get(i).getText();
			dashlet.add(data);
		}

		String actDashletAdded = dashlet.toString();
		String expDashletAdded = "[Trial Info Panel]";



		int count = masterGridBodyName.size();

		ArrayList<String> AccountNames = new ArrayList<String>();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();
			AccountNames.add(data);

			if (data.equalsIgnoreCase("WA COGS ACC INV")) 
			{
				masterGridBodyChkbox.get(i).click();
			}
		}

		Thread.sleep(2000);

		ArrayList<String> panelDetails = new ArrayList<String>();
		int count1 = infoPanelDashlet1Details.size();

		for (int i = 0; i < count1; i++) 
		{
			String data = infoPanelDashlet1Details.get(i).getText();
			panelDetails.add(data);
		}

		String actDashletDetails = panelDetails.toString();
		String expDashletDetails = "[Name, :, WA COGS ACC INV]";

		System.out.println("*********************************checkValidatingDashletAddedInInfoPanelBySelectingTestMaster*****************************************");

		System.out.println(actDashletAdded);
		System.out.println(expDashletAdded);
		System.out.println(actDashletDetails);
		System.out.println(expDashletDetails);

		if (actDashletAdded.equalsIgnoreCase(expDashletAdded) && actDashletDetails.equalsIgnoreCase(expDashletDetails))
		{
			return true;
		} 
		else
		{
			return false;
		}
	}







	public static boolean checkAddingAuthorizationDashletInfoPanelInMasterAccount() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		
		getDriver().navigate().refresh();
		Thread.sleep(2000);
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		getAction().moveToElement(homeMenu).click().build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

	
		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSideBarBtn));
		masterSideBarBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterInfoPanelCustammizeBtn));
		masterInfoPanelCustammizeBtn.click();

		Thread.sleep(2000);

		int count = masterCustInfoPanelNameList.size();

		for (int i = 0; i < count; i++) 
		{
			String data = masterCustInfoPanelNameList.get(i).getText();
			

			if (data.equalsIgnoreCase("Authorization")) 
			{
				masterCustInfoPanelNameList.get(i).click();
				masterCustInfoPanelAddOrDeleteBtnList.get(i).click();
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPane_PopDeatilsSaveBtn));
		infoPane_PopDeatilsSaveBtn.click();

		Thread.sleep(2000);

		String expMessage = "Panel saved!!";
		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(3000);

		System.out.println("***********************************checkAddingAuthorizationDashletInfoPanelInMasterAccount*********************************");

		if(actMessage.equalsIgnoreCase(expMessage))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}








	public static boolean checkValidatingAuthorizationDashletAddedInInfoPanel() throws InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSideBarBtn));
		masterSideBarBtn.click();

		Thread.sleep(2000);

		int dashletcount = infoPanelDashletsList.size();

		ArrayList<String> dashlet = new ArrayList<String>();

		for (int i = 0; i < dashletcount; i++) 
		{
			String data = infoPanelDashletsList.get(i).getText();
			dashlet.add(data);
		}

		String actDashletAdded = dashlet.toString();
		String expDashletAdded = "[Authorization]";

		Thread.sleep(2000);


		ArrayList<String> panelDetails = new ArrayList<String>();
		int count = infoPanelDashlet1Details.size();

		for (int i = 0; i < count; i++) 
		{
			String data = infoPanelDashlet1Details.get(i).getText();
			panelDetails.add(data);
		}

		String actDashletDetails = panelDetails.toString();
		String expDashletDetails = "[Authorize by, UserAllOptions, Date, Jul 29 2020, Time, 18:04:02, Status, Authorised]";

		System.out.println("*********************************checkValidatingAuthorizationDashletAddedInInfoPanel*****************************************");

		System.out.println(actDashletAdded);
		System.out.println(expDashletAdded);
		System.out.println(actDashletDetails);
		System.out.println(expDashletDetails);

		if (actDashletAdded.equalsIgnoreCase(expDashletAdded) && actDashletDetails.equalsIgnoreCase(expDashletDetails))
		{
			return true;
		} 
		else
		{
			return false;
		}
	}







	public static boolean checkDeletingAuthorizationDashletInfoPanelInMasterAccount() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterInfoPanelCustammizeBtn));
		masterInfoPanelCustammizeBtn.click();

		int count = masterCustInfoPanelNameList.size();

		for (int i = 0; i < count; i++) 
		{
			String data = masterCustInfoPanelNameList.get(i).getText();

			if (data.equalsIgnoreCase("Authorization")) 
			{
				masterCustInfoPanelNameList.get(i).click();
				masterCustInfoPanelAddOrDeleteBtnList.get(i).click();
				
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPane_PopDeatilsSaveBtn));
		infoPane_PopDeatilsSaveBtn.click();

		Thread.sleep(2000);

		String expMessage = "Panel saved!!";
		String actMessage = checkValidationMessage(expMessage);

		Thread.sleep(3000);

		System.out.println("***********************************checkDeletingAuthorizationDashletInfoPanelInMasterAccount*********************************");

		if(actMessage.equalsIgnoreCase(expMessage))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}







	public static boolean checkCustomizeMasterInfoPanelCustomizationEditingAndValidatingPanelAdded() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		Thread.sleep(2000);


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemInfoPanelCustomizationTab));
		itemInfoPanelCustomizationTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelCustCreatedPanel));
		getAction().doubleClick(infoPanelCustCreatedPanel).build().perform();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelSettingsPanelNameTxt));
		infoPanelSettingsPanelNameTxt.click();
		infoPanelSettingsPanelNameTxt.sendKeys(Keys.END);
		infoPanelSettingsPanelNameTxt.sendKeys(Keys.SHIFT, Keys.HOME);
		infoPanelSettingsPanelNameTxt.sendKeys("Trial Info Panel Update");
		infoPanelSettingsPanelNameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelSettingsMasterFieldsCaptionRow1));
		getAction().doubleClick(infoPanelSettingsMasterFieldsNameRow1).build().perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelSettingsFieldNameDrpdwn));

		Select fieldNameDrpdwn = new Select(infoPanelSettingsFieldNameDrpdwn);
		fieldNameDrpdwn.selectByVisibleText("Account Type");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelSettingsMasterFieldsCaptionRow1));
		infoPanelSettingsMasterFieldsCaptionRow1.click();

		Thread.sleep(2000);

		String actPreview = infoPanelSettingsPreviewField.getText();
		String expPreview = "Account Type Data goes here";


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelSettingSaveBtn));
		infoPanelSettingSaveBtn.click();

		String expMessage = "Panel Details Saved Successfully";
		String actMessage = checkValidationMessage(expMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelCust_CloseBtn));
		infoPanelCust_CloseBtn.click();

		getDriver().navigate().refresh();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemInfoPanelCustomizationTab));
		itemInfoPanelCustomizationTab.click();

		Thread.sleep(2000);

		String actCreatedPanel = infoPanelCustCreatedPanel.getText();
		String expCreatedPanel = "Trial Info Panel Update";

		String actinfoPanelCustCreatedPanelTableTxt = infoPanelCustCreatedPanelTableTxt.getText();
		String expinfoPanelCustCreatedPanelTableTxt = "Account Type :";

		System.out.println("***********************************checkCustomizeMasterInfoPanelCustomizationEditingAndValidatingPanelAdded*********************************");

		System.out.println("Preview                           : "+actPreview                  +"  Value Expected  "+expPreview);
		System.out.println("Message                           : "+actMessage                  +"  Value Expected  "+expMessage);
		System.out.println("CreatedPanel                      : "+actCreatedPanel             +"  Value Expected  "+expCreatedPanel);
		System.out.println("infoPanelCustCreatedPanelTableTxt : "+actinfoPanelCustCreatedPanelTableTxt+"  Value Expected  "+expinfoPanelCustCreatedPanelTableTxt);

		if(actPreview.equalsIgnoreCase(expPreview) && actMessage.equalsIgnoreCase(expMessage) && actCreatedPanel.equalsIgnoreCase(expCreatedPanel) 
				&& actinfoPanelCustCreatedPanelTableTxt.equalsIgnoreCase(expinfoPanelCustCreatedPanelTableTxt))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}

	@FindBy(xpath="//*[@id='btnYes_DelInfoPanel']")
	public static WebElement deletePopupYesbtn;
	



	public static boolean checkCustomizeMasterInfoPanelCustomizationDeletingInfoPanelAdded() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getDriver().navigate().refresh();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemInfoPanelCustomizationTab));
		itemInfoPanelCustomizationTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelCustCreatedPanel));
		infoPanelCustCreatedPanel.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelCust_DeleteBtn));
		infoPanelCust_DeleteBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deletePopupYesbtn));
		deletePopupYesbtn.click();

		String expMessage = "InfoPanel Deleted Successfully.";
		String actMessage = checkValidationMessage(expMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(infoPanelCust_CloseBtn));
		infoPanelCust_CloseBtn.click();


		getDriver().navigate().refresh();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();



		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemInfoPanelCustomizationTab));
		itemInfoPanelCustomizationTab.click();

		Thread.sleep(2000);

		int actPanelsCount = infoPanelCustPanelsList.size();
		int expPanelsCount = 5;

		System.out.println("***********************************checkCustomizeMasterInfoPanelCustomizationDeletingInfoPanelAdded*********************************");

		System.out.println("Message       : "+actMessage     +"  Value Expected  "+expMessage);
		System.out.println("PanelsCount   : "+actPanelsCount +"  Value Expected  "+expPanelsCount);

		if(actPanelsCount==expPanelsCount && actMessage.equalsIgnoreCase(expMessage))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}

	
	
	public static boolean checkAddDefaultFieldInToCustomizeTreeOfDepartmentMaster() throws InterruptedException
	{
		getDriver().navigate().refresh();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();
		
		Thread.sleep(2000);
		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentMenu));
		departmentMenu.click();
		
		int count2 = masterGridHeaderList.size();
		
		for (int i = 0; i < count2; i++) 
		{
			String data = masterGridHeaderList.get(i).getText();
			if (data.equalsIgnoreCase("Code")) 
			{
				Thread.sleep(1000);
				getAction().contextClick(masterGridHeaderList.get(i)).build().perform();
			}
		}
		
		Thread.sleep(2000);
		moreBtnInCust.click();
		
		Thread.sleep(2000);
		
		int count1 = masterCustomizeTreePopupFieldsList.size();
		
		for (int i = 0; i < count1; i++) 
		{
			String data = masterCustomizeTreePopupFieldsList.get(i).getText();
			System.err.println(data);
			((JavascriptExecutor) getDriver()).executeScript("arguments[0].scrollIntoView(true);", masterCustomizeTreePopupFieldsList.get(i));
			
			if (data.equalsIgnoreCase("Created by")) 
			{
				masterCustomizeTreePopupChkboxList.get(i).click();
				break;
			}
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustomizeTreePopupOkBtn));
		masterCustomizeTreePopupOkBtn.click();
		Thread.sleep(3000);
		
		ArrayList<String> AccountHeaderAfterAddingColumn = new ArrayList<String>();
		int count3 = masterGridHeaderList.size();
		for (int i = 0; i < count3; i++) 
		{
			String data = masterGridHeaderList.get(i).getText().trim();
			if (data.isEmpty() == false)
			{
				AccountHeaderAfterAddingColumn.add(data);
				
			}
			
		}
		
		String actAccountHeaderAfterAddingColumn = AccountHeaderAfterAddingColumn.toString();
		String expAccountHeaderAfterAddingColumn = "[MasterId, Name, Code, Created by]";
	
		System.out.println(actAccountHeaderAfterAddingColumn);
		System.out.println(expAccountHeaderAfterAddingColumn);
		
		
		Thread.sleep(2000);
		
		if (actAccountHeaderAfterAddingColumn.equalsIgnoreCase(expAccountHeaderAfterAddingColumn))
		{
			return true;
		} 
		else 
		{
			return false;
		}

		
	}






	// Behaviour Drop Dwn 	


	public boolean checkBehaviourFieldsUnderPropreitesTABUnderCustomization() throws InterruptedException
	{
		getDriver().navigate().refresh();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();



		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(3000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cus2ndRowEditBtn));
		cus2ndRowEditBtn.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesBehaviourDropdown));
		extraFields_PropertiesBehaviourDropdown.click();


		String Strlpl= extraFields_PropertiesBehaviourDropdown.getText();

		System.out.println(Strlpl);

		String[] testString=Strlpl.split("\n");

		List<String> listg = Arrays.asList(testString);

		System.out.println("Converting to string array"+listg);

		ArrayList<String> list=new ArrayList<String>();   

		list.add("--None--"); 
		list.add("Password Field");    
		list.add("Selection");    
		list.add("Auto Complete");    
		list.add("Multi-Line");    
		list.add("Incremental");    

		System.out.println(list);  

		if((listg.equals(list)) )
		{
			return true;

		}
		else
		{
			return false;

		}
	}



	@FindBy(xpath="//*[@id='mainTab_0']/div/div/table/tbody/tr[2]/td[1]/i")
	public static WebElement cus2ndRowEditBtn;

	@FindBy(xpath="//*[@id='HeaderDetails_6']/div/div/table/tbody/tr[1]/td[1]/i[1]")
	public static WebElement cus1stRowEditBtn;

	
	@FindBy(xpath="(//*[@id='btnCloseMasterCutomizationFromMasterScreen']/a/i)[1]")
	public static WebElement customizeMasterCreateCreateTabCloseButton;


	public boolean checkDropDownBehaviourDrpDwnWithOnSelectingPasswordField() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{

		Select s1=new Select(extraFields_PropertiesBehaviourDropdown);
		s1.selectByValue("1");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();


		String expMessage="Field Updated Successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkOkButtonWithInputMandatoryFieldsCreateCreateTabDisplayInCustomizeTab***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		Thread.sleep(1000);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateCreateTabNewlyCreateTabSaveButton));
		customizeMasterCreateCreateTabNewlyCreateTabSaveButton.click();
		
		String expMessage1="Master Updated Successfully";

		String actMessage1=checkValidationMessage(expMessage1);
		
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateCreateTabCloseButton));
		customizeMasterCreateCreateTabCloseButton.click();
		
		
		

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
		userNameDisplay.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();

		Thread.sleep(4000);

		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt="su";

		String pawslt="su";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
		username.click();
		Thread.sleep(2000);
		username.clear();
		Thread.sleep(2000);
		username.sendKeys(unamelt);
		getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
		password.click();
		Thread.sleep(2000);
		password.clear();*/
		Thread.sleep(2000);
		password.sendKeys(pawslt);

		String compname="Account Properties And Customization";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		int zqSize=cSize+1;

		System.out.println("CompanyDropdownList Count :"+cqSize);

		System.out.println("Company dropdown is :"+ zqSize);


		//Select dropdown= new Select(lp.companyDropDownList);
		int i;

		//List<WebElement> list = dropdown.getOptions();

		//List<String> text = new ArrayList<>();
		for(i=0; i<elementCount.size(); i++) 
		{
			elementCount.get(i).getText();
			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}	
		}

		lp.clickOnSignInBtn();

		Thread.sleep(2000);
		reLogin(unamelt, pawslt, compname);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		masterNewBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("Password Account");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("Password Account");

		Thread.sleep(2000);
		codeTxt.sendKeys(Keys.TAB);

		String actName=nameTxt.getAttribute("value");
		String expName="Password Account";

		System.out.println("NAME TXT : "+actName +" Value Expected : "+expName);

		String actCode=codeTxt.getAttribute("type");
		String expCodee="password";// Display in the form DOT 

		System.out.println("CODE TXT : "+actCode +" Value Expected : "+expCodee);

		if (actMessage.equalsIgnoreCase(expMessage) && 
				actName.equalsIgnoreCase(expName) && actCode.equalsIgnoreCase(expCodee))

		{
			System.out.println(" Test Pass: Password Filed Behavoir as Expected ");
			return true;
		} 
		else 
		{
			System.out.println(" Test FAIl: Password Filed Behavoir as Expected ");
			return false;
		}

	}





	@FindBy(xpath="//*[@id='sCode_table_body']/tr/td[2]")
	public static List<WebElement> codeDrpdwnList;



	public boolean checkDropDownBehaviourDrpDwnWithOnSelectingSelection() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{

		getDriver().navigate().refresh();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(3000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cus2ndRowEditBtn));
		cus2ndRowEditBtn.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesBehaviourDropdown));

		Select s1=new Select(extraFields_PropertiesBehaviourDropdown);
		s1.selectByValue("2");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();


		String expMessage="Field Updated Successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkOkButtonWithInputMandatoryFieldsCreateCreateTabDisplayInCustomizeTab***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);


		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateCreateTabNewlyCreateTabSaveButton));
		customizeMasterCreateCreateTabNewlyCreateTabSaveButton.click();
		
		String expMessage1="Master Updated Successfully";

		String actMessage1=checkValidationMessage(expMessage1);
		
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateCreateTabCloseButton));
		customizeMasterCreateCreateTabCloseButton.click();
		
		
		

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
		userNameDisplay.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();

		Thread.sleep(4000);

		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt="su";

		String pawslt="su";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
		username.click();
		Thread.sleep(2000);
		username.clear();
		Thread.sleep(2000);
		username.sendKeys(unamelt);
		getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
		password.click();
		Thread.sleep(2000);
		password.clear();*/
		Thread.sleep(2000);
		Thread.sleep(2000);
		password.sendKeys(pawslt);

		String compname="Account Properties And Customization";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		int zqSize=cSize+1;

		System.out.println("CompanyDropdownList Count :"+cqSize);

		System.out.println("Company dropdown is :"+ zqSize);


		//Select dropdown= new Select(lp.companyDropDownList);
		int i;

		//List<WebElement> list = dropdown.getOptions();

		//List<String> text = new ArrayList<>();
		for(i=0; i<elementCount.size(); i++) 
		{
			elementCount.get(i).getText();
			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}	
		}

		lp.clickOnSignInBtn();

		//checkRefershPopOnlogin();

		//checkPopUpWindow();

		Thread.sleep(2000);
		reLogin(unamelt, pawslt, compname);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		masterNewBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("Selection Account");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("00");

		String actName=nameTxt.getAttribute("value");
		String expName="Selection Account";

		System.err.println("NAME TXT : "+actName +" Value Expected : "+expName);


		int codeDrpdwnListCount=codeDrpdwnList.size();

		ArrayList<String >codeDrpdwnListArray= new ArrayList<>();

		for (int j = 0; j < codeDrpdwnListCount; j++)
		{
			String data=codeDrpdwnList.get(j).getText();
			codeDrpdwnListArray.add(data);
		}


		String actCode=codeDrpdwnListArray.toString();
		String expCode="[001, 002, 003, 007, 009]";

		System.err.println("CODE TXT : "+actCode +
				" Value Expected : "+expCode);

		if (actMessage.equalsIgnoreCase(expMessage) && 
				actName.equalsIgnoreCase(expName) && actCode.equalsIgnoreCase(expCode))

		{
			System.out.println(" Test Pass: Password Filed Behavoir as Expected ");
			return true;
		} 
		else 
		{

			System.out.println(" Test FAIl: Password Filed Behavoir as Expected ");
			return false;
		}

	}


	@FindBy(xpath="//*[@id='FieldsDetails_WordWrap']/following-sibling::span")
	public static WebElement wordWarpChkbox;
	
	@FindBy(xpath="//*[@id='FieldsDetails_WordWrap']")
	public static WebElement wordWarpChkboxSelected;

	@FindBy(xpath="//*[@id='ScrollBar_Horizontal']/following-sibling::span")
	public static WebElement horizontalChkbox;
	
	@FindBy(xpath="//*[@id='ScrollBar_Horizontal']")
	public static WebElement horizontalChkboxSelected;

	@FindBy(xpath="//*[@id='ScrollBar_Vertical']/following-sibling::span")
	public static WebElement verticalChkbox;

	
	@FindBy(xpath="//*[@id='ScrollBar_Vertical']")
	public static WebElement verticalChkboxSelected;

	public boolean checkDropDownBehaviourDrpDwnWithOnSelectingMultiLineWithWarp() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException
	{

		getDriver().navigate().refresh();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(3000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cus2ndRowEditBtn));
		cus2ndRowEditBtn.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesBehaviourDropdown));

		Select s1=new Select(extraFields_PropertiesBehaviourDropdown);
		s1.selectByValue("4");
		
		Thread.sleep(2000);
		getAction().moveToElement(wordWarpChkbox).build().perform();
		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wordWarpChkbox));
		boolean actwordWarpChkbox=wordWarpChkbox.isDisplayed();
		boolean expwordWarpChkbox=true;
		System.out.println("act  wordWarpChkbox : "+actwordWarpChkbox +" Value  "+expwordWarpChkbox);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(horizontalChkbox));
		boolean acthorizontalChkbox=horizontalChkbox.isDisplayed();
		boolean exphorizontalChkbox=true;
		System.out.println("  horizontalChkbox : "+acthorizontalChkbox +" Value  "+exphorizontalChkbox);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(verticalChkbox));
		boolean actverticalChkbox=verticalChkbox.isDisplayed();
		boolean expverticalChkbox=true;
		System.out.println("  verticalChkbox : "+actverticalChkbox +" Value  "+expverticalChkbox);

		if (wordWarpChkboxSelected.isSelected()==false) 
		{
			wordWarpChkbox.click();
		}
		
		 System.err.println("wordWarpChkbox.isSelected():   "+wordWarpChkboxSelected.isSelected());
		
		


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();


		String expMessage="Field Updated Successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkOkButtonWithInputMandatoryFieldsCreateCreateTabDisplayInCustomizeTab***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);
		
		Thread.sleep(3000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateCreateTabNewlyCreateTabSaveButton));
		customizeMasterCreateCreateTabNewlyCreateTabSaveButton.click();
		
		String expMessage1="Master Updated Successfully";

		String actMessage1=checkValidationMessage(expMessage1);
		
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateCreateTabCloseButton));
		customizeMasterCreateCreateTabCloseButton.click();
		
		

		Thread.sleep(2000);


		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
		userNameDisplay.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();

		Thread.sleep(4000);

		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt="su";

		String pawslt="su";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
		username.click();
		username.sendKeys(unamelt);
		getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
		password.click();

		Thread.sleep(2000);
		password.sendKeys(pawslt);

		String compname="Account Properties And Customization";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		int zqSize=cSize+1;

		System.out.println("CompanyDropdownList Count :"+cqSize);

		System.out.println("Company dropdown is :"+ zqSize);


		//Select dropdown= new Select(lp.companyDropDownList);
		int i;

		//List<WebElement> list = dropdown.getOptions();

		//List<String> text = new ArrayList<>();
		for(i=0; i<elementCount.size(); i++) 
		{
			elementCount.get(i).getText();
			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}	
		}

		lp.clickOnSignInBtn();

		//checkPopUpWindow();

		Thread.sleep(2000);
		reLogin(unamelt, pawslt, compname);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		masterNewBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq");
		
		 Robot robot = new Robot();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxtUnderMultipleType));
		codeTxtUnderMultipleType.click();
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_A);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		robot.keyRelease(KeyEvent.VK_A);
		Thread.sleep(1000);
		codeTxtUnderMultipleType.sendKeys("qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq");


		Thread.sleep(2000);

		String actName=nameTxt.getAttribute("value");
		String expName="qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq";

		String actCode=codeTxtUnderMultipleType.getAttribute("value");
		String expCode="qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq";

		System.out.println("NAME : "+actName +" Value  "+expName);
		System.out.println("CODE : "+actCode +" Value  "+expCode);

		if (actMessage.equalsIgnoreCase(expMessage) && 
				actName.equalsIgnoreCase(expName) && actCode.equalsIgnoreCase(expCode) && 
				actwordWarpChkbox==expwordWarpChkbox && 
				acthorizontalChkbox==exphorizontalChkbox && actverticalChkbox==expverticalChkbox)
		{
			System.out.println(" Test Pass: Code Data Type is Changed As From Input to Text Area and Behaviour Changes ");
			return true;
		} 
		else 
		{

			System.out.println(" Test Fail: Code Data Type is Changed As From Input to Text Area and Behaviour Changes ");
			return false;
		}

	}


	public boolean checkDropDownBehaviourDrpDwnWithOnSelectingMultiLineWithHorizontal() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException
	{

		getDriver().navigate().refresh();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();



		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(3000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cus2ndRowEditBtn));
		cus2ndRowEditBtn.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesBehaviourDropdown));

		Select s1=new Select(extraFields_PropertiesBehaviourDropdown);
		s1.selectByValue("4");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wordWarpChkbox));
		boolean actwordWarpChkbox=wordWarpChkbox.isDisplayed();
		boolean expwordWarpChkbox=true;
		System.out.println("act  wordWarpChkbox : "+actwordWarpChkbox +" Value  "+expwordWarpChkbox);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(horizontalChkbox));
		boolean acthorizontalChkbox=horizontalChkbox.isDisplayed();
		boolean exphorizontalChkbox=true;
		System.out.println("  horizontalChkbox : "+acthorizontalChkbox +" Value  "+exphorizontalChkbox);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(verticalChkbox));
		boolean actverticalChkbox=verticalChkbox.isDisplayed();
		boolean expverticalChkbox=true;
		System.out.println("  verticalChkbox : "+actverticalChkbox +" Value  "+expverticalChkbox);

		if (wordWarpChkboxSelected.isSelected()==true) 
		{
			wordWarpChkbox.click();
		}

		if (horizontalChkboxSelected.isSelected()==false) 
		{
			horizontalChkbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();


		String expMessage="Field Updated Successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkOkButtonWithInputMandatoryFieldsCreateCreateTabDisplayInCustomizeTab***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);
		
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateCreateTabNewlyCreateTabSaveButton));
		customizeMasterCreateCreateTabNewlyCreateTabSaveButton.click();
		
		String expMessage1="Master Updated Successfully";

		String actMessage1=checkValidationMessage(expMessage1);
		
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateCreateTabCloseButton));
		customizeMasterCreateCreateTabCloseButton.click();
		
		

		Thread.sleep(2000);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
		userNameDisplay.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();

		Thread.sleep(4000);

		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt="su";

		String pawslt="su";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
		username.click();
		username.sendKeys(unamelt);
		getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
		password.click();

		Thread.sleep(2000);
		password.sendKeys(pawslt);

		String compname="Account Properties And Customization";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		int zqSize=cSize+1;

		System.out.println("CompanyDropdownList Count :"+cqSize);

		System.out.println("Company dropdown is :"+ zqSize);


		//Select dropdown= new Select(lp.companyDropDownList);
		int i;

		//List<WebElement> list = dropdown.getOptions();

		//List<String> text = new ArrayList<>();
		for(i=0; i<elementCount.size(); i++) 
		{
			elementCount.get(i).getText();
			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}	
		}

		lp.clickOnSignInBtn();


		Thread.sleep(2000);
		
		reLogin(unamelt, pawslt, compname);
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		masterNewBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq");

		 Robot robot = new Robot();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxtUnderMultipleType));
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_A);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		robot.keyRelease(KeyEvent.VK_A);
		Thread.sleep(1000);
		robot.keyPress(KeyEvent.VK_BACK_SPACE);
		robot.keyRelease(KeyEvent.VK_BACK_SPACE);
		Thread.sleep(1000);
		codeTxtUnderMultipleType.sendKeys("qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq");


		Thread.sleep(2000);

		String actName=nameTxt.getAttribute("value");
		String expName="qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq";

		String actCode=codeTxtUnderMultipleType.getAttribute("value");
		String expCode="qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq";

		System.out.println("NAME : "+actName +" Value  "+expName);
		System.out.println("CODE : "+actCode +" Value  "+expCode);

		if (actMessage.equalsIgnoreCase(expMessage) && 
				actName.equalsIgnoreCase(expName) && actCode.equalsIgnoreCase(expCode) && 
				actwordWarpChkbox==expwordWarpChkbox && 
				acthorizontalChkbox==exphorizontalChkbox && actverticalChkbox==expverticalChkbox)
		{
			System.out.println(" Test Pass: Code Data Type is Changed As From Input to Text Area and Behaviour Changes ");
			return true;
		} 
		else 
		{

			System.out.println(" Test Fail: Code Data Type is Changed As From Input to Text Area and Behaviour Changes ");
			return false;
		}

	}


	public boolean checkDropDownBehaviourDrpDwnWithOnSelectingMultiLineWithVertical() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, AWTException
	{

		getDriver().navigate().refresh();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(3000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cus2ndRowEditBtn));
		cus2ndRowEditBtn.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesBehaviourDropdown));

		Select s1=new Select(extraFields_PropertiesBehaviourDropdown);
		s1.selectByValue("4");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(wordWarpChkbox));
		boolean actwordWarpChkbox=wordWarpChkbox.isDisplayed();
		boolean expwordWarpChkbox=true;
		System.out.println("act  wordWarpChkbox : "+actwordWarpChkbox +" Value  "+expwordWarpChkbox);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(horizontalChkbox));
		boolean acthorizontalChkbox=horizontalChkbox.isDisplayed();
		boolean exphorizontalChkbox=true;
		System.out.println("  horizontalChkbox : "+acthorizontalChkbox +" Value  "+exphorizontalChkbox);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(verticalChkbox));
		boolean actverticalChkbox=verticalChkbox.isDisplayed();
		boolean expverticalChkbox=true;
		System.out.println("  verticalChkbox : "+actverticalChkbox +" Value  "+expverticalChkbox);

		if (horizontalChkboxSelected.isSelected()==true) 
		{
			horizontalChkbox.click();
		}

		if (verticalChkboxSelected.isSelected()==false) 
		{
			verticalChkbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();


		String expMessage="Field Updated Successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkOkButtonWithInputMandatoryFieldsCreateCreateTabDisplayInCustomizeTab***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);


		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateCreateTabNewlyCreateTabSaveButton));
		customizeMasterCreateCreateTabNewlyCreateTabSaveButton.click();

		String expMessage1="Master Updated Successfully";

		String actMessage1=checkValidationMessage(expMessage1);

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateCreateTabCloseButton));
		customizeMasterCreateCreateTabCloseButton.click();



		Thread.sleep(2000);


		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
		userNameDisplay.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();

		Thread.sleep(4000);

		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt="su";

		String pawslt="su";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
		username.click();
		username.sendKeys(unamelt);
		getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
		password.click();
		Thread.sleep(2000);
		password.sendKeys(pawslt);

		String compname="Account Properties And Customization";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		int zqSize=cSize+1;

		System.out.println("CompanyDropdownList Count :"+cqSize);

		System.out.println("Company dropdown is :"+ zqSize);


		//Select dropdown= new Select(lp.companyDropDownList);
		int i;

		//List<WebElement> list = dropdown.getOptions();

		//List<String> text = new ArrayList<>();
		for(i=0; i<elementCount.size(); i++) 
		{
			elementCount.get(i).getText();
			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}	
		}

		lp.clickOnSignInBtn();


		Thread.sleep(2000);
		reLogin(unamelt, pawslt, compname);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		masterNewBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq");

		 Robot robot = new Robot();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxtUnderMultipleType));
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_A);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		robot.keyRelease(KeyEvent.VK_A);
		Thread.sleep(1000);
		robot.keyPress(KeyEvent.VK_BACK_SPACE);
		robot.keyRelease(KeyEvent.VK_BACK_SPACE);
		Thread.sleep(1000);
		codeTxtUnderMultipleType.sendKeys("qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq");


		Thread.sleep(2000);

		String actName=nameTxt.getAttribute("value");
		String expName="qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq";

		String actCode=codeTxtUnderMultipleType.getAttribute("value");
		String expCode="qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq";

		System.out.println("NAME : "+actName +" Value  "+expName);
		System.out.println("CODE : "+actCode +" Value  "+expCode);

		if (actMessage.equalsIgnoreCase(expMessage) && 
				actName.equalsIgnoreCase(expName) && actCode.equalsIgnoreCase(expCode) && 
				actwordWarpChkbox==expwordWarpChkbox && 
				acthorizontalChkbox==exphorizontalChkbox && actverticalChkbox==expverticalChkbox)
		{
			System.out.println(" Test Pass: Code Data Type is Changed As From Input to Text Area and Behaviour Changes ");
			System.err.println(" Test Pass: MultiLine Form is Displayed ");
			return true;
		} 
		else 
		{

			System.out.println(" Test Fail: Code Data Type is Changed As From Input to Text Area and Behaviour Changes ");
			System.err.println(" Test Fail: MultiLine Form is not Displayed ");
			return false;
		}

	}

	@FindBy(xpath="//textarea[@id='sCode']")
	public static WebElement codeTxtUnderMultipleType;


	//Auto Complete 



	public boolean checkDropDownBehaviourDrpDwnWithOnSelectingAutoComplete() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{

		getDriver().navigate().refresh();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();



		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(3000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cus2ndRowEditBtn));
		cus2ndRowEditBtn.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesBehaviourDropdown));

		Select s1=new Select(extraFields_PropertiesBehaviourDropdown);
		s1.selectByValue("3");


		Select s4=new Select(extraFields_PropertiesBehaviourDropdown);
		String actSelected =s4.getFirstSelectedOption().getText();
		String expSelected="Auto Complete";

		System.err.println(" Selected Option In Behaviour DrpDwn : "+actSelected +" Value Expected : "+expSelected);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();


		String expMessage="Field Updated Successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkOkButtonWithInputMandatoryFieldsCreateCreateTabDisplayInCustomizeTab***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);
		
		
		Thread.sleep(1000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateCreateTabNewlyCreateTabSaveButton));
		customizeMasterCreateCreateTabNewlyCreateTabSaveButton.click();
		
		String expMessage1="Master Updated Successfully";

		String actMessage1=checkValidationMessage(expMessage1);
		
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateCreateTabCloseButton));
		customizeMasterCreateCreateTabCloseButton.click();
		
		

		Thread.sleep(2000);


		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
		userNameDisplay.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();

		Thread.sleep(4000);

		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt="su";

		String pawslt="su";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
		username.click();
		username.sendKeys(unamelt);
		getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
		password.click();

		Thread.sleep(2000);
		password.sendKeys(pawslt);

		String compname="Account Properties And Customization";

		Select oSelect = new Select(companyDropDownList);

		List <WebElement> elementCount = oSelect.getOptions();

		int cqSize = elementCount.size();

		int zqSize=cSize+1;

		System.out.println("CompanyDropdownList Count :"+cqSize);

		System.out.println("Company dropdown is :"+ zqSize);


		//Select dropdown= new Select(lp.companyDropDownList);
		int i;

		//List<WebElement> list = dropdown.getOptions();

		//List<String> text = new ArrayList<>();
		for(i=0; i<elementCount.size(); i++) 
		{
			elementCount.get(i).getText();
			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}	
		}

		lp.clickOnSignInBtn();


		Thread.sleep(2000);
		reLogin(unamelt, pawslt, compname);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		masterNewBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("AutoComplete");
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("AutoComplete");


		Thread.sleep(2000);

		String actName=nameTxt.getAttribute("value");
		String expName="AutoComplete";

		String actCode=codeTxt.getAttribute("value");
		String expCode="AutoComplete";

		System.out.println("NAME : "+actName +" Value  "+expName);
		System.out.println("CODE : "+actCode +" Value  "+expCode);

		if (actMessage.equalsIgnoreCase(expMessage) && 
				actName.equalsIgnoreCase(expName) && actCode.equalsIgnoreCase(expCode) && 
				actSelected.equalsIgnoreCase(expSelected))
		{
			System.err.println(" Test Pass: Auto Complete  ");
			return true;
		} 
		else 
		{

			System.err.println(" Test Fail: Auto Complete   ");
			return false;
		}

	}


	//Incremental 


	public boolean checkDropDownBehaviourDrpDwnWithOnSelectingIncremental() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getDriver().navigate().refresh();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(3000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cus2ndRowEditBtn));
		cus2ndRowEditBtn.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesTab));
		extraFields_PropertiesTab.click();

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_PropertiesBehaviourDropdown));

		Select s1=new Select(extraFields_PropertiesBehaviourDropdown);
		s1.selectByValue("5");


		Select s4=new Select(extraFields_PropertiesBehaviourDropdown);
		String actSelected =s4.getFirstSelectedOption().getText();
		String expSelected="Incremental";

		System.err.println(" Selected Option In Behaviour DrpDwn : "+actSelected +" Value Expected : "+expSelected);

		Thread.sleep(4000);
		int behaviourDrpdwnIncrementalGridListCount=behaviourDrpdwnIncrementalGridList.size();
		ArrayList<String >behaviourDrpdwnIncrementalGridListArray=new ArrayList<>();

		for (int i = 0; i < behaviourDrpdwnIncrementalGridListCount; i++)
		{
			String data=behaviourDrpdwnIncrementalGridList.get(i).getText().trim();
			if (data.isEmpty() == false) 
			{
				behaviourDrpdwnIncrementalGridListArray.add(data);
			}
			
		}

		String actbehaviourDrpdwnIncrementalGridList=behaviourDrpdwnIncrementalGridListArray.toString();
		String expbehaviourDrpdwnIncrementalGridList="[, , Type, Value, Mandatory Value, Starting Char Position, , , , , , , , ]";

		System.err.println(" Actual List : "+actbehaviourDrpdwnIncrementalGridList);
		System.err.println(" Exp    List :  "+expbehaviourDrpdwnIncrementalGridList);


		if (actbehaviourDrpdwnIncrementalGridList.equalsIgnoreCase(expbehaviourDrpdwnIncrementalGridList) && 
				actSelected.equalsIgnoreCase(expSelected))
		{
			System.err.println(" Test Pass: Incremental Behaviour Drp Dwn   ");
			return true;
		} 
		else 
		{

			System.err.println(" Test Fail: Incremental Behaviour Drp Dwn  ");
			return false;
		}

	}

	@FindBy(xpath="//td[@id='tblIncremental_ExtraField_col_1-2']")
	public static WebElement incrementalGridRow1;


	@FindBy(xpath="//td[@id='tblIncremental_ExtraField_col_1-3']")
	public static WebElement valueGridRow1;

	@FindBy(xpath="//td[@id='tblIncremental_ExtraField_col_2-2']")
	public static WebElement incrementalGridRow2;

	@FindBy(xpath="//td[@id='tblIncremental_ExtraField_col_3-2']")
	public static WebElement incrementalGridRow3;

	@FindBy(xpath="//select[@id='ddlIncremental_Type_ExtraFld']")
	public static WebElement incrementalTypeToEnter;

	@FindBy(xpath="//input[@id='txtIncrementalTypes_ExtraFld']")
	public static WebElement incrementalValueToEnter;

	@FindBy(xpath="//input[@id='txtSCharPosition_ExtraFld']")
	public static WebElement incrementalStartCharpostionToEnter;


	@FindBy(xpath="//*[@id='tblIncremental_ExtraField_head']/tr/th")
	public static List<WebElement> behaviourDrpdwnIncrementalGridList;



	public boolean checkTypeDropDownValuesAndSavingWithCondition() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(incrementalGridRow1));
		incrementalGridRow1.click();
		Thread.sleep(2000);
		incrementalTypeToEnter.click();

		Select s1=new Select(incrementalTypeToEnter);

		List <WebElement> op = s1.getOptions();

		ArrayList<String >incrementalType=new ArrayList<>();
		int size = op.size();

		for(int i =0; i<size ; i++)
		{
			String options = op.get(i).getText();
			incrementalType.add(options);
			System.out.println(options);
		}

		String actTypeDrpDwnList=incrementalType.toString();
		String expTypeDrpDwnList="[Field, Login, Character Input, Date, Incremental, Decremental, User Input]";

		System.err.println(" actTypeDrpDwnList : "+actTypeDrpDwnList);
		System.err.println(" ExpTypeDrpDwnList : "+expTypeDrpDwnList);

		/*Thread.sleep(2000);

		s1.selectByValue("1");
		Thread.sleep(2000);
		incrementalTypeToEnter.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(valueGridRow1));
		valueGridRow1.click();
		incrementalValueToEnter.click();
		incrementalValueToEnter.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		incrementalValueToEnter.sendKeys("Trail");
		incrementalValueToEnter.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(incrementalStartCharpostionToEnter));
		incrementalStartCharpostionToEnter.click();
		incrementalStartCharpostionToEnter.sendKeys("2");
		incrementalStartCharpostionToEnter.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();


		String expMessage="Field Updated Successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkOkButtonWithInputMandatoryFieldsCreateCreateTabDisplayInCustomizeTab***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);
		
		
		Thread.sleep(1000);
		
		*/
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateCreateTabNewlyCreateTabSaveButton));
		customizeMasterCreateCreateTabNewlyCreateTabSaveButton.click();
		
		String expMessage1="Master Updated Successfully";

		String actMessage1=checkValidationMessage(expMessage1);
		
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customizeMasterCreateCreateTabCloseButton));
		customizeMasterCreateCreateTabCloseButton.click();
		
		
		Thread.sleep(2000);


		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
		userNameDisplay.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();


		if (actTypeDrpDwnList.equalsIgnoreCase(expTypeDrpDwnList))
		{
			System.err.println(" Test Pass: Type Drp dwn Value Displayed and Saved With Condition ");
			return true;
		}
		else
		{
			System.err.println(" Test Fail: Type Drp dwn Value Displayed and Saved With Condition");
			return false;

		}
	}



	//Formatting TAB 


	@FindBy(xpath="//*[@id='masterFields_list']/li[7]/a")
	public static WebElement newcreateTab;

	@FindBy(xpath="//button[@id='FieldsDetails_Font_Button']")
	public static WebElement extraFieldFontExpandBtn;

	@FindBy(xpath="//select[@id='fontFamily_ExtraField_FontCtrl']")
	public static WebElement fontExpFontFamilyDrpdwn;

	@FindBy(xpath="//select[@id='fontStyle_ExtraField_FontCtrl']")
	public static WebElement fontExpFontStyleDrpdwn;

	@FindBy(xpath="//select[@id='fontWeight_ExtraField_FontCtrl']")
	public static WebElement fontExpFontWtDrpdwn;

	@FindBy(xpath="//select[@id='fontSizes_ExtraField_FontCtrl']")
	public static WebElement fontExpFontSizeDrpdwn;

	@FindBy(xpath="//select[@id='fontForeColor_ExtraField_FontCtrl']")
	public static WebElement fontExpFontColorDrpdwn;

	@FindBy(xpath="//select[@id='fontBackColor_ExtraField_FontCtrl']")
	public static WebElement fontExpBackColorDrpdwn;

	@FindBy(xpath="//input[@id='chkBaseline_ExtraField_FontCtrl']//following-sibling::span")
	public static WebElement fontExpBasLineChkbox;

	@FindBy(xpath="//input[@id='chkOverLine_ExtraField_FontCtrl']//following-sibling::span")
	public static WebElement fontExpOverLineChkbox;
	
	@FindBy(xpath="//input[@id='chkOverLine_ExtraField_FontCtrl']")
	public static WebElement fontExpOverLineChkboxSelected;

	@FindBy(xpath="//input[@id='chkStrikeThrough_ExtraField_FontCtrl']//following-sibling::span")
	public static WebElement fontExpStrickThroughChkbox;
	
	@FindBy(xpath="//input[@id='chkStrikeThrough_ExtraField_FontCtrl']")
	public static WebElement fontExpStrickThroughChkboxSelected;

	@FindBy(xpath="//input[@id='chkUnderline_ExtraField_FontCtrl']//following-sibling::span")
	public static WebElement fontExpUnderLineChkbox;
	
	@FindBy(xpath="//input[@id='chkUnderline_ExtraField_FontCtrl']")
	public static WebElement fontExpUnderLineChkboxSelected;

	@FindBy(xpath="//*[@id='previewfont_ExtraField_FontCtrl']")
	public static WebElement fontExpFontPreviewtxt;

	@FindBy(xpath="//input[@id='chkEnableFont_ExtraField_FontCtrl']//following-sibling::span")
	public static WebElement fontExpEnableFontChkbox;
	
	@FindBy(xpath="//input[@id='chkEnableFont_ExtraField_FontCtrl']")
	public static WebElement fontExpEnableFontChkboxSelected;

	@FindBy(xpath="//*[@id='btnAddGroup_Ok']")
	public static WebElement fontExpOkBtn;

	@FindBy(xpath="//*[@id='btnAddGroup_Cancel']")
	public static WebElement fontExpCancelBtn;

	@FindBy(xpath="//*[@id='MCustomize_FontDialog_Modal']//*[@class='icon-close hiconright2']")
	public static WebElement fontExpCloseIcon;

	@FindBy(xpath="//label[@id='previewFormatingText_ExtraField']")
	public static WebElement extraFieldFormattingTABPreviewTxt;






	public boolean checkFormattingTabExpandFontOptionsUnderCustomization() throws InterruptedException
	{
		getDriver().navigate().refresh();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();


		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newcreateTab));
		newcreateTab.click();

		Thread.sleep(3000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cus1stRowEditBtn));
		cus1stRowEditBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FormattingTab));
		extraFields_FormattingTab.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFieldFontExpandBtn));

		boolean actextraFieldFontExpandBtn    =extraFieldFontExpandBtn.isDisplayed();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFieldFontExpandBtn));
		extraFieldFontExpandBtn.click();

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fontExpFontFamilyDrpdwn));
		boolean actfontExpFontFamilyDrpdwn    =fontExpFontFamilyDrpdwn.isDisplayed();
		boolean actfontExpFontStyleDrpdwn     =fontExpFontStyleDrpdwn.isDisplayed();
		boolean actfontExpFontWtDrpdwn        =fontExpFontWtDrpdwn.isDisplayed();
		boolean actfontExpFontSizeDrpdwn      =fontExpFontSizeDrpdwn.isDisplayed();
		boolean actfontExpFontColorDrpdwn     =fontExpFontColorDrpdwn.isDisplayed();
		boolean actfontExpBackColorDrpdwn     =fontExpBackColorDrpdwn.isDisplayed();
		boolean actfontExpBasLineChkbox       =fontExpBasLineChkbox.isDisplayed();
		boolean actfontExpOverLineChkbox      =fontExpOverLineChkbox.isDisplayed();
		boolean actfontExpStrickThroughChkbox =fontExpStrickThroughChkbox.isDisplayed();
		boolean actfontExpUnderLineChkbox     =fontExpUnderLineChkbox.isDisplayed();
		boolean actfontExpFontPreviewtxt      =fontExpFontPreviewtxt.isDisplayed();
		boolean actfontExpEnableFontChkbox    =fontExpEnableFontChkbox.isDisplayed();
		boolean actfontExpOkBtn     		  =fontExpOkBtn.isDisplayed();
		boolean actfontExpCancelBtn           =fontExpCancelBtn.isDisplayed();

		boolean expextraFieldFontExpandBtn    =true;
		boolean expfontExpFontFamilyDrpdwn    =true;
		boolean expfontExpFontStyleDrpdwn     =true;
		boolean expfontExpFontWtDrpdwn        =true;
		boolean expfontExpFontSizeDrpdwn      =true;
		boolean expfontExpFontColorDrpdwn     =true;
		boolean expfontExpBackColorDrpdwn     =true;
		boolean expfontExpBasLineChkbox       =true;
		boolean expfontExpOverLineChkbox      =true;
		boolean expfontExpStrickThroughChkbox =true;
		boolean expfontExpUnderLineChkbox     =true;
		boolean expfontExpFontPreviewtxt      =true;
		boolean expfontExpEnableFontChkbox    =true;
		boolean expfontExpOkBtn     		  =true;
		boolean expfontExpCancelBtn     	  =true;

		System.out.println("****************************checkFormattingTabExpandFontOptionsUnderCustomization*************************");

		System.out.println("extraFieldFontExpandBtn   : "+actextraFieldFontExpandBtn +" Value Expected : "+expextraFieldFontExpandBtn);
		System.out.println("fontExpFontFamilyDrpdwn   : "+actfontExpFontFamilyDrpdwn +" Value Expected : "+expfontExpFontFamilyDrpdwn);
		System.out.println("fontExpFontStyleDrpdwn    : "+actfontExpFontStyleDrpdwn  +" Value Expected : "+expfontExpFontStyleDrpdwn);
		System.out.println("fontExpFontWtDrpdwn       : "+actfontExpFontWtDrpdwn     +" Value Expected : "+expfontExpFontWtDrpdwn);
		System.out.println("fontExpFontSizeDrpdwn     : "+actfontExpFontSizeDrpdwn   +" Value Expected : "+expfontExpFontSizeDrpdwn);
		System.out.println("fontExpFontColorDrpdwn    : "+actfontExpFontColorDrpdwn  +" Value Expected : "+expfontExpFontColorDrpdwn);
		System.out.println("fontExpBackColorDrpdwn    : "+actfontExpBackColorDrpdwn  +" Value Expected : "+expfontExpBackColorDrpdwn);
		System.out.println("fontExpBasLineChkbox      : "+actfontExpBasLineChkbox    +" Value Expected : "+expfontExpBasLineChkbox);
		System.out.println("fontExpOverLineChkbox     : "+actfontExpOverLineChkbox       +" Value Expected : "+expfontExpOverLineChkbox);
		System.out.println("fontExpStrickThroughChkbox: "+actfontExpStrickThroughChkbox  +" Value Expected : "+expfontExpStrickThroughChkbox);
		System.out.println("fontExpUnderLineChkbox    : "+actfontExpUnderLineChkbox      +" Value Expected : "+expfontExpUnderLineChkbox);
		System.out.println("fontExpFontPreviewtxt     : "+actfontExpFontPreviewtxt       +" Value Expected : "+expfontExpFontPreviewtxt);
		System.out.println("fontExpEnableFontChkbox   : "+actfontExpEnableFontChkbox     +" Value Expected : "+expfontExpEnableFontChkbox);
		System.out.println("fontExpOkBtn              : "+actfontExpOkBtn                +" Value Expected : "+expfontExpOkBtn);
		System.out.println("fontExpCancelBtn          : "+actfontExpCancelBtn            +" Value Expected : "+expfontExpCancelBtn);

		if(actextraFieldFontExpandBtn==expextraFieldFontExpandBtn
				&& actfontExpFontFamilyDrpdwn==expfontExpFontFamilyDrpdwn 
				&& actfontExpFontStyleDrpdwn==expfontExpFontStyleDrpdwn 
				&& actfontExpFontWtDrpdwn==expfontExpFontWtDrpdwn
				&& actfontExpFontSizeDrpdwn==expfontExpFontSizeDrpdwn 
				&& actfontExpFontColorDrpdwn==expfontExpFontColorDrpdwn
				&& actfontExpBackColorDrpdwn==expfontExpBackColorDrpdwn
				&& actfontExpBasLineChkbox==expfontExpBasLineChkbox 
				&& actfontExpOverLineChkbox==expfontExpOverLineChkbox 
				&& actfontExpStrickThroughChkbox==expfontExpStrickThroughChkbox 
				&& actfontExpUnderLineChkbox==expfontExpUnderLineChkbox
				&& actfontExpFontPreviewtxt==expfontExpFontPreviewtxt 
				&& actfontExpEnableFontChkbox==expfontExpEnableFontChkbox
				&& actfontExpOkBtn==expfontExpOkBtn
				&& actfontExpCancelBtn==expfontExpCancelBtn)
		{
			return true;
		}
		else
		{
			return false;
		}
	}


	// validation 


	public boolean checkDefaultFontPreviewInFontExpansion() throws InterruptedException
	{
		Thread.sleep(2000);
		System.err.println("************************checkDefaultFontPreviewInFontExpansion**********");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fontExpFontFamilyDrpdwn));
		Select s1=new Select(fontExpFontFamilyDrpdwn);
		String actfontExpFontFamilyDrpdwn=s1.getFirstSelectedOption().getText();
		String expfontExpFontFamilyDrpdwn="Arial";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fontExpFontStyleDrpdwn));
		Select s2=new Select(fontExpFontStyleDrpdwn);
		String actfontExpFontStyleDrpdwn=s2.getFirstSelectedOption().getText();
		String expfontExpFontStyleDrpdwn="Normal";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fontExpFontWtDrpdwn));
		Select s3=new Select(fontExpFontWtDrpdwn);
		String actfontExpFontWtDrpdwn=s3.getFirstSelectedOption().getText();
		String expfontExpFontWtDrpdwn="Normal";


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fontExpFontSizeDrpdwn));
		Select s4=new Select(fontExpFontSizeDrpdwn);
		String actfontExpFontSizeDrpdwn=s4.getFirstSelectedOption().getText();
		String expfontExpFontSizeDrpdwn="10";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fontExpFontColorDrpdwn));
		Select s5=new Select(fontExpFontColorDrpdwn);
		String actfontExpFontColorDrpdwn=s5.getFirstSelectedOption().getText();
		String expfontExpFontColorDrpdwn="Black";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fontExpBackColorDrpdwn));
		Select s6=new Select(fontExpBackColorDrpdwn);
		String actfontExpBackColorDrpdwn=s6.getFirstSelectedOption().getText();
		String expfontExpBackColorDrpdwn="White";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fontExpFontPreviewtxt));
		String actfontExpFontPreviewtxt=fontExpFontPreviewtxt.getAttribute("value");
		String expfontExpFontPreviewtxt="The Quick brown fox jumps over the lazy dog";

		String actfontStyleWtColorBG=fontExpFontPreviewtxt.getAttribute("style");
		String expfontStyleWtColorBG="font-family: Arial; font-style: normal; font-weight: normal; font-size: 10px !important; color: black !important; background: white;";

		System.out.println("fontExpFontFamilyDrpdwn  :"+actfontExpFontFamilyDrpdwn);
		System.out.println("fontExpFontFamilyDrpdwn  :"+expfontExpFontFamilyDrpdwn);

		System.out.println("fontExpFontStyleDrpdwn   :"+actfontExpFontStyleDrpdwn);
		System.out.println("fontExpFontStyleDrpdwn   :"+expfontExpFontStyleDrpdwn);

		System.out.println("fontExpFontWtDrpdwn      :"+actfontExpFontWtDrpdwn);
		System.out.println("fontExpFontWtDrpdwn      :"+expfontExpFontWtDrpdwn);

		System.out.println("fontExpFontColorDrpdwn   :"+actfontExpFontColorDrpdwn);
		System.out.println("fontExpFontColorDrpdwn   :"+expfontExpFontColorDrpdwn);

		System.out.println("fontExpBackColorDrpdwn   :"+actfontExpBackColorDrpdwn);
		System.out.println("fontExpBackColorDrpdwn   :"+expfontExpBackColorDrpdwn);

		System.out.println("fontExpFontPreviewtxt    :"+actfontExpFontPreviewtxt);
		System.out.println("fontExpFontPreviewtxt    :"+expfontExpFontPreviewtxt);

		System.out.println("fontStyleWtColorBG    :"+actfontStyleWtColorBG);
		System.out.println("fontStyleWtColorBG    :"+expfontStyleWtColorBG);


		if (actfontExpFontStyleDrpdwn.equalsIgnoreCase(expfontExpFontStyleDrpdwn) 
				&& actfontExpFontFamilyDrpdwn.equalsIgnoreCase(expfontExpFontFamilyDrpdwn)
				&& actfontExpFontWtDrpdwn.equalsIgnoreCase(expfontExpFontWtDrpdwn)
				&& actfontExpFontSizeDrpdwn.equalsIgnoreCase(expfontExpFontSizeDrpdwn)
				&& actfontExpFontColorDrpdwn.equalsIgnoreCase(expfontExpFontColorDrpdwn)
				&& actfontExpBackColorDrpdwn.equalsIgnoreCase(expfontExpBackColorDrpdwn)
				&& actfontExpFontPreviewtxt.equalsIgnoreCase(expfontExpFontPreviewtxt)
				&& actfontStyleWtColorBG.equalsIgnoreCase(expfontStyleWtColorBG))
		{
			return true;
		}
		else 
		{
			return false;
		}

	}




	public boolean checkSavingFontSizeandColourInFocusFontPopUp() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fontExpFontFamilyDrpdwn));
		Select s1=new Select(fontExpFontFamilyDrpdwn);
		s1.selectByVisibleText("Calibri");
		//s1.selectByValue("93");

		String actfontExpFontFamilyDrpdwn=s1.getFirstSelectedOption().getText();
		String expfontExpFontFamilyDrpdwn="Calibri";

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fontExpFontStyleDrpdwn));
		Select s2=new Select(fontExpFontStyleDrpdwn);
		//s2.selectByValue("1");
		s2.selectByVisibleText("Italic");

		String actfontExpFontStyleDrpdwn=s2.getFirstSelectedOption().getText();
		String expfontExpFontStyleDrpdwn="Italic";

		Thread.sleep(1000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fontExpFontWtDrpdwn));
		Select s3=new Select(fontExpFontWtDrpdwn);
		//s3.selectByValue("1");
		s3.selectByVisibleText("Bold");

		String actfontExpFontWtDrpdwn=s3.getFirstSelectedOption().getText();
		String expfontExpFontWtDrpdwn="Bold";

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fontExpFontColorDrpdwn));
		Select s5=new Select(fontExpFontColorDrpdwn);
		//s5.selectByValue("-65536");
		s5.selectByVisibleText("Blue");

		String actfontExpFontColorDrpdwn=s5.getFirstSelectedOption().getText();
		String expfontExpFontColorDrpdwn="Blue";

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fontExpBackColorDrpdwn));
		Select s6=new Select(fontExpBackColorDrpdwn);
		//s6.selectByValue("-5171");
		s6.selectByVisibleText("BlanchedAlmond");

		String actfontExpBackColorDrpdwn=s6.getFirstSelectedOption().getText();
		String expfontExpBackColorDrpdwn="BlanchedAlmond";

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fontExpFontPreviewtxt));
		String actfontExpFontPreviewtxt=fontExpFontPreviewtxt.getAttribute("style");
		String expfontExpFontPreviewtxt="font-family: Calibri; font-style: italic; font-weight: bold; font-size: 10px !important; color: blue !important; background: blanchedalmond;";

		System.out.println("********************************checkSavingFontSizeandColourInFocusFontPopUp***************************");

		System.out.println("fontExpFontFamilyDrpdwn  :"+actfontExpFontFamilyDrpdwn);
		System.out.println("fontExpFontFamilyDrpdwn  :"+expfontExpFontFamilyDrpdwn);

		System.out.println("fontExpFontStyleDrpdwn   :"+actfontExpFontStyleDrpdwn);
		System.out.println("fontExpFontStyleDrpdwn   :"+expfontExpFontStyleDrpdwn);

		System.out.println("fontExpFontWtDrpdwn      :"+actfontExpFontWtDrpdwn);
		System.out.println("fontExpFontWtDrpdwn      :"+expfontExpFontWtDrpdwn);

		System.out.println("fontExpFontColorDrpdwn   :"+actfontExpFontColorDrpdwn);
		System.out.println("fontExpFontColorDrpdwn   :"+expfontExpFontColorDrpdwn);

		System.out.println("fontExpBackColorDrpdwn   :"+actfontExpBackColorDrpdwn);
		System.out.println("fontExpBackColorDrpdwn   :"+expfontExpBackColorDrpdwn);

		System.out.println("fontExpFontPreviewtxt    :"+actfontExpFontPreviewtxt);
		System.out.println("fontExpFontPreviewtxt    :"+expfontExpFontPreviewtxt);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fontExpOkBtn));
		fontExpOkBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMessage="Field Updated Successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if (actfontExpFontStyleDrpdwn.equalsIgnoreCase(expfontExpFontStyleDrpdwn) 
				&& actfontExpFontFamilyDrpdwn.equalsIgnoreCase(expfontExpFontFamilyDrpdwn)
				&& actfontExpFontWtDrpdwn.equalsIgnoreCase(expfontExpFontWtDrpdwn)
				&& actfontExpFontColorDrpdwn.equalsIgnoreCase(expfontExpFontColorDrpdwn)
				&& actfontExpBackColorDrpdwn.equalsIgnoreCase(expfontExpBackColorDrpdwn)
				&& actfontExpFontPreviewtxt.equalsIgnoreCase(expfontExpFontPreviewtxt) 
				&& actMessage.equalsIgnoreCase(expMessage))
		{
			System.out.println(" Test Pass: Font Changed and Displayed in Preview Text Area ");
			return true;
		}
		else 
		{
			System.out.println(" Test Fail: Font Changed and Displayed in Preview Text Area ");
			return false;
		}
	}


	public boolean checkFomattingTabPreviewTextField() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getDriver().navigate().refresh();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();



		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newcreateTab));
		newcreateTab.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cus1stRowEditBtn));
		cus1stRowEditBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FormattingTab));
		extraFields_FormattingTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FormattingCharacterCasingDropdown));
		Select d1 = new Select(extraFields_FormattingCharacterCasingDropdown);
		d1.selectByVisibleText("Upper");

		Thread.sleep(1000);

		String actCharacterCasing = d1.getFirstSelectedOption().getText();
		String expCharacterCasing = "Upper";


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FormattingTextAlignDropdown));
		Select d2 = new Select(extraFields_FormattingTextAlignDropdown);
		d2.selectByVisibleText("Center");

		Thread.sleep(1000);

		String actTextAlign = d2.getFirstSelectedOption().getText();
		String expTextAlign = "Center"; 


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMessage="Field Updated Successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		System.out.println("*****************************************checkFomattingTabPreviewTextField*********************************************");

		System.out.println("CharacterCasing  : "+actCharacterCasing +"  Value Expected  "+expCharacterCasing);
		System.out.println("TextAlign        : "+actTextAlign       +"  Value Expected  "+expTextAlign);

		if (actCharacterCasing.equalsIgnoreCase(expCharacterCasing) && actTextAlign.equalsIgnoreCase(expTextAlign) && actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		}
		else
		{
			return false;
		}

	}



	public boolean checkChangesDoneInFontInAcountSaving() throws InterruptedException
	{
		getDriver().navigate().refresh();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		masterNewBtn.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTab_CreateTab));
		createTab_CreateTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabTextFieldTxt));
		accountHeaderCreateTabTextFieldTxt.click();
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.END);
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		accountHeaderCreateTabTextFieldTxt.sendKeys("formating tab");
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		/*String actText = accountHeaderCreateTabTextFieldTxt.getText();
		String expText = "FORMATING TAB";*/

		String actaccountHeaderCreateTabTextFieldTxt=accountHeaderCreateTabTextFieldTxt.getAttribute("style");
		String expaccountHeaderCreateTabTextFieldTxt="text-align: center; width: 100%; font-family: Calibri !important; font-size: 10px !important; font-style: italic !important; font-weight: bold !important; color: blue !important;";

		System.out.println("actual : "+actaccountHeaderCreateTabTextFieldTxt);
		System.out.println("Exp    : "+expaccountHeaderCreateTabTextFieldTxt);
		//System.out.println("Text   : "+actText+"  Value Expected  "+expText );

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountCloseBtnInGroup));
		accountCloseBtnInGroup.click();

		if (/*actText.equals(expText) &&*/ actaccountHeaderCreateTabTextFieldTxt.equalsIgnoreCase(expaccountHeaderCreateTabTextFieldTxt)) 
		{
			return true;
		}
		else
		{
			return false;
		}
	}


	public boolean checkEditOptionInFormattingTABInFontFamilyandClickOnSaveBtn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		System.out.println("*********************checkEditOptionInFormattingTABInFontFamilyandClickOnSaveBtn********************");

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();


		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newcreateTab));
		newcreateTab.click();

		Thread.sleep(3000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cus1stRowEditBtn));
		cus1stRowEditBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FormattingTab));
		extraFields_FormattingTab.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFieldFontExpandBtn));
		extraFieldFontExpandBtn.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enableFontChekbox));
		if (enableFontChekboxSelected.isSelected()==true) 
		{
			enableFontChekbox.click();
		}

		Thread.sleep(2000);

		boolean actDisable=fontExpFontFamilyDrpdwn.isSelected();
		boolean expDisable=false;

		System.out.println("ACT Disable : "+actDisable);
		System.out.println("Exp Disable : "+expDisable);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enableFontChekbox));
		enableFontChekbox.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fontExpFontFamilyDrpdwn));
		Select s1=new Select(fontExpFontFamilyDrpdwn);
		//s1.selectByValue("0");
		s1.selectByVisibleText("Arial");

		String actfontExpFontFamilyDrpdwn=s1.getFirstSelectedOption().getText();
		String expfontExpFontFamilyDrpdwn="Arial";

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fontExpFontStyleDrpdwn));
		Select s2=new Select(fontExpFontStyleDrpdwn);
		//s2.selectByValue("1");
		s2.selectByVisibleText("Normal");

		String actfontExpFontStyleDrpdwn=s2.getFirstSelectedOption().getText();
		String expfontExpFontStyleDrpdwn="Normal";

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fontExpFontWtDrpdwn));
		Select s3=new Select(fontExpFontWtDrpdwn);
		//s3.selectByValue("1");
		s3.selectByVisibleText("Normal");

		String actfontExpFontWtDrpdwn=s3.getFirstSelectedOption().getText();
		String expfontExpFontWtDrpdwn="Normal";

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fontExpFontColorDrpdwn));
		Select s5=new Select(fontExpFontColorDrpdwn);
		//s5.selectByValue("-65536");
		s5.selectByVisibleText("Black");

		String actfontExpFontColorDrpdwn=s5.getFirstSelectedOption().getText();
		String expfontExpFontColorDrpdwn="Black";

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fontExpBackColorDrpdwn));
		Select s6=new Select(fontExpBackColorDrpdwn);
		//s6.selectByValue("-5171");
		s6.selectByVisibleText("White");

		String actfontExpBackColorDrpdwn=s6.getFirstSelectedOption().getText();
		String expfontExpBackColorDrpdwn="White";

		System.out.println("ACT fontExpFontFamilyDrpdwn**"+actfontExpFontFamilyDrpdwn);
		System.out.println("Exp fontExpFontFamilyDrpdwn**"+expfontExpFontFamilyDrpdwn);

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enableFontChekbox));
		if (enableFontChekboxSelected.isSelected()==true) 
		{
			enableFontChekbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fontExpOkBtn));
		fontExpOkBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FormattingCharacterCasingDropdown));
		Select d1 = new Select(extraFields_FormattingCharacterCasingDropdown);
		d1.selectByVisibleText("--None--");

		Thread.sleep(1000);

		String actCharacterCasing = d1.getFirstSelectedOption().getText();
		String expCharacterCasing = "--None--";


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FormattingTextAlignDropdown));
		Select d2 = new Select(extraFields_FormattingTextAlignDropdown);
		d2.selectByVisibleText("Left");

		Thread.sleep(1000);

		String actTextAlign = d2.getFirstSelectedOption().getText();
		String expTextAlign = "Left"; 

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMessage="Field Updated Successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		Thread.sleep(3000);

		getDriver().navigate().refresh();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		masterNewBtn.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTab_CreateTab));
		createTab_CreateTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabTextFieldTxt));
		accountHeaderCreateTabTextFieldTxt.click();

		Thread.sleep(1000);

		String actaccountHeaderCreateTabTextFieldTxt=accountHeaderCreateTabTextFieldTxt.getAttribute("style");
		String expaccountHeaderCreateTabTextFieldTxt="text-align: left; width: 100%; font-family: Arial !important; font-size: 10px !important; font-style: normal !important; font-weight: normal !important; color: black !important;";

		System.out.println("actual : "+actaccountHeaderCreateTabTextFieldTxt);
		System.out.println("Exp    : "+expaccountHeaderCreateTabTextFieldTxt);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountCloseBtnInGroup));
		accountCloseBtnInGroup.click();

		if (actfontExpFontFamilyDrpdwn.equalsIgnoreCase(expfontExpFontFamilyDrpdwn) && 
				actaccountHeaderCreateTabTextFieldTxt.equalsIgnoreCase(expaccountHeaderCreateTabTextFieldTxt) && 
				actMessage.equalsIgnoreCase(expMessage) && actDisable==expDisable)
		{
			return true;

		} 
		else 
		{

			return false;
		}
	}




	public boolean checkFontEffectsUnderFormattingTAB() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		System.out.println("*******************checkFontEffectsUnderFormattingTAB*****************************");

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();


		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newcreateTab));
		newcreateTab.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cus1stRowEditBtn));
		cus1stRowEditBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FormattingTab));
		extraFields_FormattingTab.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFieldFontExpandBtn));
		extraFieldFontExpandBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fontExpOverLineChkbox));
		if (fontExpOverLineChkboxSelected.isSelected()==false) 
		{
			fontExpOverLineChkbox.click();
		}

		Thread.sleep(1000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fontExpFontPreviewtxt));
		String actfontExpFontPreviewtxtOverLine=fontExpFontPreviewtxt.getAttribute("style");
		String expfontExpFontPreviewtxtOverLine="font-family: Arial; font-style: normal; font-weight: normal; font-size: 10px !important; color: black !important; background: white; text-decoration: overline;";


		System.out.println("fontExpFontPreviewtxt OverLine   :"+actfontExpFontPreviewtxtOverLine+"End");
		System.out.println("fontExpFontPreviewtxt OverLine   :"+expfontExpFontPreviewtxtOverLine+"End");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fontExpOverLineChkbox));
		if (fontExpOverLineChkboxSelected.isSelected()==true) 
		{
			fontExpOverLineChkbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fontExpStrickThroughChkbox));
		if (fontExpStrickThroughChkboxSelected.isSelected()==false) 
		{
			fontExpStrickThroughChkbox.click();
		}

		Thread.sleep(1000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fontExpFontPreviewtxt));
		String actfontExpFontPreviewtxtStrickThrough=fontExpFontPreviewtxt.getAttribute("style");
		String expfontExpFontPreviewtxtStrickThrough="font-family: Arial; font-style: normal; font-weight: normal; font-size: 10px !important; color: black !important; background: white; text-decoration: line-through;";


		System.out.println("fontExpFontPreviewtxt StrickThrough   :"+actfontExpFontPreviewtxtStrickThrough+"End");
		System.out.println("fontExpFontPreviewtxt StrickThrough   :"+expfontExpFontPreviewtxtStrickThrough+"End");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fontExpStrickThroughChkbox));
		if (fontExpStrickThroughChkboxSelected.isSelected()==true) 
		{
			fontExpStrickThroughChkbox.click();
		}


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fontExpUnderLineChkbox));
		if (fontExpUnderLineChkboxSelected.isSelected()==false) 
		{
			fontExpUnderLineChkbox.click();
		}

		Thread.sleep(1000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fontExpFontPreviewtxt));
		String actfontExpFontPreviewtxtUnderLine=fontExpFontPreviewtxt.getAttribute("style");
		String expfontExpFontPreviewtxtUnderLine="font-family: Arial; font-style: normal; font-weight: normal; font-size: 10px !important; color: black !important; background: white; text-decoration: underline;";


		System.out.println("fontExpFontPreviewtxt UnderLine   :"+actfontExpFontPreviewtxtUnderLine+"End");
		System.out.println("fontExpFontPreviewtxt UnderLine   :"+expfontExpFontPreviewtxtUnderLine+"End");


		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fontExpUnderLineChkbox));
		if (fontExpUnderLineChkboxSelected.isSelected()==true) 
		{
			fontExpUnderLineChkbox.click();
		}


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fontExpOkBtn));
		fontExpOkBtn.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMessage="Field Updated Successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);


		if (actfontExpFontPreviewtxtOverLine.equalsIgnoreCase(expfontExpFontPreviewtxtOverLine) && 
				actfontExpFontPreviewtxtStrickThrough.equalsIgnoreCase(expfontExpFontPreviewtxtStrickThrough) && 
				actfontExpFontPreviewtxtUnderLine.equalsIgnoreCase(expfontExpFontPreviewtxtUnderLine) && 
				actMessage.equalsIgnoreCase(expMessage))
		{
			return true;
		}
		else
		{
			return false;
		}
	}



	@FindBy(xpath="//*[@id='chkListApplyOn_FieldRules']/div/div[1]/div/label/span")
	public static WebElement extraFields_ruleCreatingGroupChkbox;
	
	@FindBy(xpath="//*[@id='chkListApplyOn_FieldRules']/div/div[1]/div/label/input")
	public static WebElement extraFields_ruleCreatingGroupChkboxSelected;

	@FindBy(xpath="//*[@id='chkListApplyOn_FieldRules']/div/div[3]/div/label/span")
	public static WebElement extraFields_ruleEditChkbox;
	
	@FindBy(xpath="//*[@id='chkListApplyOn_FieldRules']/div/div[3]/div/label/input")
	public static WebElement extraFields_ruleEditChkboxSelected;

	@FindBy(xpath="//*[@id='chkListApplyOn_FieldRules']/div/div[2]/div/label/span")
	public static WebElement extraFields_ruleNewrecordChkbox;

	@FindBy(xpath="//*[@id='chkListEvaluateOn_FieldRules']/div/div[1]/div/label/span")
	public static WebElement extraFields_ruleLoadChkbox;

	@FindBy(xpath="//*[@id='chkListEvaluateOn_FieldRules']/div/div[4]/div/label/span")
	public static WebElement extraFields_ruleBeforeSaveChkbox;

	@FindBy(xpath="//*[@id='chkListEvaluateOn_FieldRules']/div/div[2]/div/label/span")
	public static WebElement extraFields_ruleOnLeaveChkbox;

	@FindBy(xpath="//*[@id='chkListEvaluateOn_FieldRules']/div/div[5]/div/label/span")
	public static WebElement extraFields_ruleBeforeDeleteChkbox;

	@FindBy(xpath="//*[@id='chkListEvaluateOn_FieldRules']/div/div[3]/div/label/span")
	public static WebElement extraFields_ruleOnEnterChkbox;

	@FindBy(xpath="//*[@id='chkListStatus_FieldRules']/div/div[1]/div/label/span")
	public static WebElement extraFields_ruleOnActiveChkbox;
	
	
	@FindBy(xpath="//*[@id='chkListApplyOn_FieldRules']/div/div[2]/div/label/input")
	public static WebElement extraFields_ruleNewrecordChkboxSelected;

	@FindBy(xpath="//*[@id='chkListEvaluateOn_FieldRules']/div/div[1]/div/label/input")
	public static WebElement extraFields_ruleLoadChkboxSelected;

	@FindBy(xpath="//*[@id='chkListEvaluateOn_FieldRules']/div/div[4]/div/label/input")
	public static WebElement extraFields_ruleBeforeSaveChkboxSelected;

	@FindBy(xpath="//*[@id='chkListEvaluateOn_FieldRules']/div/div[2]/div/label/input")
	public static WebElement extraFields_ruleOnLeaveChkboxSelected;

	@FindBy(xpath="//*[@id='chkListEvaluateOn_FieldRules']/div/div[5]/div/label/input")
	public static WebElement extraFields_ruleBeforeDeleteChkboxSelected;

	@FindBy(xpath="//*[@id='chkListEvaluateOn_FieldRules']/div/div[3]/div/label/input")
	public static WebElement extraFields_ruleOnEnterChkboxSelected;

	@FindBy(xpath="//*[@id='chkListStatus_FieldRules']/div/div[1]/div/label/input")
	public static WebElement extraFields_ruleOnActiveChkboxSelected;

	@FindBy(xpath = "//input[@class='btn btn-link']")
	public static WebElement rulesTabAddRuleBtn;


	//
	//*[@id="Conditions-Context_Menu_FieldRules"]/li[1]/a

	@FindBy(xpath = "//*[@id='Conditions-Context_Menu_FieldRules']/li[2]/a")
	public static WebElement rulesTabElseTab;

	@FindBy(xpath = "//*[@id='Conditions-Context_Menu_FieldRules']/li[1]/a")
	public static WebElement rulesTabIFTab;

	@FindBy(xpath = "//input[@id='txtField_RC_1_1_FieldRules']")
	public static WebElement rulesTabIFSelectTabTxt;

	@FindBy(xpath = "//select[@id='ddlMasterFields_RULES_FieldRules']")
	public static WebElement rulesTabIFSelectTabDrpdwn;

	@FindBy(xpath = "//select[@id='ddlExtraFields_1_1_FieldRules']")
	public static WebElement rulesTabExtraFieldDrpdwn;

	@FindBy(xpath = "//select[@id='ddlOperators_RC_1_1_FieldRules']")
	public static WebElement rulesTabOperatorsDrpdwn;

	@FindBy(xpath = "//select[@id='ddlCompareWith_RC_1_1_FieldRules']")
	public static WebElement rulesTabCompareWithDrpdwn;

	@FindBy(xpath = "//input[@id='txtCompareType_RC_1_1_FieldRules']")
	public static WebElement rulesTabValueTxt;

	@FindBy(xpath = "//input[@id='txtCompareType_RC_1_1_FieldRules']")
	public static WebElement rulesTabConditionTxttoEnter;

	@FindBy(xpath = "//input[@id='optControl_RulesCondition_FieldRules']	")
	public static WebElement rulesTabConditionTxt;

	@FindBy(xpath = "//input[@id='optControl_RulesCondition_FieldRules']")
	public static WebElement rulesTabConditioDrpdwn;

	@FindBy(xpath = "//select[@id='ddlConjunction_RC_1_1_FieldRules']")
	public static WebElement rulesTabConjunctionDrpdwn;

	@FindBy(xpath = "//*[@id='RulesDefinition_FieldRules']/div[3]/div[2]/div/label/span")
	public static WebElement rulesTabNoConditionChkbbox;

	
	@FindBy(xpath = "//*[@id='RulesDefinition_FieldRules']/div[3]/div[2]/div/label/input")
	public static WebElement rulesTabNoConditionChkbboxSelected;

	@FindBy(xpath = "//*[@id='iconRuleSettings_FieldRules']")
	public static WebElement rulesTabSettingsAddIcon;

	@FindBy(xpath = "//span[@class='icon-close icon-font7']")
	public static WebElement rulesTabIfConditionCloseBtn;

	@FindBy(xpath = "//*[@id='tab_Rule_IF_Formating_FieldRules']/a")
	public static WebElement rulesTab_IFFormattingTab;

	@FindBy(xpath = "//*[@id='tab_Rule_IF_Messaging_FieldRules']/a")
	public static WebElement rulesTab_IFMesssageTab;

	@FindBy(xpath = "//*[@id='tab_Rule_IF_Alerts_FieldRules']/a")
	public static WebElement rulesTab_IFAlertsTab;

	@FindBy(xpath = "//*[@id='Rule_Else_FieldRules']/div/div[1]/ul/li[1]/a/span")
	public static WebElement rulesTab_ElseFormattingTab;

	@FindBy(xpath = "//*[@id='Rule_Else_FieldRules']/div/div[1]/ul/li[2]/a/span")
	public static WebElement rulesTab_ElseMessageTab;

	@FindBy(xpath = "//*[@id='Rule_Else_FieldRules']/div/div[1]/ul/li[3]/a/span")
	public static WebElement rulesTab_ElseAlertsTab;




	public boolean checkRulesTabUnderMasterCustomizationUnderCreateTAB() throws InterruptedException
	{

		Thread.sleep(2000);
		getDriver().navigate().refresh();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newcreateTab));
		newcreateTab.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cus1stRowEditBtn));
		cus1stRowEditBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_RulesTab));
		extraFields_RulesTab.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTabAddRuleBtn));

		boolean actRuleAdd=rulesTabAddRuleBtn.isDisplayed();

		rulesTabAddRuleBtn.click();

		String actRuleAddBtnDisplay=Boolean.toString(actRuleAdd);
		String expRuleAddBtnDisplay="true";

		System.out.println("Actual Rule Displayed  : "+actRuleAddBtnDisplay);
		System.out.println("Exp    Rule Displayed  : "+expRuleAddBtnDisplay);

		if (actRuleAddBtnDisplay.equalsIgnoreCase(expRuleAddBtnDisplay))
		{
			return true;
		}
		else
		{
			return false;
		}
	}


	public boolean checkRuleTabOptionsUnderCreateTAB() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_RuleNameDropdown));
		extraFields_RuleNameDropdown.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_RuleNameDropdown));

		boolean actrulesTabRuleNameTxt                           = extraFields_RuleNameDropdown.isDisplayed();
		boolean actrulesTabRuleNameSettingBtn                    = extraFields_RuleNameSetingBtn.isDisplayed();
		boolean actrulesTabElseTab                               = rulesTabElseTab.isDisplayed(); 
		boolean actrulesTabIFSelectTabDrpdwn                     = rulesTabIFSelectTabTxt.isDisplayed(); 
		boolean actrulesTabOperatorsDrpdwn                       = rulesTabOperatorsDrpdwn.isDisplayed();
		boolean actrulesTabCompareWithDrpdwn                     = rulesTabCompareWithDrpdwn.isDisplayed();
		boolean actrulesTabValueTxt                              = rulesTabValueTxt.isDisplayed();
		boolean actrulesTabConjunctionDrpdwn                     = rulesTabConjunctionDrpdwn.isDisplayed();
		boolean actrulesTabNoConditionChkbbox                    = rulesTabNoConditionChkbbox.isDisplayed();
		boolean actrulesTabSettingsAddIcon                       = rulesTabSettingsAddIcon.isDisplayed();
		boolean actrulesTab_IFFormattingTab                      = rulesTab_IFFormattingTab.isDisplayed();
		boolean actrulesTab_IFMessageTab                         = rulesTab_IFMesssageTab.isDisplayed();
		boolean actrulesTab_IFFAlertsTab                         = rulesTab_IFAlertsTab.isDisplayed();
		boolean actrulesTabNewRecordChkbox                       = extraFields_ruleNewrecordChkbox.isDisplayed();
		boolean actrulesTabeditChkbox                            = extraFields_ruleEditChkbox.isDisplayed();
		boolean actrulesTabLoadChkbox                            = extraFields_ruleLoadChkbox.isDisplayed();
		boolean actextraFields_ruleBeforeSaveChkbox              = extraFields_ruleBeforeSaveChkbox.isDisplayed();
		boolean actextraFields_ruleOnLeaveChkbox                 = extraFields_ruleOnLeaveChkbox.isDisplayed();
		boolean actextraFields_ruleBeforeDeleteChkbox            = extraFields_ruleBeforeDeleteChkbox.isDisplayed();
		boolean actextraFields_ruleOnEnterChkbox                 = extraFields_ruleOnEnterChkbox.isDisplayed();
		boolean actextraFields_ruleOnActiveChkbox                = extraFields_ruleOnActiveChkbox.isDisplayed();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTabElseTab));
		rulesTabElseTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTab_ElseFormattingTab));
		boolean actrulesTab_ElseFormattingTab                    =rulesTab_ElseFormattingTab.isDisplayed();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTab_ElseMessageTab));
		boolean actrulesTab_ElseMessageTab                       =rulesTab_ElseMessageTab.isDisplayed();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTab_ElseAlertsTab));
		boolean actrulesTab_ElseFAlertsTab                       =rulesTab_ElseAlertsTab.isDisplayed();
		boolean actrulesTab_SaveRuleBtn                          =extraFields_RulesSaveBtn.isDisplayed();
		boolean actrulesTab_DeleteRuleBtn                        =extraFields_RulesDeleteBtn.isDisplayed();

		boolean exprulesTabNewRecordChkbox                       =true;
		boolean exprulesTabeditChkbox                            =true;
		boolean exprulesTabLoadChkbox                            =true;
		boolean exprulesTabRuleNameTxt                           = true;
		boolean exprulesTabRuleNameSettingBtn                    = true;
		boolean exprulesTabElseTab                               = true; 
		boolean exprulesTabIFSelectTabDrpdwn                     = true;  
		boolean exprulesTabOperatorsDrpdwn                       = true;
		boolean exprulesTabCompareWithDrpdwn                     = true;
		boolean exprulesTabValueTxt                              = true;
		boolean exprulesTabConjunctionDrpdwn                     = true;
		boolean exprulesTabNoConditionChkbbox                    = true;
		boolean exprulesTabSettingsAddIcon                       = true;
		boolean exprulesTabIfConditionCloseBt                    = true;
		boolean exprulesTab_IFFormattingTab                      = true;
		boolean exprulesTab_IFMessageTab                         = true;
		boolean exprulesTab_IFFAlertsTab                         = true;
		boolean exprulesTab_ElseFormattingTab                    = true;
		boolean exprulesTab_ElseMessageTab       				 = true;
		boolean exprulesTab_ElseAlertsTab						 = true;
		boolean exprulesTab_SaveRuleBtn                          = true;
		boolean exprulesTab_DeleteRuleBtn                        = true;
		boolean expextraFields_ruleBeforeSaveChkbox              = true;
		boolean expextraFields_ruleOnLeaveChkbox                 = true;
		boolean expextraFields_ruleBeforeDeleteChkbox            = true;
		boolean expextraFields_ruleOnEnterChkbox       			 = true;
		boolean expextraFields_ruleOnActiveChkbox				 = true;


		System.out.println("rulesTabRuleNameTxt Value Actual                : " + actrulesTabRuleNameTxt          +" Value Expected : " + exprulesTabRuleNameTxt);
		System.out.println("rulesTabRuleNameSetting Value Actual            : " + actrulesTabRuleNameSettingBtn   +" Value Expected : " + exprulesTabRuleNameSettingBtn);
		System.out.println("rulesTabElseTab Value Actual                    : " + actrulesTabElseTab 			  +" Value Expected : " + exprulesTabElseTab);
		System.out.println("rulesTabIFSelectTabDrpdwn Value Actual          : " + actrulesTabIFSelectTabDrpdwn    +" Value Expected : " + exprulesTabIFSelectTabDrpdwn);
		System.out.println("rulesTabOperatorsDrpdwn Value Actual            : " + actrulesTabOperatorsDrpdwn      +" Value Expected : " + exprulesTabOperatorsDrpdwn);
		System.out.println("rulesTabCompareWithDrpdwn Value Actual          : " + actrulesTabCompareWithDrpdwn    +" Value Expected : " + exprulesTabCompareWithDrpdwn);
		System.out.println("rulesTabValueTxt Value Actual                   : " + actrulesTabValueTxt             +" Value Expected : " + exprulesTabValueTxt);
		System.out.println("rulesTabConjunctionDrpdwn Value Actual          : " + actrulesTabConjunctionDrpdwn    +" Value Expected : " + exprulesTabConjunctionDrpdwn);
		System.out.println("rulesTabNoConditionChkbbox Value Actual         : " + actrulesTabNoConditionChkbbox   +" Value Expected : " + exprulesTabNoConditionChkbbox);
		System.out.println("rulesTabSettingsAddIcon Value Actual            : " + actrulesTabSettingsAddIcon      +" Value Expected : " + exprulesTabSettingsAddIcon);
		System.out.println("rulesTab_IFFormattingTab Analysis Value Actual  : " + actrulesTab_IFFormattingTab     +" Value Expected : " + exprulesTab_IFFormattingTab);
		System.out.println("rulesTab_IFFormattingTab  Menu Value Actual     : " + actrulesTab_IFMessageTab        +" Value Expected : " + exprulesTab_IFMessageTab);
		System.out.println("rulesTab_IFFAlertsTab Indent Value Actual       : " + actrulesTab_IFFAlertsTab        +" Value Expected : " + exprulesTab_IFFAlertsTab);
		System.out.println("ElseFormattingTab Analysis Value Actual         : " + actrulesTab_ElseFormattingTab   +" Value Expected : " + exprulesTab_ElseFormattingTab);
		System.out.println("ElseFormattingTab  Menu Value Actual            : " + actrulesTab_ElseMessageTab      +" Value Expected : " + exprulesTab_ElseMessageTab);
		System.out.println("ElseFAlertsTab Indent Value Actual              : " + actrulesTab_ElseFAlertsTab      +" Value Expected : " + exprulesTab_ElseAlertsTab);
		System.out.println("Save Rule Value Actual                          : " + actrulesTab_SaveRuleBtn         +" Value Expected : " + exprulesTab_SaveRuleBtn);
		System.out.println("Delete Value Actual                             : " + actrulesTab_DeleteRuleBtn       +" Value Expected : " + exprulesTab_DeleteRuleBtn);
		System.out.println("extraFields_ruleBeforeSaveChkbox Value Actual   : " + actextraFields_ruleBeforeSaveChkbox      +" Value Expected : " + expextraFields_ruleBeforeSaveChkbox);
		System.out.println("extraFields_ruleOnLeaveChkbox Value Actual      : " + actextraFields_ruleOnLeaveChkbox     +" Value Expected : " + expextraFields_ruleOnLeaveChkbox);
		System.out.println("extraFields_ruleBeforeDeleteChkbox  Value Actual: " + actextraFields_ruleBeforeDeleteChkbox        +" Value Expected : " + expextraFields_ruleBeforeDeleteChkbox);
		System.out.println("extraFields_ruleOnEnterChkbox Value Actual      : " + actextraFields_ruleOnEnterChkbox   +" Value Expected : " + expextraFields_ruleOnEnterChkbox);
		System.out.println("extraFields_ruleOnActiveChkbox Value Actual     : " + actextraFields_ruleOnActiveChkbox      +" Value Expected : " + expextraFields_ruleOnActiveChkbox);
		System.out.println("ElseFAlertsTab Indent Value Actual              : " + actrulesTab_ElseFAlertsTab      +" Value Expected : " + exprulesTab_ElseAlertsTab);
		System.out.println("Save Rule Value Actual                          : " + actrulesTab_SaveRuleBtn         +" Value Expected : " + exprulesTab_SaveRuleBtn);
		System.out.println("Delete Value Actual                             : " + actrulesTab_DeleteRuleBtn       +" Value Expected : " + exprulesTab_DeleteRuleBtn);



		System.out.println("Record Value Actual                             : " + actrulesTabNewRecordChkbox       +" Value Expected : " + exprulesTabNewRecordChkbox );
		System.out.println("Edit Value Actual                               : " + actrulesTabeditChkbox       +" Value Expected : " + exprulesTabeditChkbox);
		System.out.println("Load Value Actual                               : " + actrulesTabLoadChkbox       +" Value Expected : " + exprulesTabLoadChkbox);

		boolean displayResult=actrulesTabRuleNameTxt==exprulesTabRuleNameTxt && actrulesTabRuleNameSettingBtn==exprulesTabRuleNameSettingBtn
				&& actrulesTabElseTab==exprulesTabElseTab && actrulesTabIFSelectTabDrpdwn==exprulesTabIFSelectTabDrpdwn
				&& actrulesTabOperatorsDrpdwn==exprulesTabOperatorsDrpdwn && actrulesTabCompareWithDrpdwn==exprulesTabCompareWithDrpdwn
				&& actrulesTabValueTxt==exprulesTabValueTxt && actrulesTabConjunctionDrpdwn==exprulesTabConjunctionDrpdwn
				&& actrulesTabNoConditionChkbbox==exprulesTabNoConditionChkbbox && actrulesTabSettingsAddIcon==exprulesTabSettingsAddIcon
				&& actrulesTab_IFFormattingTab==exprulesTab_IFFormattingTab
				&& actrulesTab_IFMessageTab==exprulesTab_IFMessageTab && actrulesTab_IFFAlertsTab==exprulesTab_IFFAlertsTab
				&& actrulesTab_ElseFormattingTab==exprulesTab_ElseFormattingTab && actrulesTab_ElseMessageTab==exprulesTab_ElseMessageTab
				&& actrulesTab_ElseFAlertsTab==exprulesTab_ElseAlertsTab && actrulesTab_DeleteRuleBtn==exprulesTab_DeleteRuleBtn && 
				actrulesTabNewRecordChkbox==exprulesTabNewRecordChkbox && actrulesTabeditChkbox==exprulesTabeditChkbox && 
				actrulesTabLoadChkbox==exprulesTabLoadChkbox && 
				actextraFields_ruleBeforeSaveChkbox==expextraFields_ruleBeforeSaveChkbox  && 
				actextraFields_ruleOnLeaveChkbox==expextraFields_ruleOnLeaveChkbox && 
				actextraFields_ruleBeforeDeleteChkbox==expextraFields_ruleBeforeDeleteChkbox && 
				actextraFields_ruleOnEnterChkbox==expextraFields_ruleOnEnterChkbox;

		String actDisplayResult=Boolean.toString(displayResult);
		String expDisplayResult="true";

		System.out.println("DisplayResult  : "+actDisplayResult +" Value Expected : "+expDisplayResult);

		if(actDisplayResult.equalsIgnoreCase(expDisplayResult))
		{
			return true;
		}
		else
		{
			return false;
		}
	}


	public boolean checkSavingRuleWithOutConditionUnderMasterCustomizationUnderCreateTAB() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTabIFTab));
		rulesTabIFTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_RuleNameDropdown));
		extraFields_RuleNameDropdown.click();

		extraFields_RuleNameDropdown.sendKeys(Keys.SHIFT,Keys.HOME);

		extraFields_RuleNameDropdown.sendKeys(Keys.BACK_SPACE);		

		Thread.sleep(1000);

		extraFields_RuleNameDropdown.sendKeys("ruleWithNoCondition");

		Thread.sleep(2000);
		extraFields_RuleNameDropdown.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_ruleNewrecordChkbox));
		extraFields_ruleNewrecordChkbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_ruleLoadChkbox));
		extraFields_ruleLoadChkbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_ruleOnLeaveChkbox));
		extraFields_ruleOnLeaveChkbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_ruleOnActiveChkbox));
		extraFields_ruleOnActiveChkbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTabNoConditionChkbbox));
		rulesTabNoConditionChkbbox.click();

		System.out.println("*******************checkSavingRuleWithOutConditionUnderMasterCustomization*********");

		boolean Rules_NewRecord=extraFields_ruleNewrecordChkboxSelected.isSelected();
		String actRules_NewRecordChekbox=Boolean.toString(Rules_NewRecord);
		String expRules_NewRecordChekbox="true";

		boolean extraFields_ruleLoad=extraFields_ruleLoadChkboxSelected.isSelected();
		String actextraFields_ruleLoadChkbox=Boolean.toString(extraFields_ruleLoad);
		String expextraFields_ruleLoadChkbox="true";

		boolean extraFields_ruleOnLeave=extraFields_ruleOnLeaveChkboxSelected.isSelected();
		String actextraFields_ruleOnLeaveChkbox=Boolean.toString(extraFields_ruleOnLeave);
		String expextraFields_ruleOnLeaveChkbox="true";

		boolean extraFields_ruleOnActive=extraFields_ruleOnActiveChkboxSelected.isSelected();
		String actextraFields_ruleOnActiveChkbox=Boolean.toString(extraFields_ruleOnActive);
		String expextraFields_ruleOnActiveChkbox="true";

		boolean rulesTabNoCondition=rulesTabNoConditionChkbboxSelected.isSelected();
		String actrulesTabNoConditionChkbbox=Boolean.toString(rulesTabNoCondition);
		String exprulesTabNoConditionChkbbox="true";

		System.out.println("extraFields_ruleNewrecordChkbox  : "+actRules_NewRecordChekbox        +" Value "+expRules_NewRecordChekbox);
		System.out.println("extraFields_ruleLoadChkbox       : "+actextraFields_ruleLoadChkbox    +" Value "+expextraFields_ruleLoadChkbox);
		System.out.println("extraFields_ruleOnLeaveChkbox    : "+actextraFields_ruleOnLeaveChkbox +" Value "+expextraFields_ruleOnLeaveChkbox);
		System.out.println("extraFields_ruleOnActiveChkbox   : "+actextraFields_ruleOnActiveChkbox+" Value "+expextraFields_ruleOnActiveChkbox);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesGrid1stRow_1stcol));
		rulesGrid1stRow_1stcol.click();

		rulesIFEnterFiled.sendKeys("CreateTab_NumericField");
		rulesIFEnterFiled.sendKeys(Keys.TAB);
		rulesIFEnterChangeValueDrpdwn.sendKeys("Value");

		rulesIFEnterChangeValueDrpdwn.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesIFEnterValue));
		rulesIFEnterValue.sendKeys("100");

		rulesIFEnterValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTabGrid1st_10thCol));
		rulesTabGrid1st_10thCol.click();

		rulesTabGridMandatoryChkbox.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesGrid2ndRow_1stcol));
		rulesGrid2ndRow_1stcol.click();

		rulesIFEnterFiled.sendKeys("CreateTab_SmallNumberField");
		rulesIFEnterFiled.sendKeys(Keys.TAB);
		rulesIFEnterChangeValueDrpdwn.sendKeys("Value");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesGrid2ndRow_5thcol));
		rulesGrid2ndRow_5thcol.click();
		Thread.sleep(2000);

		rulesTabIFGridEnterCaption.sendKeys("Focus");

		rulesTabIFGridEnterCaption.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_RulesSaveBtn));
		extraFields_RulesSaveBtn.click();
		
		Thread.sleep(1500);
		String expMessageOnSaveRule = "Rule Saved Successfully";
		String actMessageOnSaveRule=checkValidationMessage(expMessageOnSaveRule);
		
	

		if(actRules_NewRecordChekbox.equalsIgnoreCase(expRules_NewRecordChekbox) && 
				actextraFields_ruleLoadChkbox.equalsIgnoreCase(expextraFields_ruleLoadChkbox) &&
				actextraFields_ruleOnLeaveChkbox.equalsIgnoreCase(expextraFields_ruleOnLeaveChkbox) && 
				actextraFields_ruleOnActiveChkbox.equalsIgnoreCase(expextraFields_ruleOnActiveChkbox)&& 
				actrulesTabNoConditionChkbbox.equalsIgnoreCase(exprulesTabNoConditionChkbbox)&& 
				actMessageOnSaveRule.equalsIgnoreCase(expMessageOnSaveRule) )
		{
			return true;
		}
		else
		{
			return false;
		}
	}


	public boolean checkPreLoadValuesInRuleAfterSavingRuleWithNoConditionUnderCreateTAB() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_RuleNameDropdown));
		extraFields_RuleNameDropdown.click();

		extraFields_RuleNameDropdown.sendKeys(Keys.SHIFT,Keys.HOME);

		extraFields_RuleNameDropdown.sendKeys(Keys.BACK_SPACE);		

		Thread.sleep(1000);

		extraFields_RuleNameDropdown.sendKeys("ruleWithNoCondition");

		Thread.sleep(2000);
		extraFields_RuleNameDropdown.sendKeys(Keys.TAB);

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_ruleNewrecordChkbox));
		boolean Rules_NewRecord=extraFields_ruleNewrecordChkboxSelected.isSelected();
		String actRules_NewRecordChekbox=Boolean.toString(Rules_NewRecord);
		String expRules_NewRecordChekbox="true";

		boolean extraFields_ruleLoad=extraFields_ruleLoadChkboxSelected.isSelected();
		String actextraFields_ruleLoadChkbox=Boolean.toString(extraFields_ruleLoad);
		String expextraFields_ruleLoadChkbox="true";

		boolean extraFields_ruleOnLeave=extraFields_ruleOnLeaveChkboxSelected.isSelected();
		String actextraFields_ruleOnLeaveChkbox=Boolean.toString(extraFields_ruleOnLeave);
		String expextraFields_ruleOnLeaveChkbox="true";

		boolean extraFields_ruleOnActive=extraFields_ruleOnActiveChkboxSelected.isSelected();
		String actextraFields_ruleOnActiveChkbox=Boolean.toString(extraFields_ruleOnActive);
		String expextraFields_ruleOnActiveChkbox="true";

		boolean rulesTabNoCondition=rulesTabNoConditionChkbboxSelected.isSelected();
		String actrulesTabNoConditionChkbbox=Boolean.toString(rulesTabNoCondition);
		String exprulesTabNoConditionChkbbox="true";

		System.out.println("extraFields_ruleNewrecordChkbox  : "+actRules_NewRecordChekbox        +" Value "+expRules_NewRecordChekbox);
		System.out.println("extraFields_ruleLoadChkbox       : "+actextraFields_ruleLoadChkbox    +" Value "+expextraFields_ruleLoadChkbox);
		System.out.println("extraFields_ruleOnLeaveChkbox    : "+actextraFields_ruleOnLeaveChkbox +" Value "+expextraFields_ruleOnLeaveChkbox);
		System.out.println("extraFields_ruleOnActiveChkbox   : "+actextraFields_ruleOnActiveChkbox+" Value "+expextraFields_ruleOnActiveChkbox);

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesGrid1stRow_1stcol));
		String actrulesGrid1stRow_1stcol=rulesGrid1stRow_1stcol.getText();
		String exprulesGrid1stRow_1stcol="CreateTab_NumberField";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesGrid1stRow_2ndcol));
		String actrulesGrid1stRow_2ndcol=rulesGrid1stRow_2ndcol.getText();
		String exprulesGrid1stRow_2ndcol="Value";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesGrid1stRow_4thcol));
		String actrulesGrid1stRow_4thcol=rulesGrid1stRow_4thcol.getText();
		String exprulesGrid1stRow_4thcol="100";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesGrid2ndRow_1stcol));
		String actrulesGrid2ndRow_1stcol=rulesGrid2ndRow_1stcol.getText();
		String exprulesGrid2ndRow_1stcol="CreateTab_SmallNumberField";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesGrid2ndRow_2ndcol));
		String actrulesGrid2ndRow_2ndcol=rulesGrid2ndRow_2ndcol.getText();
		String exprulesGrid2ndRow_2ndcol="Value";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesGrid2ndRow_5thcol));
		String actrulesGrid2ndRow_5thcol=rulesGrid2ndRow_5thcol.getText();
		String exprulesGrid2ndRow_5thcol="Focus";
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();
		
		checkValidationMessage("");

		System.out.println("*****************checkPreLoadValuesInRuleAfterSAcingRuleWithNoCondition************************");

		System.out.println(" rulesGrid1stRow_1stcol : "+actrulesGrid1stRow_1stcol +" Value Exp : "+exprulesGrid1stRow_1stcol);
		System.out.println(" rulesGrid1stRow_2ndcol : "+actrulesGrid1stRow_2ndcol +" Value Exp : "+exprulesGrid1stRow_2ndcol);
		System.out.println(" rulesGrid1stRow_4thcol : "+actrulesGrid1stRow_4thcol +" Value Exp : "+exprulesGrid1stRow_4thcol);
		System.out.println(" rulesGrid2ndRow_1stcol : "+actrulesGrid2ndRow_1stcol +" Value Exp : "+exprulesGrid2ndRow_1stcol);
		System.out.println(" rulesGrid2ndRow_2ndcol : "+actrulesGrid2ndRow_2ndcol +" Value Exp : "+exprulesGrid2ndRow_2ndcol);
		System.out.println(" rulesGrid2ndRow_5thcol : "+actrulesGrid2ndRow_5thcol +" Value Exp : "+exprulesGrid2ndRow_5thcol);


		if(actrulesGrid1stRow_2ndcol.equalsIgnoreCase(exprulesGrid1stRow_2ndcol) &&
				actrulesGrid1stRow_1stcol.equalsIgnoreCase(exprulesGrid1stRow_1stcol) &&
				actrulesGrid1stRow_4thcol.equalsIgnoreCase(exprulesGrid1stRow_4thcol) &&
				actrulesGrid2ndRow_1stcol.equalsIgnoreCase(exprulesGrid2ndRow_1stcol) && 
				actrulesGrid2ndRow_2ndcol.equalsIgnoreCase(exprulesGrid2ndRow_2ndcol) && 
				actrulesGrid2ndRow_5thcol.equalsIgnoreCase(exprulesGrid2ndRow_5thcol) && 
				actRules_NewRecordChekbox.equalsIgnoreCase(expRules_NewRecordChekbox) && 
				actextraFields_ruleLoadChkbox.equalsIgnoreCase(expextraFields_ruleLoadChkbox) &&
				actextraFields_ruleOnLeaveChkbox.equalsIgnoreCase(expextraFields_ruleOnLeaveChkbox) && 
				actextraFields_ruleOnActiveChkbox.equalsIgnoreCase(expextraFields_ruleOnActiveChkbox))
		{
			System.out.println(" Test Pass : Values  are Preloaded as Expected ");
			return true;
		}
		else
		{
			System.out.println(" Test Fail : Values  are Preloaded as Expected ");
			return false;
		}


	}


	public boolean checkSavingRuleWithConditionUnderCustomizationTABUnderCreateTAB() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		Thread.sleep(2000);
		getDriver().navigate().refresh();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newcreateTab));
		newcreateTab.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cus1stRowEditBtn));
		cus1stRowEditBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_RulesTab));
		extraFields_RulesTab.click();

		Thread.sleep(3000);

		Thread.sleep(2000);
		
		///

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_RuleNameDropdown));
		extraFields_RuleNameDropdown.click();
		Thread.sleep(1000);
		extraFields_RuleNameDropdown.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		extraFields_RuleNameDropdown.sendKeys(Keys.BACK_SPACE);		
		Thread.sleep(1000);
		extraFields_RuleNameDropdown.sendKeys("ruleWithNoCondition");

		Thread.sleep(2000);

		extraFields_RuleNameDropdown.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_RulesDeleteBtn));
		extraFields_RulesDeleteBtn.click();

		Thread.sleep(2000);
		String actAlert=rulesDeletePopUpoMessage.getText();
		String expAlert="Are you sure want to delete the selected Rule [ ruleWithNoCondition ]";

		System.err.println(" Act Alrt  : "+actAlert);
		System.err.println(" Exp Alrt  : "+expAlert);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesDeleteNoBtn));
		rulesDeleteNoBtn.click();


		String actName=extraFields_RuleNameDropdown.getAttribute("value");
		String expName="ruleWithNoCondition";

		System.err.println(" Act Name  : "+actName);
		System.err.println(" Exp Name  : "+expName);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_RulesDeleteBtn));
		extraFields_RulesDeleteBtn.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesDeleteYesBtn));
		rulesDeleteYesBtn.click();

		
		Thread.sleep(5000);
		String expMessageOnDeleteRule = "Rule Deleted Successfully.";
		String actMessageOnDeleteRule=checkValidationMessage(expMessageOnDeleteRule);
		
		//

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_RuleNameDropdown));
		extraFields_RuleNameDropdown.click();
		Thread.sleep(1000);
		extraFields_RuleNameDropdown.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		extraFields_RuleNameDropdown.sendKeys(Keys.BACK_SPACE);		
		Thread.sleep(1000);
		extraFields_RuleNameDropdown.sendKeys("ruleWithCondition");

		Thread.sleep(2000);
		extraFields_RuleNameDropdown.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_ruleNewrecordChkbox));
		extraFields_ruleNewrecordChkbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_ruleLoadChkbox));
		extraFields_ruleLoadChkbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_ruleOnLeaveChkbox));
		extraFields_ruleOnLeaveChkbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_ruleOnActiveChkbox));
		extraFields_ruleOnActiveChkbox.click();

		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTabIFSelectTabTxt));
		rulesTabIFSelectTabTxt.click();


		rulesTabOperatorsDrpdwn.click();

		rulesTabOperatorsDrpdwn.sendKeys(Keys.ARROW_DOWN);

		rulesTabCompareWithDrpdwn.click();

		rulesTabCompareWithDrpdwn.sendKeys(Keys.ARROW_DOWN);

		Thread.sleep(2000);
		rulesTabValueTxt.sendKeys(Keys.SPACE);
		rulesTabValueTxt.sendKeys(Keys.BACK_SPACE);
		Thread.sleep(2000);

		rulesTabValueTxt.sendKeys("FOCUSHYD");

		Thread.sleep(4000);
		rulesTabValueTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);


		System.out.println("*******************checkSavingRuleWithCondition*********");

		boolean Rules_NewRecord=extraFields_ruleNewrecordChkboxSelected.isSelected();
		String actRules_NewRecordChekbox=Boolean.toString(Rules_NewRecord);
		String expRules_NewRecordChekbox="true";

		boolean extraFields_ruleLoad=extraFields_ruleLoadChkboxSelected.isSelected();
		String actextraFields_ruleLoadChkbox=Boolean.toString(extraFields_ruleLoad);
		String expextraFields_ruleLoadChkbox="true";

		boolean extraFields_ruleOnLeave=extraFields_ruleOnLeaveChkboxSelected.isSelected();
		String actextraFields_ruleOnLeaveChkbox=Boolean.toString(extraFields_ruleOnLeave);
		String expextraFields_ruleOnLeaveChkbox="true";

		boolean extraFields_ruleOnActive=extraFields_ruleOnActiveChkboxSelected.isSelected();
		String actextraFields_ruleOnActiveChkbox=Boolean.toString(extraFields_ruleOnActive);
		String expextraFields_ruleOnActiveChkbox="true";


		System.out.println("extraFields_ruleNewrecordChkbox  : "+actRules_NewRecordChekbox        +" Value "+expRules_NewRecordChekbox);
		System.out.println("extraFields_ruleLoadChkbox       : "+actextraFields_ruleLoadChkbox    +" Value "+expextraFields_ruleLoadChkbox);
		System.out.println("extraFields_ruleOnLeaveChkbox    : "+actextraFields_ruleOnLeaveChkbox +" Value "+expextraFields_ruleOnLeaveChkbox);
		System.out.println("extraFields_ruleOnActiveChkbox   : "+actextraFields_ruleOnActiveChkbox+" Value "+expextraFields_ruleOnActiveChkbox);
		
		JavascriptExecutor jse = (JavascriptExecutor)getDriver();
		jse.executeScript("window.scrollTo(0, document.body.scrollHeight)");
		
		//getAction().moveToElement(rulesGrid2ndRow_1stcol).build().perform();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesGrid1stRow_1stcol));
		rulesGrid1stRow_1stcol.click();

		rulesIFEnterFiled.sendKeys("CreateTab_NumericField");
		rulesIFEnterFiled.sendKeys(Keys.TAB);
		rulesIFEnterChangeValueDrpdwn.sendKeys("Value");

		rulesIFEnterChangeValueDrpdwn.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesIFEnterValue));
		rulesIFEnterValue.sendKeys("500");

		rulesIFEnterValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTabGrid1st_10thCol));
		rulesTabGrid1st_10thCol.click();

		rulesTabGridMandatoryChkbox.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesGrid2ndRow_1stcol));
		rulesGrid2ndRow_1stcol.click();

		rulesIFEnterFiled.sendKeys("CreateTab_SmallNumberField");
		rulesIFEnterFiled.sendKeys(Keys.TAB);
		rulesIFEnterChangeValueDrpdwn.sendKeys("Value");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesGrid2ndRow_5thcol));
		rulesGrid2ndRow_5thcol.click();
		Thread.sleep(2000);

		rulesTabIFGridEnterCaption.sendKeys("FOCUSHYD");

		rulesTabIFGridEnterCaption.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTab_IFMesssageTab));
		rulesTab_IFMesssageTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rules_MessageTabGeneralTXT));
		rules_MessageTabGeneralTXT.sendKeys("AccountCustomizationWithRule");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTabElseTab));
		rulesTabElseTab.click();



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesGridElse1stRow_1stcol));
		rulesGridElse1stRow_1stcol.click();

		rulesElseEnterFiled.sendKeys("CreateTab_NumericField");
		rulesElseEnterFiled.sendKeys(Keys.TAB);
		rulesElseEnterChangeValueDrpdwn.sendKeys("none");

		rulesElseEnterChangeValueDrpdwn.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesGridElse2ndRow_1stcol));
		rulesGridElse2ndRow_1stcol.click();

		rulesElseEnterFiled.sendKeys("CreateTab_SmallNumberField");
		rulesElseEnterFiled.sendKeys(Keys.TAB);
		rulesElseEnterChangeValueDrpdwn.sendKeys("none");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesGridElse2ndRow_5thcol));
		rulesGridElse2ndRow_5thcol.click();
		Thread.sleep(2000);

		rulesTabElseGridEnterCaption.sendKeys("NONE");

		rulesTabElseGridEnterCaption.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_RulesSaveBtn));
		extraFields_RulesSaveBtn.click();

		String expMessageOnSaveRule = "Rule Saved Successfully";
		String actMessageOnSaveRule=checkValidationMessage(expMessageOnSaveRule);

		if(actAlert.equalsIgnoreCase(expAlert) && actMessageOnDeleteRule.equalsIgnoreCase(expMessageOnDeleteRule) && 
				actMessageOnSaveRule.equalsIgnoreCase(expMessageOnSaveRule)&& actRules_NewRecordChekbox.equalsIgnoreCase(expRules_NewRecordChekbox) && 
				actextraFields_ruleLoadChkbox.equalsIgnoreCase(expextraFields_ruleLoadChkbox)&&
				actextraFields_ruleOnLeaveChkbox.equalsIgnoreCase(expextraFields_ruleOnLeaveChkbox)&& 
				actextraFields_ruleOnActiveChkbox.equalsIgnoreCase(expextraFields_ruleOnActiveChkbox)&& 
				actMessageOnSaveRule.equalsIgnoreCase(expMessageOnSaveRule) )
		{
			return true;
		}
		else
		{
			return false;
		}
	}


	public boolean checkPreLoadValuesInRuleAfterSavingRuleWithConditionUnderCreateTAB() throws InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_RuleNameDropdown));
		extraFields_RuleNameDropdown.click();

		extraFields_RuleNameDropdown.sendKeys(Keys.SHIFT,Keys.HOME);

		extraFields_RuleNameDropdown.sendKeys(Keys.BACK_SPACE);		

		Thread.sleep(1000);

		extraFields_RuleNameDropdown.sendKeys("ruleWithCondition");

		Thread.sleep(2000);
		extraFields_RuleNameDropdown.sendKeys(Keys.TAB);

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_ruleNewrecordChkbox));
		boolean Rules_NewRecord=extraFields_ruleNewrecordChkboxSelected.isSelected();
		String actRules_NewRecordChekbox=Boolean.toString(Rules_NewRecord);
		String expRules_NewRecordChekbox="true";

		boolean extraFields_ruleLoad=extraFields_ruleLoadChkboxSelected.isSelected();
		String actextraFields_ruleLoadChkbox=Boolean.toString(extraFields_ruleLoad);
		String expextraFields_ruleLoadChkbox="true";

		boolean extraFields_ruleOnLeave=extraFields_ruleOnLeaveChkboxSelected.isSelected();
		String actextraFields_ruleOnLeaveChkbox=Boolean.toString(extraFields_ruleOnLeave);
		String expextraFields_ruleOnLeaveChkbox="true";

		boolean extraFields_ruleOnActive=extraFields_ruleOnActiveChkboxSelected.isSelected();
		String actextraFields_ruleOnActiveChkbox=Boolean.toString(extraFields_ruleOnActive);
		String expextraFields_ruleOnActiveChkbox="true";

		boolean rulesTabNoCondition=rulesTabNoConditionChkbboxSelected.isSelected();
		String actrulesTabNoConditionChkbbox=Boolean.toString(rulesTabNoCondition);
		String exprulesTabNoConditionChkbbox="true";

		System.out.println("extraFields_ruleNewrecordChkbox  : "+actRules_NewRecordChekbox        +" Value "+expRules_NewRecordChekbox);
		System.out.println("extraFields_ruleLoadChkbox       : "+actextraFields_ruleLoadChkbox    +" Value "+expextraFields_ruleLoadChkbox);
		System.out.println("extraFields_ruleOnLeaveChkbox    : "+actextraFields_ruleOnLeaveChkbox +" Value "+expextraFields_ruleOnLeaveChkbox);
		System.out.println("extraFields_ruleOnActiveChkbox   : "+actextraFields_ruleOnActiveChkbox+" Value "+expextraFields_ruleOnActiveChkbox);


		System.out.println(" **************************************Condition Validations *************************");


		String actSelectField=rulesTabIFSelectTabTxt.getAttribute("value");
		String expSelectField="CreateTab_TextField";
		System.out.println(" Act SelectField : "+actSelectField);
		System.out.println(" Exp SelectField : "+expSelectField);


		Select s2=new Select(rulesTabOperatorsDrpdwn);
		String actrulesTabOperatorsDrpdwn=s2.getFirstSelectedOption().getText();
		String exprulesTabOperatorsDrpdwn="Equal To";
		System.out.println(" Act rulesTabOperatorsDrpdwn : "+actrulesTabOperatorsDrpdwn);
		System.out.println(" Exp rulesTabOperatorsDrpdwn : "+exprulesTabOperatorsDrpdwn);



		Select s3=new Select(rulesTabCompareWithDrpdwn);
		String actrulesTabCompareWithDrpdwn=s3.getFirstSelectedOption().getText();
		String exprulesTabCompareWithDrpdwn="Value";
		System.out.println(" Act rulesTabCompareWithDrpdwn : "+actrulesTabCompareWithDrpdwn);
		System.out.println(" Exp rulesTabCompareWithDrpdwn : "+exprulesTabCompareWithDrpdwn);



		String actrulesTabValueTxt=rulesTabValueTxt.getAttribute("value");
		String exprulesTabValueTxt="FOCUSHYD";
		System.out.println(" Act rulesTabValueTxt : "+actrulesTabValueTxt);
		System.out.println(" Exp rulesTabValueTxt : "+exprulesTabValueTxt);




		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesGrid1stRow_1stcol));
		String actrulesGrid1stRow_1stcol=rulesGrid1stRow_1stcol.getText();
		String exprulesGrid1stRow_1stcol="CreateTab_NumberField";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesGrid1stRow_2ndcol));
		String actrulesGrid1stRow_2ndcol=rulesGrid1stRow_2ndcol.getText();
		String exprulesGrid1stRow_2ndcol="Value";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesGrid1stRow_4thcol));
		String actrulesGrid1stRow_4thcol=rulesGrid1stRow_4thcol.getText();
		String exprulesGrid1stRow_4thcol="500";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesGrid2ndRow_1stcol));
		String actrulesGrid2ndRow_1stcol=rulesGrid2ndRow_1stcol.getText();
		String exprulesGrid2ndRow_1stcol="CreateTab_SmallNumberField";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesGrid2ndRow_2ndcol));
		String actrulesGrid2ndRow_2ndcol=rulesGrid2ndRow_2ndcol.getText();
		String exprulesGrid2ndRow_2ndcol="Value";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesGrid2ndRow_5thcol));
		String actrulesGrid2ndRow_5thcol=rulesGrid2ndRow_5thcol.getText();
		String exprulesGrid2ndRow_5thcol="FocusHYD";


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTabElseTab));
		rulesTabElseTab.click();

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesGridElse1stRow_1stcol));
		String actrulesGridElse1stRow_1stcol=rulesGridElse1stRow_1stcol.getText();
		String exprulesGridElse1stRow_1stcol="Code";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesGridElse2ndRow_1stcol));
		String actrulesGridElse2ndRow_1stcol=rulesGridElse2ndRow_1stcol.getText();
		String exprulesGridElse2ndRow_1stcol="Account Type";


		System.out.println("*****************checkPreLoadValuesIInGrid************************");

		System.out.println(" rulesGrid1stRow_1stcol : "+actrulesGrid1stRow_1stcol+".");
		System.out.println(" rulesGrid1stRow_1stcol : "+exprulesGrid1stRow_1stcol+".");

		System.out.println(" rulesGrid1stRow_2ndcol : "+actrulesGrid1stRow_2ndcol+".");
		System.out.println(" rulesGrid1stRow_2ndcol : "+exprulesGrid1stRow_2ndcol+".");

		System.out.println(" rulesGrid1stRow_4thcol : "+actrulesGrid1stRow_4thcol+".");
		System.out.println(" rulesGrid1stRow_4thcol : "+exprulesGrid1stRow_4thcol+".");

		System.out.println(" rulesGrid2ndRow_1stcol : "+actrulesGrid2ndRow_1stcol+".");
		System.out.println(" rulesGrid2ndRow_1stcol : "+exprulesGrid2ndRow_1stcol+".");

		System.out.println(" rulesGrid2ndRow_2ndcol : "+actrulesGrid2ndRow_2ndcol+".");
		System.out.println(" rulesGrid2ndRow_2ndcol : "+exprulesGrid2ndRow_2ndcol+".");

		System.out.println(" rulesGrid2ndRow_5thcol : "+actrulesGrid2ndRow_5thcol+".");
		System.out.println(" rulesGrid2ndRow_5thcol : "+exprulesGrid2ndRow_5thcol+".");

		System.out.println(" rulesGridElse1stRow_1stcol : "+actrulesGridElse1stRow_1stcol+".");
		System.out.println(" rulesGridElse1stRow_1stcol : "+exprulesGridElse1stRow_1stcol+".");

		System.out.println(" rulesGridElse2ndRow_1stcol : "+actrulesGridElse2ndRow_1stcol+".");
		System.out.println(" rulesGridElse2ndRow_1stcol : "+exprulesGridElse2ndRow_1stcol+".");

		if(actrulesGrid1stRow_2ndcol.equalsIgnoreCase(exprulesGrid1stRow_2ndcol) &&
				actrulesGrid1stRow_1stcol.equalsIgnoreCase(exprulesGrid1stRow_1stcol) &&
				actrulesGrid1stRow_4thcol.equalsIgnoreCase(exprulesGrid1stRow_4thcol) &&
				actrulesGrid2ndRow_1stcol.equalsIgnoreCase(exprulesGrid2ndRow_1stcol) && 
				actrulesGrid2ndRow_2ndcol.equalsIgnoreCase(exprulesGrid2ndRow_2ndcol) && 
				actrulesGrid2ndRow_5thcol.equalsIgnoreCase(exprulesGrid2ndRow_5thcol) && 
				actRules_NewRecordChekbox.equalsIgnoreCase(expRules_NewRecordChekbox) && 
				actextraFields_ruleLoadChkbox.equalsIgnoreCase(expextraFields_ruleLoadChkbox)&&
				actextraFields_ruleOnLeaveChkbox.equalsIgnoreCase(expextraFields_ruleOnLeaveChkbox) && 
				actextraFields_ruleOnActiveChkbox.equalsIgnoreCase(expextraFields_ruleOnActiveChkbox)&& 

				actSelectField.equalsIgnoreCase(expSelectField) && 
				actrulesTabCompareWithDrpdwn.equalsIgnoreCase(exprulesTabCompareWithDrpdwn) && 
				actrulesTabOperatorsDrpdwn.equalsIgnoreCase(exprulesTabOperatorsDrpdwn) && 
				actrulesTabValueTxt.equalsIgnoreCase(exprulesTabValueTxt))
		{
			System.out.println(" Test Pass : Values  are Preloaded as Expected ");
			return true;
		}
		else
		{
			System.out.println(" Test Fail : Values  are Preloaded as Expected ");
			return false;
		}


	}

	@FindBy(xpath="//*[@id='DeleteRule_Modal_FieldRules']/div[2]/div/div[3]/div/div/input[1]")
	public static WebElement rulesDeleteYesBtn;


	@FindBy(xpath="//*[@id='DeleteRule_Modal_FieldRules']/div[2]/div/div[3]/div/div/input[2]")
	public static WebElement rulesDeleteNoBtn;

	@FindBy(xpath="//label[@id='lblWarnMessage_RuleModal_FieldRules']")
	public static WebElement rulesDeletePopUpoMessage;




	public boolean checkDeleteOptionInRulesUnderCreateTab() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_RuleNameDropdown));
		extraFields_RuleNameDropdown.click();
		Thread.sleep(1000);
		extraFields_RuleNameDropdown.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		extraFields_RuleNameDropdown.sendKeys(Keys.BACK_SPACE);		
		Thread.sleep(1000);
		extraFields_RuleNameDropdown.sendKeys("RuleToDelete");

		Thread.sleep(2000);

		extraFields_RuleNameDropdown.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_ruleNewrecordChkbox));
		extraFields_ruleNewrecordChkbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_ruleLoadChkbox));
		extraFields_ruleLoadChkbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_ruleOnLeaveChkbox));
		extraFields_ruleOnLeaveChkbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTabNoConditionChkbbox));
		rulesTabNoConditionChkbbox.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesGridElse1stRow_1stcol));
		rulesGridElse1stRow_1stcol.click();

		rulesElseEnterFiled.sendKeys("CreateTab_NumberField");
		rulesElseEnterFiled.sendKeys(Keys.TAB);
		rulesElseEnterFiled.sendKeys("Value");

		rulesElseEnterChangeValueDrpdwn.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesIFEnterValue));
		rulesIFEnterValue.sendKeys("500");


		rulesIFEnterValue.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesTabGrid1st_10thCol));
		rulesTabGrid1st_10thCol.click();

		rulesTabGridMandatoryChkbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_RulesSaveBtn));
		extraFields_RulesSaveBtn.click();

		String expMessageOnSaveRule = "Rule Saved Successfully";
		String actMessageOnSaveRule=checkValidationMessage(expMessageOnSaveRule);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_RuleNameDropdown));
		extraFields_RuleNameDropdown.click();
		Thread.sleep(1000);
		extraFields_RuleNameDropdown.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		extraFields_RuleNameDropdown.sendKeys(Keys.BACK_SPACE);		
		Thread.sleep(1000);
		extraFields_RuleNameDropdown.sendKeys("RuleToDelete");

		Thread.sleep(2000);

		extraFields_RuleNameDropdown.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_RulesDeleteBtn));
		extraFields_RulesDeleteBtn.click();

		Thread.sleep(2000);
		String actAlert=rulesDeletePopUpoMessage.getText();
		String expAlert="Are you sure want to delete the selected Rule [ RuleToDelete ]";

		System.err.println(" Act Alrt  : "+actAlert);
		System.err.println(" Exp Alrt  : "+expAlert);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesDeleteNoBtn));
		rulesDeleteNoBtn.click();


		String actName=extraFields_RuleNameDropdown.getAttribute("value");
		String expName="RuleToDelete";

		System.err.println(" Act Name  : "+actName);
		System.err.println(" Exp Name  : "+expName);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_RulesDeleteBtn));
		extraFields_RulesDeleteBtn.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesDeleteYesBtn));
		rulesDeleteYesBtn.click();

		String expMessageOnDeleteRule = "Rule Deleted Successfully.";
		String actMessageOnDeleteRule=checkValidationMessage(expMessageOnDeleteRule);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_RulesCloseBtn));
		extraFields_RulesCloseBtn.click();

		if (actAlert.equalsIgnoreCase(expAlert) && actMessageOnDeleteRule.equalsIgnoreCase(expMessageOnDeleteRule) && 
				actMessageOnSaveRule.equalsIgnoreCase(expMessageOnSaveRule))
		{
			System.err.println(" Rule Deleted ");
			return true;
		}
		else
		{
			System.err.println(" Rule Not  Deleted ");
			return false;
		}
	}

	@FindBy(xpath="//*[@id='newMasterDiv6']/div/div[17]/div[1]/label")
	private static WebElement smallNumberCaption;
	
	public boolean checkValidationRuleWithnoCondition() throws InterruptedException
	{
		getDriver().navigate().refresh();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		masterNewBtn.click();


		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTab_CreateTab));
		createTab_CreateTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabNumberFieldTxt));

		String actaccountHeaderCreateTabNumberFieldTxt=accountHeaderCreateTabNumberFieldTxt.getAttribute("value");
		String expaccountHeaderCreateTabNumberFieldTxt="100";
		
		String actaccountHeaderCreateTabsmallNumberCaption=smallNumberCaption.getText();
		String expaccountHeaderCreateTabsmallNumberCaption="Focus";
		
		

		System.out.println(" Actual : "+actaccountHeaderCreateTabNumberFieldTxt);
		System.out.println(" Exp    : "+expaccountHeaderCreateTabNumberFieldTxt);


		if (actaccountHeaderCreateTabNumberFieldTxt.equalsIgnoreCase(expaccountHeaderCreateTabNumberFieldTxt) &&
				actaccountHeaderCreateTabsmallNumberCaption.equalsIgnoreCase(expaccountHeaderCreateTabsmallNumberCaption)) 
		{
			System.err.println(" Test Pass: Rule With Out COndition  is Applicable ");
			System.out.println(" Test Pas:  Both Rules are in Active and Both are given in same Condition ");
			return true;
		} 
		else
		{
			System.err.println(" Test FAIL: Rule With Out COndition  is Applicable ");
			return false;

		}
	}



	public boolean checkValidationRuleWithCondition() throws InterruptedException
	{
		getDriver().navigate().refresh();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		masterNewBtn.click();

		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTab_CreateTab));
		createTab_CreateTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabTextFieldTxt));
		accountHeaderCreateTabTextFieldTxt.click();
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		Thread.sleep(1000);
		accountHeaderCreateTabTextFieldTxt.sendKeys("FOCUSHYD");

		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabNumberFieldTxt));

		String actaccountHeaderCreateTabNumberFieldTxt=accountHeaderCreateTabNumberFieldTxt.getAttribute("value");
		String expaccountHeaderCreateTabNumberFieldTxt="500";
		
		String actaccountHeaderCreateTabsmallNumberCaption=smallNumberCaption.getText();
		String expaccountHeaderCreateTabsmallNumberCaption="FOCUSHYD";
		
		
		

		System.out.println(" Actual : "+actaccountHeaderCreateTabNumberFieldTxt);
		System.out.println(" Exp    : "+expaccountHeaderCreateTabNumberFieldTxt);


		if (actaccountHeaderCreateTabNumberFieldTxt.equalsIgnoreCase(expaccountHeaderCreateTabNumberFieldTxt)
				&& actaccountHeaderCreateTabsmallNumberCaption.equalsIgnoreCase(expaccountHeaderCreateTabsmallNumberCaption) ) 
		{
			System.err.println(" Test Pass: Rule With Out COndition  is Applicable ");
			System.out.println(" Test Pas:  Both Rules are in Active and Both are given in same Condition ");
			return true;
		} 
		else
		{
			System.err.println(" Test FAIL: Rule With Out COndition  is Applicable ");
			return false;

		}
	}





	public boolean checkEditOptionInRuleUnderCreatedField() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getDriver().navigate().refresh();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();



		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newcreateTab));
		newcreateTab.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cus1stRowEditBtn));
		cus1stRowEditBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_RulesTab));
		extraFields_RulesTab.click();

	
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_RuleNameDropdown));
		extraFields_RuleNameDropdown.click();
		extraFields_RuleNameDropdown.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		extraFields_RuleNameDropdown.sendKeys("ruleWithCondition");
		Thread.sleep(3000);
		extraFields_RuleNameDropdown.sendKeys(Keys.TAB);

		Thread.sleep(3000);
		
				Thread.sleep(2000);
				
				JavascriptExecutor jse = (JavascriptExecutor)getDriver();
				jse.executeScript("arguments[0].scrollIntoView(true);", rulesGrid3rdRow_1stcol);
				
				//getAction().moveToElement(rulesGrid3rdRow_1stcol).build().perform();
				Thread.sleep(2000);
				
				
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesGrid3rdRow_1stcol));
		rulesGrid3rdRow_1stcol.click();

		rulesIFEnterFiled.sendKeys("CreateTab_FractionField");
		rulesIFEnterFiled.sendKeys(Keys.TAB);
		rulesIFEnterChangeValueDrpdwn.sendKeys("Value");

		rulesIFEnterChangeValueDrpdwn.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesIFEnterValueTxt));
		rulesIFEnterValueTxt.sendKeys("101.10");


		rulesIFEnterValueTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_RulesSaveBtn));
		extraFields_RulesSaveBtn.click();
		
		Thread.sleep(2000);

		String expMessageOnSaveRule = "Rule Saved Successfully";
		String actMessageOnSaveRule=checkValidationMessage(expMessageOnSaveRule);
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_RuleNameDropdown));
		extraFields_RuleNameDropdown.click();

		extraFields_RuleNameDropdown.sendKeys(Keys.SHIFT,Keys.HOME);

		extraFields_RuleNameDropdown.sendKeys(Keys.BACK_SPACE);		

		Thread.sleep(1000);

		extraFields_RuleNameDropdown.sendKeys("ruleWithCondition");

		Thread.sleep(2000);
		extraFields_RuleNameDropdown.sendKeys(Keys.TAB);

		Thread.sleep(3000);

		System.out.println(" **************************************Condition Validations *************************");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMessageOnOk = "Field Updated Successfully";
		String actMessageOnOk=checkValidationMessage(expMessageOnOk);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerDetailsSaveBtn));
		headerDetailsSaveBtn.click();

		String expMessageOnSave = "Master updated successfully";
		String actMessageOnSave=checkValidationMessage(expMessageOnSave);

	

		if (actMessageOnSaveRule.equalsIgnoreCase(expMessageOnSaveRule) && 
				actMessageOnOk.equalsIgnoreCase(expMessageOnOk) && actMessageOnSave.equalsIgnoreCase(expMessageOnSave))
		{
			System.out.println(" Test Pass: Edited SucessFully In Rules under Customization Field ");
			return true;
		}
		else
		{
			System.out.println(" Test Fail: Edited SucessFully In Rules under Customization Field ");
			return false;

		}

	}



	@FindBy(xpath="//*[@id='all_TabsField']/div[10]/nav/div/div/ul/li[1]/a/i")
	public static WebElement headerDetailsSaveBtn;


	@FindBy(xpath="//*[@id='tblFormating_IF_Rule_FieldRules_col_2-0']")
	public static WebElement ruleIFTab2ndRow1stcol;


	@FindBy(xpath="//*[@id='tblFormating_IF_Rule_FieldRules_col_1-0']")
	public static WebElement ruleIFTab1stRow1stcol;

	@FindBy(xpath="//tbody/tr[2]/td[1]/span[1]")
	public static WebElement ruleIFTabDeleteRowBtn;



	@FindBy(xpath = "//input[@id='txtGeneralMsg_RuleIfMsg_FieldRules']")
	public static WebElement rules_MessageTabGeneralTXT;

	@FindBy(xpath = "//input[@id='txtCaptionFormat_IF_FieldRules']")
	public static WebElement rulesTabIFGridEnterCaption;

	@FindBy(xpath="//td[@id='tblFormating_IF_Rule_FieldRules_col_1-1']")
	public static WebElement rulesGrid1stRow_1stcol ;

	@FindBy(xpath="//td[@id='tblFormating_IF_Rule_FieldRules_col_3-1']")
	public static WebElement rulesGrid3rdRow_1stcol ;

	@FindBy(xpath="//td[@id='tblFormating_IF_Rule_FieldRules_col_3-2']")
	public static WebElement rulesGrid3rdRow_2ndcol ;

	@FindBy(xpath="//td[@id='tblFormating_IF_Rule_FieldRules_col_3-4']")
	public static WebElement rulesGrid3rdRow_4thcol ;



	@FindBy(xpath="//td[@id='tblFormating_IF_Rule_FieldRules_col_1-2']")
	public static WebElement rulesGrid1stRow_2ndcol ;

	@FindBy(xpath="//td[@id='tblFormating_IF_Rule_FieldRules_col_1-4']")
	public static WebElement rulesGrid1stRow_4thcol ;

	@FindBy(xpath="//td[@id='tblFormating_IF_Rule_FieldRules_col_2-1']")
	public static WebElement rulesGrid2ndRow_1stcol ;

	@FindBy(xpath="//td[@id='tblFormating_IF_Rule_FieldRules_col_2-2']")
	public static WebElement rulesGrid2ndRow_2ndcol ;

	@FindBy(xpath="//td[@id='tblFormating_IF_Rule_FieldRules_col_2-4']")
	public static WebElement rulesGrid2ndRow_4thcol ;


	@FindBy(xpath="//td[@id='tblFormating_IF_Rule_FieldRules_col_2-5']")
	public static WebElement rulesGrid2ndRow_5thcol ;


	@FindBy(xpath = "//input[@id='txtCaptionFormat_Else_FieldRules']")
	public static WebElement rulesTabElseGridEnterCaption;




	@FindBy(xpath="//td[@id='tblFormating_Else_Rule_FieldRules_col_1-1']")
	public static WebElement rulesGridElse1stRow_1stcol ;

	@FindBy(xpath="//td[@id='tblFormating_Else_Rule_FieldRules_col_2-1']")
	public static WebElement rulesGridElse2ndRow_1stcol ;

	@FindBy(xpath="//td[@id='tblFormating_Else_Rule_FieldRules_col_2-4']")
	public static WebElement rulesGridElse2ndRow_4thcol ;


	@FindBy(xpath="//td[@id='tblFormating_Else_Rule_FieldRules_col_2-5']")
	public static WebElement rulesGridElse2ndRow_5thcol ;


	@FindBy(xpath="//select[@id='ddlFieldsDiv_Rule_IF_FieldRules']")
	public static WebElement rulesIFEnterFiled ;

	@FindBy(xpath="//select[@id='ddlFieldsDiv_Rule_ELSE_FieldRules']")
	public static WebElement rulesElseEnterFiled ;


	@FindBy(xpath = "//td[@id='tblFormating_IF_Rule_FieldRules_col_1-10']")
	public static WebElement rulesTabGrid1st_10thCol;


	@FindBy(xpath = "//input[@id='chkMandatoryFormat_IF_FieldRules']")
	public static WebElement rulesTabGridMandatoryChkbox;


	@FindBy(xpath="//select[@id='ddlChangeValueFormat_IF_FieldRules']")
	public static WebElement rulesIFEnterChangeValueDrpdwn;

	@FindBy(xpath="//select[@id='ddlChangeValueFormat_ELSE_FieldRules']")
	public static WebElement rulesElseEnterChangeValueDrpdwn;


	@FindBy(xpath="//input[@id='txtTextField']")
	public static WebElement rulesIFEnterValueTxt;


	@FindBy(xpath="//input[@id='txtNumField']")
	public static WebElement rulesIFEnterValue;




	public boolean checkRuleValidationWithRuleWithNoConditionInAccountCreation() throws InterruptedException
	{
		Thread.sleep(2000);
		getDriver().navigate().refresh();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();


		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		masterNewBtn.click();

		System.err.println("*****************Account Master*****************");
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerGeneralTab));
		headerGeneralTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(nameTxt));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("RuleWithNoCOndition");
		nameTxt.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.click();
		codeTxt.sendKeys("RuleWithNoCondition");
		codeTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTab_CreateTab));
		createTab_CreateTab.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabTextFieldTxt));
		accountHeaderCreateTabTextFieldTxt.click();
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		Thread.sleep(1000);
		accountHeaderCreateTabTextFieldTxt.sendKeys("FOCUSHYD");

		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.TAB);


		Thread.sleep(3000);
		String actcreateField_SimpleNumberLabel=smallNumberCaption.getText();

		String expcreateField_SimpleNumberLabel="FOCUSHYD";

		System.out.println("createField_SimpleNumberLabel  :"+actcreateField_SimpleNumberLabel +" Value Exp: "+expcreateField_SimpleNumberLabel);


		String actaccountHeaderCreateTabFractionFieldTxt=accountHeaderCreateTabFractionFieldTxt.getAttribute("value");
		String expaccountHeaderCreateTabFractionFieldTxt="101.10";

		System.out.println("actaccountHeaderCreateTabFractionFieldTxt2  :"+actaccountHeaderCreateTabFractionFieldTxt +" Value Exp: "+expaccountHeaderCreateTabFractionFieldTxt);


		if (actaccountHeaderCreateTabFractionFieldTxt.equalsIgnoreCase(expaccountHeaderCreateTabFractionFieldTxt) && 
				actcreateField_SimpleNumberLabel.equalsIgnoreCase(expcreateField_SimpleNumberLabel))
		{
			System.out.println(" Test Pass: Displayed Values ");
			return true;
		} 
		else
		{
			System.out.println(" Test Fail: Displayed Values ");
			return false;
		}

	}



	public boolean checkRuleValidationWithRuleWithConditionInAccountCreation() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException

	{
		Thread.sleep(2000);
		getDriver().navigate().refresh();

		Thread.sleep(2000);
		
		checkValidationMessage("");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();


		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		masterNewBtn.click();

		System.err.println("*****************Account Master*****************");
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerGeneralTab));
		headerGeneralTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(nameTxt));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("RuleWithCOndition");
		nameTxt.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.click();
		codeTxt.sendKeys("RuleWithCondition");
		codeTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTab_CreateTab));
		createTab_CreateTab.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabTextFieldTxt));
		accountHeaderCreateTabTextFieldTxt.click();
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		accountHeaderCreateTabTextFieldTxt.sendKeys("FOCUSHYD");
		Thread.sleep(1000);
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabNumberFieldTxt));
		String actcreateField_SimpleNumberLabel=accountHeaderCreateTabNumberFieldTxt.getAttribute("value");
		String expcreateField_SimpleNumberLabel="500";

		System.out.println("createField_SimpleNumberLabel  :"+actcreateField_SimpleNumberLabel +" Value Exp: "+expcreateField_SimpleNumberLabel);

		String actaccountHeaderCreateTabFractionFieldTxt=accountHeaderCreateTabFractionFieldTxt.getAttribute("value");
		String expaccountHeaderCreateTabFractionFieldTxt="101.10";

		System.out.println("actaccountHeaderCreateTabFractionFieldTxt2  :"+actaccountHeaderCreateTabFractionFieldTxt +" Value Exp: "+expaccountHeaderCreateTabFractionFieldTxt);

		String expMessageOnEnter = "AccountCustomizationWithRule";
		String actMessageOnEnter=checkValidationMessage(expMessageOnEnter);


		if (actaccountHeaderCreateTabFractionFieldTxt.equalsIgnoreCase(expaccountHeaderCreateTabFractionFieldTxt) && 
				actcreateField_SimpleNumberLabel.equalsIgnoreCase(expcreateField_SimpleNumberLabel) && 
				actMessageOnEnter.equalsIgnoreCase(expMessageOnEnter))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountCloseBtnInGroup));
			accountCloseBtnInGroup.click();
			return true;
		} 
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountCloseBtnInGroup));
			accountCloseBtnInGroup.click();
			return false;
		}
	}




	@FindBy(xpath="//*[@id='ddlMasterFields_RULES_MasterRules']/option")
	public static List<WebElement> selectFieldList;




	public boolean checkRuleSavingUnderRuleOptionUnderAccountMasters() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{

		getDriver().navigate().refresh();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();


		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(RulesOption));
		RulesOption.click();


		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Rules_RuleNameText));
		Rules_RuleNameText.click();
		Rules_RuleNameText.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		Rules_RuleNameText.sendKeys("GobalRule");

		Thread.sleep(2000);
		Rules_RuleNameText.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Rules_NewRecordChekbox));
		Rules_NewRecordChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Rules_EditChekbox));
		Rules_EditChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Rules_LoadChekbox));
		Rules_LoadChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Rules_OnLeaveChekbox));
		Rules_OnLeaveChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Rules_OnEnterChekbox));
		Rules_OnEnterChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Rules_BeforeSaveChekbox));
		Rules_BeforeSaveChekbox.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Rules_ActiveChekbox));
		Rules_ActiveChekbox.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesOptionBodyGridRow1AccType));
		rulesOptionBodyGridRow1AccType.click();

		Thread.sleep(2000);

		int list=selectFieldList.size();
		for (int i = 0; i < list; i++)
		{
			String data=selectFieldList.get(i).getText();
			if (data.equalsIgnoreCase("Account Type"))
			{
				selectFieldList.get(i).click();
			}
		}



		Select s2=new Select(rulesOptionBodyGridRow1OPrTye);
		s2.selectByValue("0");
		rulesOptionBodyGridRow1OPrTye.sendKeys(Keys.TAB);


		Select s3=new Select(rulesOptionBodyGridRow1ComparetType);
		s3.selectByValue("1");
		rulesOptionBodyGridRow1ComparetType.sendKeys(Keys.TAB);


		rulesOptionBodyGridValueDrpdwn.click();

		Select s4=new Select(rulesOptionBodyGridValueDrpdwn);
		s4.selectByValue("4");
		Thread.sleep(2000);
		rulesOptionBodyGridValueDrpdwn.sendKeys(Keys.TAB);


		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ruleOptiongridCol1row1));
		ruleOptiongridCol1row1.click();
		ruleOptiongridEnterAccType.sendKeys("createTAb_TextField");
		Thread.sleep(2000);
		ruleOptiongridEnterAccType.sendKeys(Keys.TAB);


		Select a1=new  Select(ruleOptiongridEnterChangeValueType);
		a1.selectByValue("1");
		ruleOptiongridEnterChangeValueType.sendKeys(Keys.TAB);

		ruleOptiongridEnterValueTxt.click();
		ruleOptiongridEnterValueTxt.sendKeys("Focus");
		Thread.sleep(2000);
		ruleOptiongridEnterValueTxt.sendKeys(Keys.TAB );


		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rulesOptionElseTAB));
		rulesOptionElseTAB.click();



		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ruleOptiongridElseCol1row1));
		ruleOptiongridElseCol1row1.click();
		ruleOptiongridElseEnterAccType.sendKeys("createTAb_TextField");
		Thread.sleep(2000);
		ruleOptiongridElseEnterAccType.sendKeys(Keys.TAB);


		Select a2=new  Select(ruleOptiongridEnterElseChangeValueType);
		a2.selectByValue("1");
		ruleOptiongridEnterElseChangeValueType.sendKeys(Keys.TAB);

		ruleOptiongridEnterValueTxt.click();
		ruleOptiongridEnterValueTxt.sendKeys("Centra");
		Thread.sleep(2000);
		ruleOptiongridEnterValueTxt.sendKeys(Keys.TAB );


		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountRules_SaveBtn));
		accountRules_SaveBtn.click();

		Thread.sleep(1000);
		String expMessageOnSaveRule = "Rule Saved Successfully";
		String actMessageOnSaveRule=checkValidationMessage(expMessageOnSaveRule);


		if (actMessageOnSaveRule.equalsIgnoreCase(expMessageOnSaveRule)) 
		{

			return true;
		} 
		else
		{

			return false;
		}
	}


	public boolean checkPreLOadValuesInRulesOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{


		//Delete
		getDriver().navigate().refresh();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();


		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(RulesOption));
		RulesOption.click();

		//Delete

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Rules_RuleNameText));
		Rules_RuleNameText.click();
		Rules_RuleNameText.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		Rules_RuleNameText.sendKeys("GobalRule");

		Thread.sleep(2000);
		Rules_RuleNameText.sendKeys(Keys.TAB);

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Rules_NewRecordChekbox));
		boolean Rules_NewRecord=Rules_NewRecordChekboxSelected.isSelected();
		String actRules_NewRecordChekbox=Boolean.toString(Rules_NewRecord);
		String expRules_NewRecordChekbox="true";

		boolean extraFields_ruleLoad=Rules_EditChekboxSelected.isSelected();
		String actextraFields_ruleLoadChkbox=Boolean.toString(extraFields_ruleLoad);
		String expextraFields_ruleLoadChkbox="true";

		boolean extraFields_ruleOnLeave=Rules_LoadChekboxSelected.isSelected();
		String actextraFields_ruleOnLeaveChkbox=Boolean.toString(extraFields_ruleOnLeave);
		String expextraFields_ruleOnLeaveChkbox="true";

		boolean extraFields_ruleOnActive=Rules_OnLeaveChekboxSelected.isSelected();
		String actextraFields_ruleOnActiveChkbox=Boolean.toString(extraFields_ruleOnActive);
		String expextraFields_ruleOnActiveChkbox="true";

		boolean rulesTabNoCondition=Rules_OnEnterChekboxSelected.isSelected();
		String actrulesTabNoConditionChkbbox=Boolean.toString(rulesTabNoCondition);
		String exprulesTabNoConditionChkbbox="true";

		System.out.println("extraFields_ruleNewrecordChkbox  : "+actRules_NewRecordChekbox        +" Value "+expRules_NewRecordChekbox);
		System.out.println("extraFields_ruleLoadChkbox       : "+actextraFields_ruleLoadChkbox    +" Value "+expextraFields_ruleLoadChkbox);
		System.out.println("extraFields_ruleOnLeaveChkbox    : "+actextraFields_ruleOnLeaveChkbox +" Value "+expextraFields_ruleOnLeaveChkbox);
		System.out.println("extraFields_ruleOnActiveChkbox   : "+actextraFields_ruleOnActiveChkbox+" Value "+expextraFields_ruleOnActiveChkbox);


		System.out.println(" **************************************Condition Validations *************************");


		String actSelectField=rulesOptionBodyGridRow1AccType.getAttribute("value");
		String expSelectField="Account Type";
		System.out.println(" Act SelectField : "+actSelectField+".");
		System.out.println(" Exp SelectField : "+expSelectField+".");


		Select s2=new Select(rulesOptionBodyGridRow1OPrTye);
		String actrulesTabOperatorsDrpdwn=s2.getFirstSelectedOption().getText();
		String exprulesTabOperatorsDrpdwn="Equal To";
		System.out.println(" Act rulesTabOperatorsDrpdwn : "+actrulesTabOperatorsDrpdwn+".");
		System.out.println(" Exp rulesTabOperatorsDrpdwn : "+exprulesTabOperatorsDrpdwn+".");



		Select s3=new Select(rulesOptionBodyGridRow1ComparetType);
		String actrulesTabCompareWithDrpdwn=s3.getFirstSelectedOption().getText();
		String exprulesTabCompareWithDrpdwn="Value";
		System.out.println(" Act rulesTabCompareWithDrpdwn : "+actrulesTabCompareWithDrpdwn+".");
		System.out.println(" Exp rulesTabCompareWithDrpdwn : "+exprulesTabCompareWithDrpdwn+".");



		String actrulesTabValueTxt=rulesOptionBodyGridRow1ValueType.getAttribute("value");
		String exprulesTabValueTxt="Cash";
		System.out.println(" Act rulesTabValueTxt : "+actrulesTabValueTxt+".");
		System.out.println(" Exp rulesTabValueTxt : "+exprulesTabValueTxt+".");




		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ruleOptiongridCol1row1));
		String actrulesGrid1stRow_1stcol=ruleOptiongridCol1row1.getText();
		String exprulesGrid1stRow_1stcol="CreateTab_TextField";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ruleOptiongridCol1row2));
		String actrulesGrid1stRow_2ndcol=ruleOptiongridCol1row2.getText();
		String exprulesGrid1stRow_2ndcol="Value";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ruleOptiongridCol1row4));
		String actrulesGrid1stRow_4thcol=ruleOptiongridCol1row4.getText();
		String exprulesGrid1stRow_4thcol="Focus";


		System.out.println(" ruleOptiongridCol1row1 : "+actrulesGrid1stRow_1stcol +" Value Exp : "+exprulesGrid1stRow_1stcol);
		System.out.println(" ruleOptiongridCol1row2 : "+actrulesGrid1stRow_2ndcol +" Value Exp : "+exprulesGrid1stRow_2ndcol);
		System.out.println(" ruleOptiongridCol1row4 : "+actrulesGrid1stRow_4thcol +" Value Exp : "+exprulesGrid1stRow_4thcol);

		if (actrulesGrid1stRow_2ndcol.equalsIgnoreCase(exprulesGrid1stRow_2ndcol) &&
				actrulesGrid1stRow_1stcol.equalsIgnoreCase(exprulesGrid1stRow_1stcol) &&
				actrulesGrid1stRow_4thcol.equalsIgnoreCase(exprulesGrid1stRow_4thcol) &&

				actRules_NewRecordChekbox.equalsIgnoreCase(expRules_NewRecordChekbox) && 
				actextraFields_ruleLoadChkbox.equalsIgnoreCase(expextraFields_ruleLoadChkbox) &&
				actextraFields_ruleOnLeaveChkbox.equalsIgnoreCase(expextraFields_ruleOnLeaveChkbox) && 
				actextraFields_ruleOnActiveChkbox.equalsIgnoreCase(expextraFields_ruleOnActiveChkbox)&& 

				actSelectField.equalsIgnoreCase(expSelectField) && 
				actrulesTabCompareWithDrpdwn.equalsIgnoreCase(exprulesTabCompareWithDrpdwn) && 
				actrulesTabOperatorsDrpdwn.equalsIgnoreCase(exprulesTabOperatorsDrpdwn) && 
				actrulesTabValueTxt.equalsIgnoreCase(exprulesTabValueTxt)) 
		{
			Thread.sleep(2000);

			return true;
		} 
		else
		{
			Thread.sleep(2000);

			return false;
		}
	}






	@FindBy(xpath="//*[@id='Conditions-Context_Menu_MasterRules']/li[2]/a")
	public static WebElement rulesOptionElseTAB;

	@FindBy(xpath="//input[@id='txtField_RC_1_1_MasterRules']")
	public static WebElement rulesOptionBodyGridRow1AccType;

	@FindBy(xpath="//*[@id='ddlOperators_RC_1_1_MasterRules']")
	public static WebElement rulesOptionBodyGridRow1OPrTye;

	@FindBy(xpath="//*[@id='ddlCompareWith_RC_1_1_MasterRules']")
	public static WebElement rulesOptionBodyGridRow1ComparetType;

	@FindBy(xpath="//*[@id='txtCompareType_RC_1_1_MasterRules']")
	public static WebElement rulesOptionBodyGridRow1ValueType;

	@FindBy(xpath="//*[@id='rConditions_RULES_1_MasterRules']/div/div[1]/div[5]/select")
	public static WebElement rulesOptionBodyGridValueDrpdwn;



	@FindBy(xpath="//*[@id='tblFormating_IF_Rule_MasterRules_col_1-1']")
	public static WebElement ruleOptiongridCol1row1;

	@FindBy(xpath="//*[@id='tblFormating_IF_Rule_MasterRules_col_1-2']")
	public static WebElement ruleOptiongridCol1row2;

	@FindBy(xpath="//*[@id='tblFormating_IF_Rule_MasterRules_col_1-4']")
	public static WebElement ruleOptiongridCol1row4;

	@FindBy(xpath="//*[@id='ddlFieldsDiv_Rule_IF_MasterRules']")
	public static WebElement ruleOptiongridEnterAccType;

	@FindBy(xpath="//select[@id='ddlChangeValueFormat_IF_MasterRules']")
	public static WebElement ruleOptiongridEnterChangeValueType;

	@FindBy(xpath="//input[@id='txtTextField']")
	public static WebElement ruleOptiongridEnterValueTxt;



	@FindBy(xpath="//*[@id='tblFormating_Else_Rule_MasterRules_col_1-1']")
	public static WebElement ruleOptiongridElseCol1row1;

	@FindBy(xpath="//*[@id='tblFormating_Else_Rule_MasterRules_col_1-2']")
	public static WebElement ruleOptiongridElseCol1row2;

	@FindBy(xpath="//*[@id='tblFormating_Else_Rule_MasterRules_col_1-4']")
	public static WebElement ruleOptiongridElseCol1row4;

	@FindBy(xpath="//*[@id='ddlFieldsDiv_Rule_ELSE_MasterRules']")
	public static WebElement ruleOptiongridElseEnterAccType;

	@FindBy(xpath="//select[@id='ddlChangeValueFormat_ELSE_MasterRules']")
	public static WebElement ruleOptiongridEnterElseChangeValueType;

	@FindBy(xpath="//input[@id='txtTextField']")
	public static WebElement ruleOptiongridEnterElseValueTxt;





	public boolean checkDeleteRuleOptionUnderAccountMasters() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Rules_RuleNameText));
		Rules_RuleNameText.click();
		Rules_RuleNameText.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		Rules_RuleNameText.sendKeys("RuleForDelete");

		Thread.sleep(2000);
		Rules_RuleNameText.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Rules_NewRecordChekbox));
		Rules_NewRecordChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Rules_EditChekbox));
		Rules_EditChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Rules_LoadChekbox));
		Rules_LoadChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Rules_OnLeaveChekbox));
		Rules_OnLeaveChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Rules_OnEnterChekbox));
		Rules_OnEnterChekbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Rules_BeforeSaveChekbox));
		Rules_BeforeSaveChekbox.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Rules_NoConditionChekbox));
		Rules_NoConditionChekbox.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ruleOptiongridCol1row1));
		ruleOptiongridCol1row1.click();
		ruleOptiongridEnterAccType.sendKeys("createTAb_TextField");
		Thread.sleep(2000);
		ruleOptiongridEnterAccType.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		Select a1=new  Select(ruleOptiongridEnterChangeValueType);
		a1.selectByValue("1");
		ruleOptiongridEnterChangeValueType.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		ruleOptiongridEnterValueTxt.click();
		ruleOptiongridEnterValueTxt.sendKeys("Focus");
		Thread.sleep(2000);
		ruleOptiongridEnterValueTxt.sendKeys(Keys.TAB );

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountRules_SaveBtn));
		accountRules_SaveBtn.click();

		String expMessageOnSaveRule = "Rule Saved Successfully";
		String actMessageOnSaveRule=checkValidationMessage(expMessageOnSaveRule);



		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Rules_RuleNameText));
		Rules_RuleNameText.click();
		Rules_RuleNameText.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		Thread.sleep(2000);
		Rules_RuleNameText.sendKeys("RuleForDelete");

		Thread.sleep(2000);
		Rules_RuleNameText.sendKeys(Keys.TAB);

		Thread.sleep(5000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountRules_DeleteBtn));
		accountRules_DeleteBtn.click();

		Thread.sleep(2000);
		String actDeleteMessage=ruleOptionDeletePopTxt.getText();
		String expDeleteMessage="Are you sure want to delete the selected Rule [ RuleForDelete ]";

		System.out.println("ACtual Delete Message : "+actDeleteMessage);
		System.out.println("Exp    Delete Message : "+expDeleteMessage);
		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ruleOptionDeletePopYesBtn));
		ruleOptionDeletePopYesBtn.click();
		
		Thread.sleep(2000);

		String expMessageOnDelete = "Rule Deleted Successfully.";
		String actMessageOnDelete=checkValidationMessage(expMessageOnDelete);

		Thread.sleep(3000);

		if (actMessageOnSaveRule.equalsIgnoreCase(expMessageOnSaveRule) && 
				actDeleteMessage.equalsIgnoreCase(expDeleteMessage) && 
				actMessageOnDelete.equalsIgnoreCase(expMessageOnDelete)) 
		{
			System.out.println(" Rule Deleted In Rule Option ");

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerDetailsSaveBtn));
			headerDetailsSaveBtn.click();

			String expMessageOnSave1 = "Master updated successfully";
			String actMessageOnSave1=checkValidationMessage(expMessageOnSave1);


			return true;
		} 
		else
		{
			System.err.println(" Rule Not Deleted In Rule Option ");
			return false;
		}
	} 

	@FindBy(xpath="//*[@id='DeleteRule_Modal_MasterRules']//input[1]")
	public static WebElement ruleOptionDeletePopYesBtn;

	@FindBy(xpath="//label[@id='lblWarnMessage_RuleModal_MasterRules']")
	public static WebElement ruleOptionDeletePopTxt;




	public boolean checkRuleValidationWithGobalRuleWithConditionInAccountCreation() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException

	{
		Thread.sleep(2000);
		getDriver().navigate().refresh();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();


		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		masterNewBtn.click();

		System.err.println("*****************Account Master*****************");
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerGeneralTab));
		headerGeneralTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(nameTxt));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("GobalRule");
		nameTxt.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.click();
		codeTxt.sendKeys("GobalRule");
		codeTxt.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));

		Select s1=new Select(accountTypeDropdown);
		s1.selectByVisibleText("Cash");

		Thread.sleep(2000);
		accountTypeDropdown.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTab_CreateTab));
		createTab_CreateTab.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabTextFieldTxt));
		accountHeaderCreateTabTextFieldTxt.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabTextFieldTxt));
		String actcreateField_SimpleNumberLabel=accountHeaderCreateTabTextFieldTxt.getAttribute("value");
		String expcreateField_SimpleNumberLabel="Focus";

		System.out.println("createField_SimpleNumberLabel  :"+actcreateField_SimpleNumberLabel +" Value Exp: "+expcreateField_SimpleNumberLabel);

		if (actcreateField_SimpleNumberLabel.equalsIgnoreCase(expcreateField_SimpleNumberLabel) )
		{
			System.out.println(" Test Pass: Displayed Values ");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountCloseBtnInGroup));
			accountCloseBtnInGroup.click();
			return true;
		} 
		else
		{
			System.out.println(" Test Fail: Displayed Values ");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountCloseBtnInGroup));
			accountCloseBtnInGroup.click();
			return false;
		}
	}


	public boolean checkRuleValidationWithGobalRuleWithConditionInAccountCreationElsePart() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		Thread.sleep(2000);
		getDriver().navigate().refresh();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();


		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		masterNewBtn.click();

		System.err.println("*****************Account Master*****************");
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerGeneralTab));
		headerGeneralTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(nameTxt));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("GobalRule");
		nameTxt.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.click();
		codeTxt.sendKeys("GobalRule");
		codeTxt.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountTypeDropdown));
		accountTypeDropdown.sendKeys("Asset");
		accountTypeDropdown.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTab_CreateTab));
		createTab_CreateTab.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabTextFieldTxt));
		accountHeaderCreateTabTextFieldTxt.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabTextFieldTxt));
		String actcreateField_SimpleNumberLabel=accountHeaderCreateTabTextFieldTxt.getAttribute("value");
		String expcreateField_SimpleNumberLabel="Centra";

		System.out.println("createField_SimpleNumberLabel  :"+actcreateField_SimpleNumberLabel +" Value Exp: "+expcreateField_SimpleNumberLabel);

	

		if (actcreateField_SimpleNumberLabel.equalsIgnoreCase(expcreateField_SimpleNumberLabel) )
		{
			System.out.println(" Test Pass: Displayed Values ");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountCloseBtnInGroup));
			accountCloseBtnInGroup.click();
			return true;
		} 
		else
		{
			System.out.println(" Test Fail: Displayed Values ");
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountCloseBtnInGroup));
			accountCloseBtnInGroup.click();
			return false;
		}
	}


	//Unique Constarts

	public boolean checkUniqueConstarintsUnderMasterCustomizaion() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		Thread.sleep(2000);
		getDriver().navigate().refresh();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();


		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(3000);


		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountMasterFieldsUniqueConstraintsOption));
		accountMasterFieldsUniqueConstraintsOption.click();


		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConstraintNameTxt));
		ConstraintNameTxt.click();
		ConstraintNameTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		ConstraintNameTxt.sendKeys("Test");
		Thread.sleep(2000);
		ConstraintNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		Select s1= new Select(UniqueConstraints_TabsDropdown);
		s1.selectByVisibleText("Create Tab");
		Thread.sleep(2000);

		/*ConstraintNameTxt.click();

		Thread.sleep(4000);*/

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(uniqueContraintTabCreateTabTextFieldChkBox));
		uniqueContraintTabCreateTabTextFieldChkBox.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UniqueConstraintsAddBtn));
		UniqueConstraintsAddBtn.click();//Save Btn

		String expMessageOnSave = "Master updated successfully";
		String actMessageOnSave=checkValidationMessage(expMessageOnSave);

		if ( actMessageOnSave.equalsIgnoreCase(expMessageOnSave) )
		{
			System.out.println(" Test Pass: Unique Consatraint Saved  ");
			return true;
		}
		else
		{
			System.out.println(" Test Fail: Unique Consatraint not Saved  ");
			return false;

		}
	}




	@FindBy(xpath="//*[@id='chkList_HeaderFields_104']/div[1]/div/div/label/span")
	public static WebElement uniqueContraintTabCreateTabTextFieldChkBox;

	@FindBy(xpath="//*[@id='chkList_HeaderFields_104']/div[2]/div/div/label/span")
	public static WebElement uniqueContraintTabCreateTabNumberFieldChkBox;




	@FindBy(xpath="//*[@id='ddlConstraintTabList']/option")
	public static List<WebElement> uniqueConstraints_TabsDropdownList;






	public boolean checkEditOptionInUniqueConstraintUnderMasterCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountMasterFieldsUniqueConstraintsOption));
		accountMasterFieldsUniqueConstraintsOption.click();


		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConstraintNameTxt));
		ConstraintNameTxt.click();
		ConstraintNameTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		ConstraintNameTxt.sendKeys("Test");
		Thread.sleep(2000);
		ConstraintNameTxt.sendKeys(Keys.TAB);



		Select s1= new Select(UniqueConstraints_TabsDropdown);

		String actSelectedOption=s1.getFirstSelectedOption().getText();
		String expSelectedOption="create Tab";


		System.out.println("actSelectedOption  : "+actSelectedOption);
		System.out.println("expSelectedOption  : "+expSelectedOption);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(uniqueContraintTabCreateTabTextFieldChkBox));

		boolean actuniqueContraintTabCreateTabTextFieldChkBox=uniqueContraintTabCreateTabTextFieldChkBox.isSelected();
		boolean expuniqueContraintTabCreateTabTextFieldChkBox=true;


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(uniqueContraintTabCreateTabNumberFieldChkBox));
		uniqueContraintTabCreateTabNumberFieldChkBox.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UniqueConstraintsAddBtn));
		UniqueConstraintsAddBtn.click();//Save Btn


		String expMessageOnSave = "Master updated successfully";
		String actMessageOnSave=checkValidationMessage(expMessageOnSave);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerDetailsSaveBtn));
		headerDetailsSaveBtn.click();

		String expMessageOnSave1 = "Master updated successfully";
		String actMessageOnSave1=checkValidationMessage(expMessageOnSave1);

		if ( actMessageOnSave.equalsIgnoreCase(expMessageOnSave) && 
				actMessageOnSave1.equalsIgnoreCase(expMessageOnSave1))
		{
			System.out.println(" Test Pass: Unique Consatraint Saved  ");
			return true;
		}
		else
		{
			System.out.println(" Test Fail: Unique Consatraint not Saved  ");
			return false;

		}

	}


	public boolean checkDeleteOptionInUniqueConstraint() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountMasterFieldsUniqueConstraintsOption));
		accountMasterFieldsUniqueConstraintsOption.click();


		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConstraintNameTxt));
		ConstraintNameTxt.click();
		ConstraintNameTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		ConstraintNameTxt.sendKeys("Delete");
		Thread.sleep(2000);
		ConstraintNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		Select s1= new Select(UniqueConstraints_TabsDropdown);
		s1.selectByVisibleText("Create Tab");
		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(uniqueContraintTabCreateTabTextFieldChkBox));
		uniqueContraintTabCreateTabTextFieldChkBox.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UniqueConstraintsAddBtn));
		UniqueConstraintsAddBtn.click();//Save Btn
		String expMessageOnSave = "Master updated successfully";
		String actMessageOnSave=checkValidationMessage(expMessageOnSave);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountMasterFieldsUniqueConstraintsOption));
		accountMasterFieldsUniqueConstraintsOption.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConstraintNameTxt));
		ConstraintNameTxt.click();
		ConstraintNameTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		ConstraintNameTxt.sendKeys("Delete");
		Thread.sleep(2000);
		ConstraintNameTxt.sendKeys(Keys.TAB);


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UniqueConstraintsDeleteBtn));
		UniqueConstraintsDeleteBtn.click();


		String expMessageOnSave1 = "Master updated successfully";
		String actMessageOnSave1=checkValidationMessage(expMessageOnSave1);

		if ( actMessageOnSave.equalsIgnoreCase(expMessageOnSave) && 
				actMessageOnSave1.equalsIgnoreCase(expMessageOnSave1))
		{
			System.out.println(" Test Pass: Unique Consatraint Deleted  ");
			return true;
		}
		else
		{
			System.out.println(" Test Fail: Unique Consatraint not Deleted  ");
			return false;
		}

	}


	public boolean checkValidationUniqueConsatraintInAccountSaving() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{

		Thread.sleep(2000);
		getDriver().navigate().refresh();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();


		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));
		masterNewBtn.click();

		System.err.println("*****************Account Master*****************");
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(headerGeneralTab));
		headerGeneralTab.click();

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(nameTxt));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("UniqueName");
		nameTxt.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.click();
		codeTxt.sendKeys("UniqueCode");
		codeTxt.sendKeys(Keys.TAB);


		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTab_CreateTab));
		createTab_CreateTab.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabTextFieldTxt));
		accountHeaderCreateTabTextFieldTxt.click();
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		accountHeaderCreateTabTextFieldTxt.sendKeys("Unique");

		Thread.sleep(1000);
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.TAB);

		Thread.sleep(1000);
		accountHeaderCreateTabNumberFieldTxt.click();

		accountHeaderCreateTabNumberFieldTxt.sendKeys("100");
		accountHeaderCreateTabNumberFieldTxt.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage="Saved Successfully";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkSaveButtonInAddGroupWithInputingMandatoryFields***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			return true;
		}
		else
		{
			return false;
		}
	}


	public boolean checkSavingAnotherAccountWithSamNumberFieldTxt() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{


		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(nameTxt));
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("UniqueName");
		nameTxt.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.click();
		codeTxt.sendKeys("UniqueCode1");
		codeTxt.sendKeys(Keys.TAB);


		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTab_CreateTab));
		createTab_CreateTab.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTabTextFieldTxt));
		accountHeaderCreateTabTextFieldTxt.click();
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		accountHeaderCreateTabTextFieldTxt.sendKeys("Unique");

		Thread.sleep(1000);
		accountHeaderCreateTabTextFieldTxt.sendKeys(Keys.TAB);

		Thread.sleep(1000);
		accountHeaderCreateTabNumberFieldTxt.click();

		accountHeaderCreateTabNumberFieldTxt.sendKeys("100");
		accountHeaderCreateTabNumberFieldTxt.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage="CreateTab_TextField , CreateTab_NumberField Is Unique";

		String actMessage=checkValidationMessage(expMessage);

		System.out.println("********************************checkSaveButtonInAddGroupWithInputingMandatoryFields***************************");

		System.out.println("Message     : "+actMessage+" Value Expected : "+expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{
			return true;
		}
		else
		{
			return false;
		}
	}





	public boolean checkUniqueConstarintsUnderMasterCustomizaionDelete() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getDriver().navigate().refresh();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();


		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(3000);


		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountMasterFieldsUniqueConstraintsOption));
		accountMasterFieldsUniqueConstraintsOption.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConstraintNameTxt));
		ConstraintNameTxt.click();
		ConstraintNameTxt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
		ConstraintNameTxt.sendKeys("Test");
		Thread.sleep(2000);
		ConstraintNameTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UniqueConstraintsDeleteBtn));
		UniqueConstraintsDeleteBtn.click();//Save Btn

		String expMessageOnSave = "Master updated successfully";
		String actMessageOnSave=checkValidationMessage(expMessageOnSave);

		if ( actMessageOnSave.equalsIgnoreCase(expMessageOnSave) )
		{
			return true;
		}
		else
		{
			return false;
		}
	}






	// Report Tab

	public static boolean checkAllReportsDisplayingInReportsTabInCustomizationMaster() throws InterruptedException
	{
		Thread.sleep(3000);
		getDriver().navigate().refresh();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();



		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportsInCustomizeMaster));
		reportsInCustomizeMaster.click();

		Thread.sleep(2000);

		int reportsListCount = allReportsInReportsInCustomizeMaster.size();


		int expreportsListCount=52;
		System.err.println("Reports Count"+reportsListCount +" Value  :"+expreportsListCount);

		ArrayList<String> reportsListArray = new ArrayList<String>();
		for(int i=0;i<reportsListCount;i++)
		{
			String data = allReportsInReportsInCustomizeMaster.get(i).getText();
			reportsListArray.add(data);
		}

		String actReportList = reportsListArray.toString();
		System.out.println(actReportList);
		String expReportList ="[Master info, ABC analysis amount, Bank book, Bank reconciliation statement, Cash book, Cheque book register report, Comparative analysis, Customer ageing detail analysis, Customer ageing detail by due date, Customer ageing summary analysis, Customer bill-wise summary, Customer due date analysis, Customer listing of outstanding bills, Customer overdue analysis, Customer overdue summary, Customer statements, Customer summary ageing by due date, Income Expense Trend, Interest calculation, Ledger, Ledger detail, Monthly Sales, Peak and low balance amount, Petty cash book, Purchase register, Purchase return register, Purchases grouped by department, Purchases grouped by Item, Purchases grouped by vendor, Sales day book, Sales grouped by customer, sales grouped by department, Sales grouped by Item, Sales return register, Schedules, Sub ledger, Summary purchase register, Summary sales register, Top Customers, Trading account, Transactions type analysis, Vendor ageing detail analysis, Vendor ageing detail by due date, Vendor ageing summary analysis, Vendor bill-wise summary, Vendor due date analysis, Vendor listing of outstanding bills, Vendor overdue analysis, Vendor overdue summary, Vendor statements, Vendor summary ageing by due date, Virtual Bank Ledger]";
		if (actReportList.equalsIgnoreCase(expReportList) && 
				reportsListCount==expreportsListCount)
		{
			return true;
		} 
		else
		{
			return false;
		}
	}

	public static boolean checkLedgerdetailcheckBoxInReports() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		int reportsListCount = allReportsInReportsInCustomizeMaster.size();
		System.out.println("Reports Count"+reportsListCount);
		ArrayList<String> reportsListArray = new ArrayList<String>();
		for(int i=0;i<reportsListCount;i++)
		{
			String data = allReportsInReportsInCustomizeMaster.get(i).getText();
			reportsListArray.add(data);
		}



		for (int i = 0; i < reportsListCount; i++) 
		{
			String data = allReportsInReportsInCustomizeMaster.get(i).getText();

			if (data.equalsIgnoreCase("Ledger detail")) 
			{
				allReportsInReportsInCustomizeMaster.get(i).click();
				break;
			} 
		}


		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtnInReports));	
		SaveBtnInReports.click();
		Thread.sleep(1000);

		String expMessage = "Reports Attached to Master";
		String actMessage = checkValidationMessage(expMessage);
		
		Thread.sleep(2000);

		if (actMessage.equalsIgnoreCase(expMessage))
		{
			return true;
		}
		else
		{
			return false;
		}
	}


	@FindBy(xpath="//*[@id='btnLedger detail']/i")
	public static WebElement masterLedgerDetailBtn;




	public static boolean checkLogoutAndLoginAfterCustomization() throws InterruptedException
	{
		
		getDriver().navigate().refresh();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(LogoutDropdown));
		LogoutDropdown.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();

		Thread.sleep(4000);

			LoginPage lp=new LoginPage(getDriver()); 

			String unamelt="su";

			String pawslt="su";

			boolean qflag=true;

			lp.enterUserName(unamelt);

			lp.enterPassword(pawslt);

			Thread.sleep(2000);
			
			String compname = "Account Properties And Customization";

			Select oSelect = new Select(companyDropDownList);

			List<WebElement> elementCount = oSelect.getOptions();

			int cqSize = elementCount.size();

			System.out.println("CompanyDropdownList Count :" + cqSize);

			int i;

			for (i = 0; i < elementCount.size(); i++) {

				elementCount.get(i).getText();

				String optionName = elementCount.get(i).getText();
				if (optionName.toUpperCase().startsWith(compname.toUpperCase())) {
					System.out.println("q" + elementCount.get(i).getText());
					elementCount.get(i).click();
				}

			}
			
			Thread.sleep(2000);

			lp.clickOnSignInBtn();
			
			reLogin(unamelt, pawslt, compname);
			
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameTxt));
		userNameTxt.click();

		String userInfo=userNameTxt.getText();

		System.out.println("User Info : "+userInfo);

		System.out.println("User Info Capture Text :"+userNameTxt.getText());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogoImg));

		companyLogoImg.click();

		String getCompanyTxt=companyName.getText();
		String getLoginCompanyName=getCompanyTxt.substring(0, 36);
		System.out.println("company name :"+ getLoginCompanyName);
		companyLogoImg.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dashboardName));

		String getDashboard=dashboardName.getText();

		System.out.println(getDashboard);


		String expuserInfo            ="SU";
		String expLoginCompanyName    ="Automation Company ";
		String expDashboard			  ="Graph with Active and setAsDefault";


		System.out.println("***********************************checkLogoutAndLoginAfterEnablingMandatoryCheckboxInFieldsProperties*********************************");

		System.out.println("User Info                        : "+userInfo               +"  value expected  "+expuserInfo);
		System.out.println("Login Company Name               : "+getLoginCompanyName    +"  value expected  "+expLoginCompanyName);
		System.out.println("Dashboard                        : "+getDashboard           +"  value expected  "+expDashboard);


		
		if(/*userInfo.equalsIgnoreCase(expuserInfo) &&*/ getLoginCompanyName.equalsIgnoreCase(expLoginCompanyName))
		{	
			return true;
		}	 
		else
		{
			return false;
		}

	}


	public static boolean checkLedgerInDetailIsDisplayingInMasterRibbonControl() throws InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));		
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));		
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));		
		accounts.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		Thread.sleep(2000);

		boolean actmasterLedgerDetailBtn    	  =masterLedgerDetailBtn.isDisplayed();
		boolean expmasterLedgerDetailBtn    	  = true;

		System.out.println("*****************************checkLedgerDetailButtonInRibbonControl************************************");

		System.out.println("masterLedgerDetailBtn  : "+actmasterLedgerDetailBtn  +" Value Expected : "+expmasterLedgerDetailBtn);


		if(actmasterLedgerDetailBtn==expmasterLedgerDetailBtn)
		{
			return true;
		}
		else
		{
			return false;
		}
	}


	@FindBy(xpath="//*[@id='allMasterCustTabs']/li[6]/a")
	public static WebElement reportsInCustomizeMaster;


	@FindBy(xpath="//*[@id='AllReportsDiv_MasterCust']/div/div/label")
	public static List<WebElement> allReportsInReportsInCustomizeMaster;

	@FindBy(xpath="//*[@id='tabContent_Reports_MasterCust']/div[1]/div[2]/nav/ul/li[1]/a/i")
	public static WebElement SaveBtnInReports;



	public static boolean checkLedgerDetailReportForVendorB() throws InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));		
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));		
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));		
		accounts.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxt));
		masterSearchTxt.click();
		masterSearchTxt.sendKeys("Vendor B");
		masterSearchTxt.sendKeys(Keys.ENTER);

		Thread.sleep(2000);

		int count = masterGridBodyName.size();

		ArrayList<String> AccountNames = new ArrayList<String>();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();
			AccountNames.add(data);

			if (data.equalsIgnoreCase("Vendor B")) 
			{
				masterGridBodyChkbox.get(i).click();
				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(masterLedgerDetailBtn));
		masterLedgerDetailBtn.click();

		Thread.sleep(4000);

		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());

		int actOpenWindowsCount = getDriver().getWindowHandles().size();
		int expOpenWindowsCount = 2;

		getDriver().switchTo().window(openTabs.get(1));

		Thread.sleep(2000);


		int reportsByWarehouseRow1ListCount = reportsRow1List.size();
		ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
		{
			String data = reportsRow1List.get(i).getText();
			reportsByWarehouseRow1ListArray.add(data);
		}
		String actRow1List = reportsByWarehouseRow1ListArray.toString();
		String expRow1List = "[Vendor B 033-002]";


		int reportsByWarehouseRow2ListCount = reportsRow2List.size();
		ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
		for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
		{
			String data = reportsRow2List.get(i).getText();
			reportsByWarehouseRow2ListArray.add(data);
		}
		String actRow2List = reportsByWarehouseRow2ListArray.toString();
		String expRow2List = "[NDT52 : 1, STD RATE COGS ACC INV, , 21.00, 21.00, , 1.47, 1.47, , 21.00, 21.00]";


		int reportsByWarehouseRow3ListCount = reportsRow3List.size();
		ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
		{
			String data = reportsRow3List.get(i).getText();
			reportsByWarehouseRow3ListArray.add(data);
		}
		String actRow3List = reportsByWarehouseRow3ListArray.toString();
		String expRow3List = "[Total, , , , 21.00, 21.00, , 1.47, 1.47, , 21.00, 21.00]";


		System.out.println("*********************************checkLedgerDetailsForVendorB*****************************************");

		System.out.println("ActualRow1List Values   " +actRow1List);
		System.out.println("ExpectedRow1List Values " +expRow1List);

		System.out.println("ActualRow2List Values  " +actRow2List);
		System.out.println("ExpectedRow1List Values" +expRow2List);

		System.out.println("ActualRow3List Values  " +actRow3List);
		System.out.println("ExpectedRow3List Values" +expRow3List);


		getDriver().switchTo().window(openTabs.get(1)).close();
		getDriver().switchTo().window(openTabs.get(0));

		if (actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) 
				&& actRow3List.equalsIgnoreCase(expRow3List))
		{
			return true;
		} 
		else
		{
			return false;
		}
	}











	// Display Debit / Credit totals for each month

	public static boolean checkAccouncreatedWithPropertyAsCreditOrDebitTotlasForEachMonth() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));		
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));		
		accounts.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));		
		masterNewBtn.click();


		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("cust_display_dr/cr_total_for_each_month");
		nameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("CustCrDrTotals");
		codeTxt.sendKeys(Keys.TAB);

		Select accountTypeDrpdwn = new Select(accountTypeDropdown);

		accountTypeDrpdwn.selectByVisibleText("Customer");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expSaveAccountMessage = "Saved Successfully";	
		String actSaveAccountMessage = checkValidationMessage(expSaveAccountMessage);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();

		System.out.println("Click on Save With Valid Information Value Actual : " + actSaveAccountMessage + "  Value Expected : " + expSaveAccountMessage);

		if(actSaveAccountMessage.equalsIgnoreCase(expSaveAccountMessage))
		{
			return true;
		}
		else
		{
			return false;
		}
	}




	public static boolean checkPropertiesForCreatedAccountAsDebitOrCreditTotalsForEachMonth() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		int count = masterGridBodyName.size();

		ArrayList<String> AccountNames = new ArrayList<String>();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();
			AccountNames.add(data);

			if (data.equalsIgnoreCase("cust_display_dr/cr_total_for_each_month")) 
			{
				masterGridBodyChkbox.get(i).click();
				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterPropertiesBtn));
		masterPropertiesBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayDrOrCrTotalsForEachMonthRadioBtnInProperties));
		displayDrOrCrTotalsForEachMonthRadioBtnInProperties.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(okBtnInAccountProperties));
		okBtnInAccountProperties.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterPropertiesBtn));
		masterPropertiesBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayDrOrCrTotalsForEachMonthRadioBtnInProperties));

		boolean actPropertyIsSelected = displayDrOrCrTotalsForEachMonthRadioBtnInProperties.isSelected();
		boolean expPropertyIsSelected = true;

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(okBtnInAccountProperties));
		okBtnInAccountProperties.click();

		Thread.sleep(2000);

		System.out.println("Property isSelected : "+actPropertyIsSelected+"  Value Expected  "+expPropertyIsSelected);

		if (actPropertyIsSelected==expPropertyIsSelected) 
		{
			return true;
		} 
		else
		{
			return false;
		}
	}




	@FindBy(xpath="//*[@id='id_header_2']")
	public static WebElement  dateText;



	public static boolean checkRaiseSalesInvoivesVATForCustomerDislayDrOrCrTotalsForEachMonth() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateText));
		dateText.click();
		dateText.sendKeys(Keys.HOME);
		Thread.sleep(1000);
		dateText.sendKeys("29/01/2021");
		dateText.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.sendKeys("cust_display_dr/cr_total_for_each_month");
		Thread.sleep(3000);
		customerAccountTxt.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.END);
		departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		departmentTxt.sendKeys(Keys.SPACE);

		int departmentcount=departmentListCount.size();

		System.err.println(departmentcount);

		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getText();

			if(data.equalsIgnoreCase("India"))
			{
				departmentListCount.get(i).click();

				Thread.sleep(1000);

				break;
			}
		}

		departmentTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.END);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SHIFT,Keys.HOME);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SPACE);


		int placeOFSupplyListCount=placeOFSupplyList.size();

		System.err.println("placeOFSupplyListCount   : "+placeOFSupplyListCount);

		for(int i=0 ; i < placeOFSupplyListCount ;i++)
		{
			String data=placeOFSupplyList.get(i).getText();

			if(data.equalsIgnoreCase("Abu Dhabi"))
			{
				placeOFSupplyList.get(i).click();

				break;
			}
		}

		Thread.sleep(2000);

		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		jurisdictionTxt.click();
		jurisdictionTxt.sendKeys(Keys.END);
		jurisdictionTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		jurisdictionTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		jurisdictionTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys("Hyderabad");
		Thread.sleep(3000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(3000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		Thread.sleep(1000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		Thread.sleep(1000);
		enter_AQTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("200");
		Thread.sleep(1000);
		enter_Rate.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_17thColumn));
		select1stRow_17thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Vat));
		enter_Vat.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));
		voucherSaveBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		String expMessgaeTr = "This Transaction will make the Stock Negative";
		String actMessageTr = checkValidationMessage(expMessgaeTr);

		String expSavingMessage1 = "Voucher saved successfully";

		String actSavingMessage = checkValidationMessage(expSavingMessage1);

		if(actSavingMessage.equalsIgnoreCase(expSavingMessage1))
		{
			return true;
		}
		else
		{
			return false;
		}
	}








	public static boolean checkRaiseSalesInvoivesVATForCustomerDislayDrOrCrTotalsForEachMonth2() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateText));
		dateText.click();
		dateText.sendKeys(Keys.HOME);
		Thread.sleep(1000);
		dateText.sendKeys("28/02/2021");
		dateText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.sendKeys("cust_display_dr/cr_total_for_each_month");
		Thread.sleep(3000);
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.END);
		departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		departmentTxt.sendKeys(Keys.SPACE);

		int departmentcount=departmentListCount.size();

		System.err.println(departmentcount);

		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getText();

			if(data.equalsIgnoreCase("India"))
			{
				departmentListCount.get(i).click();

				Thread.sleep(1000);

				break;
			}
		}

		departmentTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.END);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SHIFT,Keys.HOME);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SPACE);


		int placeOFSupplyListCount=placeOFSupplyList.size();

		System.err.println("placeOFSupplyListCount   : "+placeOFSupplyListCount);

		for(int i=0 ; i < placeOFSupplyListCount ;i++)
		{
			String data=placeOFSupplyList.get(i).getText();

			if(data.equalsIgnoreCase("Abu Dhabi"))
			{
				placeOFSupplyList.get(i).click();

				break;
			}
		}


		Thread.sleep(2000);

		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		jurisdictionTxt.click();
		jurisdictionTxt.sendKeys(Keys.END);
		jurisdictionTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		jurisdictionTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		jurisdictionTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys("Hyderabad");
		Thread.sleep(3000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(3000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		Thread.sleep(1000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		Thread.sleep(1000);
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys("1");
		enter_FQTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("20");
		Thread.sleep(1000);
		enter_Rate.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_17thColumn));
		select1stRow_17thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Vat));
		enter_Vat.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));
		voucherSaveBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();


		String expMessgaeTr = "This Transaction will make the Stock Negative";
		String actMessageTr = checkValidationMessage(expMessgaeTr);

		String expSavingMessage1 = "Voucher saved successfully";
		String expSavingMessage2 = " : 2";
		String actSavingMessage = checkValidationMessage(expSavingMessage1);

		if(actSavingMessage.startsWith(expSavingMessage1) && actSavingMessage.endsWith(expSavingMessage2))
		{
			return true;
		}
		else
		{
			return false;
		}
	}








	public static boolean checkLedgerReportForCreatedCustomer() throws InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
		financialsReportsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledger));
		ledger.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxt));
		masterSearchTxt.click();
		masterSearchTxt.sendKeys("cust_display_dr/cr_total_for_each_month");
		masterSearchTxt.sendKeys(Keys.ENTER);

		Thread.sleep(3000);

		int rowcount=stockLedgerHometableRowCount.size();

		System.out.println(rowcount);

		for (int i = 0; i < rowcount; i++) 
		{
			String actName = stockLedgerHometableItemNamesList.get(i).getText();

			System.out.println(actName);

			if(actName.equalsIgnoreCase("cust_display_dr/cr_total_for_each_month"))
			{
				stockLedgerHometableItemChkboxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		sl_DateOptionDropdown.click();
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

		int reportsByWarehouseRow1ListCount = reportsRow1List.size();
		ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
		{
			String data = reportsRow1List.get(i).getText();
			reportsByWarehouseRow1ListArray.add(data);
		}
		String actRow1List = reportsByWarehouseRow1ListArray.toString();
		String expRow1List = "[cust_display_dr/cr_total_for_each_month CustCrDrTotals]";


		int reportsByWarehouseRow2ListCount = reportsRow2List.size();
		ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
		for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
		{
			String data = reportsRow2List.get(i).getText();
			reportsByWarehouseRow2ListArray.add(data);
		}
		String actRow2List = reportsByWarehouseRow2ListArray.toString();
		String expRow2List = "[January, , , , , , , , , , , ]";


		int reportsByWarehouseRow3ListCount = reportsRow3List.size();
		ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
		{
			String data = reportsRow3List.get(i).getText();
			reportsByWarehouseRow3ListArray.add(data);
		}
		String actRow3List = reportsByWarehouseRow3ListArray.toString();
		String expRow3List = "[29/01/2021, NDT55 : 1, Sales - Computers, 210.00, , 210.00, 14.70, , 14.70, 210.00, , 210.00, Indian Rupees]";


		int reportsByWarehouseRow4ListCount = reportsRow4List.size();
		ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
		for(int i=2;i<reportsByWarehouseRow4ListCount;i++)
		{
			String data = reportsRow4List.get(i).getText();
			reportsByWarehouseRow4ListArray.add(data);
		}
		String actRow4List = reportsByWarehouseRow4ListArray.toString();
		String expRow4List = "[January, , 210.00, , , 14.70, , , 210.00, , , ]";


		int reportsByWarehouseRow5ListCount = reportsRow5List.size();
		ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
		for(int i=2;i<reportsByWarehouseRow5ListCount;i++)
		{
			String data = reportsRow5List.get(i).getText();
			reportsByWarehouseRow5ListArray.add(data);
		}
		String actRow5List = reportsByWarehouseRow5ListArray.toString();
		String expRow5List = "[February, , , , , , , , , , , ]";


		int reportsByWarehouseRow6ListCount = reportsRow6List.size();
		ArrayList<String> reportsByWarehouseRow6ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow6ListCount;i++)
		{
			String data = reportsRow6List.get(i).getText();
			reportsByWarehouseRow6ListArray.add(data);
		}
		String actRow6List = reportsByWarehouseRow6ListArray.toString();
		String expRow6List = "[28/02/2021, NDT55 : 2, Sales - Computers, 42.00, , 252.00, 2.94, , 17.64, 42.00, , 252.00, Indian Rupees]";


		int reportsByWarehouseRow7ListCount = reportsRow7List.size();
		ArrayList<String> reportsByWarehouseRow7ListArray = new ArrayList<String>();
		for(int i=2;i<reportsByWarehouseRow7ListCount;i++)
		{
			String data = reportsRow7List.get(i).getText();
			reportsByWarehouseRow7ListArray.add(data);
		}
		String actRow7List = reportsByWarehouseRow7ListArray.toString();
		String expRow7List = "[February, , 42.00, , , 2.94, , , 42.00, , , ]";


		int reportsByWarehouseRow8ListCount = reportsRow8List.size();
		ArrayList<String> reportsByWarehouseRow8ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow8ListCount;i++)
		{
			String data = reportsRow8List.get(i).getText();
			reportsByWarehouseRow8ListArray.add(data);
		}
		String actRow8List = reportsByWarehouseRow8ListArray.toString();
		String expRow8List = "[Total, , , 252.00, , 252.00, 17.64, , 17.64, 252.00, , 252.00, ]";


		System.out.println("*********************************checkLedgerReportForCreatedCustomer*****************************************");

		System.out.println("ActualRow1List Values   " +actRow1List);
		System.out.println("ExpectedRow1List Values " +expRow1List);

		System.out.println("ActualRow2List Values  " +actRow2List);
		System.out.println("ExpectedRow1List Values" +expRow2List);

		System.out.println("ActualRow3List Values  " +actRow3List);
		System.out.println("ExpectedRow3List Values" +expRow3List);


		System.out.println("ActualRow4List Values   " +actRow4List);
		System.out.println("ExpectedRow4List Values " +expRow4List);

		System.out.println("ActualRow5List Values  " +actRow5List);
		System.out.println("ExpectedRow5List Values" +expRow5List);

		System.out.println("ActualRow6List Values  " +actRow6List);
		System.out.println("ExpectedRow6List Values" +expRow6List);

		System.out.println("ActualRow7ist Values   " +actRow7List);
		System.out.println("ExpectedRow7List Values " +expRow7List);

		System.out.println("ActualRow8List Values  " +actRow8List);
		System.out.println("ExpectedRow8List Values" +expRow8List);

		if (actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) 
				&& actRow3List.equalsIgnoreCase(expRow3List) &&  actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) 
				&& actRow6List.equalsIgnoreCase(expRow6List) && actRow7List.equalsIgnoreCase(expRow7List) && actRow8List.equalsIgnoreCase(expRow8List))
		{
			return true;
		} 
		else
		{
			return false;
		}
	}








	public static boolean checkCustomerStatementsReportForCreatedCustomerAccount() throws InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));		
		finacinalsMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receivableAndPayableAnalysisMenu));		
		receivableAndPayableAnalysisMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerDetailMenu));		
		customerDetailMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerDetailsCustomerStatementsReport));		
		customerDetailsCustomerStatementsReport.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxt));
		masterSearchTxt.click();
		masterSearchTxt.sendKeys("cust_display_dr/cr_total_for_each_month");
		masterSearchTxt.sendKeys(Keys.ENTER);

		Thread.sleep(3000);

		int rowcount=stockLedgerHometableRowCount.size();

		System.out.println(rowcount);

		for (int i = 0; i < rowcount; i++) 
		{
			String actName = stockLedgerHometableItemNamesList.get(i).getText();

			System.out.println(actName);

			if(actName.equalsIgnoreCase("cust_display_dr/cr_total_for_each_month"))
			{
				stockLedgerHometableItemChkboxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		sl_DateOptionDropdown.click();
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

		int reportsByWarehouseRow1ListCount = reportsRow1List.size();
		ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
		{
			String data = reportsRow1List.get(i).getText();
			reportsByWarehouseRow1ListArray.add(data);
		}
		String actRow1List = reportsByWarehouseRow1ListArray.toString();
		String expRow1List = "[cust_display_dr/cr_total_for_each_month CustCrDrTotals]";


		int reportsByWarehouseRow2ListCount = reportsRow2List.size();
		ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
		{
			String data = reportsRow2List.get(i).getText();
			if (i==13) 
			{
				reportsByWarehouseRow2ListArray.add("Delay In Payment");
			} 
			else 
			{
				reportsByWarehouseRow2ListArray.add(data);
			}
		}
		String actRow2List = reportsByWarehouseRow2ListArray.toString();
		String expRow2List = "[NDT55:1, 29/01/2021, cust_display_dr/cr_total_for_each_month, 210.00, , , 210.00, 210.00, 210.00, , , 210.00, Delay In Payment, Indian Rupees, 29/01/2021, CustCrDrTotals]";


		int reportsByWarehouseRow3ListCount = reportsRow3List.size();
		ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
		{
			String data = reportsRow3List.get(i).getText();
			if (i==13) 
			{
				reportsByWarehouseRow3ListArray.add("Delay In Payment");
			} 
			else 
			{
				reportsByWarehouseRow3ListArray.add(data);
			}
		}
		String actRow3List = reportsByWarehouseRow3ListArray.toString();
		String expRow3List = "[NDT55:2, 28/02/2021, cust_display_dr/cr_total_for_each_month, 42.00, , , 42.00, 252.00, 42.00, , , 42.00, Delay In Payment, Indian Rupees, 28/02/2021, CustCrDrTotals]";


		int reportsByWarehouseRow4ListCount = reportsRow4List.size();
		ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow4ListCount;i++)
		{
			String data = reportsRow4List.get(i).getText();
			if (i==13) 
			{
				reportsByWarehouseRow4ListArray.add("Delay In Payment");
			} 
			else 
			{
				reportsByWarehouseRow4ListArray.add(data);
			}
		}
		String actRow4List = reportsByWarehouseRow4ListArray.toString();
		String expRow4List = "[Total, , , 252.00, , , 252.00, 462.00, 252.00, , , 252.00, Delay In Payment, , , ]";

		System.out.println("*********************************checkCustomerStatementsReportDetailsForCreatedCustomer*****************************************");

		System.out.println("ActualRow1List Values   " +actRow1List);
		System.out.println("ExpectedRow1List Values " +expRow1List);

		System.out.println("ActualRow2List Values  " +actRow2List);
		System.out.println("ExpectedRow1List Values" +expRow2List);

		System.out.println("ActualRow3List Values  " +actRow3List);
		System.out.println("ExpectedRow3List Values" +expRow3List);

		System.out.println("ActualRow4List Values   " +actRow4List);
		System.out.println("ExpectedRow4List Values " +expRow4List);


		if (actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) 
				&& actRow3List.equalsIgnoreCase(expRow3List) &&  actRow4List.equalsIgnoreCase(expRow4List))
		{
			return true;
		}
		else
		{
			return false;
		}
	}





	// Display Debit / Credit totals for each day	

	public static boolean checkAccouncreatedWithPropertyAsCreditOrDebitTotlasForEachDay() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));		
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));		
		accounts.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));		
		masterNewBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("cust_display_dr/cr_total_for_each_day");
		nameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("CustCrDrTotalsDay");
		codeTxt.sendKeys(Keys.TAB);

		Select accountTypeDrpdwn = new Select(accountTypeDropdown);

		accountTypeDrpdwn.selectByVisibleText("Customer");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expSaveAccountMessage = "Saved Successfully";	
		String actSaveAccountMessage = checkValidationMessage(expSaveAccountMessage);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();

		System.out.println("Click on Save With Valid Information Value Actual : " + actSaveAccountMessage + "  Value Expected : " + expSaveAccountMessage);

		if(actSaveAccountMessage.equalsIgnoreCase(expSaveAccountMessage))
		{
			return true;
		}
		else
		{
			return false;
		}
	}





	public static boolean checkPropertiesForCreatedAccountAsDebitOrCreditTotalsForEachDay() throws InterruptedException
	{
		int count = masterGridBodyName.size();

		ArrayList<String> AccountNames = new ArrayList<String>();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();
			AccountNames.add(data);

			if (data.equalsIgnoreCase("cust_display_dr/cr_total_for_each_day")) 
			{
				masterGridBodyChkbox.get(i).click();
				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterPropertiesBtn));
		masterPropertiesBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayDrOrCrTotalsForEachDayRadioBtnInProperties));
		displayDrOrCrTotalsForEachDayRadioBtnInProperties.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(okBtnInAccountProperties));
		okBtnInAccountProperties.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterPropertiesBtn));
		masterPropertiesBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayDrOrCrTotalsForEachDayRadioBtnInProperties));

		boolean actPropertyIsSelected = displayDrOrCrTotalsForEachDayRadioBtnInProperties.isSelected();
		boolean expPropertyIsSelected = true;

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(okBtnInAccountProperties));
		okBtnInAccountProperties.click();

		Thread.sleep(2000);

		System.out.println("Property isSelected : "+actPropertyIsSelected+"  Value Expected  "+expPropertyIsSelected);

		if (actPropertyIsSelected==expPropertyIsSelected) 
		{
			return true;
		} 
		else
		{
			return false;
		}
	}





	public static boolean checkRaiseSalesInvoivesVATForCustomerDislayDrOrCrTotalsForEachDay() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateText));
		dateText.click();
		dateText.sendKeys(Keys.HOME);
		Thread.sleep(1000);
		dateText.sendKeys("29/01/2021");
		dateText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.sendKeys("cust_display_dr/cr_total_for_each_day");
		Thread.sleep(3000);
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.END);
		departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		departmentTxt.sendKeys(Keys.SPACE);

		int departmentcount=departmentListCount.size();

		System.err.println(departmentcount);

		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getText();

			if(data.equalsIgnoreCase("India"))
			{
				departmentListCount.get(i).click();

				Thread.sleep(1000);

				break;
			}
		}

		departmentTxt.sendKeys(Keys.TAB);	

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.END);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SHIFT,Keys.HOME);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SPACE);


		int placeOFSupplyListCount=placeOFSupplyList.size();

		System.err.println("placeOFSupplyListCount   : "+placeOFSupplyListCount);

		for(int i=0 ; i < placeOFSupplyListCount ;i++)
		{
			String data=placeOFSupplyList.get(i).getText();

			if(data.equalsIgnoreCase("Abu Dhabi"))
			{
				placeOFSupplyList.get(i).click();

				break;
			}
		}


		Thread.sleep(2000);

		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		jurisdictionTxt.click();
		jurisdictionTxt.sendKeys(Keys.END);
		jurisdictionTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		jurisdictionTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		jurisdictionTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys("Hyderabad");
		Thread.sleep(3000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(3000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("200");
		enter_Rate.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_17thColumn));
		select1stRow_17thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Vat));
		enter_Vat.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));
		voucherSaveBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		String expTransactionmsg="This Transaction will make the Stock Negative";
		String actTransactionmsg =checkValidationMessage(expTransactionmsg);


		String expSavingMessage1 = "Voucher saved successfully";
		String expSavingMessage2 = " : 3";
		String actSavingMessage = checkValidationMessage(expSavingMessage1);

		if(actSavingMessage.startsWith(expSavingMessage1) && actSavingMessage.endsWith(expSavingMessage2))
		{
			return true;
		}
		else
		{
			return false;
		}


	}




	public static boolean checkRaiseSalesInvoivesVATForCustomerDislayDrOrCrTotalsForEachDay2() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateText));
		dateText.click();
		dateText.sendKeys(Keys.HOME);
		Thread.sleep(1000);
		dateText.sendKeys("28/02/2021");
		dateText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.sendKeys("cust_display_dr/cr_total_for_each_day");
		Thread.sleep(3000);
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.END);
		departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		departmentTxt.sendKeys(Keys.SPACE);

		int departmentcount=departmentListCount.size();

		System.err.println(departmentcount);

		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getText();

			if(data.equalsIgnoreCase("India"))
			{
				departmentListCount.get(i).click();

				Thread.sleep(1000);

				break;
			}
		}

		departmentTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.END);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SHIFT,Keys.HOME);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SPACE);

		int placeOFSupplyListCount=placeOFSupplyList.size();

		System.err.println("placeOFSupplyListCount   : "+placeOFSupplyListCount);

		for(int i=0 ; i < placeOFSupplyListCount ;i++)
		{
			String data=placeOFSupplyList.get(i).getText();

			if(data.equalsIgnoreCase("Abu Dhabi"))
			{
				placeOFSupplyList.get(i).click();

				break;
			}
		}


		Thread.sleep(2000);

		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		jurisdictionTxt.click();
		jurisdictionTxt.sendKeys(Keys.END);
		jurisdictionTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		jurisdictionTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		jurisdictionTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys("Hyderabad");
		Thread.sleep(3000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(3000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("200");
		enter_Rate.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_17thColumn));
		select1stRow_17thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Vat));
		enter_Vat.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));
		voucherSaveBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		String expSavingMessage1 = "Voucher saved successfully";
		String expSavingMessage2 = " : 4";
		String actSavingMessage = checkValidationMessage(expSavingMessage1);

		if(actSavingMessage.startsWith(expSavingMessage1) && actSavingMessage.endsWith(expSavingMessage2))
		{
			return true;
		}
		else
		{
			return false;
		}

	}






	public static boolean checkLedgerReportForCreatedCustomer2() throws InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
		financialsReportsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledger));
		ledger.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxt));
		masterSearchTxt.click();
		masterSearchTxt.sendKeys("cust_display_dr/cr_total_for_each_day");
		masterSearchTxt.sendKeys(Keys.ENTER);

		Thread.sleep(3000);

		int rowcount=stockLedgerHometableRowCount.size();

		System.out.println(rowcount);

		for (int i = 0; i < rowcount; i++) 
		{
			String actName = stockLedgerHometableItemNamesList.get(i).getText();

			System.out.println(actName);

			if(actName.equalsIgnoreCase("cust_display_dr/cr_total_for_each_day"))
			{
				stockLedgerHometableItemChkboxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		sl_DateOptionDropdown.click();
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

		int reportsByWarehouseRow1ListCount = reportsRow1List.size();
		ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
		{
			String data = reportsRow1List.get(i).getText();
			reportsByWarehouseRow1ListArray.add(data);
		}
		String actRow1List = reportsByWarehouseRow1ListArray.toString();
		String expRow1List = "[cust_display_dr/cr_total_for_each_day CustCrDrTotalsDay]";


		int reportsByWarehouseRow2ListCount = reportsRow2List.size();
		ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
		for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
		{
			String data = reportsRow2List.get(i).getText();
			reportsByWarehouseRow2ListArray.add(data);
		}
		String actRow2List = reportsByWarehouseRow2ListArray.toString();
		String expRow2List = "[29-01-2021, , , , , , , , , , , ]";


		int reportsByWarehouseRow3ListCount = reportsRow3List.size();
		ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
		{
			String data = reportsRow3List.get(i).getText();
			reportsByWarehouseRow3ListArray.add(data);
		}
		String actRow3List = reportsByWarehouseRow3ListArray.toString();
		String expRow3List = "[29/01/2021, NDT55 : 3, Sales - Computers, 210.00, , 210.00, 14.70, , 14.70, 210.00, , 210.00, Indian Rupees]";


		int reportsByWarehouseRow4ListCount = reportsRow4List.size();
		ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
		for(int i=2;i<reportsByWarehouseRow4ListCount;i++)
		{
			String data = reportsRow4List.get(i).getText();
			reportsByWarehouseRow4ListArray.add(data);
		}
		String actRow4List = reportsByWarehouseRow4ListArray.toString();
		String expRow4List = "[29-01-2021, , 210.00, , , 14.70, , , 210.00, , , ]";


		int reportsByWarehouseRow5ListCount = reportsRow5List.size();
		ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
		for(int i=2;i<reportsByWarehouseRow5ListCount;i++)
		{
			String data = reportsRow5List.get(i).getText();
			reportsByWarehouseRow5ListArray.add(data);
		}
		String actRow5List = reportsByWarehouseRow5ListArray.toString();
		String expRow5List = "[28-02-2021, , , , , , , , , , , ]";


		int reportsByWarehouseRow6ListCount = reportsRow6List.size();
		ArrayList<String> reportsByWarehouseRow6ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow6ListCount;i++)
		{
			String data = reportsRow6List.get(i).getText();
			reportsByWarehouseRow6ListArray.add(data);
		}
		String actRow6List = reportsByWarehouseRow6ListArray.toString();
		String expRow6List = "[28/02/2021, NDT55 : 4, Sales - Computers, 210.00, , 420.00, 14.70, , 29.40, 210.00, , 420.00, Indian Rupees]";


		int reportsByWarehouseRow7ListCount = reportsRow7List.size();
		ArrayList<String> reportsByWarehouseRow7ListArray = new ArrayList<String>();
		for(int i=2;i<reportsByWarehouseRow7ListCount;i++)
		{
			String data = reportsRow7List.get(i).getText();
			reportsByWarehouseRow7ListArray.add(data);
		}
		String actRow7List = reportsByWarehouseRow7ListArray.toString();
		String expRow7List = "[28-02-2021, , 210.00, , , 14.70, , , 210.00, , , ]";


		int reportsByWarehouseRow8ListCount = reportsRow8List.size();
		ArrayList<String> reportsByWarehouseRow8ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow8ListCount;i++)
		{
			String data = reportsRow8List.get(i).getText();
			reportsByWarehouseRow8ListArray.add(data);
		}
		String actRow8List = reportsByWarehouseRow8ListArray.toString();
		String expRow8List = "[Total, , , 420.00, , 420.00, 29.40, , 29.40, 420.00, , 420.00, ]";


		System.out.println("*********************************checkLedgerReportForCreatedCustomer2*****************************************");

		System.out.println("ActualRow1List Values   " +actRow1List);
		System.out.println("ExpectedRow1List Values " +expRow1List);

		System.out.println("ActualRow2List Values  " +actRow2List);
		System.out.println("ExpectedRow1List Values" +expRow2List);

		System.out.println("ActualRow3List Values  " +actRow3List);
		System.out.println("ExpectedRow3List Values" +expRow3List);


		System.out.println("ActualRow4List Values   " +actRow4List);
		System.out.println("ExpectedRow4List Values " +expRow4List);

		System.out.println("ActualRow5List Values  " +actRow5List);
		System.out.println("ExpectedRow5List Values" +expRow5List);

		System.out.println("ActualRow6List Values  " +actRow6List);
		System.out.println("ExpectedRow6List Values" +expRow6List);

		System.out.println("ActualRow7ist Values   " +actRow7List);
		System.out.println("ExpectedRow7List Values " +expRow7List);

		System.out.println("ActualRow8List Values  " +actRow8List);
		System.out.println("ExpectedRow8List Values" +expRow8List);

		if (actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) 
				&& actRow3List.equalsIgnoreCase(expRow3List) &&  actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) 
				&& actRow6List.equalsIgnoreCase(expRow6List) && actRow7List.equalsIgnoreCase(expRow7List) && actRow8List.equalsIgnoreCase(expRow8List))
		{
			return true;
		} 
		else
		{
			return false;
		}
	}





	public static boolean checkCustomerStatementsReportForCreatedCustomerAccount2() throws InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));		
		finacinalsMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receivableAndPayableAnalysisMenu));		
		receivableAndPayableAnalysisMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerDetailMenu));		
		customerDetailMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerDetailsCustomerStatementsReport));		
		customerDetailsCustomerStatementsReport.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxt));
		masterSearchTxt.click();
		masterSearchTxt.sendKeys("cust_display_dr/cr_total_for_each_day");
		masterSearchTxt.sendKeys(Keys.ENTER);

		Thread.sleep(3000);

		int rowcount=stockLedgerHometableRowCount.size();

		System.out.println(rowcount);

		for (int i = 0; i < rowcount; i++) 
		{
			String actName = stockLedgerHometableItemNamesList.get(i).getText();

			System.out.println(actName);

			if(actName.equalsIgnoreCase("cust_display_dr/cr_total_for_each_day"))
			{
				stockLedgerHometableItemChkboxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		sl_DateOptionDropdown.click();
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

		int reportsByWarehouseRow1ListCount = reportsRow1List.size();
		ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
		{
			String data = reportsRow1List.get(i).getText();
			reportsByWarehouseRow1ListArray.add(data);
		}
		String actRow1List = reportsByWarehouseRow1ListArray.toString();
		String expRow1List = "[cust_display_dr/cr_total_for_each_day CustCrDrTotalsDay]";


		int reportsByWarehouseRow2ListCount = reportsRow2List.size();
		ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
		{
			String data = reportsRow2List.get(i).getText();
			if (i==13) 
			{
				reportsByWarehouseRow2ListArray.add("Delay In Payment");
			} 
			else 
			{
				reportsByWarehouseRow2ListArray.add(data);
			}
		}

		String actRow2List = reportsByWarehouseRow2ListArray.toString();
		String expRow2List = "[NDT55:3, 29/01/2021, cust_display_dr/cr_total_for_each_day, 210.00, , , 210.00, 210.00, 210.00, , , 210.00, Delay In Payment, Indian Rupees, 29/01/2021, CustCrDrTotalsDay]";


		int reportsByWarehouseRow3ListCount = reportsRow3List.size();
		ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
		{
			String data = reportsRow3List.get(i).getText();
			if (i==13) 
			{
				reportsByWarehouseRow3ListArray.add("Delay In Payment");
			} 
			else 
			{
				reportsByWarehouseRow3ListArray.add(data);
			}
		}
		String actRow3List = reportsByWarehouseRow3ListArray.toString();
		String expRow3List = "[NDT55:4, 28/02/2021, cust_display_dr/cr_total_for_each_day, 210.00, , , 210.00, 420.00, 210.00, , , 210.00, Delay In Payment, Indian Rupees, 28/02/2021, CustCrDrTotalsDay]";


		int reportsByWarehouseRow4ListCount = reportsRow4List.size();
		ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow4ListCount;i++)
		{
			String data = reportsRow4List.get(i).getText();
			if (i==13) 
			{
				reportsByWarehouseRow4ListArray.add("Delay In Payment");
			} 
			else 
			{
				reportsByWarehouseRow4ListArray.add(data);
			}
		}
		String actRow4List = reportsByWarehouseRow4ListArray.toString();
		String expRow4List = "[Total, , , 420.00, , , 420.00, 630.00, 420.00, , , 420.00, Delay In Payment, , , ]";

		System.out.println("*********************************checkCustomerStatementsReportDetailsForCreatedCustomer*****************************************");

		System.out.println("ActualRow1List Values   " +actRow1List);
		System.out.println("ExpectedRow1List Values " +expRow1List);

		System.out.println("ActualRow2List Values  " +actRow2List);
		System.out.println("ExpectedRow1List Values" +expRow2List);

		System.out.println("ActualRow3List Values  " +actRow3List);
		System.out.println("ExpectedRow3List Values" +expRow3List);


		System.out.println("ActualRow4List Values   " +actRow4List);
		System.out.println("ExpectedRow4List Values " +expRow4List);


		if (actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) 
				&& actRow3List.equalsIgnoreCase(expRow3List) &&  actRow4List.equalsIgnoreCase(expRow4List))
		{
			return true;
		}
		else
		{
			return false;
		}
	}









	// Master Account Properties

	public static boolean checkCreatingAccountForDisplayUnRealizeGainOrLossInLedger() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));	
		masterNewBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("Display_Un-Realize_GainOrLoss_In_Ledger");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("DisplayUnRealizeGainOrLossInLedger");

		Thread.sleep(2000);

		Select accountTypeDrpdwn = new Select(accountTypeDropdown);

		accountTypeDrpdwn.selectByVisibleText("Customer");

		System.out.println("***********************************checkCreatingAccountForDisplayUnRealizeGainOrLossInLedger*********************************");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage = "Saved Successfully";

		String actMessage = checkValidationMessage(expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}




	@FindBy(xpath="(//span[@id='ctxProperties'])[2]")
	public static WebElement selectAccountPropertiesBtn;



	@FindBy (xpath="//*[@id='rbnDisplayDebitCreditTotalForEachMonth']")
	public static WebElement displayDrOrCrTotalsForEachMonthRadioBtnInProperties;

	@FindBy (xpath="//*[@id='rbnrbnDisplayDebitCreditTotalForEachDay']")
	public static WebElement displayDrOrCrTotalsForEachDayRadioBtnInProperties;


	@FindBy (xpath="//input[@id='chkDisplayUnRealizeGainLossInLedger']")
	public static WebElement displayUnRealizeGainLossInLedgerChkbox;

	@FindBy (xpath="//*[@id='btnPropOk']/i")
	public static WebElement okBtnInAccountProperties;


	public static boolean checkMasterAccountEnablingDisplayUnRealizeGainOrLossInLedgerChkboxInProperties() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();

		Thread.sleep(3000);

		int count = masterGridBodyName.size();

		ArrayList<String> AccountNames = new ArrayList<String>();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();
			AccountNames.add(data);

			if (data.equalsIgnoreCase("Display_Un-Realize_GainOrLoss_In_Ledger")) 
			{
				getAction().contextClick(masterGridBodyChkbox.get(i)).build().perform();
				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAccountPropertiesBtn));
		selectAccountPropertiesBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayUnRealizeGainLossInLedgerChkbox));
		displayUnRealizeGainLossInLedgerChkbox.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(okBtnInAccountProperties));
		okBtnInAccountProperties.click();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();
			AccountNames.add(data);

			if (data.equalsIgnoreCase("Display_Un-Realize_GainOrLoss_In_Ledger")) 
			{
				getAction().contextClick(masterGridBodyChkbox.get(i)).build().perform();
				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAccountPropertiesBtn));
		selectAccountPropertiesBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayUnRealizeGainLossInLedgerChkbox));

		boolean actdisplayUnRealizeGainLossInLedgerChkbox = displayUnRealizeGainLossInLedgerChkbox.isSelected();
		boolean expdisplayUnRealizeGainLossInLedgerChkbox = true;

		System.out.println("***********************************checkMasterAccountEnablingDisplayUnRealizeGainOrLossInLedgerChkboxInProperties*********************************");

		System.out.println("displayUnRealizeGainLossInLedgerChkbox  : "+actdisplayUnRealizeGainLossInLedgerChkbox+"  Value Expected  "+expdisplayUnRealizeGainLossInLedgerChkbox);

		if(actdisplayUnRealizeGainLossInLedgerChkbox==expdisplayUnRealizeGainLossInLedgerChkbox)
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}

	@FindBy(xpath="//*[@id='id_body_33554511']")
	public static WebElement enter_AQTxt;

	@FindBy(xpath="//*[@id='id_body_33554512']")
	public static WebElement enter_FQTxt;




	@FindBy(xpath="//*[@id='id_body_33554529']")
	public static WebElement  enter_Vat;

	@FindBy(xpath="//*[@id='id_body_33554530']")
	public static WebElement  enter_Taxable;




	@FindBy(xpath="//input[@id='id_header_268435470']")
	public static WebElement  salesInvoiceVATPlaceOFSupply;



	@FindBy(xpath="//input[@id='id_header_4']")
	public static WebElement  customerAccountTxt;

	@FindBy(xpath="//*[@id='60']")
	public static WebElement  finacinalsMenu;


	@FindBy(xpath="//a[@id='2014']//span[contains(text(),'Sales')]")
	public static WebElement  financialTransactionSalesMenu;

	@FindBy(xpath="//span[contains(text(),'Sales invoice VAT')]")
	public static WebElement  salesInvoiceVATVoucher;

	@FindBy(xpath="//input[@id='id_header_11']")
	public static WebElement  voucherHeaderExchangeRate;


	public static boolean checkSavingSalesInvoivesVATWithCustomerAccountAsDisplayUnRealizeGainLossInLedger() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.sendKeys("Display_Un-Realize_GainOrLoss_In_Ledger");
		Thread.sleep(3000);
		customerAccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		voucherHeaderCurrency.click();
		voucherHeaderCurrency.sendKeys(Keys.END);
		voucherHeaderCurrency.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		voucherHeaderCurrency.sendKeys("AED");
		Thread.sleep(3000);
		voucherHeaderCurrency.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderExchangeRate));
		voucherHeaderExchangeRate.click();
		voucherHeaderExchangeRate.sendKeys(Keys.END);
		voucherHeaderExchangeRate.sendKeys(Keys.SHIFT, Keys.HOME);
		voucherHeaderExchangeRate.sendKeys("0.050");
		voucherHeaderExchangeRate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(Keys.SPACE);

		int departmentcount=departmentListCount.size();

		System.err.println(departmentcount);

		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getText();

			if(data.equalsIgnoreCase("INDIA"))
			{
				departmentListCount.get(i).click();
				break;
			}
		}

		departmentTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.END);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SHIFT,Keys.HOME);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SPACE);


		int placeOFSupplyListCount=placeOFSupplyList.size();

		System.err.println("placeOFSupplyListCount   : "+placeOFSupplyListCount);

		for(int i=0 ; i < placeOFSupplyListCount ;i++)
		{
			String data=placeOFSupplyList.get(i).getText();

			if(data.equalsIgnoreCase("Abu Dhabi"))
			{
				placeOFSupplyList.get(i).click();

				break;
			}
		}


		Thread.sleep(2000);

		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		jurisdictionTxt.click();
		jurisdictionTxt.sendKeys(Keys.END);
		jurisdictionTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		jurisdictionTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		jurisdictionTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys("Hyderabad");
		Thread.sleep(3000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(3000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("200");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_17thColumn));
		select1stRow_17thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Vat));
		enter_Vat.click();
		enter_Vat.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
		select1stRow_18thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Taxable));
		enter_Taxable.click();

		Thread.sleep(2000);*/

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));
		voucherSaveBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		String expSavingMessage1 = "Voucher saved successfully";
		String expSavingMessage2 = " : 5";
		String actSavingMessage = checkValidationMessage(expSavingMessage1);

		if(actSavingMessage.startsWith(expSavingMessage1) && actSavingMessage.endsWith(expSavingMessage2))
		{
			return true;
		}
		else
		{
			return false;
		}
	}





	@FindBy (xpath="//tbody[@id='tblBodyTransRender']/tr/td[2]/input")
	public static List<WebElement> grid_CheckBoxList;

	@FindBy (xpath="//tbody[@id='tblBodyTransRender']/tr/td[4]")
	public static List<WebElement> grid_VoucherNoList;

	@FindBy(xpath="//a[@id='2001']//span[contains(text(),'Cash and Bank')]")
	public static WebElement  cashAndBankMenu; 

	@FindBy(xpath="//a[@id='2002']//span[contains(text(),'Receipts')]")
	public static WebElement  receiptsVoucher;

	@FindBy(xpath="//a[@id='2003']//span[contains(text(),'Payments')]")
	public static WebElement  paymentsVoucher;


	@FindBy(xpath="//span[contains(text(),'Payments VAT')]")
	public static WebElement  paymentsVATVoucher;

	@FindBy(xpath="//span[contains(text(),'Receipts VAT')]")
	public static WebElement  recepitsVATVoucher;

	@FindBy(xpath="//span[contains(text(),'JV VAT View')]")
	public static WebElement  JVVATViewVoucher;


	@FindBy(xpath="//*[@id='id_header_4_table_body']/tr/td[2]")
	public static List<WebElement>  cashAndBAnkAccountList;

	@FindBy(xpath="//input[@id='id_header_4']")
	public static WebElement newCashBankAccountTxt;


	@FindBy(xpath="//*[@id='id_body_12_table_body']/tr/td[2]")
	public static List<WebElement> bodyAccountListInGrid;


	@FindBy(xpath="//*[@id='id_body_39_table_body']/tr/td[2]")
	public static List<WebElement> bodyCreditAccountListInGrid;


	@FindBy(xpath="//input[@id='id_body_16777307']")
	public static WebElement  enterpayVATTaxCode;

	@FindBy(xpath="//input[@id='id_body_16']")
	public static WebElement  enter_Amount;

	@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr")
	public static List<WebElement> billRefAdjustBillsList;


	@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[1]/td[13]")
	public static WebElement gridAdjustmentAmtRow1;




	@FindBy(xpath="//label[@id='id_BillWise_IP_AccountName']")
	public static WebElement breakUpDetailsAccount;

	@FindBy(xpath="//label[@id='id_BillWise_IP_ProductName']")
	public static WebElement breakUpDetailsItem;

	@FindBy(xpath="//label[@id='id_BillWise_IP_TagName']")
	public static WebElement breakUpDetailsDepartment;

	@FindBy(xpath="//label[@id='id_infoPanel_lblAEDTranAmountValue']")
	public static WebElement asOnEntryDateTransAmt;

	@FindBy(xpath="//label[@id='id_infoPanel_lblAEDBaseConversionValue']")
	public static WebElement asOnEntryDateBaseConcersationRate;

	@FindBy(xpath="//label[@id='id_infoPanel_lblAEDBaseAmountValue']")
	public static WebElement asOnEntryDateBaseAmount;

	@FindBy(xpath="//label[@id='id_infoPanel_lblAEDLocalConversionValue']")
	public static WebElement asOnEntryDateLocConversationRate;

	@FindBy(xpath="//label[@id='id_infoPanel_lblAEDLocalAmountValue']")
	public static WebElement asOnEntryDateAmt;

	@FindBy(xpath="//label[@id='id_infoPanel_lblAADTranAmountValue']")
	public static WebElement balOnAdjstDateTransAmt;

	@FindBy(xpath="//label[@id='id_infoPanel_lblAADBaseConversionValue']")
	public static WebElement  balOnAdjstDateBasrConversionRate;

	@FindBy(xpath="//label[@id='id_infoPanel_lblAADBaseAmountValue']")
	public static WebElement  balOnAdjstDateBaseAmount;

	@FindBy(xpath="//label[@id='id_infoPanel_lblAADLocalConversionValue']")
	public static WebElement  balOnAdjstDateLocalConversionRate;

	@FindBy(xpath="//label[@id='id_infoPanel_lblAADLocalAmountValue']")
	public static WebElement  balOnAdjstDateAmt;

	@FindBy(xpath="//label[@id='id_infoPanel_lblAdjTranAmountValue']")
	public static WebElement adjustmentsAmount1;

	@FindBy(xpath="//label[@id='id_infoPanel_lblAdjBaseAmountValue']")
	public static WebElement adjustmentsAmount2;

	@FindBy(xpath="//label[@id='id_infoPanel_lblAdjLocalAmountValue']")
	public static WebElement adjustmentsAmount3;

	@FindBy(xpath="//label[@id='id_infoPanel_lblNativeCurrencyValue']")
	public static WebElement adjustmentsAmount4;

	@FindBy(xpath="//label[@id='id_infoPanel_lblExDiffTranAmountValue']")
	public static WebElement exchangeGainLossForBaseCurrency;

	@FindBy(xpath="//label[@id='id_infoPanel_lblExDiffLocalAmountValue']")
	public static WebElement exchangeGainLossForLocalCurrency;


	@FindBy(xpath="//*[@id='id_body_16777305']")
	public static WebElement  enterReceiptsVATTaxCode;

	@FindBy(xpath="//input[@id='id_header_268435470']")
	public static WebElement  placeofSupplyTxt;

	@FindBy(xpath="//tbody[@id='id_header_268435470_table_body']/tr/td[2]")
	public static List<WebElement>  placeofSupplyList;


	@FindBy(xpath="//tbody[@id='id_header_268435471_table_body']/tr/td[2]")
	public static List<WebElement>  jurisdictionList;

	@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr/td[3]")
	public static List<WebElement>  billwiseAdjustBillsDocList;

	@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr/td[13]")
	public static List<WebElement>  billwiseAdjustBillsAdjustColumn;

	@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr/td[2]/input")
	public static List<WebElement>  billwiseAdjustBillsChkBoxList;

	@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[1]/td[2]/input")
	public static WebElement  billrefAdjuBills1stChkbox;



	@FindBy(xpath="//input[@id='txtNewReference']")
	public static WebElement  billRefNewReferenceTxt;

	@FindBy(xpath="//input[@id='txtOnAccount']")
	public static WebElement  billRefTxtOnAccount;		

	@FindBy(xpath="//input[@id='Searchtxt']")
	public static WebElement  billRefSearchTxt;		

	@FindBy(xpath="//select[@id='cbmShowBillForAdjustment']")
	public static WebElement  billRefNewReferenceDropdown;		

	@FindBy(xpath="//select[@id='cbmShowBills']")
	public static WebElement  billRefShowBillsDropdown;		

	@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_11']//div[contains(text(),'Due Date')]")
	public static WebElement  billRefGridHeaderDueDate;		

	@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_16']//div[contains(text(),'Currency')]")
	public static WebElement  billRefGridHeaderCurrency;		

	@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_21']//div[contains(text(),'Original Amt')]")
	public static WebElement  billRefGridHeaderOrginalAmt;		

	@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_23']//div[contains(text(),'Balance Amount')]")
	public static WebElement  billRefGridHeaderBalanceAmt;		

	@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_33']//div[contains(text(),'Adjustment Amount')]")
	public static WebElement  billRefGridHeaderAdjustmentAmt;		

	@FindBy(xpath="//div[contains(text(),'Native Currency')]")
	public static WebElement  billRefGridHeaderNativeCurrency;		

	@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_41']//div[contains(text(),'Narration')]")
	public static WebElement  billRefGridHeaderNarration;		

	@FindBy(xpath="//th[@id='id_Adjustment_Grid_control_heading_50']//div[contains(text(),'Previous Adjustment Amount')]")
	public static WebElement  billRefGridHeaderPreviosAdjustmentAmt;		

	@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-0']")
	public static WebElement  billRefGridFirstRow;	

	@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-1']//input")
	public static WebElement  billRefGridFirstRowChkbox;		

	@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_2-1']//input")
	public static WebElement  billRefGridSecondRowChkbox;		

	@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-1']//input")
	public static WebElement  billRefGridThirdRowChkbox;		

	@FindBy(xpath="//*[@id='id_Adjustment_Grid_body']/tr[1]/td[13]")
	public static WebElement  billRefGridFirstRowAdjustmentAmtTxt;		

	@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_2-33']")
	public static WebElement  billRefGridSecondRowAdjustmentAmtTxt;		

	@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-33']")
	public static WebElement  billRefGridThirdRowAdjustmentAmtTxt;		

	@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_1-41']")
	public static WebElement  billRefGridFirstNarrationTxt;		

	@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_2-41']")
	public static WebElement  billRefGridSecondNarrationTxt;		

	@FindBy(xpath="//td[@id='id_Adjustment_Grid_col_3-41']")
	public static WebElement  billRefGridThirdNarrationTxt;		

	@FindBy(xpath="//input[@id='id_Narration']")
	public static WebElement  narrationToWrite;		

	@FindBy(xpath="//input[@id='id_limit']")
	public static WebElement  adjustAmtToWrite;		

	@FindBy(xpath="//div[@class='col-xs-6 navbar-header']//div[@class='navText']")
	public static WebElement  billRefPaymentsBillReferenceLabel;		

	@FindBy(xpath="//div[@class='col-sm-12 col-md-3']//input[@class='Fbutton']")
	public static WebElement  billRefAdjustOnFIFOBtn;		

	@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_net']")
	public static WebElement  billRefSummatyValueNet;		

	@FindBy(xpath="//td[@id='AccountAmount_col_1-1']")
	public static WebElement  billRefGridVendorRow1;	

	@FindBy(xpath="//td[@id='AccountAmount_col_1-2']")
	public static WebElement  billRefGridVendorAmtRow1;	

	@FindBy(xpath="//td[@id='AccountAmount_col_2-1']")
	public static WebElement  billRefGridVendorRow2;	

	@FindBy(xpath="//td[@id='AccountAmount_col_2-2']")
	public static WebElement  billRefGridVendorAmtRow2;	

	@FindBy(xpath="//td[@id='AccountAmount_col_3-1']")
	public static WebElement  billRefGridVendorRow3;

	@FindBy(xpath="//label[@id='tbNewRefAmountAdjValue']")
	public static WebElement amtAdjustedAgainstNewREfinOtherVouchers;

	@FindBy(xpath="//label[@id='tbAmountToAdjustInTransCurrencyValue']")
	public static WebElement transactionCurency;

	@FindBy(xpath="//label[@id='tbAmountToAdjustInBaseCurrencyValue']")
	public static WebElement baseCurrency;

	@FindBy(xpath="//label[@id='tbAmountToAdjustInLocalCurrencyValue']")
	public static WebElement localCurrencyDhs;

	@FindBy(xpath="//label[@id='tbNewRefBalAmountValue']")
	public static WebElement balanceNewReferenceAmt;

	@FindBy(xpath="//li[@id='id_li_Adjustment_Tab_BreakUpByTag']//span[@class='font-5'][contains(text(),'Break Up by Tag')]")
	public static WebElement breakUpByTagTab;

	@FindBy(xpath="//span[@class='font-5'][contains(text(),'Adjustment')]")
	public static WebElement adjustmentTab;

	@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-9']")
	public static WebElement breakUpByTagDueDate;

	@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-10']")
	public static WebElement breakUpByTagDepartment;

	@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-18']")
	public static WebElement breakUpByTagBaseCurrency;

	@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-17']")
	public static WebElement breakUpByTagBillCurrency;

	@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-20']")
	public static WebElement breakUpByTagBaseConversionRate;

	@FindBy(xpath="//td[@id='id_BreakUpByTag_Grid_col_1-21']")
	public static WebElement breakUpByTagBaseLocalCurrency;

	@FindBy(xpath="//label[@id='txtblkAmountadjusted']")
	public static WebElement  billRefAdjustAmountInTransCurency;

	@FindBy(xpath="//label[@id='txtblkAmounttobeadjust']")
	public static WebElement  billRefBalanceAmountAdjustInTrnasCurrency;

	@FindBy(xpath="//label[@id='id_BillWise_IP_LocalConversionRateValue']")
	public static WebElement  billRefInfoBarLocalCurrencyRate;


	@FindBy(xpath="//label[@id='tbAmountToAdjustInTransCurrencyValue']")
	public static WebElement billRefTransactionCurency;

	@FindBy(xpath="//label[@id='tbAmountToAdjustInBaseCurrencyValue']")
	public static WebElement billRefBaseCurrency;

	@FindBy(xpath="//label[@id='id_BillWise_IP_BaseCurrencyValue']")
	public static WebElement conversationRateBaseCurrencyRate;

	@FindBy(xpath="//label[@id='id_BillWise_IP_LocalConversionRateValue']")
	public static WebElement conversationRateLocalCurrencyRate;

	@FindBy(xpath="//*[@id='id_transactionentry_save']")
	public static WebElement openingBalancesSaveBtn;


	@FindBy(xpath="//input[@id='id_header_145']")
	public static WebElement  voucherHeaderLocalExchangeRate;

	@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_18']")
	public static WebElement vocFooterdebitAmount;

	@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_19']")
	public static WebElement vocFooterCreditAmount;


	@FindBy (xpath="//tbody[@id='tblBodyTransRender']/tr/td")
	public static List<WebElement> voucherHomeBodyList;


	public boolean checkSavingRecepitsVocher1() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankMenu));
		cashAndBankMenu.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(receiptsVoucher));
		receiptsVoucher.click();

		Thread.sleep(2000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen Opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newCashBankAccountTxt));
		newCashBankAccountTxt.click();

		newCashBankAccountTxt.sendKeys(Keys.SPACE);

		int cashAndBAnkAccountListCount  = cashAndBAnkAccountList.size();

		System.err.println("cashAndBAnkAccountListCount   : "+cashAndBAnkAccountListCount);

		for (int i = 0; i < cashAndBAnkAccountListCount; i++) 
		{
			String data		  = cashAndBAnkAccountList.get(i).getText();

			if(data.equalsIgnoreCase("Bank"))
			{
				cashAndBAnkAccountList.get(i).click();

				break;
			}
		}

		newCashBankAccountTxt.sendKeys(Keys.TAB);



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		voucherHeaderCurrency.click();
		voucherHeaderCurrency.sendKeys(Keys.END);
		voucherHeaderCurrency.sendKeys(Keys.SHIFT, Keys.HOME);
		Thread.sleep(2000);
		voucherHeaderCurrency.sendKeys("AED");
		Thread.sleep(3000);
		voucherHeaderCurrency.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderExchangeRate));
		voucherHeaderExchangeRate.click();
		voucherHeaderExchangeRate.sendKeys(Keys.END);
		voucherHeaderExchangeRate.sendKeys(Keys.SHIFT, Keys.HOME);
		voucherHeaderExchangeRate.sendKeys("0.060");
		voucherHeaderExchangeRate.sendKeys(Keys.TAB);



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
		departmentTxt.sendKeys(Keys.SPACE);
		Thread.sleep(2000);
		int departmentcount=departmentListCount.size();

		System.err.println(departmentcount);

		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getText();

			if(data.equalsIgnoreCase("INDIA"))
			{
				departmentListCount.get(i).click();
				break;
			}
		}

		Thread.sleep(1000);

		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.click();
		enter_AccountTxt.sendKeys("Display_Un-Realize_GainOrLoss_In_Ledger");
		Thread.sleep(3000);
		enter_AccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
		enter_Amount.sendKeys("200");
		enter_Amount.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));	
		voucherSaveBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPartyName));

		String actPartyName = billRefPartyName.getText();
		String expPartyName = "Display_Un-Realize_GainOrLoss_In_Ledger (DisplayUnRealizeGainOrLossInLedger)";


		System.out.println("Bill wise Screen Cutomer Name "  + actPartyName + "  Value Expected  " + expPartyName);

		int Adjustbills=billRefAdjustBillsGridList.size();

		String actAdjustbills=Integer.toString(Adjustbills);

		String expAdjustbills="1";

		System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);


		int billwiseAdjustBillsDocListcount=billwiseAdjustBillsDocList.size();

		HashSet<String> actbillwiseAdjustBillsDocList  = new HashSet<String>();

		for (int i = 0; i < billwiseAdjustBillsDocListcount; i++) 
		{
			String data		                              = billwiseAdjustBillsDocList.get(i).getText();
			actbillwiseAdjustBillsDocList.add(data);
		}

		String actDocumentNumberText=actbillwiseAdjustBillsDocList.toString();

		String expDocumentNumberText="[NDT55:1]";


		System.out.println("actDocumentNumberText   : "+actDocumentNumberText);
		System.out.println("expDocumentNumberText   : "+expDocumentNumberText);


		Thread.sleep(2000);			

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billrefAdjuBills1stChkbox));
		billrefAdjuBills1stChkbox.click();
		Thread.sleep(2000);


		System.err.println("actAdjustbills : "+actAdjustbills +" Value Expected  : "+expAdjustbills);


		Thread.sleep(2000);

		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		js.executeScript("arguments[0].scrollIntoView();", gridAdjustmentAmtRow1);



		String expBillNewReference                      ="0.00";
		String expBillTransactionCurrency               ="200.00";
		String expBillBaseCurrency                      ="12.00";
		String expBillLocalCurrency                     ="200.00";
		String expBillBalanceNewRefAmount               ="0.00";

		String expbillRefAdjustAmountInTransCurency         ="200.00";
		String expbillRefBalanceAmountAdjustInTrnasCurrency ="0.00";



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));
		String actBillNewReference                           = billRefNewReferenceTxt.getAttribute("value");
		String actBillTransactionCurrency                    = billRefTransactionCurency.getText();
		String actBillBaseCurrency                           = billRefBaseCurrency.getText();
		String actBillLocalCurrency                          = localCurrencyDhs.getText();
		String actBillBalanceNewRefAmount                    = balanceNewReferenceAmt.getText();
		String actbillRefAdjustAmountInTransCurency          = billRefAdjustAmountInTransCurency.getText();
		String actbillRefBalanceAmountAdjustInTrnasCurrency  = billRefBalanceAmountAdjustInTrnasCurrency.getText();



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefGridFirstRowAdjustmentAmtTxt));
		billRefGridFirstRowAdjustmentAmtTxt.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		String expBillNewReferencePick                          = "0.00";
		String expBillTransactionCurrencyPick                   = "200";
		String expBillBaseCurrencyPick                          = "12";
		String expBillLocalCurrencyPick                         = "200.00";
		String expBillBalanceNewRefAmountPick                   = "0.00";
		String expbillRefAdjustAmountInTransCurencyPick         = "200.00";
		String expbillRefBalanceAmountAdjustInTrnasCurrencyPick = "0.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefNewReferenceTxt));

		String actBillNewReferencePick                           = billRefNewReferenceTxt.getAttribute("value");
		String actBillTransactionCurrencyPick                    = billRefTransactionCurency.getText();
		String actBillBaseCurrencyPick                           = billRefBaseCurrency.getText();
		String actBillLocalCurrencyPick                          = localCurrencyDhs.getText();
		String actBillBalanceNewRefAmountPick                    = balanceNewReferenceAmt.getText();
		String actbillRefAdjustAmountInTransCurencyPick          = billRefAdjustAmountInTransCurency.getText();
		String actbillRefBalanceAmountAdjustInTrnasCurrencyPick  = billRefBalanceAmountAdjustInTrnasCurrency.getText();





		String actbreakUpDetailsAccountPick              = breakUpDetailsAccount.getText();
		String actbreakUpDetailsItemPick                 = breakUpDetailsItem.getText(); 
		String actbreakUpDetailsDepartmentPick           = breakUpDetailsDepartment.getText();
		String actconversationRateBaseCurrencyRatePick   = conversationRateBaseCurrencyRate.getText();
		String actconversationRateLocalCurrencyRatePick  = conversationRateLocalCurrencyRate.getText();

		String actasOnEntryDateTransAmtPick              = asOnEntryDateTransAmt.getText();
		String actasOnEntryDateBaseConcersationRatePick  = asOnEntryDateBaseConcersationRate.getText();
		String actasOnEntryDateBaseAmountPick            = asOnEntryDateBaseAmount.getText();
		String actasOnEntryDateLocConversationRatePick   = asOnEntryDateLocConversationRate.getText();
		String actasOnEntryDateAmtPick                   = asOnEntryDateAmt.getText();

		String actbalOnAdjstDateTransAmtPick             = balOnAdjstDateTransAmt.getText();
		String actbalOnAdjstDateBasrConversionRatePick   = balOnAdjstDateBasrConversionRate.getText();
		String actbalOnAdjstDateBaseAmountPick           = balOnAdjstDateBaseAmount.getText();
		String actbalOnAdjstDateLocalConversionRatePick  = balOnAdjstDateLocalConversionRate.getText();
		String actbalOnAdjstDateAmtPick                  = balOnAdjstDateAmt.getText();

		String actadjustmentsAmount1Pick                 = adjustmentsAmount1.getText();
		String actadjustmentsAmount2Pick                 = adjustmentsAmount2.getText();
		String actadjustmentsAmount3Pick                 = adjustmentsAmount3.getText();
		String actadjustmentsAmount4Pick                 = adjustmentsAmount4.getText();

		String actexchangeGainLossForBaseCurrencyPick    = exchangeGainLossForBaseCurrency.getText();	
		String actexchangeGainLossForLocalCurrencyPick   = exchangeGainLossForLocalCurrency.getText();



		String expbreakUpDetailsAccountPick             ="071-001";
		//String expbreakUpDetailsItemPick                ="";
		String expbreakUpDetailsDepartmentPick          ="INDIA";
		String expconversationRateBaseCurrencyRatePick  ="0.06";
		String expconversationRateLocalCurrencyRatePick ="1";

		String expasOnEntryDateTransAmtPick             ="200.00";
		String expasOnEntryDateBaseConcersationRatePick ="0.05";
		String expasOnEntryDateBaseAmountPick           ="10.00";
		String expasOnEntryDateLocConversationRatePick  ="1";
		String expasOnEntryDateAmtPick                  ="200.00";

		String expbalOnAdjstDateTransAmtPick            ="200.00";
		String expbalOnAdjstDateBasrConversionRatePick  ="0.06";
		String expbalOnAdjstDateBaseAmountPick          ="12.00";
		String expbalOnAdjstDateLocalConversionRatePick ="1";
		String expbalOnAdjstDateAmtPick                 ="200.00";

		String expadjustmentsAmount1Pick                ="200.00";
		String expadjustmentsAmount2Pick                ="12.00";
		String expadjustmentsAmount3Pick                ="200.00";
		String expadjustmentsAmount4Pick                ="200.00";

		String expexchangeGainLossForBaseCurrencyPick   ="2.00";	
		String expexchangeGainLossForLocalCurrencyPick  ="0.00";


		System.out.println("*********************************************************************************************************");

		System.out.println("Bill reference Adjustment Bills  :"+ actAdjustbills+"                          "+ "expDate :"+expAdjustbills);
		System.out.println("actBillNewReference :             "+ actBillNewReference +"                    "+ "expBillNewReference :"+expBillNewReference);
		System.out.println("actBillTransactionCurrency       :"+ actBillTransactionCurrency + "            " + "expBillTransactionCurrency :"+expBillTransactionCurrency);
		System.out.println("actBillBaseCurrency :             "+ actBillBaseCurrency + "                   " +"expBillBaseCurrency :"+expBillBaseCurrency);
		System.out.println("actBillLocalCurrency :            "+ actBillLocalCurrency+ "                   " +"expBillLocalCurrency :"+expBillLocalCurrency);
		System.out.println("actBillBalanceNewRefAmount :      "+ actBillBalanceNewRefAmount + "            " + "expBillBalanceNewRefAmount :"+expBillBalanceNewRefAmount);

		System.out.println("actbillRefAdjustAmountInTransCurency :"+ actbillRefAdjustAmountInTransCurency+ "       " +"expbillRefAdjustAmountInTransCurency :"+expbillRefAdjustAmountInTransCurency);
		System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrency :"+ actbillRefBalanceAmountAdjustInTrnasCurrency + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrency :"+expbillRefBalanceAmountAdjustInTrnasCurrency);




		//////Pick

		System.out.println("actBillNewReferencePick :              "+ actBillNewReferencePick +"              "+ "expBillNewReferencePick :"+expBillNewReferencePick);
		System.out.println("actBillTransactionCurrencyPick :       "+ actBillTransactionCurrencyPick + "     " + "expBillTransactionCurrencyPick :"+expBillTransactionCurrencyPick);
		System.out.println("actBillBaseCurrencyPick :              "+ actBillBaseCurrencyPick + "            " + "expBillBaseCurrencyPick :"+expBillBaseCurrencyPick);
		System.out.println("actBillLocalCurrencyPick :             "+ actBillLocalCurrencyPick+ "                " +"expBillLocalCurrencyPick :"+expBillLocalCurrencyPick);
		System.out.println("actBillBalanceNewRefAmountPick :       "+ actBillBalanceNewRefAmountPick +        " " + "expBillBalanceNewRefAmountPick :"+expBillBalanceNewRefAmountPick);
		System.out.println("actbreakUpDetailsAccountPick :         "+ actbreakUpDetailsAccountPick+            " " +"expbreakUpDetailsAccountPick :"+expbreakUpDetailsAccountPick);
		System.out.println("actbreakUpDetailsDepartmentPick :      "+ actbreakUpDetailsDepartmentPick +        "  " +"expbreakUpDetailsDepartmentPick :"+expbreakUpDetailsDepartmentPick);
		System.out.println("actconversationRateBaseCurrRatePick:   "+ actconversationRateBaseCurrencyRatePick+ "  " +"expconversationRateBaseCurrencyRatePick :"+expconversationRateBaseCurrencyRatePick);
		System.out.println("actconversationRateLocalCurRatePick :  "+ actconversationRateLocalCurrencyRatePick+ " " + "expconversationRateLocalCurrencyRatePick :"+expconversationRateLocalCurrencyRatePick);
		System.out.println("actasOnEntryDateTransAmtPick :         "+ actasOnEntryDateTransAmtPick  + "       " + "expasOnEntryDateTransAmtPick :"+expasOnEntryDateTransAmtPick);
		System.out.println("actOnEntryDateBaseConcersationRatePick :"+ actasOnEntryDateBaseConcersationRatePick + "       " +"expasOnEntryDateBaseConcersationRatePick :"+expasOnEntryDateBaseConcersationRatePick);
		System.out.println("actasOnEntryDateBaseAmountPick :       "+ actasOnEntryDateBaseAmountPick          + "       " +"expasOnEntryDateBaseAmountPick :"+expasOnEntryDateBaseAmountPick);
		System.out.println("actasOnEntryDateLocConverRatePick :    "+ actasOnEntryDateLocConversationRatePick + "       " +"expasOnEntryDateLocConversationRatePick :"+expasOnEntryDateLocConversationRatePick);
		System.out.println("actasOnEntryDateAmtPick :              "+ actasOnEntryDateAmtPick+ "       " + "expasOnEntryDateAmtPick :"+expasOnEntryDateAmtPick);

		System.out.println("actbalOnAdjstDateTransAmtPick :         "+ actbalOnAdjstDateTransAmtPick + "       " +"expbalOnAdjstDateTransAmtPick :"+expbalOnAdjstDateTransAmtPick);
		System.out.println("actbalOnAdjstDateBasrConversionRatePick :"+ actbalOnAdjstDateBasrConversionRatePick+ "       " +"expbalOnAdjstDateBasrConversionRatePick :"+expbalOnAdjstDateBasrConversionRatePick);
		System.out.println("actbalOnAdjstDateBaseAmountPick :        "+ actbalOnAdjstDateBaseAmountPick + "       " +"expbalOnAdjstDateBaseAmountPick :"+expbalOnAdjstDateBaseAmountPick);
		System.out.println("actbalOnAdjstDateLocalConversionRatePick:"+ actbalOnAdjstDateLocalConversionRatePick + "       " +"expbalOnAdjstDateLocalConversionRatePick :"+expbalOnAdjstDateLocalConversionRatePick);
		System.out.println("actbalOnAdjstDateAmtPick                 :"+ actbalOnAdjstDateAmtPick + "       " +"expbalOnAdjstDateAmtPick :"+expbalOnAdjstDateAmtPick);

		System.out.println("actadjustmentsAmount1Pick :   "+ actadjustmentsAmount1Pick+ "       " +"expadjustmentsAmount1Pick:"+expadjustmentsAmount1Pick);
		System.out.println("actadjustmentsAmount2PickPick :"+ actadjustmentsAmount2Pick + "       " +"expadjustmentsAmount2PickPick :"+expadjustmentsAmount2Pick);
		System.out.println("actadjustmentsAmount3PickPick :"+ actadjustmentsAmount3Pick+ "       " + "expadjustmentsAmount3Pick:"+expadjustmentsAmount3Pick);
		System.out.println("actadjustmentsAmount4PickPick :"+ actadjustmentsAmount4Pick + "       " +"expadjustmentsAmount4Pick :"+expadjustmentsAmount4Pick);

		System.out.println("actexchangeGainLossForBaseCurrencyPick : "+ actexchangeGainLossForBaseCurrencyPick + "       " +"expexchangeGainLossForBaseCurrencyPick :"+expexchangeGainLossForBaseCurrencyPick);
		System.out.println("actexchangeGainLossForLocalCurrencyPick :"+ actexchangeGainLossForLocalCurrencyPick+ "       " +"expexchangeGainLossForLocalCurrencyPick :"+expexchangeGainLossForLocalCurrencyPick);

		System.out.println("actbillRefAdjustAmountInTransCurencyPick :       "+ actbillRefAdjustAmountInTransCurencyPick+ "       " +"expbillRefAdjustAmountInTransCurencyPick :"+expbillRefAdjustAmountInTransCurencyPick);
		System.out.println("actbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+ actbillRefBalanceAmountAdjustInTrnasCurrencyPick + "       " +"expbillRefBalanceAmountAdjustInTrnasCurrencyPick :"+expbillRefBalanceAmountAdjustInTrnasCurrencyPick);



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		String expMessage1 = "Voucher saved successfully";
		String expMessage2 = " : 1";
		String actMessage = checkValidationMessage(expMessage1);


		if( actAdjustbills.equalsIgnoreCase(expAdjustbills)  && actBillNewReference.equalsIgnoreCase(expBillNewReference) && actBillTransactionCurrency.equalsIgnoreCase(expBillTransactionCurrency) && 
				actBillBaseCurrency.equalsIgnoreCase(expBillBaseCurrency) && actBillLocalCurrency.equalsIgnoreCase(expBillLocalCurrency) && 
				actBillBalanceNewRefAmount.equalsIgnoreCase(expBillBalanceNewRefAmount) && 
				actbillRefAdjustAmountInTransCurency.equalsIgnoreCase(expbillRefAdjustAmountInTransCurency) &&
				actbillRefBalanceAmountAdjustInTrnasCurrency.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrency) &&   


				actBillNewReferencePick.equalsIgnoreCase(expBillNewReferencePick) && actBillTransactionCurrencyPick.equalsIgnoreCase(expBillTransactionCurrencyPick) && 
				actBillBaseCurrencyPick.equalsIgnoreCase(expBillBaseCurrencyPick) && actBillLocalCurrencyPick.equalsIgnoreCase(expBillLocalCurrencyPick) && 
				actBillBalanceNewRefAmountPick.equalsIgnoreCase(expBillBalanceNewRefAmountPick) && actbreakUpDetailsAccountPick.equalsIgnoreCase(expbreakUpDetailsAccountPick) && 
				actbreakUpDetailsDepartmentPick.equalsIgnoreCase(expbreakUpDetailsDepartmentPick) && 
				actconversationRateBaseCurrencyRatePick.equalsIgnoreCase(expconversationRateBaseCurrencyRatePick) && actconversationRateLocalCurrencyRatePick.equalsIgnoreCase(expconversationRateLocalCurrencyRatePick) && 
				actasOnEntryDateTransAmtPick.equalsIgnoreCase(expasOnEntryDateTransAmtPick) && actasOnEntryDateBaseConcersationRatePick.equalsIgnoreCase(expasOnEntryDateBaseConcersationRatePick)&& 
				actasOnEntryDateBaseAmountPick.equalsIgnoreCase(expasOnEntryDateBaseAmountPick) && actasOnEntryDateLocConversationRatePick.equalsIgnoreCase(expasOnEntryDateLocConversationRatePick) && 
				actasOnEntryDateAmtPick.equalsIgnoreCase(expasOnEntryDateAmtPick) && actbalOnAdjstDateTransAmtPick.equalsIgnoreCase(expbalOnAdjstDateTransAmtPick) && 
				actbalOnAdjstDateBasrConversionRatePick.equalsIgnoreCase(expbalOnAdjstDateBasrConversionRatePick) && actbalOnAdjstDateBaseAmountPick.equalsIgnoreCase(expbalOnAdjstDateBaseAmountPick) && 
				actbalOnAdjstDateLocalConversionRatePick.equalsIgnoreCase(expbalOnAdjstDateLocalConversionRatePick) && actbalOnAdjstDateAmtPick.equalsIgnoreCase(expbalOnAdjstDateAmtPick) && 
				actbalOnAdjstDateAmtPick.equalsIgnoreCase(expbalOnAdjstDateAmtPick) && actadjustmentsAmount2Pick.equalsIgnoreCase(expadjustmentsAmount2Pick) && 
				actadjustmentsAmount1Pick.equalsIgnoreCase(expadjustmentsAmount1Pick) && actadjustmentsAmount3Pick.equalsIgnoreCase(expadjustmentsAmount3Pick) &&
				actadjustmentsAmount4Pick.equalsIgnoreCase(expadjustmentsAmount4Pick) && actexchangeGainLossForBaseCurrencyPick.equalsIgnoreCase(expexchangeGainLossForBaseCurrencyPick) &&
				actexchangeGainLossForLocalCurrencyPick.equalsIgnoreCase(expexchangeGainLossForLocalCurrencyPick) && actbillRefAdjustAmountInTransCurencyPick.equalsIgnoreCase(expbillRefAdjustAmountInTransCurencyPick) &&
				actbillRefBalanceAmountAdjustInTrnasCurrencyPick.equalsIgnoreCase(expbillRefBalanceAmountAdjustInTrnasCurrencyPick)

				&& actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
		{
			return true;
		}
		else
		{
			return false;
		}	
	}







	@FindBy(xpath="//a[@id='558']//span[contains(text(),'Receivable and Payable Analysis')]")
	public static WebElement  receivableAndPayableAnalysisMenu;

	@FindBy(xpath="//a[@id='605']//span[contains(text(),'Customer Detail')]")
	public static WebElement  customerDetailMenu;

	@FindBy(xpath="//span[contains(text(),'Customer Summary')]")
	public static WebElement  customerSummaryMenu;

	@FindBy(xpath="//a[@id='606']//span[contains(text(),'Vendor Detail')]")
	public static WebElement  vendorDetailMenu;

	@FindBy(xpath="//a[@id='608']//span[contains(text(),'Vendor Summary')]")
	public static WebElement  vendorSummaryMenu;

	@FindBy(xpath="//a[@id='75']//span[contains(text(),'Letter of Credit')]")
	public static WebElement  letterOfCreditReport;

	@FindBy(xpath="//span[contains(text(),'Release Letter of Credit')]")
	public static WebElement  releaseLetterOfCreditReport;

	@FindBy(xpath="//span[contains(text(),'Customer Listing of Outstanding Bills')]")
	public static WebElement  customerDetailsCustomerListingOfOutstandingBillsReport;

	@FindBy(xpath="//span[contains(text(),'Customer Statements')]")
	public static WebElement  customerDetailsCustomerStatementsReport;

	@FindBy(xpath="//span[contains(text(),'Customer Due Date Analysis')]")
	public static WebElement  customerDetailsCustomerDueDateAnalysisReport;

	@FindBy(xpath="//a[@id='563']//span[contains(text(),'Ageing Details')]")
	public static WebElement  customerDetailsCustomerAgeingDetailsReport;

	@FindBy(xpath="//span[contains(text(),'Customer Detail Ageing by Due Date')]")
	public static WebElement  customerDetailsCustomerDetailAgeingByDueDateReport;

	@FindBy(xpath="//a[@id='566']//span[contains(text(),'Overdue Analysis')]")
	public static WebElement  customerDetailsCustomerOverdueAnalysisReport;



	@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr[1]/td")
	public static List<WebElement> report1stRowList;

	@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr[2]/td")
	public static List<WebElement> report2ndRowList;

	@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr[3]/td")
	public static List<WebElement> report3rdRowList;

	@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr[4]/td")
	public static List<WebElement> report4thRowList;

	@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr[5]/td")
	public static List<WebElement> report5thRowList;

	@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr[6]/td")
	public static List<WebElement> report6thRowList;

	@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr[7]/td")
	public static List<WebElement> report7thRowList;

	@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr[8]/td")
	public static List<WebElement> report8thRowList;

	@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr[9]/td")
	public static List<WebElement> report9thRowList;

	@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr[10]/td")
	public static List<WebElement> report10thRowList;

	@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr[11]/td")
	public static List<WebElement> report11thRowList;

	@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr[12]/td")
	public static List<WebElement> report12thRowList;

	@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr[13]/td")
	public static List<WebElement> report13thRowList;

	@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr[14]/td")
	public static List<WebElement> report14thRowList;

	@FindBy(xpath="//div[@id='dvReportDetails']/div/table/tbody/tr[15]/td")
	public static List<WebElement> report15thRowList;

	@FindBy(xpath="//*[@id='trRender_0']/td[1]")
	public static WebElement sl_1stRow1stCol;

	@FindBy(xpath="//tbody[@id='LandingGridBody']/tr/td[11]")
	public static List<WebElement> stockLedgerHometableItemNamesList;

	@FindBy(xpath="//tbody[@id='LandingGridBody']/tr/td[8]/div/label/input")
	public static List<WebElement> stockLedgerHometableItemChkboxList;

	@FindBy(xpath="//div[@id='dvReportDetails']/div/table/thead/tr/th")
	public static List<WebElement> reportsHeaderList;

	@FindBy(xpath="//*[@id='trRender_1']/td[1]")
	public static WebElement sl_2ndRow1stCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[2]")
	public static WebElement sl_2ndRow2ndCol;

	@FindBy(xpath="//*[@id='trRender_1']/td[3]")
	public static WebElement sl_2ndRow3rdCol;


	public boolean checkCustomerStatementReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException, ParseException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receivableAndPayableAnalysisMenu));
		receivableAndPayableAnalysisMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerDetailMenu));
		customerDetailMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerDetailsCustomerStatementsReport));
		customerDetailsCustomerStatementsReport.click();

		Thread.sleep(2000);

		int rowcount=stockLedgerHometableRowCount.size();

		System.out.println(rowcount);

		for (int i = 0; i < rowcount; i++) 
		{
			String actName = stockLedgerHometableItemNamesList.get(i).getText();

			System.out.println(actName);

			if(actName.equalsIgnoreCase("Display_Un-Realize_GainOrLoss_In_Ledger"))
			{
				stockLedgerHometableItemChkboxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();

		Thread.sleep(3000);


		String s1 = sl_2ndRow3rdCol.getText(); 
		Calendar cal=Calendar.getInstance();
		SimpleDateFormat f = new SimpleDateFormat("dd/MM/yyyy");
		String s2 = f.format(cal.getTime());

		System.out.println("VoucherDate String : "+s1);
		System.out.println("CurrentDate String : "+s2);

		Date VoucherDate = f.parse(s1); 
		Date PresentDate = f.parse(s2);


		Calendar day1 = Calendar.getInstance();
		Calendar day2 = Calendar.getInstance(); 
		day1.setTime(VoucherDate);
		day2.setTime(PresentDate);

		int daysBetween = day2.get(Calendar.DAY_OF_YEAR) - day1.get(Calendar.DAY_OF_YEAR);      

		String delayInPayment = String.valueOf(daysBetween);

		System.err.println("DelayInPayment : "+daysBetween);

		String currentdate = f.format(cal.getTime()).toString();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

		int reportsRow1ListCount = report1stRowList.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow1ListCount;i++)
		{
			String data = report1stRowList.get(i).getText();
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[Display_Un-Realize_GainOrLoss_In_Ledger DisplayUnRealizeGainOrLossInLedger]";


		int report2ndRowListCount = report2ndRowList.size();
		ArrayList<String> report2ndRowListArray = new ArrayList<String>();
		for(int i=1;i<report2ndRowListCount;i++)
		{
			String data = report2ndRowList.get(i).getText();

			report2ndRowListArray.add(data);
		}
		String actRow2List = report2ndRowListArray.toString();
		String expRow2List = "[NDT55:5, "+currentdate+", Display_Un-Realize_GainOrLoss_In_Ledger, 10.00, , , , , 200.00, , , , "+delayInPayment+", United Arab Emirates Dirham, "+currentdate+", DisplayUnRealizeGainOrLossInLedger]";


		int report3rdRowListCount = report3rdRowList.size();
		ArrayList<String> report3rdRowListArray = new ArrayList<String>();
		for(int i=1;i<report3rdRowListCount;i++)
		{
			String data = report3rdRowList.get(i).getText();

			report3rdRowListArray.add(data);
		}
		String actRow3List = report3rdRowListArray.toString();
		String expRow3List = "[Rct:1, "+currentdate+", Display_Un-Realize_GainOrLoss_In_Ledger, , 10.00, , , , , 200.00, , , "+delayInPayment+", United Arab Emirates Dirham, "+currentdate+", DisplayUnRealizeGainOrLossInLedger]";


		int report4thRowListCount = report4thRowList.size();
		ArrayList<String> report4thRowListArray = new ArrayList<String>();
		for(int i=1;i<report4thRowListCount;i++)
		{
			String data = report4thRowList.get(i).getText();

			report4thRowListArray.add(data);
		}
		String actRow4List = report4thRowListArray.toString();
		String expRow4List = "[Total, , , 10.00, 10.00, , , , 200.00, 200.00, , , 0, , , ]";


		System.out.println("actRow1List  : "+actRow1List);
		System.out.println("expRow1List  : "+expRow1List);
		System.out.println("*********************************************************************");

		System.out.println("actRow2List  : "+actRow2List);
		System.out.println("expRow2List  : "+expRow2List);
		System.out.println("*********************************************************************");

		System.out.println("actRow3List  : "+actRow3List);
		System.out.println("expRow3List  : "+expRow3List);
		System.out.println("*********************************************************************");

		System.out.println("actRow4List  : "+actRow4List);
		System.out.println("expRow4List  : "+expRow4List);
		System.out.println("*********************************************************************");


		if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List))
		{
			return true;
		}
		else
		{
			return false;
		}
	}









	// Consolidate when both Accounts are same


	public static boolean checkCreatingAccountForConsolidateWhenBothAccountsAreSame() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));	
		masterNewBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("Consolidate_When_Both_Accounts_Are_Same");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("ConsolidateWhenBothAccountsAreSame");

		Thread.sleep(2000);

		Select accountTypeDrpdwn = new Select(accountTypeDropdown);

		accountTypeDrpdwn.selectByVisibleText("Cash");

		System.out.println("***********************************checkCreatingAccountForConsolidateWhenBothAccountsAreSame*********************************");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage = "Saved Successfully";

		String actMessage = checkValidationMessage(expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}







	public static boolean checkMasterAccountEnablingConsolidateWhenBothAccountsAreSameInProperties() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();

		Thread.sleep(3000);

		int count = masterGridBodyName.size();

		ArrayList<String> AccountNames = new ArrayList<String>();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();
			AccountNames.add(data);

			if (data.equalsIgnoreCase("Consolidate_When_Both_Accounts_Are_Same")) 
			{
				getAction().contextClick(masterGridBodyChkbox.get(i)).build().perform();
				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAccountPropertiesBtn));
		selectAccountPropertiesBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(consolidateWhenBothAccountsAreSameRadioBtn));
		consolidateWhenBothAccountsAreSameRadioBtn.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(okBtnInAccountProperties));
		okBtnInAccountProperties.click();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();
			AccountNames.add(data);

			if (data.equalsIgnoreCase("Consolidate_When_Both_Accounts_Are_Same")) 
			{
				getAction().contextClick(masterGridBodyChkbox.get(i)).build().perform();
				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAccountPropertiesBtn));
		selectAccountPropertiesBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(consolidateWhenBothAccountsAreSameRadioBtn));

		boolean actconsolidateWhenBothAccountsAreSameRadioBtn = consolidateWhenBothAccountsAreSameRadioBtn.isSelected();
		boolean expconsolidateWhenBothAccountsAreSameRadioBtn = true;

		System.out.println("***********************************checkMasterAccountEnablingConsolidateWhenBothAccountsAreSameInProperties*********************************");

		System.out.println("consolidateWhenBothAccountsAreSameRadioBtn  : "+actconsolidateWhenBothAccountsAreSameRadioBtn+"  Value Expected  "+expconsolidateWhenBothAccountsAreSameRadioBtn);

		if(actconsolidateWhenBothAccountsAreSameRadioBtn==expconsolidateWhenBothAccountsAreSameRadioBtn)
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}





	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[2]")
	public static WebElement  select2ndRow_1stColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[3]")
	public static WebElement  select2ndRow_2ndColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[4]")
	public static WebElement  select2ndRow_3rdColumn;



	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[2]")
	public static WebElement  select3rdRow_1stColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[3]")
	public static WebElement  select3rdRow_2ndColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[4]")
	public static WebElement  select3rdRow_3rdColumn;



	@FindBy(xpath="//td[@id='AccountAmount_col_1-1']")
	public static WebElement  billRefGridAccountRow1;	

	@FindBy(xpath="//td[@id='AccountAmount_col_1-2']")
	public static WebElement  billRefGridAmountRow1;	

	@FindBy(xpath="//td[@id='AccountAmount_col_2-1']")
	public static WebElement  billRefGridAccountRow2;	

	@FindBy(xpath="//td[@id='AccountAmount_col_2-2']")
	public static WebElement  billRefGridAmountRow2;	

	@FindBy(xpath="//td[@id='AccountAmount_col_3-1']")
	public static WebElement  billRefGridAccountRow3;

	@FindBy(xpath="//td[@id='AccountAmount_col_3-2']")
	public static WebElement  billRefGridAmountRow3;

	public boolean checkSavingRecepitsVocherForValidatingConsolidateWhenBothAccountsAreSame() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankMenu));
		cashAndBankMenu.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(receiptsVoucher));
		receiptsVoucher.click();

		Thread.sleep(2000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen Opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newCashBankAccountTxt));
		newCashBankAccountTxt.click();

		newCashBankAccountTxt.sendKeys(Keys.SPACE);

		int cashAndBAnkAccountListCount  = cashAndBAnkAccountList.size();

		System.err.println("cashAndBAnkAccountListCount   : "+cashAndBAnkAccountListCount);

		for (int i = 0; i < cashAndBAnkAccountListCount; i++) 
		{
			String data		  = cashAndBAnkAccountList.get(i).getText();

			if(data.equalsIgnoreCase("Consolidate_When_Both_Accounts_Are_Same"))
			{
				cashAndBAnkAccountList.get(i).click();

				break;
			}
		}

		newCashBankAccountTxt.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.SPACE);
		Thread.sleep(2000);
		int departmentcount=departmentListCount.size();

		System.err.println(departmentcount);

		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getText();

			if(data.equalsIgnoreCase("INDIA"))
			{
				departmentListCount.get(i).click();
				break;
			}
		}

		Thread.sleep(1000);

		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.click();
		enter_AccountTxt.sendKeys("Customer A");
		Thread.sleep(3000);
		enter_AccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
		enter_Amount.sendKeys("100");
		enter_Amount.sendKeys(Keys.TAB);



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.click();
		enter_AccountTxt.sendKeys("Customer B");
		Thread.sleep(3000);
		enter_AccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
		enter_Amount.sendKeys("200");
		enter_Amount.sendKeys(Keys.TAB);



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
		select3rdRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.click();
		enter_AccountTxt.sendKeys("Customer A");
		Thread.sleep(3000);
		enter_AccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
		enter_Amount.sendKeys("300");
		enter_Amount.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));	
		voucherSaveBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefGridAccountRow1));
		billRefGridAccountRow1.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newReferenceTxt));
		newReferenceTxt.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefGridAccountRow2));
		billRefGridAccountRow2.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newReferenceTxt));
		newReferenceTxt.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefGridAccountRow3));
		billRefGridAccountRow3.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newReferenceTxt));
		newReferenceTxt.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		System.out.println("*********************************************************************************************************");

		String expMessage1 = "Voucher saved successfully";
		String expMessage2 = " : 2";
		String actMessage = checkValidationMessage(expMessage1);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
		{
			return true;
		}
		else
		{
			return false;
		}	
	}







	public boolean checkLedgerReportForConsolidateWhenBothAccountsAreSame() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
		financialsReportsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledger));
		ledger.click();

		Thread.sleep(3000);

		int rowcount=stockLedgerHometableRowCount.size();

		System.out.println(rowcount);

		for (int i = 0; i < rowcount; i++) 
		{
			String actName = stockLedgerHometableItemNamesList.get(i).getText();

			System.out.println(actName);

			if(actName.equalsIgnoreCase("Consolidate_When_Both_Accounts_Are_Same"))
			{
				stockLedgerHometableItemChkboxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		sl_DateOptionDropdown.click();
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();

		Thread.sleep(1500);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

		int reportsRow1ListCount = report1stRowList.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow1ListCount;i++)
		{
			String data = report1stRowList.get(i).getText();
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[Consolidate_When_Both_Accounts_Are_Same ConsolidateWhenBothAccountsAreSame]";


		int report2ndRowListCount = report2ndRowList.size();
		ArrayList<String> report2ndRowListArray = new ArrayList<String>();
		for(int i=2;i<report2ndRowListCount;i++)
		{
			String data = report2ndRowList.get(i).getText();
			report2ndRowListArray.add(data);
		}
		String actRow2List = report2ndRowListArray.toString();
		String expRow2List = "[Rct : 2, Customer A, 400.00, , 400.00, 28.00, , 28.00, 400.00, , 400.00, Indian Rupees]";


		int report3rdRowListCount = report3rdRowList.size();
		ArrayList<String> report3rdRowListArray = new ArrayList<String>();
		for(int i=2;i<report3rdRowListCount;i++)
		{
			String data = report3rdRowList.get(i).getText();
			report3rdRowListArray.add(data);
		}
		String actRow3List = report3rdRowListArray.toString();
		String expRow3List = "[Rct : 2, Customer B, 200.00, , 600.00, 14.00, , 42.00, 200.00, , 600.00, Indian Rupees]";


		int report4thRowListCount = report4thRowList.size();
		ArrayList<String> report4thRowListArray = new ArrayList<String>();
		for(int i=1;i<report4thRowListCount;i++)
		{
			String data = report4thRowList.get(i).getText();
			report4thRowListArray.add(data);
		}
		String actRow4List = report4thRowListArray.toString();
		String expRow4List = "[Total, , , 600.00, , 600.00, 42.00, , 42.00, 600.00, , 600.00, ]";



		System.out.println("************************************checkLedgerReportForConsolidateWhenBothAccountsAreSame********************************************");

		System.out.println("actRow1List  : "+actRow1List);
		System.out.println("expRow1List  : "+expRow1List);
		System.out.println("*********************************************************************");

		System.out.println("actRow2List  : "+actRow2List);
		System.out.println("expRow2List  : "+expRow2List);
		System.out.println("*********************************************************************");

		System.out.println("actRow3List  : "+actRow3List);
		System.out.println("expRow3List  : "+expRow3List);
		System.out.println("*********************************************************************");

		System.out.println("actRow4List  : "+actRow4List);
		System.out.println("expRow4List  : "+expRow4List);
		System.out.println("*********************************************************************");

		if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List))
		{
			return true;
		}
		else
		{
			return false;
		}
	}







	// Consolidate Always


	public static boolean checkCreatingAccountForConsolidateAlways() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));	
		masterNewBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("Consolidate_Always");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("ConsolidateAlways");

		Thread.sleep(2000);

		Select accountTypeDrpdwn = new Select(accountTypeDropdown);

		accountTypeDrpdwn.selectByVisibleText("Cash");

		System.out.println("***********************************checkCreatingAccountForConsolidateAlways*********************************");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage = "Saved Successfully";

		String actMessage = checkValidationMessage(expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}







	public static boolean checkMasterAccountEnablingConsolidateAlwaysInProperties() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();

		Thread.sleep(3000);

		int count = masterGridBodyName.size();

		ArrayList<String> AccountNames = new ArrayList<String>();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();
			AccountNames.add(data);

			if (data.equalsIgnoreCase("Consolidate_Always")) 
			{
				getAction().contextClick(masterGridBodyChkbox.get(i)).build().perform();
				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAccountPropertiesBtn));
		selectAccountPropertiesBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(consolidateAlwaysRadioBtn));
		consolidateAlwaysRadioBtn.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(okBtnInAccountProperties));
		okBtnInAccountProperties.click();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();
			AccountNames.add(data);

			if (data.equalsIgnoreCase("Consolidate_Always")) 
			{
				getAction().contextClick(masterGridBodyChkbox.get(i)).build().perform();
				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAccountPropertiesBtn));
		selectAccountPropertiesBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(consolidateAlwaysRadioBtn));

		boolean actconsolidateAlwaysRadioBtn = consolidateAlwaysRadioBtn.isSelected();
		boolean expconsolidateAlwaysRadioBtn = true;

		System.out.println("***********************************checkMasterAccountEnablingConsolidateAlwaysInProperties*********************************");

		System.out.println("consolidateAlwaysRadioBtn  : "+actconsolidateAlwaysRadioBtn+"  Value Expected  "+expconsolidateAlwaysRadioBtn);

		if(actconsolidateAlwaysRadioBtn==expconsolidateAlwaysRadioBtn)
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}










	public boolean checkSavingRecepitsVocherForValidatingConsolidateAlways() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankMenu));
		cashAndBankMenu.click();

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(receiptsVoucher));
		receiptsVoucher.click();

		Thread.sleep(2000);

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen Opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newCashBankAccountTxt));
		newCashBankAccountTxt.click();

		newCashBankAccountTxt.sendKeys(Keys.SPACE);

		int cashAndBAnkAccountListCount  = cashAndBAnkAccountList.size();

		System.err.println("cashAndBAnkAccountListCount   : "+cashAndBAnkAccountListCount);

		for (int i = 0; i < cashAndBAnkAccountListCount; i++) 
		{
			String data		  = cashAndBAnkAccountList.get(i).getText();

			if(data.equalsIgnoreCase("Consolidate_Always"))
			{
				cashAndBAnkAccountList.get(i).click();

				break;
			}
		}

		newCashBankAccountTxt.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.SPACE);
		Thread.sleep(2000);
		int departmentcount=departmentListCount.size();

		System.err.println(departmentcount);

		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getText();

			if(data.equalsIgnoreCase("INDIA"))
			{
				departmentListCount.get(i).click();
				break;
			}
		}

		Thread.sleep(1000);

		departmentTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.click();
		enter_AccountTxt.sendKeys("Customer A");
		Thread.sleep(3000);
		enter_AccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
		enter_Amount.sendKeys("100");
		enter_Amount.sendKeys(Keys.TAB);



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		select2ndRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.click();
		enter_AccountTxt.sendKeys("Customer B");
		Thread.sleep(3000);
		enter_AccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
		enter_Amount.sendKeys("200");
		enter_Amount.sendKeys(Keys.TAB);



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
		select3rdRow_1stColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
		enter_AccountTxt.click();
		enter_AccountTxt.sendKeys("Customer C");
		Thread.sleep(3000);
		enter_AccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Amount));
		enter_Amount.sendKeys("300");
		enter_Amount.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));	
		voucherSaveBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefGridAccountRow1));
		billRefGridAccountRow1.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newReferenceTxt));
		newReferenceTxt.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefGridAccountRow2));
		billRefGridAccountRow2.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newReferenceTxt));
		newReferenceTxt.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefGridAccountRow3));
		billRefGridAccountRow3.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newReferenceTxt));
		newReferenceTxt.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
		pickBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		System.out.println("*********************************************************************************************************");

		String expMessage1 = "Voucher saved successfully";
		String expMessage2 = " : 3";
		String actMessage = checkValidationMessage(expMessage1);

		if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
		{
			return true;
		}
		else
		{
			return false;
		}	
	}







	public boolean checkLedgerReportForConsolidateAlways() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
		financialsReportsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledger));
		ledger.click();

		Thread.sleep(3000);

		int rowcount=stockLedgerHometableRowCount.size();

		System.out.println(rowcount);

		for (int i = 0; i < rowcount; i++) 
		{
			String actName = stockLedgerHometableItemNamesList.get(i).getText();

			System.out.println(actName);

			if(actName.equalsIgnoreCase("Consolidate_Always"))
			{
				stockLedgerHometableItemChkboxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		sl_DateOptionDropdown.click();
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();

		Thread.sleep(1500);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

		int reportsRow1ListCount = report1stRowList.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow1ListCount;i++)
		{
			String data = report1stRowList.get(i).getText();
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[Consolidate_Always ConsolidateAlways]";


		int report2ndRowListCount = report2ndRowList.size();
		ArrayList<String> report2ndRowListArray = new ArrayList<String>();
		for(int i=2;i<report2ndRowListCount;i++)
		{
			String data = report2ndRowList.get(i).getText();
			report2ndRowListArray.add(data);
		}
		String actRow2List = report2ndRowListArray.toString();
		String expRow2List = "[Rct : 3, Customer C, 600.00, , 600.00, 42.00, , 42.00, 600.00, , 600.00, Indian Rupees]";


		int report3rdRowListCount = report3rdRowList.size();
		ArrayList<String> report3rdRowListArray = new ArrayList<String>();
		for(int i=1;i<report3rdRowListCount;i++)
		{
			String data = report3rdRowList.get(i).getText();
			report3rdRowListArray.add(data);
		}
		String actRow3List = report3rdRowListArray.toString();
		String expRow3List = "[Total, , , 600.00, , 600.00, 42.00, , 42.00, 600.00, , 600.00, ]";


		System.out.println("************************************checkLedgerReportForConsolidateAlways********************************************");

		System.out.println("actRow1List  : "+actRow1List);
		System.out.println("expRow1List  : "+expRow1List);
		System.out.println("*********************************************************************");

		System.out.println("actRow2List  : "+actRow2List);
		System.out.println("expRow2List  : "+expRow2List);
		System.out.println("*********************************************************************");

		System.out.println("actRow3List  : "+actRow3List);
		System.out.println("expRow3List  : "+expRow3List);
		System.out.println("*********************************************************************");

		if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List))
		{
			return true;
		}
		else
		{
			return false;
		}
	}









	// Active and In Active 

	public static boolean checkAccouncreatedWithPropertAsStatusIsActive() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));		
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));		
		accounts.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));		
		masterNewBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("cust_display_when_StatusIsActive");
		nameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("CustActive");
		codeTxt.sendKeys(Keys.TAB);

		Select accountTypeDrpdwn = new Select(accountTypeDropdown);

		accountTypeDrpdwn.selectByVisibleText("Customer");	

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expSaveAccountMessage = "Saved Successfully";	
		String actSaveAccountMessage = checkValidationMessage(expSaveAccountMessage);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();

		System.out.println("Click on Save With Valid Information Value Actual : " + actSaveAccountMessage + "  Value Expected : " + expSaveAccountMessage);

		if(actSaveAccountMessage.equalsIgnoreCase(expSaveAccountMessage))
		{
			return true;
		}
		else
		{
			return false;
		}
	}







	@FindBy(xpath="//*[@id='ddlStatus']")
	public static WebElement statusDropDownInAcoountProperties;

	public static boolean checkPropertiesForCreatedAccountAsDisplayWhenStatusIsActive() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		int count = masterGridBodyName.size();

		ArrayList<String> AccountNames = new ArrayList<String>();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();
			AccountNames.add(data);

			if (data.equalsIgnoreCase("cust_display_when_StatusIsActive")) 
			{
				masterGridBodyChkbox.get(i).click();
				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterPropertiesBtn));
		masterPropertiesBtn.click();
		Thread.sleep(2000);

		Select statusDropdown = new Select(statusDropDownInAcoountProperties);

		statusDropdown.selectByVisibleText("Active");	

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(okBtnInAccountProperties));
		okBtnInAccountProperties.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterPropertiesBtn));
		masterPropertiesBtn.click();

		Thread.sleep(2000);

		String actStatus = statusDropdown.getFirstSelectedOption().getText();	
		String expStatus = "Active";

		Thread.sleep(2000);

		System.out.println("Status : "+actStatus+"  Value Expected  "+expStatus);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(okBtnInAccountProperties));
		okBtnInAccountProperties.click();

		if (actStatus.equalsIgnoreCase(expStatus)) 
		{
			return true;
		} 
		else
		{
			return false;
		}
	}






	public static boolean checkRaiseSalesIvoiceForCustomerAccountCustDisplayWhenStatusIsActive() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.sendKeys("cust_Display_when_StatusIsActive");
		Thread.sleep(3000);
		customerAccountTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.END);
		departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		departmentTxt.sendKeys(Keys.SPACE);

		int departmentcount=departmentListCount.size();

		System.err.println(departmentcount);

		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getText();

			if(data.equalsIgnoreCase("India"))
			{
				departmentListCount.get(i).click();

				Thread.sleep(1000);

				break;
			}
		}

		departmentTxt.sendKeys(Keys.TAB);	

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.END);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SHIFT,Keys.HOME);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SPACE);


		int placeOFSupplyListCount=placeOFSupplyList.size();

		System.err.println("placeOFSupplyListCount   : "+placeOFSupplyListCount);

		for(int i=0 ; i < placeOFSupplyListCount ;i++)
		{
			String data=placeOFSupplyList.get(i).getText();

			if(data.equalsIgnoreCase("Abu Dhabi"))
			{
				placeOFSupplyList.get(i).click();

				break;
			}
		}


		Thread.sleep(2000);

		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		jurisdictionTxt.click();
		jurisdictionTxt.sendKeys(Keys.END);
		jurisdictionTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		jurisdictionTxt.sendKeys("DUBAI");
		Thread.sleep(3000);
		jurisdictionTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys("Hyderabad");
		Thread.sleep(3000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(3000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("200");
		enter_Rate.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_17thColumn));
		select1stRow_17thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Vat));
		enter_Vat.click();
		enter_Vat.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));
		voucherSaveBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		String expSavingMessage1 = "Voucher saved successfully";
		String expSavingMessage2 = " : 6";
		String actSavingMessage = checkValidationMessage(expSavingMessage1);

		if(actSavingMessage.startsWith(expSavingMessage1) && actSavingMessage.endsWith(expSavingMessage2))
		{
			return true;
		}
		else
		{
			return false;
		}
	}




	public static boolean checkCustomerStatementsReportForCustDisplayWhenStatusIsActive() throws InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receivableAndPayableAnalysisMenu));
		receivableAndPayableAnalysisMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerDetailMenu));
		customerDetailMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerDetailsCustomerStatementsReport));
		customerDetailsCustomerStatementsReport.click();

		Thread.sleep(2000);

		int rowcount=stockLedgerHometableRowCount.size();

		System.out.println(rowcount);

		for (int i = 0; i < rowcount; i++) 
		{
			String actName = stockLedgerHometableItemNamesList.get(i).getText();

			System.out.println(actName);

			if(actName.equalsIgnoreCase("cust_Display_when_StatusIsActive"))
			{
				stockLedgerHometableItemChkboxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();

		Thread.sleep(3000);

		int reportsByWarehouseRow1ListCount = reportsRow1List.size();
		ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
		{
			String data = reportsRow1List.get(i).getText();
			reportsByWarehouseRow1ListArray.add(data);
		}
		String actRow1List = reportsByWarehouseRow1ListArray.toString();
		String expRow1List = "[cust_Display_when_StatusIsActive CustActive]";


		int reportsByWarehouseRow2ListCount = reportsRow2List.size();
		ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
		for(int i=3;i<reportsByWarehouseRow2ListCount;i++)
		{
			String data = reportsRow2List.get(i).getText();
			if (i==13) 
			{
				reportsByWarehouseRow2ListArray.add("Delay in Payment");
			} 
			else 
			{
				reportsByWarehouseRow2ListArray.add(data);
			}
		}

		Calendar cal=Calendar.getInstance();
		SimpleDateFormat f = new SimpleDateFormat("dd/MM/yyyy");
		String currentDate = f.format(cal.getTime());

		String actRow2List = reportsByWarehouseRow2ListArray.toString();
		String expRow2List = "[cust_Display_when_StatusIsActive, 210.00, , , 210.00, 210.00, 210.00, , , 210.00, Delay in Payment, Indian Rupees, "+currentDate+", custActive]";

		int reportsByWarehouseRow3ListCount = reportsRow3List.size();
		ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
		{
			String data = reportsRow3List.get(i).getText();
			if (i==13) 
			{
				reportsByWarehouseRow3ListArray.add("Delay in Payment");
			}
			else 
			{
				reportsByWarehouseRow3ListArray.add(data);
			}
		}
		String actRow3List = reportsByWarehouseRow3ListArray.toString();
		String expRow3List = "[Total, , , 210.00, , , 210.00, 210.00, 210.00, , , 210.00, Delay in Payment, , , ]";


		System.out.println("*********************************checkCustomerStatementsReportForCustDisplayWhenStatusIsActive*****************************************");

		System.out.println("ActualRow1List Values   " +actRow1List);
		System.out.println("ExpectedRow1List Values " +expRow1List);

		System.out.println("ActualRow2List Values  " +actRow2List);
		System.out.println("ExpectedRow1List Values" +expRow2List);

		System.out.println("ActualRow3List Values  " +actRow3List);
		System.out.println("ExpectedRow3List Values" +expRow3List);

		if (actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) 
				&& actRow3List.equalsIgnoreCase(expRow3List))
		{
			return true;
		}
		else
		{
			return false;
		}
	}







	public static boolean checkReportDetailsInLedgerReportPageForCustomerAccountStatusAsActive() throws InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
		financialsReportsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledger));
		ledger.click();

		Thread.sleep(3000);

		int rowcount=stockLedgerHometableRowCount.size();

		System.out.println(rowcount);

		for (int i = 0; i < rowcount; i++) 
		{
			String actName = stockLedgerHometableItemNamesList.get(i).getText();

			System.out.println(actName);

			if(actName.equalsIgnoreCase("cust_Display_when_StatusIsActive"))
			{
				stockLedgerHometableItemChkboxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		sl_DateOptionDropdown.click();
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();

		Thread.sleep(1500);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

		int reportsByWarehouseRow1ListCount = reportsRow1List.size();
		ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
		{
			String data = reportsRow1List.get(i).getText();
			reportsByWarehouseRow1ListArray.add(data);
		}
		String actRow1List = reportsByWarehouseRow1ListArray.toString();
		String expRow1List = "[cust_Display_when_StatusIsActive CustActive]";


		int reportsByWarehouseRow2ListCount = reportsRow2List.size();
		ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
		for(int i=3;i<reportsByWarehouseRow2ListCount;i++)
		{
			String data = reportsRow2List.get(i).getText();
			reportsByWarehouseRow2ListArray.add(data);
		}
		String actRow2List = reportsByWarehouseRow2ListArray.toString();
		String expRow2List = "[Sales - Computers, 210.00, , 210.00, 14.70, , 14.70, 210.00, , 210.00, Indian Rupees]";


		int reportsByWarehouseRow3ListCount = reportsRow3List.size();
		ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
		{
			String data = reportsRow3List.get(i).getText();
			reportsByWarehouseRow3ListArray.add(data);
		}
		String actRow3List = reportsByWarehouseRow3ListArray.toString();
		String expRow3List = "[Total, , , 210.00, , 210.00, 14.70, , 14.70, 210.00, , 210.00, ]";


		System.out.println("*********************************checkReportDetailsInLedgerReportPageForCustomerAccountStatusAsActive*****************************************");

		System.out.println("ActualRow1List Values   " +actRow1List);
		System.out.println("ExpectedRow1List Values " +expRow1List);

		System.out.println("ActualRow2List Values  " +actRow2List);
		System.out.println("ExpectedRow1List Values" +expRow2List);

		System.out.println("ActualRow3List Values  " +actRow3List);
		System.out.println("ExpectedRow3List Values" +expRow3List);

		if (actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) 
				&& actRow3List.equalsIgnoreCase(expRow3List))
		{
			return true;
		} 
		else
		{
			return false;
		}
	}






	// In Active

	public static boolean checkChangeAccountPropertyFromActiveToInActive() throws InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));		
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));		
		accounts.click();

		Thread.sleep(3000);

		int count = masterGridBodyName.size();

		ArrayList<String> AccountNames = new ArrayList<String>();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();
			AccountNames.add(data);

			if (data.equalsIgnoreCase("cust_display_when_StatusIsActive")) 
			{
				masterGridBodyChkbox.get(i).click();
				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterPropertiesBtn));
		masterPropertiesBtn.click();

		Thread.sleep(2000);

		Select statusDropdown = new Select(statusDropDownInAcoountProperties);

		statusDropdown.selectByVisibleText("In Active");	

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(okBtnInAccountProperties));
		okBtnInAccountProperties.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterPropertiesBtn));
		masterPropertiesBtn.click();

		Thread.sleep(2000);

		String actStatus = statusDropdown.getFirstSelectedOption().getText();	
		String expStatus = "In Active";

		Thread.sleep(2000);

		System.out.println("Status : "+actStatus+"  Value Expected  "+expStatus);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(okBtnInAccountProperties));
		okBtnInAccountProperties.click();

		if (actStatus.equalsIgnoreCase(expStatus)) 
		{
			return true;
		} 
		else
		{
			return false;
		}
	}






	public static boolean checkLogoutAndLoginToCheckCustomerStatementsReports() throws InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
		userNameDisplay.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();

		Thread.sleep(4000);

		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt="su";

		String pawslt="su";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
		username.click();
		Thread.sleep(2000);
		username.clear();
		Thread.sleep(2000);
		username.sendKeys(unamelt);
		getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

	/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
		password.click();
		Thread.sleep(2000);
		password.clear();*/
		Thread.sleep(2000);
		password.sendKeys(pawslt);

		lp.clickOnSignInBtn();

		//checkRefershPopOnlogin();

		//checkPopUpWindow();

		Thread.sleep(8000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();

		String userInfo=userNameDisplay.getText();

		System.out.println("User Info : "+userInfo);

		System.out.println("User Info Capture Text :"+userNameDisplay.getText());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));

		companyLogo.click();

		String getCompanyTxt=companyName.getText();
		String getLoginCompanyName=getCompanyTxt.substring(0, 19);
		System.out.println("company name :"+ getLoginCompanyName);
		companyLogo.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dashboard));

		String getDashboard=dashboard.getText();

		System.out.println(getDashboard);


		String expuserInfo            ="SU";
		String expLoginCompanyName    ="Automation Company ";
		String expDashboard			  ="Graph with Active and setAsDefault";


		System.out.println("***********************************checkLogoutAndLoginAfterEnablingMandatoryCheckboxInFieldsProperties*********************************");

		System.out.println("User Info                        : "+userInfo               +"  value expected  "+expuserInfo);
		System.out.println("Login Company Name               : "+getLoginCompanyName    +"  value expected  "+expLoginCompanyName);
		System.out.println("Dashboard                        : "+getDashboard           +"  value expected  "+expDashboard);


		if(userInfo.equalsIgnoreCase(expuserInfo) /*&& getLoginCompanyName.equalsIgnoreCase(expLoginCompanyName)*/)
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}



	public static boolean checkCustomerStatementsReportisEmpty() throws InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));		
		finacinalsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receivableAndPayableAnalysisMenu));		
		receivableAndPayableAnalysisMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerDetailMenu));		
		customerDetailMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerDetailsCustomerStatementsReport));
		customerDetailsCustomerStatementsReport.click();

		Thread.sleep(2000);

		int rowcount=stockLedgerHometableRowCount.size();

		System.out.println(rowcount);

		for (int i = 0; i < rowcount; i++) 
		{
			String actName = stockLedgerHometableItemNamesList.get(i).getText();

			System.out.println(actName);

			if(actName.equalsIgnoreCase("cust_Display_when_StatusIsActive"))
			{
				stockLedgerHometableItemChkboxList.get(i).click();
				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();

		Thread.sleep(3000);			 

		boolean actTableIsEmpty = ledgerTable.getText().isEmpty();
		boolean expTableIsEmpty = true; 

		System.out.println("****************************************checkCustomerStatementsReportisEmpty************************************");

		System.out.println("Ledger Table isEmpty : "+actTableIsEmpty+"  Value Expected  "+expTableIsEmpty);

		if (actTableIsEmpty==expTableIsEmpty)
		{
			return true;
		}
		else
		{

		}
		return false;

	}





	public static boolean checkLedgerIsEmptyForCustomerAccountStatusAsInActive() throws InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
		financialsReportsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledger));
		ledger.click();

		Thread.sleep(3000);

		int rowcount=stockLedgerHometableRowCount.size();

		System.out.println(rowcount);

		for (int i = 0; i < rowcount; i++) 
		{
			String actName = stockLedgerHometableItemNamesList.get(i).getText();

			System.out.println(actName);

			if(actName.equalsIgnoreCase("cust_Display_when_StatusIsActive"))
			{
				stockLedgerHometableItemChkboxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		sl_DateOptionDropdown.click();
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();

		Thread.sleep(1500);

		boolean actTableIsEmpty = ledgerTable.getText().isEmpty();
		boolean expTableIsEmpty = true; 

		System.out.println("*********************************checkLedgerIsEmptyForCustomerAccountStatusAsInActive*****************************************");

		System.out.println("Ledger Table isEmpty : "+actTableIsEmpty+"  Value Expected  "+expTableIsEmpty);

		if (actTableIsEmpty==expTableIsEmpty)
		{
			return true;
		} 
		else
		{
			return false;
		}
	}









	// Do not restrict the selection even if rights are not allotted

	public static boolean checkCreatingAccountForDoNotRestrictTheSelectionEvenIfRightsAreNotAllotted() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));	
		masterNewBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("DoNot_Restrict_If_Rights_Are_Not_Allotted");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("DoNotRestrictIfRightsAreNotAllotted");

		Thread.sleep(2000);

		Select accountTypeDrpdwn = new Select(accountTypeDropdown);

		accountTypeDrpdwn.selectByVisibleText("Customer");

		System.out.println("***********************************checkCreatingAccountForDoNotRestrictTheSelectionEvenIfRightsAreNotAllotted*********************************");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expMessage = "Saved Successfully";

		String actMessage = checkValidationMessage(expMessage);

		if(actMessage.equalsIgnoreCase(expMessage))
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}







	//Home Menu Security Menu
	@FindBy (xpath="//*[@id='6']/span")
	public static WebElement securityMenu;


	@FindBy(xpath="//span[contains(text(),'Create User')]")
	public static WebElement createUserMenu;

	@FindBy(xpath="//i[@class='icon-create-user hiconright2']")
	public static WebElement createUserIcon;

	@FindBy(xpath="//i[@class='icon-font6 icon-group']")
	public static WebElement createUserCreateGroupIcon;

	@FindBy(xpath="//i[@class='icon-font6 icon-cancel']")
	public static WebElement createUserCancelIcon;

	@FindBy(xpath="//input[@id='loginName']")
	public static WebElement createUserLoginNameTxt;

	@FindBy(xpath="//select[@id='ERPRoles']")
	public static WebElement createUserERPRoleDropDown;

	@FindBy(xpath="//select[@id='passwordPolicy']")
	public static WebElement createUserPasswordPolicyDropdown;

	@FindBy(xpath="//input[@id='password']")
	public static WebElement createUserPasswordTxt;

	@FindBy(xpath="//input[@id='confirmpassword']")
	public static WebElement createUserConfirmPasswordTxt;

	@FindBy(xpath="//input[@id='Username']")
	public static WebElement createUserNameTxt;

	@FindBy(xpath="//input[@id='lginAbbr']")
	public static WebElement createUserLoginAbbrivationTxt;

	@FindBy(xpath="//select[@id='SecurityQues']")
	public static WebElement createUserSecurityQuestionDropDown;

	@FindBy(xpath="//input[@id='SecurityAns']")
	public static WebElement createUserSecurityAnswerTxt;

	@FindBy(xpath="//select[@id='language']")
	public static WebElement createUserLanguageTxt;

	@FindBy(xpath="//select[@id='altLanguage']")
	public static WebElement createUserAlternateLanguageTxt;

	@FindBy(xpath="//i[@class='icon-unlock-user icon-font6']")
	public static WebElement createUserUnlockUserIcon;

	@FindBy(xpath="//i[@class='icon-move-user icon-font6']")
	public static WebElement createUserMoveUserIcon;

	@FindBy(xpath="//i[@class='icon-reset icon-font6']")
	public static WebElement createUserResetIcon;

	@FindBy(xpath="//span[@id='btnLoadFrom']")
	public static WebElement createUserLoadFromIcon;	

	@FindBy(xpath="//*[@class='icon-save hiconright2']")
	public static WebElement createUserSaveIcon;

	@FindBy(xpath="//i[@class='icon-close-1 hiconright2']")
	public static WebElement createUserCloseIcon;

	@FindBy(xpath="//input[@id='emailId']")
	public static WebElement createUserEmailTxt;

	@FindBy(xpath="//input[@id='Emailpassword']")
	public static WebElement createUserEmailPasswordTxt;

	@FindBy(xpath="//input[@id='phone']")
	public static WebElement createUserPhoneTxt;

	@FindBy(xpath="//input[@id='mobile']")
	public static WebElement createUserMobileTxt;

	@FindBy(xpath="//input[@id='IsEmailAuthPermission']")
	public static WebElement createUserSetPermissionForEmailAuthorizationChkBox;

	@FindBy(xpath="//select[@id='DominSecurityMping']")
	public static WebElement createUserDomainUserMappingDrpDwn;

	@FindBy(xpath="//input[@id='domainUserName']")
	public static WebElement createUserDomainUserMappingTxt;

	@FindBy(xpath="//input[@id='ipAddr1']")
	public static WebElement createUserUserValuesTxt1;

	@FindBy(xpath="//input[@id='ipAddr2']")
	public static WebElement createUserUserValuesTxt2;

	@FindBy(xpath="//input[@id='ipAddr3']")
	public static WebElement createUserUserValuesTxt3;

	@FindBy(xpath="//input[@id='ipAddr4']")
	public static WebElement createUserUserValuesTxt4;

	@FindBy(xpath="//input[@id='ipAddr5']")
	public static WebElement createUserUserValuesTxt5;

	@FindBy(xpath="//select[@id='typeOfUser']")
	public static WebElement createUserUserTypeDrpDwn;

	@FindBy(xpath="//input[@id='cmbUserTypeMaster']")
	public static WebElement createUserUserTypeCombo;

	@FindBy(xpath="//select[@id='crmRoles']")
	public static WebElement createUserCRMRolesDrpDwn;

	@FindBy(xpath="//input[@id='UserTypeMobile']")
	public static WebElement createUserMobileChkBox;

	@FindBy(xpath="//input[@id='UserTypeOffline']")
	public static WebElement createUserOfflineChkBox;

	@FindBy(xpath="//input[@id='UserTypeWeb']")
	public static WebElement createUserWebChkBox;

	@FindBy(xpath="//select[@id='ERPRoles']/option")
	public static List<WebElement> createUserERPRolesDropdownOptions;

	@FindBy(xpath="//select[@id='passwordPolicy']//option[6]")
	public static WebElement getNumericValue;

	@FindBy(xpath="//select[@id='language']")
	public static WebElement getLanguage;

	@FindBy(xpath="//select[@id='altLanguage']")
	public static WebElement getAltLanguage;

	@FindBy(xpath="//select[@id='language']/option")
	public static List<WebElement> createUserLanguageDropdownList;

	@FindBy(xpath="//select[@id='altLanguage']/option")
	public static List<WebElement> createUserAltLanguageDropdownList;

	@FindBy(xpath="//*[contains(text(),'Additional Info')]")
	public static WebElement createUserAdditionalInfoTab;

	@FindBy(xpath="//span[contains(text(),'Restriction for entry')]")
	public static WebElement createUserRestrictionforentryTab;

	@FindBy(xpath="//div[@id='RestrictionEntryMasters']/ul/li[@id='1']")
	public static WebElement restrictEntryMasterAccount;


	@FindBy(xpath="//tbody[@id='restrictionEntryTable_body']/tr[1]/td[2]")
	public static WebElement restrictForEntryTable1stRow1stCol;

	@FindBy(xpath="//tbody[@id='restrictionEntryTable_body']/tr[1]/td[3]")
	public static WebElement restrictForEntryTable1stRow2ndCol;

	@FindBy(xpath="//tbody[@id='restrictionEntryTable_body']/tr[1]/td[4]")
	public static WebElement restrictForEntryTable1stRow3rdCol;

	@FindBy(xpath="//tbody[@id='restrictionEntryTable_body']/tr[1]/td[5]")
	public static WebElement restrictForEntryTable1stRow4thCol;


	@FindBy(xpath="//tbody[@id='restrictionEntryTable_body']/tr[2]/td[2]")
	public static WebElement restrictForEntryTable2ndRow1stCol;

	@FindBy(xpath="//tbody[@id='restrictionEntryTable_body']/tr[2]/td[3]")
	public static WebElement restrictForEntryTable2ndRow2ndCol;

	@FindBy(xpath="//tbody[@id='restrictionEntryTable_body']/tr[2]/td[4]")
	public static WebElement restrictForEntryTable2ndRow3rdCol;

	@FindBy(xpath="//tbody[@id='restrictionEntryTable_body']/tr[2]/td[5]")
	public static WebElement restrictForEntryTable2ndRow4thCol;


	@FindBy(xpath="//tbody[@id='restrictionEntryTable_body']/tr[3]/td[2]")
	public static WebElement restrictForEntryTable3rdRow1stCol;

	@FindBy(xpath="//tbody[@id='restrictionEntryTable_body']/tr[3]/td[3]")
	public static WebElement restrictForEntryTable3rdRow2ndCol;

	@FindBy(xpath="//tbody[@id='restrictionEntryTable_body']/tr[3]/td[4]")
	public static WebElement restrictForEntryTable3rdRow3rdCol;

	@FindBy(xpath="//tbody[@id='restrictionEntryTable_body']/tr[3]/td[5]")
	public static WebElement restrictForEntryTable3rdRow4thCol;


	@FindBy(xpath="//tbody[@id='restrictionEntryTable_body']/tr[4]/td[2]")
	public static WebElement restrictForEntryTable4thRow1stCol;

	@FindBy(xpath="//tbody[@id='restrictionEntryTable_body']/tr[4]/td[3]")
	public static WebElement restrictForEntryTable4thRow2ndCol;

	@FindBy(xpath="//tbody[@id='restrictionEntryTable_body']/tr[4]/td[4]")
	public static WebElement restrictForEntryTable4thRow3rdCol;

	@FindBy(xpath="//tbody[@id='restrictionEntryTable_body']/tr[4]/td[5]")
	public static WebElement restrictForEntryTable4thRow4thCol;


	@FindBy(xpath="//tbody[@id='restrictionEntryTable_body']/tr[5]/td[2]")
	public static WebElement restrictForEntryTable5thRow1stCol;

	@FindBy(xpath="//tbody[@id='restrictionEntryTable_body']/tr[5]/td[3]")
	public static WebElement restrictForEntryTable5thRow2ndCol;

	@FindBy(xpath="//tbody[@id='restrictionEntryTable_body']/tr[5]/td[4]")
	public static WebElement restrictForEntryTable5thRow3rdCol;

	@FindBy(xpath="//tbody[@id='restrictionEntryTable_body']/tr[5]/td[5]")
	public static WebElement restrictForEntryTable5thRow4thCol;



	@FindBy(xpath="//input[@id='MasteroptionControl']")
	public static WebElement restrictForEntryTableMastersCombo;

	@FindBy(xpath="//input[@id='chkEntry_1_2']")
	public static WebElement restrictForEntryTableRow1EntryChkbox;

	@FindBy(xpath="//input[@id='chkReport_1_3']")
	public static WebElement restrictForEntryTableRow1ReportChkbox;

	@FindBy(xpath="//input[@id='chkView_1_4']")
	public static WebElement restrictForEntryTableRow1ViewChkbox;



	@FindBy(xpath="//input[@id='chkEntry_2_2']")
	public static WebElement restrictForEntryTableRow2EntryChkbox;

	@FindBy(xpath="//input[@id='chkReport_2_3']")
	public static WebElement restrictForEntryTableRow2ReportChkbox;

	@FindBy(xpath="//input[@id='chkView_2_4']")
	public static WebElement restrictForEntryTableRow2ViewChkbox;



	@FindBy(xpath="//input[@id='chkEntry_3_2']")
	public static WebElement restrictForEntryTableRow3EntryChkbox;

	@FindBy(xpath="//input[@id='chkReport_3_3']")
	public static WebElement restrictForEntryTableRow3ReportChkbox;

	@FindBy(xpath="//input[@id='chkView_3_4']")
	public static WebElement restrictForEntryTableRow3ViewChkbox;



	@FindBy(xpath="//input[@id='chkEntry_4_2']")
	public static WebElement restrictForEntryTableRow4EntryChkbox;

	@FindBy(xpath="//input[@id='chkReport_4_3']")
	public static WebElement restrictForEntryTableRow4ReportChkbox;

	@FindBy(xpath="//input[@id='chkView_4_4']")
	public static WebElement restrictForEntryTableRow4ViewChkbox;


	@FindBy(xpath="//input[@id='chkExclusion']")
	public static WebElement restrictForEntryExclusionChkbox;







	public boolean checkUserCreationForRestrictionOfAccount() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(securityMenu));
		securityMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserMenu));
		createUserMenu.click();

		Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserIcon));
		createUserIcon.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserLoginNameTxt));
		createUserLoginNameTxt.click();
		createUserLoginNameTxt.sendKeys("AccountRestrictUser");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserERPRoleDropDown));
		createUserERPRoleDropDown.click();
		createUserERPRoleDropDown.sendKeys("SampleRole1");

		int count = createUserERPRolesDropdownOptions.size()-1;
		System.out.println("Count "+ count);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserPasswordTxt));
		createUserPasswordTxt.sendKeys("12345");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserConfirmPasswordTxt));
		createUserConfirmPasswordTxt.sendKeys("12345");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserNameTxt));
		createUserNameTxt.sendKeys("UserForAccountRestriction");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserLoginAbbrivationTxt));
		createUserLoginAbbrivationTxt.sendKeys("UFAR");

		createUserSecurityQuestionDropDown.click();
		Select s = new Select(createUserSecurityQuestionDropDown);
		s.selectByVisibleText("In which county were you born?");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserSecurityAnswerTxt));	
		createUserSecurityAnswerTxt.sendKeys("India");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserAdditionalInfoTab));
		createUserAdditionalInfoTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserUserTypeDrpDwn));
		Select user = new Select(createUserUserTypeDrpDwn);
		user.selectByVisibleText("Customer");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserEmailTxt));
		createUserEmailTxt.click();
		createUserEmailTxt.clear();
		createUserEmailTxt.sendKeys("accountrestrection@focussoftnet.com");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserRestrictionforentryTab));
		createUserRestrictionforentryTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restrictEntryMasterAccount));
		restrictEntryMasterAccount.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restrictForEntryTable1stRow1stCol));
		restrictForEntryTable1stRow1stCol.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restrictForEntryTableMastersCombo));
		restrictForEntryTableMastersCombo.sendKeys("Vendor B");
		Thread.sleep(3000);
		restrictForEntryTableMastersCombo.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restrictForEntryTableRow1EntryChkbox));
		restrictForEntryTableRow1EntryChkbox.click();
		restrictForEntryTableRow1EntryChkbox.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restrictForEntryTableRow1ReportChkbox));
		restrictForEntryTableRow1ReportChkbox.click();
		restrictForEntryTableRow1ReportChkbox.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restrictForEntryTableRow1ViewChkbox));
		restrictForEntryTableRow1ViewChkbox.click();
		restrictForEntryTableRow1ViewChkbox.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restrictForEntryTableMastersCombo));
		restrictForEntryTableMastersCombo.sendKeys("Display_Un-Realize_GainOrLoss_In_Ledger");
		Thread.sleep(3000);
		restrictForEntryTableMastersCombo.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restrictForEntryTableRow2EntryChkbox));
		restrictForEntryTableRow2EntryChkbox.click();
		restrictForEntryTableRow2EntryChkbox.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restrictForEntryTableRow2ReportChkbox));
		restrictForEntryTableRow2ReportChkbox.click();
		restrictForEntryTableRow2ReportChkbox.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restrictForEntryTableRow2ViewChkbox));
		restrictForEntryTableRow2ViewChkbox.click();
		restrictForEntryTableRow2ViewChkbox.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restrictForEntryTableMastersCombo));
		restrictForEntryTableMastersCombo.sendKeys("Sales - Computers");
		Thread.sleep(3000);
		restrictForEntryTableMastersCombo.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restrictForEntryTableRow3EntryChkbox));
		restrictForEntryTableRow3EntryChkbox.click();
		restrictForEntryTableRow3EntryChkbox.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restrictForEntryTableRow3ReportChkbox));
		restrictForEntryTableRow3ReportChkbox.click();
		restrictForEntryTableRow3ReportChkbox.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restrictForEntryTableRow3ViewChkbox));
		restrictForEntryTableRow3ViewChkbox.click();
		restrictForEntryTableRow3ViewChkbox.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restrictForEntryTableMastersCombo));
		restrictForEntryTableMastersCombo.sendKeys("Purchase");
		Thread.sleep(3000);
		restrictForEntryTableMastersCombo.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restrictForEntryTableRow4EntryChkbox));
		restrictForEntryTableRow4EntryChkbox.click();
		restrictForEntryTableRow4EntryChkbox.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restrictForEntryTableRow4ReportChkbox));
		restrictForEntryTableRow4ReportChkbox.click();
		restrictForEntryTableRow4ReportChkbox.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restrictForEntryTableRow4ViewChkbox));
		restrictForEntryTableRow4ViewChkbox.click();
		restrictForEntryTableRow4ViewChkbox.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserSaveIcon));
		createUserSaveIcon.click();

		String expMessage = "new user created successfully";
		String actMessage = checkValidationMessage(expMessage);

		System.out.println(actMessage);
		System.out.println(expMessage);

		if (actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}









	public static boolean checkSavingSalesInvoivesVATWithCustomerAccountAsDoNotRestrictIfRightsAreNotAllotted() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.sendKeys("DoNot_Restrict_If_Rights_Are_Not_Allotted");
		Thread.sleep(3000);
		customerAccountTxt.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.sendKeys(Keys.SPACE);

		int departmentcount=departmentListCount.size();

		System.err.println(departmentcount);

		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getText();

			if(data.equalsIgnoreCase("INDIA"))
			{
				departmentListCount.get(i).click();
				break;
			}
		}

		departmentTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.END);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SHIFT,Keys.HOME);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SPACE);


		int placeOFSupplyListCount=placeOFSupplyList.size();

		System.err.println("placeOFSupplyListCount   : "+placeOFSupplyListCount);

		for(int i=0 ; i < placeOFSupplyListCount ;i++)
		{
			String data=placeOFSupplyList.get(i).getText();

			if(data.equalsIgnoreCase("Abu Dhabi"))
			{
				placeOFSupplyList.get(i).click();

				break;
			}
		}


		Thread.sleep(2000);

		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		jurisdictionTxt.click();
		jurisdictionTxt.sendKeys(Keys.END);
		jurisdictionTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		jurisdictionTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		jurisdictionTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys("Hyderabad");
		Thread.sleep(3000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(3000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		select1stRow_11thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("200");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.click();
		enter_Gross.sendKeys(Keys.TAB);

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_17thColumn));
			select1stRow_17thColumn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Vat));
			enter_Vat.click();
			enter_Vat.sendKeys(Keys.TAB);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
			select1stRow_18thColumn.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Taxable));
			enter_Taxable.click();

			Thread.sleep(2000);*/

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));
		voucherSaveBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		String expSavingMessage1 = "Voucher saved successfully";
		String expSavingMessage2 = " : 7";
		String actSavingMessage = checkValidationMessage(expSavingMessage1);

		if(actSavingMessage.startsWith(expSavingMessage1) && actSavingMessage.endsWith(expSavingMessage2))
		{
			return true;
		}
		else
		{
			return false;
		}
	}






	public static boolean checkLogoutAndLoginWithAccountRestrictUser() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(userNameDisplay));
		userNameDisplay.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();

		Thread.sleep(4000);

		LoginPage lp=new LoginPage(getDriver()); 

		String unamelt="AccountRestrictUser";

		String pawslt="12345";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
		username.click();
		Thread.sleep(2000);
		username.clear();
		Thread.sleep(2000);
		username.sendKeys(unamelt);
		getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
		password.click();
		Thread.sleep(2000);
		password.clear();*/
		Thread.sleep(2000);
		password.sendKeys(pawslt);

		lp.clickOnSignInBtn();

		//checkRefershPopOnlogin();

		//checkPopUpWindow();

		Thread.sleep(8000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		userNameDisplay.click();

		String userInfo=userNameDisplay.getText();

		System.out.println("User Info : "+userInfo);

		System.out.println("User Info Capture Text :"+userNameDisplay.getText());

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));

		companyLogo.click();

		String getCompanyTxt=companyName.getText();
		String getLoginCompanyName=getCompanyTxt.substring(0, 19);
		System.out.println("company name :"+ getLoginCompanyName);
		companyLogo.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dashboard));

		String getDashboard=dashboard.getText();

		System.out.println(getDashboard);


		String expuserInfo            ="AccountRestrictUser";
		String expLoginCompanyName    ="Automation Company ";
		String expDashboard			  ="Graph with Active and setAsDefault";


		System.out.println("***********************************checkLogin*********************************");

		System.out.println("User Info                        : "+userInfo               +"  value expected  "+expuserInfo);
		System.out.println("Login Company Name               : "+getLoginCompanyName    +"  value expected  "+expLoginCompanyName);
		System.out.println("Dashboard                        : "+getDashboard           +"  value expected  "+expDashboard);


		if(userInfo.equalsIgnoreCase(expuserInfo) /*&& getLoginCompanyName.equalsIgnoreCase(expLoginCompanyName)*/)
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}




	@FindBy(xpath="//table[@id='landgridData']/tbody")
	public static WebElement reportAccountsTable;


	public boolean checkLedgerReportForUserRestrictAccountWithoutEnablingDoNotRestrictTheSelectionEvenIfRightsAreNotAllottedOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
		financialsReportsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledger));
		ledger.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxt));
		masterSearchTxt.click();
		masterSearchTxt.sendKeys("DoNot_Restrict_If_Rights_Are_Not_Allotted");
		masterSearchTxt.sendKeys(Keys.ENTER);

		Thread.sleep(3000);

		String actRestrictedAccount = reportAccountsTable.getText();
		String expRestrictedAccount = "No record found";

		System.out.println("************************************checkLedgerReportForUserRestrictAccountWithoutEnablingDoNotRestrictTheSelectionEvenIfRightsAreNotAllottedOption********************************************");

		System.out.println("Restricted Account : "+actRestrictedAccount+"  Value Expected  "+expRestrictedAccount);

		if(actRestrictedAccount.equalsIgnoreCase(expRestrictedAccount))
		{
			return true;
		}
		else
		{
			return false;
		}
	}




	@FindBy(xpath="//tbody[@id='tblBodyTransRender']/tr/td[4]")
	public static List<WebElement> voucherNumberList;




	public static boolean checkSalesInvoivesVATWithOutEnablingDoNotRestrictIfRightsAreNotAllottedOption() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int actNoOfVouchers = voucherNumberList.size()-1;
		int expNoOfVouchers = 1;


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));


		boolean restrict = true;


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.sendKeys(Keys.SPACE);
		Thread.sleep(3000);

		int count = customerAccountComboList.size();

		for (int i = 0; i < count; i++) 
		{
			String data = customerAccountComboList.get(i).getText();

			if (data.equalsIgnoreCase("DoNot_Restrict_If_Rights_Are_Not_Allotted")) 
			{
				restrict = false;
				System.err.println("***Account is Displaying Even After Restricting***");
				break;
			}
		}

		System.out.println("********checkSalesInvoivesVATWithOutEnablingDoNotRestrictIfRightsAreNotAllottedOption********");

		System.out.println("No Of Vouchers Displaying            : "+actNoOfVouchers +"  Value Expected  "+expNoOfVouchers);
		System.out.println("Restricted Account Is Not Displaying : "+restrict        +"  Value Expected  "+"true");


		if(actNoOfVouchers==expNoOfVouchers && restrict==true)
		{
			getDriver().navigate().refresh();
			Thread.sleep(2000);
			return true;
		}
		else
		{
			getDriver().navigate().refresh();
			Thread.sleep(2000);
			return false;
		}
	}








	public static boolean checkMasterAccountEnablingDoNotRestrictTheSelectionEvenIfRightsAreNotAllottedOption() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(3000);

		int rowcount=stockLedgerHometableRowCount.size();

		System.out.println(rowcount);

		for (int i = 0; i < rowcount; i++) 
		{
			String actName = stockLedgerHometableItemNamesList.get(i).getText();

			System.out.println(actName);

			if(actName.equalsIgnoreCase("DoNot_Restrict_If_Rights_Are_Not_Allotted"))
			{
				stockLedgerHometableItemChkboxList.get(i).click();
				break;
			}
		}

		int count = masterGridBodyName.size();

		ArrayList<String> AccountNames = new ArrayList<String>();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();
			AccountNames.add(data);

			if (data.equalsIgnoreCase("DoNot_Restrict_If_Rights_Are_Not_Allotted")) 
			{
				getAction().contextClick(masterGridBodyChkbox.get(i)).build().perform();
				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAccountPropertiesBtn));
		selectAccountPropertiesBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(doNotRestrictSelectionEvenIfRightsNotAllottedCheckbox));
		doNotRestrictSelectionEvenIfRightsNotAllottedCheckbox.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(okBtnInAccountProperties));
		okBtnInAccountProperties.click();

		for (int i = 0; i < count; i++) 
		{
			String data = masterGridBodyName.get(i).getText();
			AccountNames.add(data);

			if (data.equalsIgnoreCase("DoNot_Restrict_If_Rights_Are_Not_Allotted")) 
			{
				getAction().contextClick(masterGridBodyChkbox.get(i)).build().perform();
				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAccountPropertiesBtn));
		selectAccountPropertiesBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(doNotRestrictSelectionEvenIfRightsNotAllottedCheckbox));

		boolean actdoNotRestrictSelectionEvenIfRightsNotAllottedCheckbox = doNotRestrictSelectionEvenIfRightsNotAllottedCheckbox.isSelected();
		boolean expdoNotRestrictSelectionEvenIfRightsNotAllottedCheckbox = true;

		System.out.println("***********************************checkMasterAccountEnablingDoNotRestrictTheSelectionEvenIfRightsAreNotAllottedOption*********************************");

		System.out.println("doNotRestrictSelectionEvenIfRightsNotAllottedCheckbox  : "+actdoNotRestrictSelectionEvenIfRightsNotAllottedCheckbox+"  Value Expected  "+expdoNotRestrictSelectionEvenIfRightsNotAllottedCheckbox);

		if(actdoNotRestrictSelectionEvenIfRightsNotAllottedCheckbox==expdoNotRestrictSelectionEvenIfRightsNotAllottedCheckbox)
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	}









	public boolean checkLedgerReportForUserRestrictAccountWithDoNotRestrictTheSelectionEvenIfRightsAreNotAllottedOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
		financialsReportsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledger));
		ledger.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxt));
		masterSearchTxt.click();
		masterSearchTxt.sendKeys("DoNot_Restrict_If_Rights_Are_Not_Allotted");
		masterSearchTxt.sendKeys(Keys.ENTER);

		Thread.sleep(3000);

		int rowcount=stockLedgerHometableRowCount.size();

		System.out.println(rowcount);

		for (int i = 0; i < rowcount; i++) 
		{
			String actName = stockLedgerHometableItemNamesList.get(i).getText();

			System.out.println(actName);

			if(actName.equalsIgnoreCase("DoNot_Restrict_If_Rights_Are_Not_Allotted"))
			{
				stockLedgerHometableItemChkboxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		sl_DateOptionDropdown.click();
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();

		Thread.sleep(1500);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

		int reportsRow1ListCount = report1stRowList.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow1ListCount;i++)
		{
			String data = report1stRowList.get(i).getText();
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[DoNot_Restrict_If_Rights_Are_Not_Allotted DoNotRestrictIfRightsAreNotAllotted]";


		int report2ndRowListCount = report2ndRowList.size();
		ArrayList<String> report2ndRowListArray = new ArrayList<String>();
		for(int i=2;i<report2ndRowListCount;i++)
		{
			String data = report2ndRowList.get(i).getText();
			report2ndRowListArray.add(data);
		}
		String actRow2List = report2ndRowListArray.toString();
		String expRow2List = "[NDT55 : 7, Sales - Computers, 200.00, , 200.00, 14.00, , 14.00, 200.00, , 200.00, Indian Rupees]";


		int report3rdRowListCount = report3rdRowList.size();
		ArrayList<String> report3rdRowListArray = new ArrayList<String>();
		for(int i=1;i<report3rdRowListCount;i++)
		{
			String data = report3rdRowList.get(i).getText();
			report3rdRowListArray.add(data);
		}
		String actRow3List = report3rdRowListArray.toString();
		String expRow3List = "[Total, , , 200.00, , 200.00, 14.00, , 14.00, 200.00, , 200.00, ]";


		System.out.println("************************************checkLedgerReportForUserRestrictAccountWithDoNotRestrictTheSelectionEvenIfRightsAreNotAllottedOption********************************************");

		System.out.println("actRow1List  : "+actRow1List);
		System.out.println("expRow1List  : "+expRow1List);
		System.out.println("*********************************************************************");

		System.out.println("actRow2List  : "+actRow2List);
		System.out.println("expRow2List  : "+expRow2List);
		System.out.println("*********************************************************************");

		System.out.println("actRow3List  : "+actRow3List);
		System.out.println("expRow3List  : "+expRow3List);
		System.out.println("*********************************************************************");

		if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List))
		{
			return true;
		}
		else
		{
			return false;
		}
	}







	public static boolean checkSalesInvoivesVATAfterEnablingDoNotRestrictIfRightsAreNotAllottedOption() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		int actNoOfVouchers = voucherNumberList.size()-1;
		int expNoOfVouchers = 2;


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));


		boolean restrict = false;


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.sendKeys(Keys.SPACE);
		Thread.sleep(3000);

		int count = customerAccountComboList.size();

		for (int i = 0; i < count; i++) 
		{
			String data = customerAccountComboList.get(i).getText();

			if (data.equalsIgnoreCase("DoNot_Restrict_If_Rights_Are_Not_Allotted")) 
			{
				restrict = true;
				break;
			}
		}

		System.out.println("********checkSalesInvoivesVATAfterEnablingDoNotRestrictIfRightsAreNotAllottedOption********");

		System.out.println("No Of Vouchers Displaying            : "+actNoOfVouchers +"  Value Expected  "+expNoOfVouchers);
		System.out.println("Restricted Account Is Not Displaying : "+restrict        +"  Value Expected  "+"true");


		if(/*actNoOfVouchers==expNoOfVouchers &&*/ restrict==true)
		{
			getDriver().navigate().refresh();
			Thread.sleep(2000);
			return true;
		}
		else
		{
			getDriver().navigate().refresh();
			Thread.sleep(2000);
			return false;
		}
	}







	// Display ledger by currency


	public static boolean checkAccouncreatedWithPropertyAsDisplayLedgerByCurrency() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));		
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));		
		accounts.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));		
		masterNewBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("cust_display_ledger_by_currency");
		nameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("CustLedger");
		codeTxt.sendKeys(Keys.TAB);

		Select accountTypeDrpdwn = new Select(accountTypeDropdown);

		accountTypeDrpdwn.selectByVisibleText("Customer");	
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expSaveAccountMessage = "Saved Successfully";	
		String actSaveAccountMessage = checkValidationMessage(expSaveAccountMessage);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();

		System.out.println("Click on Save With Valid Information Value Actual : " + actSaveAccountMessage + "  Value Expected : " + expSaveAccountMessage);

		if(actSaveAccountMessage.equalsIgnoreCase(expSaveAccountMessage))
		{
			return true;
		}
		else
		{
			return false;
		}
	}





	public static boolean checkPropertiesForCreatedAccountAsDisplayLedgerByCurrency() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		int rowcount=stockLedgerHometableRowCount.size();

		System.out.println(rowcount);

		for (int i = 0; i < rowcount; i++) 
		{
			String actName = stockLedgerHometableItemNamesList.get(i).getText();

			System.out.println(actName);

			if(actName.equalsIgnoreCase("cust_display_ledger_by_currency"))
			{
				stockLedgerHometableItemChkboxList.get(i).click();
				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterPropertiesBtn));
		masterPropertiesBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayLedgerByCurrencyCheckboxInProperties));
		displayLedgerByCurrencyCheckboxInProperties.click();

		Thread.sleep(1000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(okBtnInAccountProperties));
		okBtnInAccountProperties.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterPropertiesBtn));
		masterPropertiesBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayLedgerByCurrencyCheckboxInProperties));

		boolean actdisplayLedgerByCurrencyCheckboxInProperties = displayLedgerByCurrencyCheckboxInProperties.isSelected();
		boolean expdisplayLedgerByCurrencyCheckboxInProperties = true;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(okBtnInAccountProperties));
		okBtnInAccountProperties.click();

		System.out.println("displayLedgerByCurrencyCheckboxInProperties : "+actdisplayLedgerByCurrencyCheckboxInProperties+"  VAlue Expected  "+expdisplayLedgerByCurrencyCheckboxInProperties);


		if (actdisplayLedgerByCurrencyCheckboxInProperties==expdisplayLedgerByCurrencyCheckboxInProperties) 
		{
			return true;
		} 
		else
		{
			return false;
		}
	}




	@FindBy (xpath="//*[@id='chkGenerateLedgerByCurrency']")
	public static WebElement displayLedgerByCurrencyCheckboxInProperties;



	public static boolean checkRaiseSalesInvoivesVATForCustomerDisplayLedgerByCurrency() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateText));
		dateText.click();
		dateText.sendKeys(Keys.HOME);
		Thread.sleep(1000);
		dateText.sendKeys("29/01/2021");
		dateText.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.sendKeys("cust_display_ledger_by_Currency");
		Thread.sleep(3000);
		customerAccountTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.END);
		departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		departmentTxt.sendKeys(Keys.SPACE);

		int departmentcount=departmentListCount.size();

		System.err.println(departmentcount);

		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getText();

			if(data.equalsIgnoreCase("Dubai"))
			{
				departmentListCount.get(i).click();

				Thread.sleep(1000);

				break;
			}
		}

		departmentTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.END);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SHIFT,Keys.HOME);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SPACE);


		int placeOFSupplyListCount=placeOFSupplyList.size();

		System.err.println("placeOFSupplyListCount   : "+placeOFSupplyListCount);

		for(int i=0 ; i < placeOFSupplyListCount ;i++)
		{
			String data=placeOFSupplyList.get(i).getText();

			if(data.equalsIgnoreCase("Abu Dhabi"))
			{
				placeOFSupplyList.get(i).click();

				break;
			}
		}


		Thread.sleep(2000);

		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		jurisdictionTxt.click();
		jurisdictionTxt.sendKeys(Keys.END);
		jurisdictionTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		jurisdictionTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		jurisdictionTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys("Hyderabad");
		Thread.sleep(3000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(3000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("200");
		enter_Rate.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_17thColumn));
		select1stRow_17thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Vat));
		enter_Vat.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));
		voucherSaveBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		String expTransactionmsg= "This transaction will make stock negative.";
		String actTransactionmsg=checkValidationMessage(expTransactionmsg);

		String expSavingMessage1 = "Voucher saved successfully";

		String actSavingMessage = checkValidationMessage(expSavingMessage1);

		if(actSavingMessage.startsWith(expSavingMessage1))
		{
			return true;
		}
		else
		{
			return false;
		}
	}







	public static boolean checkLedgerDetailsForCustomerDisplayLedgerByCurrency() throws InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
		financialsReportsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledger));
		ledger.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterSearchTxt));
		masterSearchTxt.click();
		masterSearchTxt.sendKeys("cust_display_ledger_by_Currency");
		masterSearchTxt.sendKeys(Keys.ENTER);

		Thread.sleep(3000);

		int rowcount=stockLedgerHometableRowCount.size();

		System.out.println(rowcount);

		for (int i = 0; i < rowcount; i++) 
		{
			String actName = stockLedgerHometableItemNamesList.get(i).getText();

			System.out.println(actName);

			if(actName.equalsIgnoreCase("cust_display_ledger_by_Currency"))
			{
				stockLedgerHometableItemChkboxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		sl_DateOptionDropdown.click();
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();

		Thread.sleep(1500);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

		int reportsByWarehouseRow1ListCount = reportsRow1List.size();
		ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
		{
			String data = reportsRow1List.get(i).getText();
			reportsByWarehouseRow1ListArray.add(data);
		}
		String actRow1List = reportsByWarehouseRow1ListArray.toString();
		String expRow1List = "[cust_display_ledger_by_Currency CustLedger]";


		int reportsByWarehouseRow2ListCount = reportsRow2List.size();
		ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
		for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
		{
			String data = reportsRow2List.get(i).getText();
			reportsByWarehouseRow2ListArray.add(data);
		}
		String actRow2List = reportsByWarehouseRow2ListArray.toString();
		String expRow2List = "[Indian Rupees, , , , , , , , , , , ]";


		int reportsByWarehouseRow3ListCount = reportsRow3List.size();
		ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
		{
			String data = reportsRow3List.get(i).getText();
			reportsByWarehouseRow3ListArray.add(data);
		}
		String actRow3List = reportsByWarehouseRow3ListArray.toString();
		String expRow3List = "[29/01/2021, NDT55 : 8, Sales - Computers, 210.00, , 210.00, 14.70, , 14.70, 210.00, , 210.00, Indian Rupees]";


		int reportsByWarehouseRow4ListCount = reportsRow4List.size();
		ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow4ListCount;i++)
		{
			String data = reportsRow4List.get(i).getText();
			reportsByWarehouseRow4ListArray.add(data);
		}
		String actRow4List = reportsByWarehouseRow4ListArray.toString();
		String expRow4List = "[Total, , , 210.00, , 210.00, 14.70, , 14.70, 210.00, , 210.00, ]";


		System.out.println("*********************************checkLedgerDetailsForVendorB*****************************************");

		System.out.println("ActualRow1List Values   " +actRow1List);
		System.out.println("ExpectedRow1List Values " +expRow1List);

		System.out.println("ActualRow2List Values  " +actRow2List);
		System.out.println("ExpectedRow1List Values" +expRow2List);

		System.out.println("ActualRow3List Values  " +actRow3List);
		System.out.println("ExpectedRow3List Values" +expRow3List);


		System.out.println("ActualRow4List Values   " +actRow4List);
		System.out.println("ExpectedRow4List Values " +expRow4List);


		if (actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) 
				&& actRow3List.equalsIgnoreCase(expRow3List) &&  actRow4List.equalsIgnoreCase(expRow4List))
		{
			return true;
		} 
		else
		{
			return false;
		}
	}







	public static boolean checkCustomerStatementsReportForCreatedCustomerAccountDisplayLedgerByCurrency() throws InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receivableAndPayableAnalysisMenu));
		receivableAndPayableAnalysisMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerDetailMenu));
		customerDetailMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerDetailsCustomerStatementsReport));
		customerDetailsCustomerStatementsReport.click();

		Thread.sleep(2000);

		int rowcount=stockLedgerHometableRowCount.size();

		System.out.println(rowcount);

		for (int i = 0; i < rowcount; i++) 
		{
			String actName = stockLedgerHometableItemNamesList.get(i).getText();

			System.out.println(actName);

			if(actName.equalsIgnoreCase("cust_display_ledger_by_Currency"))
			{
				stockLedgerHometableItemChkboxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();

		Thread.sleep(3000);

		int reportsByWarehouseRow1ListCount = reportsRow1List.size();
		ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
		{
			String data = reportsRow1List.get(i).getText();
			reportsByWarehouseRow1ListArray.add(data);
		}
		String actRow1List = reportsByWarehouseRow1ListArray.toString();
		String expRow1List = "[cust_display_ledger_by_Currency CustLedger]";


		int reportsByWarehouseRow2ListCount = reportsRow2List.size();
		ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
		{
			String data = reportsRow2List.get(i).getText();
			if (i==13) 
			{
				reportsByWarehouseRow2ListArray.add("Delay in Payment");	
			}
			else 
			{
				reportsByWarehouseRow2ListArray.add(data);
			}
		}
		String actRow2List = reportsByWarehouseRow2ListArray.toString();
		String expRow2List = "[NDT55:8, 29/01/2021, cust_display_ledger_by_Currency, 210.00, , , 210.00, 210.00, 210.00, , , 210.00, Delay in Payment, Indian Rupees, 29/01/2021, CustLedger]";


		int reportsByWarehouseRow3ListCount = reportsRow3List.size();
		ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
		{
			String data = reportsRow3List.get(i).getText();
			if (i==13) 
			{
				reportsByWarehouseRow3ListArray.add("Delay in Payment");
			} 
			else 
			{
				reportsByWarehouseRow3ListArray.add(data);
			}

		}
		String actRow3List = reportsByWarehouseRow3ListArray.toString();
		String expRow3List = "[Total, , , 210.00, , , 210.00, 210.00, 210.00, , , 210.00, Delay in Payment, , , ]";
		System.out.println("*********************************checkCustomerStatementsReportDetailsForCreatedCustomer*****************************************");

		System.out.println("ActualRow1List Values   " +actRow1List);
		System.out.println("ExpectedRow1List Values " +expRow1List);

		System.out.println("ActualRow2List Values  " +actRow2List);
		System.out.println("ExpectedRow1List Values" +expRow2List);

		System.out.println("ActualRow3List Values  " +actRow3List);
		System.out.println("ExpectedRow3List Values" +expRow3List);

		if (actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) 
				&& actRow3List.equalsIgnoreCase(expRow3List))
		{
			return true;
		}
		else
		{
			return false;
		}
	}









	// Club the transactions of all the Accounts under Group

	@FindBy(xpath="//*[@id='btnNew']/i")
	public static WebElement  newBtnInGrp;

	public static boolean checkGroupAccountCreateAndSelectPropertyASClubAllTransactionsOfEachAccountUnderGroup() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));		
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));		
		accounts.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterAddGroupBtn));		
		masterAddGroupBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("Cust_ClubTransactionsOf_AllAccounts_Group");
		nameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("clubTransactions");
		codeTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		Select accountTypeDrpdwn = new Select(accountTypeDropdown);
		accountTypeDrpdwn.selectByVisibleText("Customer");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expSaveAccountMessage = "Saved Successfully";	
		String actSaveAccountMessage = checkValidationMessage(expSaveAccountMessage);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();

		Thread.sleep(2000);

		int rowcount=stockLedgerHometableRowCount.size();

		System.out.println(rowcount);

		for (int i = 0; i < rowcount; i++) 
		{
			String actName = stockLedgerHometableItemNamesList.get(i).getText();

			System.out.println(actName);

			if(actName.equalsIgnoreCase("Cust_ClubTransactionsOf_AllAccounts_Group"))
			{
				getAction().doubleClick(stockLedgerHometableItemChkboxList.get(i)).build().perform();
				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtnInGrp));
		newBtnInGrp.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("cust-club trans of all accts One");
		nameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("custOne");
		codeTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		accountTypeDrpdwn.selectByVisibleText("Customer");
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expSaveAccountMessage1 = "Saved Successfully";	
		String actSaveAccountMessage1 = checkValidationMessage(expSaveAccountMessage1);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("cust-club trans of all accts two");
		nameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("custTwo");
		codeTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		accountTypeDrpdwn.selectByVisibleText("Customer");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expSaveAccountMessage2 = "Saved Successfully";	
		String actSaveAccountMessage2 = checkValidationMessage(expSaveAccountMessage2);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();

		Thread.sleep(3000);

		System.out.println("Click on Save With Valid Information Value Actual : " + actSaveAccountMessage + "  Value Expected : " + expSaveAccountMessage);

		if(actSaveAccountMessage.equalsIgnoreCase(expSaveAccountMessage) && actSaveAccountMessage1.equalsIgnoreCase(expSaveAccountMessage1) 
				&& actSaveAccountMessage2.equalsIgnoreCase(expSaveAccountMessage2))
		{
			return true;
		}
		else
		{
			return false;
		}
	}







	public static boolean checkSavedGroupAccountInTheAccountsListAndSelectProprtyAsClubAllTransactionsOfEachAccountUnderGroup() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));		
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));		
		accounts.click();

		Thread.sleep(2000);

		int rowcount=stockLedgerHometableRowCount.size();

		System.out.println(rowcount);

		for (int i = 0; i < rowcount; i++) 
		{
			String actName = stockLedgerHometableItemNamesList.get(i).getText();

			System.out.println(actName);

			if(actName.equalsIgnoreCase("Cust_ClubTransactionsOf_AllAccounts_Group"))
			{
				stockLedgerHometableItemChkboxList.get(i).click();
				break;
			}
		}


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterPropertiesBtn));
		masterPropertiesBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ClubTheTransactionsOfAllTheAccountsUnderGroupRadioBtnInProperties));
		ClubTheTransactionsOfAllTheAccountsUnderGroupRadioBtnInProperties.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(okBtnInAccountProperties));
		okBtnInAccountProperties.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterPropertiesBtn));
		masterPropertiesBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ClubTheTransactionsOfAllTheAccountsUnderGroupRadioBtnInProperties));

		boolean actClubTheTransactionsOfAllTheAccountsUnderGroupRadioBtnInProperties = ClubTheTransactionsOfAllTheAccountsUnderGroupRadioBtnInProperties.isSelected();
		boolean expClubTheTransactionsOfAllTheAccountsUnderGroupRadioBtnInProperties = true;


		System.out.println("ClubTheTransactionsOfAllTheAccountsUnderGroupRadioBtnInProperties   :" + actClubTheTransactionsOfAllTheAccountsUnderGroupRadioBtnInProperties+ "  Value Expected : " + expClubTheTransactionsOfAllTheAccountsUnderGroupRadioBtnInProperties);

		if (actClubTheTransactionsOfAllTheAccountsUnderGroupRadioBtnInProperties==expClubTheTransactionsOfAllTheAccountsUnderGroupRadioBtnInProperties) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}



	@FindBy (xpath="//*[@id='rbnDisplayDebitCreditTotalForEachAccountUnderGroup']")
	public static WebElement displayDebitCreditTotalsForEachAccountUnderGroupRadioBtnInProperties;


	@FindBy (xpath="//*[@id='rbnClubTranOfAllAcctsUnderGrpWhenDispInLedger']")
	public static WebElement ClubTheTransactionsOfAllTheAccountsUnderGroupRadioBtnInProperties;



	public static boolean checkRaiseSalesInvoivesVATForCustomerAccountOneInGroup() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.sendKeys("cust-club trans of all accts One");
		Thread.sleep(3000);
		customerAccountTxt.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.END);
		departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		departmentTxt.sendKeys(Keys.SPACE);

		int departmentcount=departmentListCount.size();

		System.err.println(departmentcount);

		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getText();

			if(data.equalsIgnoreCase("Dubai"))
			{
				departmentListCount.get(i).click();

				Thread.sleep(1000);

				if(getIsAlertPresent())
				{
					getAlert().accept();
				}

				break;
			}
		}

		departmentTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.END);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SHIFT,Keys.HOME);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SPACE);


		int placeOFSupplyListCount=placeOFSupplyList.size();

		System.err.println("placeOFSupplyListCount   : "+placeOFSupplyListCount);

		for(int i=0 ; i < placeOFSupplyListCount ;i++)
		{
			String data=placeOFSupplyList.get(i).getText();

			if(data.equalsIgnoreCase("Abu Dhabi"))
			{
				placeOFSupplyList.get(i).click();

				break;
			}
		}


		Thread.sleep(2000);

		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		jurisdictionTxt.click();
		jurisdictionTxt.sendKeys(Keys.END);
		jurisdictionTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		jurisdictionTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		jurisdictionTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys("Hyderabad");
		Thread.sleep(3000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(3000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("200");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_17thColumn));
		select1stRow_17thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Vat));
		enter_Vat.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));
		voucherSaveBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		String expSavingMessage1 = "Voucher saved successfully";

		String actSavingMessage = checkValidationMessage(expSavingMessage1);

		if(actSavingMessage.startsWith(expSavingMessage1))
		{
			return true;
		}
		else
		{
			return false;
		}


	}

	public static boolean checkRaiseSalesInvoivesVATForCustomerAccountTwoInGroup() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.sendKeys("cust-club trans of all accts two");
		Thread.sleep(3000);
		customerAccountTxt.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.END);
		departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		departmentTxt.sendKeys(Keys.SPACE);

		int departmentcount=departmentListCount.size();

		System.err.println(departmentcount);

		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getText();

			if(data.equalsIgnoreCase("Dubai"))
			{
				departmentListCount.get(i).click();

				Thread.sleep(1000);

				break;
			}
		}

		departmentTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.END);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SHIFT,Keys.HOME);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SPACE);


		int placeOFSupplyListCount=placeOFSupplyList.size();

		System.err.println("placeOFSupplyListCount   : "+placeOFSupplyListCount);

		for(int i=0 ; i < placeOFSupplyListCount ;i++)
		{
			String data=placeOFSupplyList.get(i).getText();

			if(data.equalsIgnoreCase("Abu Dhabi"))
			{
				placeOFSupplyList.get(i).click();

				break;
			}
		}


		Thread.sleep(2000);

		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		jurisdictionTxt.click();
		jurisdictionTxt.sendKeys(Keys.END);
		jurisdictionTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		jurisdictionTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		jurisdictionTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys("Hyderabad");
		Thread.sleep(3000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(3000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("200");
		enter_Rate.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_17thColumn));
		select1stRow_17thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Vat));
		enter_Vat.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));
		voucherSaveBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		String expSavingMessage1 = "Voucher saved successfully";
		String expSavingMessage2 = " : 10";
		String actSavingMessage = checkValidationMessage(expSavingMessage1);

		if(actSavingMessage.startsWith(expSavingMessage1) && actSavingMessage.endsWith(expSavingMessage2))
		{
			return true;
		}
		else
		{
			return false;
		}

	}


	public static boolean checkCustomerStatementsReportDetailsForGroupAccountCustCulbTransactionsOfAllAccountsUnderGroup() throws InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receivableAndPayableAnalysisMenu));
		receivableAndPayableAnalysisMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerDetailMenu));
		customerDetailMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerDetailsCustomerStatementsReport));
		customerDetailsCustomerStatementsReport.click();

		Thread.sleep(2000);

		int rowcount=stockLedgerHometableRowCount.size();

		System.out.println(rowcount);

		for (int i = 0; i < rowcount; i++) 
		{
			String actName = stockLedgerHometableItemNamesList.get(i).getText();

			System.out.println(actName);

			if(actName.equalsIgnoreCase("Cust_ClubTransactionsOf_AllAccounts_Group"))
			{
				stockLedgerHometableItemChkboxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();

		Thread.sleep(3000);

		int reportsByWarehouseRow1ListCount = reportsRow1List.size();
		ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
		{
			String data = reportsRow1List.get(i).getText();
			reportsByWarehouseRow1ListArray.add(data);
		}
		String actRow1List = reportsByWarehouseRow1ListArray.toString();
		String expRow1List = "[Cust_ClubTransactionsOf_AllAccounts_Group clubTransactions]";


		int reportsByWarehouseRow2ListCount = reportsRow2List.size();
		ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
		{
			String data = reportsRow2List.get(i).getText();
			if (i==13) 
			{
				reportsByWarehouseRow2ListArray.add("Delay in Payment");
			} 
			else 
			{
				reportsByWarehouseRow2ListArray.add(data);
			}
		}

		Calendar cal=Calendar.getInstance();
		SimpleDateFormat f = new SimpleDateFormat("dd/MM/yyyy");
		String currentDate = f.format(cal.getTime());

		String actRow2List = reportsByWarehouseRow2ListArray.toString();
		String expRow2List = "[NDT55:10, "+currentDate+", cust-club trans of all accts two, 210.00, , , 210.00, 210.00, 210.00, , , 210.00, Delay in Payment, Indian Rupees, "+currentDate+", custTwo]";


		int reportsByWarehouseRow3ListCount = reportsRow3List.size();
		ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
		{
			String data = reportsRow3List.get(i).getText();
			if (i==13) 
			{
				reportsByWarehouseRow3ListArray.add("Delay in Payment");
			}
			else 
			{
				reportsByWarehouseRow3ListArray.add(data);
			}

		}
		String actRow3List = reportsByWarehouseRow3ListArray.toString();
		String expRow3List = "[NDT55:9, "+currentDate+", cust-club trans of all accts One, 210.00, , , 210.00, 420.00, 210.00, , , 210.00, Delay in Payment, Indian Rupees, "+currentDate+", custOne]";


		int reportsByWarehouseRow4ListCount = reportsRow4List.size();
		ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow4ListCount;i++)
		{
			String data = reportsRow4List.get(i).getText();
			if (i==13) 
			{
				reportsByWarehouseRow4ListArray.add("Delay in Payment");
			} 
			else 
			{
				reportsByWarehouseRow4ListArray.add(data);
			}
		}
		String actRow4List = reportsByWarehouseRow4ListArray.toString();
		String expRow4List = "[Grand Total, , , 420.00, , , 420.00, 630.00, 420.00, , , 420.00, Delay in Payment, , , ]";

		System.out.println("*********************************checkCustomerStatementsReportDetailsForGroupAccountCustCulbTransactionsOfAllAccountsUnderGroup*****************************************");

		System.out.println("ActualRow1List Values   " +actRow1List);
		System.out.println("ExpectedRow1List Values " +expRow1List);

		System.out.println("ActualRow2List Values  " +actRow2List);
		System.out.println("ExpectedRow1List Values" +expRow2List);

		System.out.println("ActualRow3List Values  " +actRow3List);
		System.out.println("ExpectedRow3List Values" +expRow3List);


		System.out.println("ActualRow4List Values   " +actRow4List);
		System.out.println("ExpectedRow4List Values " +expRow4List);


		if (actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) 
				&& actRow3List.equalsIgnoreCase(expRow3List) &&  actRow4List.equalsIgnoreCase(expRow4List))
		{
			return true;
		}
		else
		{
			return false;
		}
	}









	// Display Debit/Credit totals for each Account under group


	public static boolean checkGroupAccountCreateAndSelectPropertyASDisplayDrOrCrTotalForEachAccountUnderGroup() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));		
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));		
		accounts.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterAddGroupBtn));		
		masterAddGroupBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("Cust_Display Debit/Credit totals for each Account under group");
		nameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("DrCrTotals");
		codeTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		Select accountTypeDrpdwn = new Select(accountTypeDropdown);
		accountTypeDrpdwn.selectByVisibleText("Customer");
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expSaveAccountMessage = "Saved Successfully";	
		String actSaveAccountMessage = checkValidationMessage(expSaveAccountMessage);

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();

		Thread.sleep(2000);

		int rowcount=stockLedgerHometableRowCount.size();

		System.out.println(rowcount);

		for (int i = 0; i < rowcount; i++) 
		{
			String actName = stockLedgerHometableItemNamesList.get(i).getText();

			System.out.println(actName);

			if(actName.equalsIgnoreCase("Cust_Display Debit/Credit totals for each Account under group"))
			{
				getAction().doubleClick(stockLedgerHometableItemChkboxList.get(i)).build().perform();
				break;
			}
		}

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtnInGrp));
		newBtnInGrp.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("Cust-display cr dr total each account one");
		nameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("customerOne");
		codeTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);
		accountTypeDrpdwn.selectByVisibleText("Customer");
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expSaveAccountMessage1 = "Saved Successfully";	
		String actSaveAccountMessage1 = checkValidationMessage(expSaveAccountMessage1);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("Cust-display cr dr total each account two");
		nameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("customerTwo");
		codeTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		accountTypeDrpdwn.selectByVisibleText("Customer");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expSaveAccountMessage2 = "Saved Successfully";	
		String actSaveAccountMessage2 = checkValidationMessage(expSaveAccountMessage2);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();

		Thread.sleep(3000);

		System.out.println("Click on Save With Valid Information Value Actual : " + actSaveAccountMessage + "  Value Expected : " + expSaveAccountMessage);

		if(actSaveAccountMessage.equalsIgnoreCase(expSaveAccountMessage) && actSaveAccountMessage1.equalsIgnoreCase(expSaveAccountMessage1)
				&& actSaveAccountMessage2.equalsIgnoreCase(expSaveAccountMessage2))
		{
			return true;
		}
		else
		{
			return false;
		}
	}







	public static boolean checkSavedGroupAccountInTheAccountsListAndSelectProprtyAsDisplayDrOrCrTotalForEachAccountUnderGroup() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));		
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));		
		accounts.click();

		Thread.sleep(2000);

		int rowcount=stockLedgerHometableRowCount.size();

		System.out.println(rowcount);

		for (int i = 0; i < rowcount; i++) 
		{
			String actName = stockLedgerHometableItemNamesList.get(i).getText();

			System.out.println(actName);

			if(actName.equalsIgnoreCase("Cust_Display Debit/Credit totals for each Account under group"))
			{
				stockLedgerHometableItemChkboxList.get(i).click();
				break;
			}
		}


		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterPropertiesBtn));
		masterPropertiesBtn.click();
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayDebitCreditTotalsForEachAccountUnderGroupRadioBtnInProperties));
		displayDebitCreditTotalsForEachAccountUnderGroupRadioBtnInProperties.click();
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(okBtnInAccountProperties));
		okBtnInAccountProperties.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterPropertiesBtn));
		masterPropertiesBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayDebitCreditTotalsForEachAccountUnderGroupRadioBtnInProperties));
		boolean actdisplayDebitCreditTotalsForEachAccountUnderGroupRadioBtnInProperties = displayDebitCreditTotalsForEachAccountUnderGroupRadioBtnInProperties.isSelected();
		boolean expdisplayDebitCreditTotalsForEachAccountUnderGroupRadioBtnInProperties = true;

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(okBtnInAccountProperties));
		okBtnInAccountProperties.click();


		System.out.println("displayDebitCreditTotalsForEachAccountUnderGroupRadioBtnInProperties :" + actdisplayDebitCreditTotalsForEachAccountUnderGroupRadioBtnInProperties+ "     Value Expected : " + expdisplayDebitCreditTotalsForEachAccountUnderGroupRadioBtnInProperties);

		if (actdisplayDebitCreditTotalsForEachAccountUnderGroupRadioBtnInProperties==expdisplayDebitCreditTotalsForEachAccountUnderGroupRadioBtnInProperties) 
		{

			return true;
		} 
		else 
		{

			return false;
		}
	}



	public static boolean checkRaiseSalesInvoivesVATForCustomerAccountOneInGroupForDrOrCrTotlas() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
		salesInvoiceVATVoucher.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.sendKeys("Cust-display cr dr total each account one");
		Thread.sleep(3000);
		customerAccountTxt.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.END);
		departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		departmentTxt.sendKeys(Keys.SPACE);

		int departmentcount=departmentListCount.size();

		System.err.println(departmentcount);

		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getText();

			if(data.equalsIgnoreCase("Dubai"))
			{
				departmentListCount.get(i).click();

				Thread.sleep(1000);

				if(getIsAlertPresent())
				{
					getAlert().accept();
				}

				break;
			}
		}

		departmentTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.END);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SHIFT,Keys.HOME);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SPACE);


		int placeOFSupplyListCount=placeOFSupplyList.size();

		System.err.println("placeOFSupplyListCount   : "+placeOFSupplyListCount);

		for(int i=0 ; i < placeOFSupplyListCount ;i++)
		{
			String data=placeOFSupplyList.get(i).getText();

			if(data.equalsIgnoreCase("Abu Dhabi"))
			{
				placeOFSupplyList.get(i).click();

				break;
			}
		}


		Thread.sleep(2000);

		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		jurisdictionTxt.click();
		jurisdictionTxt.sendKeys(Keys.END);
		jurisdictionTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		jurisdictionTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		jurisdictionTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys("Hyderabad");
		Thread.sleep(3000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(3000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("200");
		enter_Rate.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_17thColumn));
		select1stRow_17thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Vat));
		enter_Vat.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));
		voucherSaveBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		String expSavingMessage1 = "Voucher saved successfully";

		String actSavingMessage = checkValidationMessage(expSavingMessage1);

		if(actSavingMessage.startsWith(expSavingMessage1))
		{
			return true;
		}
		else
		{
			return false;
		}
	}





	public static boolean checkRaiseSalesInvoivesVATForCustomerAccountTwoInGroupForDrOrCrTotlas() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
		customerAccountTxt.sendKeys("Cust-display cr dr total each account two");
		Thread.sleep(3000);
		customerAccountTxt.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.END);
		departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		departmentTxt.sendKeys(Keys.SPACE);

		int departmentcount=departmentListCount.size();

		System.err.println(departmentcount);

		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getText();

			if(data.equalsIgnoreCase("Dubai"))
			{
				departmentListCount.get(i).click();

				Thread.sleep(1000);

				if(getIsAlertPresent())
				{
					getAlert().accept();
				}

				break;
			}
		}

		departmentTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
		salesInvoiceVATPlaceOFSupply.click();
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.END);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SHIFT,Keys.HOME);
		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.SPACE);


		int placeOFSupplyListCount=placeOFSupplyList.size();

		System.err.println("placeOFSupplyListCount   : "+placeOFSupplyListCount);

		for(int i=0 ; i < placeOFSupplyListCount ;i++)
		{
			String data=placeOFSupplyList.get(i).getText();

			if(data.equalsIgnoreCase("Abu Dhabi"))
			{
				placeOFSupplyList.get(i).click();

				break;
			}
		}


		Thread.sleep(2000);

		salesInvoiceVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		jurisdictionTxt.click();
		jurisdictionTxt.sendKeys(Keys.END);
		jurisdictionTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		jurisdictionTxt.sendKeys("DUBAI");
		Thread.sleep(2000);
		jurisdictionTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
		enter_WarehouseTxt.sendKeys("Hyderabad");
		Thread.sleep(3000);
		enter_WarehouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(3000);
		enter_ItemTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		select1stRow_8thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQTxt));
		enter_AQTxt.sendKeys("1");
		enter_AQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQTxt));
		enter_FQTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		select1stRow_12thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		select1stRow_14thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		enter_Rate.sendKeys("200");
		enter_Rate.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
		enter_Gross.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_17thColumn));
		select1stRow_17thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Vat));
		enter_Vat.sendKeys(Keys.TAB);


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));
		voucherSaveBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		billRefPickIcon.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		String expSavingMessage1 = "Voucher saved successfully";
		String expSavingMessage2 = " : 12";
		String actSavingMessage = checkValidationMessage(expSavingMessage1);

		if(actSavingMessage.startsWith(expSavingMessage1) && actSavingMessage.endsWith(expSavingMessage2))
		{
			return true;
		}
		else
		{
			return false;
		}

	}


	public static boolean checkCustomerStatementsReportForGroupAccountDisplayDrOrCrTotalsForEachAccountUnderGroup() throws InterruptedException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receivableAndPayableAnalysisMenu));
		receivableAndPayableAnalysisMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerDetailMenu));
		customerDetailMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerDetailsCustomerStatementsReport));
		customerDetailsCustomerStatementsReport.click();

		Thread.sleep(2000);

		int rowcount=stockLedgerHometableRowCount.size();

		System.out.println(rowcount);

		for (int i = 0; i < rowcount; i++) 
		{
			String actName = stockLedgerHometableItemNamesList.get(i).getText();

			System.out.println(actName);

			if(actName.equalsIgnoreCase("Cust_Display Debit/Credit totals for each Account under group"))
			{
				stockLedgerHometableItemChkboxList.get(i).click();
				break;
			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();

		Thread.sleep(3000);

		int reportsByWarehouseRow1ListCount = reportsRow1List.size();
		ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
		{
			String data = reportsRow1List.get(i).getText();
			reportsByWarehouseRow1ListArray.add(data);
		}
		String actRow1List = reportsByWarehouseRow1ListArray.toString();
		String expRow1List = "[Cust_Display Debit/Credit totals for each Account under group]";

		Calendar cal=Calendar.getInstance();
		SimpleDateFormat f = new SimpleDateFormat("dd/MM/yyyy");
		String currentDate = f.format(cal.getTime());

		int reportsByWarehouseRow2ListCount = reportsRow2List.size();
		ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
		{
			String data = reportsRow2List.get(i).getText();
			if (i==13) 
			{
				reportsByWarehouseRow2ListArray.add("Delay in Payment");
			} 
			else 
			{
				reportsByWarehouseRow2ListArray.add(data);
			}
			reportsByWarehouseRow2ListArray.add(data);
		}
		String actRow2List = reportsByWarehouseRow2ListArray.toString();
		String expRow2List = "[cust-club trans of all accts One, 210.00, , , 210.00, 210.00, 210.00, , , 210.00, Delay in Payment, Indian Rupees, "+currentDate+", custOne]";


		int reportsByWarehouseRow3ListCount = reportsRow3List.size();
		ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
		{
			String data = reportsRow3List.get(i).getText();
			if (i==13) 
			{
				reportsByWarehouseRow3ListArray.add("Delay in Payment");
			} 
			else 
			{
				reportsByWarehouseRow3ListArray.add(data);
			}
		}

		String actRow3List = reportsByWarehouseRow3ListArray.toString();
		String expRow3List = "[cust-club trans of all accts two, 210.00, , , 210.00, 420.00, 210.00, , , 210.00, Delay in Payment, Indian Rupees, "+currentDate+", custTwo]";


		int reportsByWarehouseRow4ListCount = reportsRow4List.size();
		ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow4ListCount;i++)
		{
			String data = reportsRow4List.get(i).getText();
			if (i==13) 
			{
				reportsByWarehouseRow4ListArray.add("Delay in Payment");
			} 
			else 
			{
				reportsByWarehouseRow4ListArray.add(data);
			}
		}

		String actRow4List = reportsByWarehouseRow4ListArray.toString();
		String expRow4List = "[Total, , , 420.00, , , 420.00, 630.00, 420.00, , , 420.00, Delay in Payment, , , ]";

		System.out.println("*********************************checkCustomerStatementsReportDetailsForCreatedCustomer*****************************************");

		System.out.println("ActualRow1List Values   " +actRow1List);
		System.out.println("ExpectedRow1List Values " +expRow1List);

		System.out.println("ActualRow2List Values  " +actRow2List);
		System.out.println("ExpectedRow1List Values" +expRow2List);

		System.out.println("ActualRow3List Values  " +actRow3List);
		System.out.println("ExpectedRow3List Values" +expRow3List);


		System.out.println("ActualRow4List Values   " +actRow4List);
		System.out.println("ExpectedRow4List Values " +expRow4List);


		if (actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) 
				&& actRow3List.equalsIgnoreCase(expRow3List) &&  actRow4List.equalsIgnoreCase(expRow4List))
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	
	public static boolean checkCreateNewDepartmentInDepartmentMaster() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		Thread.sleep(3000);
		getDriver().navigate().refresh();
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));		
		 mastersMenu.click();
		 
		 Thread.sleep(2000);
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentMenu));		
		 departmentMenu.click();
		 
		 Thread.sleep(2000);
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));		
		 masterNewBtn.click();
		 
		 Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("DUBAI ESTATES");
		nameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("UAE ESTATES");
		codeTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expSaveAccountMessage = "Saved Successfully";	
		String actSaveAccountMessage = checkValidationMessage(expSaveAccountMessage);

		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtn));
		closeBtn.click();

		System.out.println("Click on Save With Valid Information Value Actual : " + actSaveAccountMessage + "  Value Expected : " + expSaveAccountMessage);

		if(actSaveAccountMessage.equalsIgnoreCase(expSaveAccountMessage))
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	public static boolean checkAddNewFieldInGeneralTabInCustomizeMaster() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{

    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
		masterRibbonToExpandOptions.click();
		
		Thread.sleep(2000);
		

		Thread.sleep(2000);
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
		masterCustamizemasterBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(generalTab));	
		generalTab.click();
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(generalHeaderDetailsTab));	
		generalHeaderDetailsTab.click();
		Thread.sleep(2000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountAddBtn));	
		accountAddBtn.click();
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();
		extraFields_FieldDetailsCaption.sendKeys("DEPT");
		extraFields_FieldDetailsCaption.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		
		Select dataTypeDropdown = new Select(extraFields_FieldDetailsDatTypeDropdown);
		
		dataTypeDropdown.selectByValue("0");
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();
		
		Thread.sleep(2000);
		
		String expMessage = "Field Added Successfully.";
		String actMessage = checkValidationMessage(expMessage);
		
		if (actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	
		
	}
	
	
	@FindBy(xpath="//div[@id='HeaderDetails_0']/div/div/table/tbody/tr/td[4]")
	private static List<WebElement> GeneralTabfieldCaptionTxtList;
	
	
	@FindBy(xpath="//div[@id='HeaderDetails_0']/div/div/table/tbody/tr/td[1]/i[1]")
	private static List<WebElement> GeneralTabeditFieldList;
	
	@FindBy(xpath="//div[@id='HeaderDetails_0']/div/div/table/tbody/tr/td[1]/i[2]")
	private static List<WebElement> GeneralTabDeleteFieldList;
	
	@FindBy(xpath="//tbody[@id='ExtraField_MasterToLink_table_body']//tr//td[2]")
	private static List<WebElement> MastersList;
	
	
	//*[@id='divSecondsub']
	
	
	public static boolean checkEditCreatedFieldAndChangeDataTypeToMasterAndLinkToDepartmentMaster() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		try{
			
		Thread.sleep(2000);
		
		int count = fieldCaptionTxtList.size();
		//Text Field

				for (int i = 0; i < count; i++) 
				{
					String data = GeneralTabfieldCaptionTxtList.get(i).getText();

					if (data.equalsIgnoreCase("DEPT")) 
					{
						GeneralTabeditFieldList.get(i).click();
						break;
					} 
				}

				
				Select dataTypeDropdown = new Select(extraFields_FieldDetailsDatTypeDropdown);
				
				dataTypeDropdown.selectByValue("12");
				
				extraField_FieldDetailsMasterToLinkDropDown.sendKeys(Keys.SPACE);
				Thread.sleep(2000);
				
				int mastersCount = MastersList.size();
				ArrayList<String> mastersArray = new ArrayList<String>();
				for(int i=1;i<mastersCount;i++)
				{
					String data = MastersList.get(i).getText();
					mastersArray.add(data);
				}
				String actMastersList = mastersArray.toString();
				String expMastersList = "[Airline Sector, Bank Card Type, Bins, Break down standard reason, Capacity, Category, City, Cost Center, Counter, Country, Course, Course Type, Delivery Time Interval, Department, Designation, Discount Voucher Definition, E- Payment, Employee, Employee Bank, Expense Claims]";
				
				System.out.println("actMastersList: "+actMastersList);
				System.out.println("expMastersList: "+expMastersList);
				
				Thread.sleep(2000);
				
				Select alldata = new Select(extraFields_FieldDetailsInCludeGroups);
				alldata.selectByVisibleText("All Data");
				Thread.sleep(2000);
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraField_FieldDetailsMasterToLinkDropDown));
				extraField_FieldDetailsMasterToLinkDropDown.sendKeys(Keys.END);
				extraField_FieldDetailsMasterToLinkDropDown.sendKeys(Keys.SHIFT,Keys.HOME);
				extraField_FieldDetailsMasterToLinkDropDown.sendKeys("Department");		
				Thread.sleep(2000);
				extraField_FieldDetailsMasterToLinkDropDown.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraField_FieldDetailsMandatoryFields));
				boolean actualValue = extraField_FieldDetailsMandatoryFields.isDisplayed();
				boolean expectedValue = true;
				
				String FieldValues = extraField_FieldDetailsMandatoryFields.getText();
				System.out.println(FieldValues);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
				extraFields_OkBtn.click();
				
				Thread.sleep(2000);
				String expMessage = "Field Added Successfully";
				String actMessage = checkValidationMessage(expMessage);
				
				boolean actHeader;
				
				boolean expHeader;
				
				actHeader = generalHeaderDetailsTab.isDisplayed();
				expHeader = true;
				
					if (actMastersList.equalsIgnoreCase(expMastersList) && actMessage.equalsIgnoreCase(expMessage) && actHeader == expHeader)
					{
					 return true;
					}
				}
				
				catch(Exception e)
				{
					getDriver().navigate().refresh();
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
					homeMenu.click();
					
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
					mastersMenu.click();
					
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
					accounts.click();
					
					Thread.sleep(3000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterRibbonToExpandOptions));		
					masterRibbonToExpandOptions.click();
					
					Thread.sleep(2000);
					
					
					Thread.sleep(2000);
					 
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustamizemasterBtn));	
					masterCustamizemasterBtn.click();
					
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(generalTab));	
					generalTab.click();
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(generalHeaderDetailsTab));	
					generalHeaderDetailsTab.click();
					Thread.sleep(2000);
					
					
					Thread.sleep(2000);
					
					
					//Text Field
					
					int count = fieldCaptionTxtList.size();
					
							for (int i = 0; i < count; i++) 
							{
								String data = GeneralTabfieldCaptionTxtList.get(i).getText();

								if (data.equalsIgnoreCase("DEPT")) 
								{
									GeneralTabDeleteFieldList.get(i).click();
									break;
								} 
							}
							Thread.sleep(2000);
							
							FieldDltYesBtn.click();
							Thread.sleep(2000);
							
							String expDltMessage = "Field deleted Successfully";
							String actDltMessage = checkValidationMessage(expDltMessage);
							
							Thread.sleep(3000);
						
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountAddBtn));	
					accountAddBtn.click();
				
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
					extraFields_FieldDetailsCaption.click();
					extraFields_FieldDetailsCaption.sendKeys("DEPT");
					extraFields_FieldDetailsCaption.sendKeys(Keys.TAB);
					
					Thread.sleep(2000);
					
					Select dataTypeDropdown = new Select(extraFields_FieldDetailsDatTypeDropdown);
					dataTypeDropdown.selectByValue("12");
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraField_FieldDetailsMasterToLinkDropDown));
					extraField_FieldDetailsMasterToLinkDropDown.sendKeys("Department");		
					Thread.sleep(2000);
					extraField_FieldDetailsMasterToLinkDropDown.sendKeys(Keys.TAB);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
					extraFields_OkBtn.click();
					Thread.sleep(2000);
					
					String expMessage1 = "Field Added Successfully.";
					String actMessage1 = checkValidationMessage(expMessage1);
					
					Thread.sleep(2000);
					
					if(actMessage1.equalsIgnoreCase(expMessage1))
					{
						return true;
					}
					
				
				}
				return false;
				
	}
	
	@FindBy(xpath="(//div[@id='btnCloseMasterCutomizationFromMasterScreen'])[1]")
	private static WebElement customizeCloseBtn;
	
	public static boolean checkAddNewFieldForDeletionInGeneralTab() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountAddBtn));	
		accountAddBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();
		extraFields_FieldDetailsCaption.sendKeys("Deprtmnt");
		extraFields_FieldDetailsCaption.sendKeys(Keys.TAB);
		
		Thread.sleep(2000);
		Select dataTypeDropdown = new Select(extraFields_FieldDetailsDatTypeDropdown);
		
		dataTypeDropdown.selectByValue("12");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraField_FieldDetailsMasterToLinkDropDown));
		extraField_FieldDetailsMasterToLinkDropDown.sendKeys("Department");		
		Thread.sleep(2000);
		extraField_FieldDetailsMasterToLinkDropDown.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraField_FieldDetailsMandatoryFields));
		boolean actualValue = extraField_FieldDetailsMandatoryFields.isDisplayed();
		boolean expectedValue = true;
		
		String FieldValues = extraField_FieldDetailsMandatoryFields.getText();
		System.out.println(FieldValues);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();
		Thread.sleep(2000);
		
		String expMessage = "Field Added Successfully.";
		String actMessage = checkValidationMessage(expMessage);
		
		
		Thread.sleep(3000);
		
		int count = GeneralTabfieldCaptionTxtList.size();
		//Text Field

				for (int i = 0; i < count; i++) 
				{
					String data = GeneralTabfieldCaptionTxtList.get(i).getText();

					if (data.equalsIgnoreCase("Deprtmnt")) 
					{
						GeneralTabDeleteFieldList.get(i).click();
						break;
					} 
				}
				Thread.sleep(2000);
				
				FieldDltYesBtn.click();
				Thread.sleep(2000);
				
				String expDltMessage = "Field deleted Successfully";
				String actDltMessage = checkValidationMessage(expDltMessage);
				
				Thread.sleep(2000);
				
				/*
				customizeCloseBtn.click();
				Thread.sleep(2000);*/
		
		if (actMessage.equalsIgnoreCase(expMessage) && actDltMessage.equalsIgnoreCase(expDltMessage)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}

	}

	
	@FindBy(xpath="//*[text()='More']")
	private static WebElement moreBtnInCust;
	
	public static boolean checkAddCreatedbyIntoCustomizeTreeFields() throws InterruptedException
	{
		getDriver().navigate().refresh();
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();
		
		int count2 = masterGridHeaderList.size();
		
		for (int i = 0; i < count2; i++) 
		{
			String data = masterGridHeaderList.get(i).getText();
			if (data.equalsIgnoreCase("Code")) 
			{
				Thread.sleep(1000);
				getAction().contextClick(masterGridHeaderList.get(i)).build().perform();
			}
		}
		
		Thread.sleep(2000);
		moreBtnInCust.click();
		
		Thread.sleep(2000);
		
		int count1 = masterCustomizeTreePopupFieldsList.size();
		
		for (int i = 0; i < count1; i++) 
		{
			String data = masterCustomizeTreePopupFieldsList.get(i).getText();
			System.err.println(data);
			((JavascriptExecutor) getDriver()).executeScript("arguments[0].scrollIntoView(true);", masterCustomizeTreePopupFieldsList.get(i));
			
			if (data.equalsIgnoreCase("Created by")) 
			{
				masterCustomizeTreePopupChkboxList.get(i).click();
				break;
			}
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterCustomizeTreePopupOkBtn));
		masterCustomizeTreePopupOkBtn.click();
		Thread.sleep(3000);
		
		ArrayList<String> AccountHeaderAfterAddingColumn = new ArrayList<String>();
		
		for (int i = 0; i < count2; i++) 
		{
			String data = masterGridHeaderList.get(i).getText();
			AccountHeaderAfterAddingColumn.add(data);
		}
		
		String actAccountHeaderAfterAddingColumn = AccountHeaderAfterAddingColumn.toString();
		String expAccountHeaderAfterAddingColumn = "[, , MasterId, Name, Code, Account Type, CreateTab_NumberField]";
	
		System.out.println(actAccountHeaderAfterAddingColumn);
		System.out.println(expAccountHeaderAfterAddingColumn);
		
		Thread.sleep(2000);
		
		if (actAccountHeaderAfterAddingColumn.equalsIgnoreCase(expAccountHeaderAfterAddingColumn))
		{
			return true;
		} 
		else 
		{
			return false;
		}

		}
	
	
	@FindBy(xpath="//*[@id='DEPT']")
	private static WebElement deptLinkInAccountMaster;  
	
	public static boolean checkSaveAccountMasterWithCreatedDepartmentLink() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));		
		mastersMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));		
		accounts.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));		
		masterNewBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("AccountForCustomizationOne");
		nameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("AccountForCustomizationOne");
		codeTxt.sendKeys(Keys.TAB);
		
		Select accountTypeDrpdwn = new Select(accountTypeDropdown);
		
		accountTypeDrpdwn.selectByVisibleText("Customer / Vendor");	
		
		Thread.sleep(2000);

		deptLinkInAccountMaster.sendKeys("DUBAI ESTATES");
		Thread.sleep(2000);
		deptLinkInAccountMaster.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		String expSaveAccountMessage = "Saved Successfully";	
		String actSaveAccountMessage = checkValidationMessage(expSaveAccountMessage);

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("AccountForCustomizationTwo");
		nameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("AccountForCustomizationTwo");
		codeTxt.sendKeys(Keys.TAB);
		
		accountTypeDrpdwn.selectByVisibleText("Customer / Vendor");	
		
		Thread.sleep(2000);
		
		deptLinkInAccountMaster.sendKeys("DUBAI ESTATES");
		Thread.sleep(2000);
		deptLinkInAccountMaster.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		actSaveAccountMessage = checkValidationMessage(expSaveAccountMessage);



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("AccountForCustomizationThree");
		nameTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("AccountForCustomizationThree");
		codeTxt.sendKeys(Keys.TAB);
		
		accountTypeDrpdwn.selectByVisibleText("Customer / Vendor");	
		
		Thread.sleep(2000);
		

		deptLinkInAccountMaster.sendKeys("DUBAI ESTATES");
		Thread.sleep(2000);
		deptLinkInAccountMaster.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SaveBtn));
		SaveBtn.click();

		actSaveAccountMessage = checkValidationMessage(expSaveAccountMessage);

		if (actSaveAccountMessage.equalsIgnoreCase(expSaveAccountMessage)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}


	}
	
	@FindBy(xpath="//li//*[text()='Sales Invoices']")
	private static WebElement salesInvVoucher;
	
	@FindBy(xpath="//*[@class='icon-settings hiconright2']")
	private static WebElement voucherSettingsBtn;
	
	@FindBy(xpath="//select[@id='doc_Accountdepandency_Filter']")
	private static WebElement accountFilterDropDown;
	
	

	@FindBy(xpath="//*[@id='btnCustomizeClose']")
	private static WebElement custCloseBtn;
	
	public static boolean checkAccountFilterAsDEPTInSalesInvoiceSettingsBtn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{

		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
		
		Thread.sleep(2000);
					
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvVoucher));
		salesInvVoucher.click();
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSettingsBtn));
		voucherSettingsBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentsTab));
		documentsTab.click();
		
		Select accFilter = new Select(accountFilterDropDown);
		accFilter.selectByVisibleText("DEPT");
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		Thread.sleep(2000);
	
		
		String expMessage = "Data saved successfully";
		String actMessage = checkValidationMessage(expMessage);
		
		String actSelectedOption = accFilter.getFirstSelectedOption().getText();
		String expSelectedOption = "DEPT";
	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custCloseBtn));
		custCloseBtn.click();
		
		
		if (actMessage.equalsIgnoreCase(expMessage) && actSelectedOption.equalsIgnoreCase(expSelectedOption)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
		
	}
	
	 @FindBy(xpath="//input[@id='id_header_3']")
	   	private static WebElement  salesAccountTxt; 
	 
	 @FindBy(xpath="//tbody[@id='id_header_3_table_body']//tr//td[2]")
	   	private static List<WebElement> salesAccountList; 
	 
	 @FindBy(xpath="//*[@id='id_header_268435459']")
	   	private static WebElement  deptTxt; 
	 
	 
	 
	//table[@id='id_header_4_input_container']//tbody//tr/td[2]
	 
	
	public static boolean checkAccountListInCreatedDepartmentLink() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkValidationMessage("Screen opened");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountTxt));
		salesAccountTxt.sendKeys("Sales - Computers");
		Thread.sleep(2000);
		salesAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deptTxt));
		deptTxt.sendKeys("DUBAI ESTATES");
		Thread.sleep(2000);
		deptTxt.sendKeys(Keys.TAB);
		
		customerAccountTxt.sendKeys(Keys.SPACE);
		
		ArrayList<String>  actVendorAccountList= new ArrayList<String>(); 
		
		int count=vendorAccountListCount.size();

		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=vendorAccountListCount.get(i).getText();
			
			actVendorAccountList.add(data);
		}
		
		String actList = actVendorAccountList.toString();
		String expList = "[AccountForCustomizationOne, AccountForCustomizationThree, AccountForCustomizationTwo]";
		
		System.out.println("actList: "+actList);
		System.out.println("expList: "+expList);
		
		if (actList.equalsIgnoreCase(expList)) 
		{
			return true;
		} 
		else
		{
			return false;
		}
		
	}
	
	public static boolean checkAccountlListWithoutCreatedDeptLinkMaster() throws InterruptedException
	{
		Thread.sleep(3000);

		getDriver().navigate().refresh();
		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvVoucher));
		salesInvVoucher.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		Thread.sleep(3000);
		deptTxt.sendKeys(Keys.END);
		deptTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deptTxt));
		deptTxt.sendKeys("INDIA");
		Thread.sleep(2000);
		deptTxt.sendKeys(Keys.TAB);
		Thread.sleep(3000);

		customerAccountTxt.sendKeys(Keys.SPACE);

		int count=vendorAccountListCount.size();
		int expCount = 0;

		Boolean actdata =false;

		System.err.println(count);

		for(int i=0 ; i < count ;i++)
		{
			actdata=vendorAccountListCount.get(i).getText().isEmpty();

		}

		if(count == expCount)
		{
			return true;
		}

		else
		{
			return false;
		}


	}
	
	
	@FindBy(xpath="//*[@id='id_header_268435460']")
	private static WebElement warehseTxt;
	
	@FindBy(xpath="//input[@id='id_body_33554464']")
	private static WebElement  enter_salesInvoiceFQ;
	
	
	public static boolean checkSaveSalesInvoiceVoucherWithCreatedAccountsLinkedWithDepartment() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
		
		Thread.sleep(2000);
					
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvVoucher));
		salesInvVoucher.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkValidationMessage("Screen opened");
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountTxt));
		salesAccountTxt.sendKeys(Keys.SPACE);
		
		ArrayList<String>  actVendorAccountList= new ArrayList<String>(); 
		
		int count=salesAccountList.size();

		System.err.println(count);
		
		for(int i=0 ; i < count ;i++)
		{
			String data=salesAccountList.get(i).getText();
			
			actVendorAccountList.add(data);
		}
		
		String actList = actVendorAccountList.toString();
		String expList = "[Legal Fee, Sales - Computers, Sales - Electronics, Sales - Home Appliances, SR COGS POSTING ACC, Uninvoiced DO, Utility charges]";
		
		System.out.println("actList: "+actList);
		System.out.println("expList: "+expList);
		
		salesAccountTxt.sendKeys("Sales - Computers");
		Thread.sleep(2000);
		salesAccountTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deptTxt));
		deptTxt.sendKeys("DUBAI ESTATES");
		Thread.sleep(2000);
		deptTxt.sendKeys(Keys.TAB);
		
		customerAccountTxt.sendKeys("AccountForCustomizationOne");
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.TAB);
		
		warehseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		warehseTxt.sendKeys(Keys.TAB);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		 select1stRow_1stColumn.click();
		 Thread.sleep(1000);


		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		 enter_ItemTxt.click();
		 enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		 Thread.sleep(2000);
		 enter_ItemTxt.sendKeys(Keys.TAB);

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		 select1stRow_5thColumn.click();
		 Thread.sleep(1000);


		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_salesInvoiceFQ));
		 enter_salesInvoiceFQ.click();
		 enter_salesInvoiceFQ.sendKeys(Keys.END);
		 enter_salesInvoiceFQ.sendKeys(Keys.SHIFT,Keys.HOME);
		 enter_salesInvoiceFQ.sendKeys("3");
		 Thread.sleep(2000);
		 enter_salesInvoiceFQ.sendKeys(Keys.TAB);


		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
		 select1stRow_8thColumn.click();
		 Thread.sleep(1000);


		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		 enter_Quantity.click();

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		 select1stRow_11thColumn.click();
		 Thread.sleep(1000);


		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		 enter_Rate.click();
		 enter_Rate.sendKeys(Keys.END);
		 enter_Rate.sendKeys(Keys.SHIFT,Keys.HOME);
		 enter_Rate.sendKeys("10");
		 Thread.sleep(1000);
		 enter_Rate.sendKeys(Keys.TAB);
		 Thread.sleep(2000);
		 
		 enter_Gross.click();
		 Thread.sleep(1000);
		 enter_Gross.sendKeys(Keys.TAB);
		 Thread.sleep(2000);
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));
		 voucherSaveBtn.click();
		 Thread.sleep(1000);
		 
		 Thread.sleep(2000);
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newReferenceTxt));
		 newReferenceTxt.click();

		 Thread.sleep(2000);
		 Thread.sleep(2000);

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		 billRefPickIcon.click();

		 Thread.sleep(2000);

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		 billRefOkBtn.click();

		 String expMessage = "Voucher saved successfully";
		 String actMessage = checkValidationMessage(expMessage);

		 if (actList.equalsIgnoreCase(expList) && actMessage.startsWith(expMessage)) 
		 {
			 return true;
		 }
		 else 
		 {
			 return false;
		 }
	
	}
	
	public static boolean checkPreviouslySavedVoucherandValidate() throws InterruptedException
	{
		Thread.sleep(2000);
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		 previousBtn.click();
		 
		 Thread.sleep(2000);
		 
		 String actSalesTxt = salesAccountTxt.getAttribute("data-focustext");
		 String expSalesTxt = "Sales - Computers";
		 
		 String actCustomerTxt = customerAccountTxt.getAttribute("data-focustext");
		 String expCustomerTxt = "AccountForCustomizationOne";
		 
		 String actDepartMentTxt= deptTxt.getAttribute("data-focustext");
		 String expDepartMentTxt = "DUBAI ESTATES";
		 
		 String actWarehouseTxt = warehseTxt.getAttribute("data-focustext");
		 String expWarehouseTTxt = "HYDERABAD";
		 
		 
		 System.out.println("actSalesTxt: "+actSalesTxt);
		 System.out.println("expSalesTxt: "+expSalesTxt);
		 
		 System.out.println("actCustomerTxt: "+actCustomerTxt);
		 System.out.println("expCustomerTxt: "+expCustomerTxt);
		 
		 System.out.println("actDepartMentTxt: "+actDepartMentTxt);
		 System.out.println("expDepartMentTxt: "+expDepartMentTxt);

		 System.out.println("actWarehouseTxt: "+actWarehouseTxt);
		 System.out.println("expWarehouseTTxt: "+expWarehouseTTxt);
		 
		 Thread.sleep(3000);
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherClosebtn));
		 voucherClosebtn.click();
		 
		 
		 if (actSalesTxt.equalsIgnoreCase(expSalesTxt) && actCustomerTxt.equalsIgnoreCase(expCustomerTxt)
				 && actWarehouseTxt.equalsIgnoreCase(expWarehouseTTxt))
		 {
			
			 return true;
		} 
		 else 
		 {
			 return false;
		}
		 
		 
	}
	
	@FindBy(xpath="//*[@id='misc_PostingSelectAccInLine']//following-sibling::span")
	public static WebElement selectAccountInEveryLineChkBox;
	
	@FindBy(xpath="//*[@id='misc_PostingSelectAccInLine']")
	public static WebElement selectAccountInEveryLineChkBoxSelected;
	
	public static boolean checkSaveWithSelectAccountInLineUnderMiscellaneousTabInSalesInvoiceSettings() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
		
		Thread.sleep(2000);
					
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvVoucher));
		salesInvVoucher.click();
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSettingsBtn));
		voucherSettingsBtn.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousTabInDC));
		miscellaneousTabInDC.click();
		
		Thread.sleep(2000);
		
		JavascriptExecutor jse = (JavascriptExecutor)getDriver();
		jse.executeScript("arguments[0].scrollIntoView(true);", postingDetailsEpandBtn);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(postingDetailsEpandBtn));
		postingDetailsEpandBtn.click();
		
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAccountInEveryLineChkBox));
		selectAccountInEveryLineChkBox.click();
		

		Thread.sleep(2000);
		
		jse.executeScript("arguments[0].scrollIntoView(true);", updateBtn);
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
		updateBtn.click();
		
		Thread.sleep(2000);
	
		
		String expMessage = "Data saved successfully";
		String actMessage = checkValidationMessage(expMessage);
		Thread.sleep(2000);
		
		boolean actSelectedOption = selectAccountInEveryLineChkBoxSelected.isSelected();
		boolean expSelectedOption = true;
	
		
		System.err.println("actSelectedOption;"+actSelectedOption);
		System.err.println("expSelectedOption;"+expSelectedOption);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(custCloseBtn));
		custCloseBtn.click();

		if (actMessage.equalsIgnoreCase(expMessage) && 
				actSelectedOption == expSelectedOption)
		{
			return true;
		} 
		else 
		{
			return false;
		}
		
	}
	
	@FindBy(xpath="//*[@id='id_body_12']")
	private static WebElement salesAccountText;
	
	public static boolean checkSalesInvoiceVoucherBodyGridList() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
		
		Thread.sleep(2000);
					
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvVoucher));
		salesInvVoucher.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();
		
		checkValidationMessage("Screen opened");
		

		ArrayList<String> headerList = new ArrayList<String>();
		
		int pvVATHeaderCount = pvVATHeaderFieldList.size();
		for (int i = 0; i < pvVATHeaderCount; i++)
		{	
			Thread.sleep(1000);
			((JavascriptExecutor) getDriver()).executeScript("arguments[0].scrollIntoView(true);", pvVATHeaderFieldList.get(i));
			
			String data = pvVATHeaderFieldList.get(i).getText();
			System.err.println(i+". "+data);
			headerList.add(data);
		}
		
		String actHeaderList = headerList.toString();
		String expHeaderList = "[Item, Sales Account, Units, RD, AQ, FQ, Avg Rate, Avg Rate(O), Quantity, L-Stock Transfers, Quantity to release, Rate, Gross, Discount, Batch, Bins, RMA, Remarks, , , , , , , ]";
		
		System.out.println(actHeaderList);
		System.out.println(expHeaderList);
		
		if (actHeaderList.equalsIgnoreCase(expHeaderList))
		{
			return true;
		} 
		else 
		{
			return false;
		}
		
	}
	
	
	public static boolean checkSaveSalesInvoiceVoucherAfterSavingWithSelectingAccountInEveryLine() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(2000);
		getDriver().navigate().refresh();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();
		
		Thread.sleep(2000);
					
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
		financialsTransactionMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialTransactionSalesMenu));
		financialTransactionSalesMenu.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvVoucher));
		salesInvVoucher.click();
		
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deptTxt));
		deptTxt.sendKeys("DUBAI ESTATES");
		Thread.sleep(2000);
		deptTxt.sendKeys(Keys.TAB);
		
		customerAccountTxt.sendKeys("AccountForCustomizationTwo");
		Thread.sleep(2000);
		customerAccountTxt.sendKeys(Keys.TAB);
		
		warehseTxt.sendKeys("HYDERABAD");
		Thread.sleep(2000);
		warehseTxt.sendKeys(Keys.TAB);
		
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		 select1stRow_1stColumn.click();
		 Thread.sleep(1000);


		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		 enter_ItemTxt.click();
		 enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		 Thread.sleep(2000);
		 enter_ItemTxt.sendKeys(Keys.TAB);
		 
		 salesAccountText.sendKeys(Keys.END);
		 salesAccountText.sendKeys(Keys.SHIFT,Keys.HOME);
		 Thread.sleep(1000);
		 salesAccountText.sendKeys("Sales - Computers");
		 Thread.sleep(2000);
		 salesAccountText.sendKeys(Keys.TAB);

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
		 select1stRow_6thColumn.click();
		 Thread.sleep(1000);


		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_salesInvoiceFQ));
		 enter_salesInvoiceFQ.click();
		 enter_salesInvoiceFQ.sendKeys(Keys.END);
		 enter_salesInvoiceFQ.sendKeys(Keys.SHIFT,Keys.HOME);
		 enter_salesInvoiceFQ.sendKeys("3");
		 Thread.sleep(2000);
		 enter_salesInvoiceFQ.sendKeys(Keys.TAB);


		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		 select1stRow_9thColumn.click();
		 Thread.sleep(1000);


		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		 enter_Quantity.click();

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 select1stRow_12thColumn.click();
		 Thread.sleep(1000);


		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		 enter_Rate.click();
		 enter_Rate.sendKeys(Keys.END);
		 enter_Rate.sendKeys(Keys.SHIFT,Keys.HOME);
		 enter_Rate.sendKeys("10");
		 Thread.sleep(1000);
		 enter_Rate.sendKeys(Keys.TAB);
		 Thread.sleep(2000);
		 
		 enter_Gross.click();
		 Thread.sleep(1000);
		 enter_Gross.sendKeys(Keys.TAB);
		 Thread.sleep(2000);
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));
		 voucherSaveBtn.click();
		 Thread.sleep(1000);
		 
		 Thread.sleep(2000);
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newReferenceTxt));
		 newReferenceTxt.click();

		 Thread.sleep(2000);
		 Thread.sleep(2000);

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		 billRefPickIcon.click();

		 Thread.sleep(2000);

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		 billRefOkBtn.click();

		 String expMessage = "Voucher saved successfully";
		 String actMessage = checkValidationMessage(expMessage);

		 if (actMessage.startsWith(expMessage)) 
		 {
			 return true;
		 }
		 else 
		 {
			 return false;
		 }
	
	}
	
	@FindBy(xpath="//tbody[@id='id_body_12_table_body']//tr//td[2]")
	private static List<WebElement>  salesAccountListIBodyGrid;

	public static boolean checkEditPreviouslySavedSalesInvoiceVoucher() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(2000);
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		 previousBtn.click();
		 
		 Thread.sleep(2000);
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		 select2ndRow_1stColumn.click();
		 Thread.sleep(1000);

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		 enter_ItemTxt.click();
		 enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		 Thread.sleep(2000);
		 enter_ItemTxt.sendKeys(Keys.TAB);
		 
		 salesAccountText.sendKeys(Keys.END);
		 salesAccountText.sendKeys(Keys.SHIFT,Keys.HOME);
		 Thread.sleep(1000);
		 salesAccountText.sendKeys(Keys.SPACE);
		 
		 ArrayList<String>  actVendorAccountList= new ArrayList<String>(); 
			
			int count=salesAccountListIBodyGrid.size();

			System.err.println(count);
			
			for(int i=0 ; i < count ;i++)
			{
				String data=salesAccountListIBodyGrid.get(i).getText();
				
				actVendorAccountList.add(data);
			}
			
			String actList = actVendorAccountList.toString();
			String expList = "[Legal Fee, Sales - Computers, Sales - Electronics, Sales - Home Appliances, SR COGS POSTING ACC, Uninvoiced DO, Utility charges]";
			
			System.out.println("actList: "+actList);
			System.out.println("expList: "+expList);
			
		 
		 salesAccountText.sendKeys("Sales - Electronics");
		 Thread.sleep(2000);
		 salesAccountText.sendKeys(Keys.TAB);

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_6thColumn));
		 select2ndRow_6thColumn.click();
		 Thread.sleep(1000);

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_salesInvoiceFQ));
		 enter_salesInvoiceFQ.click();
		 enter_salesInvoiceFQ.sendKeys(Keys.END);
		 enter_salesInvoiceFQ.sendKeys(Keys.SHIFT,Keys.HOME);
		 enter_salesInvoiceFQ.sendKeys("3");
		 Thread.sleep(2000);
		 enter_salesInvoiceFQ.sendKeys(Keys.TAB);


		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
		 select2ndRow_9thColumn.click();
		 Thread.sleep(1000);


		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
		 enter_Quantity.click();

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_12thColumn));
		 select2ndRow_12thColumn.click();
		 Thread.sleep(1000);


		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
		 enter_Rate.click();
		 enter_Rate.sendKeys(Keys.END);
		 enter_Rate.sendKeys(Keys.SHIFT,Keys.HOME);
		 enter_Rate.sendKeys("10");
		 Thread.sleep(1000);
		 enter_Rate.sendKeys(Keys.TAB);
		 Thread.sleep(2000);
		 
		 enter_Gross.click();
		 Thread.sleep(1000);
		 enter_Gross.sendKeys(Keys.TAB);
		 Thread.sleep(2000);
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));
		 voucherSaveBtn.click();
		 Thread.sleep(1000);
		 
		 Thread.sleep(2000);
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newReferenceTxt));
		 newReferenceTxt.click();

		 Thread.sleep(2000);
		 Thread.sleep(2000);

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefPickIcon));
		 billRefPickIcon.click();

		 Thread.sleep(2000);

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		 billRefOkBtn.click();

		 String expMessage = "Voucher saved successfully";
		 String actMessage = checkValidationMessage(expMessage);
		 
		 if (actList.equalsIgnoreCase(expList) && actMessage.startsWith(expMessage))
		 {
			return true;
		} 
		 
		 else 
		 {
			 return false;
		}
		 
	}
	
	@FindBy(xpath="//*[@class='icon-close d-none d-md-block hiconright2']")
	private static WebElement  voucherClosebtn;
	
	
	public static boolean checkSavedSalesInvoiceVoucherandValidateBothHeaderAndBodyFields() throws InterruptedException
	{

		Thread.sleep(2000);
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
		 previousBtn.click();
		 
		 Thread.sleep(2000);
		 
		
		 String actCustomerTxt = customerAccountTxt.getAttribute("data-focustext");
		 String expCustomerTxt = "AccountForCustomizationTwo";
		 
		 String actDepartMentTxt= deptTxt.getAttribute("data-focustext");
		 String expDepartMentTxt = "DUBAI ESTATES";
		 
		 String actWarehouseTxt = warehseTxt.getAttribute("data-focustext");
		 String expWarehouseTTxt = "HYDERABAD";
		 
		 
		 String actSalesTxt = select1stRow_2ndColumn.getText();
		 String expSalesTxt = "Sales - Computers";
		 
		 String actSalesTxt1 = select2ndRow_2ndColumn.getText();
		 String expSalesTxt1 = "Sales - Electronics";
		 
		 
		 
		 System.out.println("actSalesTxt: "+actSalesTxt);
		 System.out.println("expSalesTxt: "+expSalesTxt);
		 
		 System.out.println("actSalesTxt: "+actSalesTxt1);
		 System.out.println("expSalesTxt: "+expSalesTxt1);
		 
		 System.out.println("actCustomerTxt: "+actCustomerTxt);
		 System.out.println("expCustomerTxt: "+expCustomerTxt);
		 
		 System.out.println("actDepartMentTxt: "+actDepartMentTxt);
		 System.out.println("expDepartMentTxt: "+expDepartMentTxt);

		 System.out.println("actWarehouseTxt: "+actWarehouseTxt);
		 System.out.println("expWarehouseTTxt: "+expWarehouseTTxt);
		 
		 Thread.sleep(3000);
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherClosebtn));
		 voucherClosebtn.click();
		 
		 
		 if (actSalesTxt.equalsIgnoreCase(expSalesTxt)  && actSalesTxt1.equalsIgnoreCase(expSalesTxt1) && actCustomerTxt.equalsIgnoreCase(expCustomerTxt)
				 && actWarehouseTxt.equalsIgnoreCase(expWarehouseTTxt) && actDepartMentTxt.equalsIgnoreCase(expDepartMentTxt))
		 {
			
			 return true;
		} 
		 else 
		 {
			 return false;
		}
		 
	}

	
	
	@FindBy(xpath="//*[@id='tab_BodyDetails_6']")
	public static WebElement bodyDetailsInCreateTab;
	
	public static boolean checkSaveCreateTab_TextFieldInBodyFiledsCustomizationMasterCreateTab() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		Thread.sleep(2000);
		
		
		checkOpenCustomizeMasterInAccounts();
		Thread.sleep(5000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bodyDetailsInCreateTab));
		bodyDetailsInCreateTab.click();
		
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabHeaderDetailsAddFieldsBtn));
		createTabHeaderDetailsAddFieldsBtn.click();
		
		Thread.sleep(3000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsTab));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();
		extraFields_FieldDetailsCaption.sendKeys("CreateTab_TextField_InBody");
		extraFields_FieldDetailsCaption.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		Select dataTypeDropdown = new Select(extraFields_FieldDetailsDatTypeDropdown);

		dataTypeDropdown.selectByValue("0");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMessage = "Field Added Successfully.";
		String actMessage = checkValidationMessage(expMessage);

		if (actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
		
	}
	

	public static boolean checkSaveCreateTab_NumberFieldInBodyFiledsCustomizationMasterCreateTab() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabHeaderDetailsAddFieldsBtn));
		createTabHeaderDetailsAddFieldsBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsTab));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();
		extraFields_FieldDetailsCaption.sendKeys("CreateTab_NumberField_InBody");
		extraFields_FieldDetailsCaption.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		Select dataTypeDropdown = new Select(extraFields_FieldDetailsDatTypeDropdown);

		dataTypeDropdown.selectByValue("1");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsBannerText));
		extraFields_FieldDetailsBannerText.click();
		extraFields_FieldDetailsBannerText.sendKeys("NumberField_BannerText_InBody");
		extraFields_FieldDetailsBannerText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsToolTipText));
		extraFields_FieldDetailsToolTipText.click();
		extraFields_FieldDetailsToolTipText.sendKeys("NumberField_ToolTipText_InBody");
		extraFields_FieldDetailsToolTipText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMessage = "Field Added Successfully.";
		String actMessage = checkValidationMessage(expMessage);

		if (actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}
	
	
	public static boolean checkSaveCreateTab_PictureFieldInBodyFiledsCustomizationMasterCreateTab() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabHeaderDetailsAddFieldsBtn));
		createTabHeaderDetailsAddFieldsBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsTab));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();
		extraFields_FieldDetailsCaption.sendKeys("CreateTab_PictureField_InBody");
		extraFields_FieldDetailsCaption.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		Select dataTypeDropdown = new Select(extraFields_FieldDetailsDatTypeDropdown);

		dataTypeDropdown.selectByValue("7");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsToolTipText));
		extraFields_FieldDetailsToolTipText.click();
		extraFields_FieldDetailsToolTipText.sendKeys("PictureField_ToolTipText_InBody");
		extraFields_FieldDetailsToolTipText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();

		String expMessage = "Field Added Successfully.";
		String actMessage = checkValidationMessage(expMessage);

		if (actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	
	}
	
	public static boolean checkSaveCreateTab_DocumentViewerFieldInBodyFiledsCustomizationMasterCreateTab() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabHeaderDetailsAddFieldsBtn));
		createTabHeaderDetailsAddFieldsBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsTab));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();
		extraFields_FieldDetailsCaption.sendKeys("CreateTab_DocumentViewerField_InBody");
		extraFields_FieldDetailsCaption.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		Select dataTypeDropdown = new Select(extraFields_FieldDetailsDatTypeDropdown);

		dataTypeDropdown.selectByValue("10");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();
		Thread.sleep(1000);

		String expMessage = "Field Added Successfully.";
		String actMessage = checkValidationMessage(expMessage);

		if (actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	
	}

	
	public static boolean checkSaveCreateTab_MasterFieldInBodyFiledsCustomizationMasterCreateTab() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createTabHeaderDetailsAddFieldsBtn));
		createTabHeaderDetailsAddFieldsBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsTab));

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsCaption));
		extraFields_FieldDetailsCaption.click();
		extraFields_FieldDetailsCaption.sendKeys("CreateTab_MasterField_InBody");
		extraFields_FieldDetailsCaption.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		Select dataTypeDropdown = new Select(extraFields_FieldDetailsDatTypeDropdown);

		dataTypeDropdown.selectByValue("12");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsBannerText));
		extraFields_FieldDetailsBannerText.click();
		extraFields_FieldDetailsBannerText.sendKeys("MasterField_BannerText_InBody");
		extraFields_FieldDetailsBannerText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_FieldDetailsToolTipText));
		extraFields_FieldDetailsToolTipText.click();
		extraFields_FieldDetailsToolTipText.sendKeys("MasterField_ToolTipText_InBody");
		extraFields_FieldDetailsToolTipText.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraField_FieldDetailsMasterToLinkDropDown));
		extraField_FieldDetailsMasterToLinkDropDown.sendKeys("Account");		
		Thread.sleep(2000);
		extraField_FieldDetailsMasterToLinkDropDown.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraField_FieldDetailsMandatoryFields));
		boolean actualValue = extraField_FieldDetailsMandatoryFields.isDisplayed();
		boolean expectedValue = true;

		String FieldValues = extraField_FieldDetailsMandatoryFields.getText();
		System.out.println(FieldValues);



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(extraFields_OkBtn));
		extraFields_OkBtn.click();
		Thread.sleep(2000);

		String expMessage = "Field Added Successfully.";
		String actMessage = checkValidationMessage(expMessage);

		if (actMessage.equalsIgnoreCase(expMessage)) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	
	}

	
	@FindBy(xpath="//*[@id='CreateTabTextFieldInBody1']")
	public static WebElement bodyCreateTabTextField;  

	@FindBy(xpath="//*[@id='CreateTabNumberFieldInBody1']")
	public static WebElement bodyCreateTabNumField;

	@FindBy(xpath="//*[@id='CreateTabDocumentViewerFieldInBody1']")
	public static WebElement  bodyCreateDocField;
	
	@FindBy(xpath="//*[@id='CreateTabMasterFieldInBody1']")
	public static WebElement bodyCreateTabMasterField;  

	@FindBy(xpath="//*[@id='uploadBtnCreateTabDocumentViewerFieldInBody1']")
	public static WebElement  bodyDocuumentBrowserBtn;

	@FindBy(xpath="(//tbody[@id='tblMasterNewGeneratorBody']//a[@id='SaveImg'])[2]")
	public static WebElement bodyDocumentSaveBtn;

	@FindBy(xpath="(//tbody[@id='tblMasterNewGeneratorBody']//i[@class='fa fa-eraser RemoveImg'])[2]")
	public static WebElement bodyDocumentRemoveBtn;
	
	public static boolean checkAddedFiledsInBodyFieldsInCreateTab() throws InterruptedException
	{

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(mastersMenu));
		mastersMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accounts));
		accounts.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterNewBtn));	
		masterNewBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(nameTxt));
		nameTxt.sendKeys("Demo Account");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(codeTxt));
		codeTxt.sendKeys("Demo Code");

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountHeaderCreateTab));
		accountHeaderCreateTab.click();

		Thread.sleep(2000);
		
		JavascriptExecutor jse = (JavascriptExecutor)getDriver();
		jse.executeScript("arguments[0].scrollIntoView(true);", bodyCreateTabTextField);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bodyCreateTabTextField));
		boolean actText = bodyCreateTabTextField.isDisplayed();
		boolean expText = true;
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bodyCreateTabNumField));
		boolean actNumber = bodyCreateTabNumField.isDisplayed();
		boolean expNumber = true;
		
		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(bodyCreateDocField));
		boolean actDocument = bodyCreateDocField.isEnabled();
		boolean expDocument = false;
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bodyCreateTabMasterField));
		boolean actMaster = bodyCreateTabMasterField.isDisplayed();
		boolean expMaster = true;
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bodyDocuumentBrowserBtn));
		boolean actDocumentBrowse = bodyDocuumentBrowserBtn.isDisplayed();
		boolean expDocumentBrowse = true;
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bodyDocumentSaveBtn));
		boolean actDocumentSave = bodyDocumentSaveBtn.isDisplayed();
		boolean expDocumentSave = true;
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bodyDocumentRemoveBtn));
		boolean actDocumentRemove = bodyDocumentRemoveBtn.isDisplayed();
		boolean expDocumentRemove = true;
		
		
		System.out.println("actText :"+actText +"value expected"+expText);
		
		System.out.println("actNumber :"+actNumber +"value expected"+expNumber);
		
		System.out.println("actDocument :"+actDocument +"value expected"+expDocument);
		
		System.out.println("actMaster :"+actMaster +"value expected"+expMaster);
		
		System.out.println("actDocumentBrowse :"+actDocumentBrowse +"value expected"+expDocumentBrowse);
		
		System.out.println("actDocumentSave :"+actDocumentSave +"value expected"+expDocumentSave);
		
		System.out.println("actDocumentRemove :"+actDocumentRemove +"value expected"+expDocumentRemove);
		
		
		if (actText == expText && actNumber==expNumber
				&& actDocument == expDocument && actMaster == expMaster
				&& actDocumentBrowse == expDocumentBrowse && actDocumentSave == expDocumentSave
				&& actDocumentRemove == expDocumentRemove)
		{
			return true;
		}
		else 
		{
			return false;
		}

	}
	
	
	public static boolean checkCreateUserInAccountRestrictUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getDriver().navigate().refresh();
		Thread.sleep(3000);
		
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		 homeMenu.click();
						
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(securityMenu));
		 securityMenu.click();

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserMenu));
		 createUserMenu.click();
		
		 Thread.sleep(2000);
	    
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserIcon));
		 createUserIcon.click();
		 
		 Thread.sleep(10000);
		 
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserLoginNameTxt));
		 createUserLoginNameTxt.click();
		 createUserLoginNameTxt.sendKeys("DemoUser");

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserERPRoleDropDown));
		 createUserERPRoleDropDown.click();
		 createUserERPRoleDropDown.sendKeys("SampleRole1");
		 
	     int count = createUserERPRolesDropdownOptions.size()-1;
		 System.out.println("Count "+ count);
	    
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserPasswordTxt));
		 createUserPasswordTxt.sendKeys("123123");

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserConfirmPasswordTxt));
		 createUserConfirmPasswordTxt.sendKeys("123123");
		 	
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserNameTxt));
		 createUserNameTxt.sendKeys("UserCreation");
		 	
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserLoginAbbrivationTxt));
		 createUserLoginAbbrivationTxt.sendKeys("UC");
		 
		 createUserSecurityQuestionDropDown.click();
		 Select s = new Select(createUserSecurityQuestionDropDown);
		 s.selectByVisibleText("In which county were you born?");

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserSecurityAnswerTxt));	
		 createUserSecurityAnswerTxt.sendKeys("India");
		 	 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(getLanguage));
			 getLanguage.click();
			 int counnt = createUserLanguageDropdownList.size()-1;
			 String actLanguageDropdownCount = Integer.toString(counnt);
			 String expLanguageDropdownCount = "2";
			 
			 Set LanguageDropdownList = new HashSet<String>();
			 
			 for (int i = 1; i < counnt; i++) 
			 {
				 String data = createUserLanguageDropdownList.get(i).getText();
				 LanguageDropdownList.add(data);
			 }
			 
			 String actLanguageDropdownList = LanguageDropdownList.toString();
			 String expLanguageDropdownList = "[English, Arabic]";
			 
			 System.out.println("LanguageDropdownCount  : "+actLanguageDropdownCount  +"  value expected  "+expLanguageDropdownCount);
			 System.out.println("LanguageDropdownList   : "+actLanguageDropdownList   +"  value expected  "+expLanguageDropdownList);
			 
			 getLanguage.sendKeys(Keys.TAB);
			 
			 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(getAltLanguage));
				 getAltLanguage.click();
				 int cont = createUserAltLanguageDropdownList.size()-1;
				 String actAltLanguageDropdownCount = Integer.toString(count);
				 String expAltLanguageDropdownCount ="2";
				 
				 Set AltLanguageDropdownList = new HashSet<String>();
				 
				 for (int i = 1; i < cont; i++) 
				 {
					 String data = createUserAltLanguageDropdownList.get(i).getText();
					 AltLanguageDropdownList.add(data);
				 }
				 
				 String actAltLanguageDropdownList = AltLanguageDropdownList.toString();
				 String expAltLanguageDropdownList = "[English, Arabic]";
				 
				 getAltLanguage.sendKeys(Keys.TAB);
				 
				 Thread.sleep(2000);
		 
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserAdditionalInfoTab));
				 createUserAdditionalInfoTab.click();

				 Thread.sleep(2000);
		 
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserUserTypeDrpDwn));
			 Select user = new Select(createUserUserTypeDrpDwn);
			 user.selectByVisibleText("Customer");
		 
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserEmailTxt));
			createUserEmailTxt.click();
			createUserEmailTxt.clear();
			createUserEmailTxt.sendKeys("customer@focussoftnet.com");

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserSaveIcon));
		 createUserSaveIcon.click();
		 
		 String expMessage = "new user created successfully";
		 String actMessage = checkValidationMessage(expMessage);
		 
		 System.out.println(actMessage);
		 System.out.println(expMessage);
		 
		 
	     if (actMessage.equalsIgnoreCase(expMessage)) 
	     {
	    	 return true;
	 	 } 
	 	 else 
	 	 {
			return false;
	 	 }

	}
	
	
	public static boolean checkLogoutAndLoginWithCreatedUser() throws InterruptedException
	{

		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(LogoutDropdown));
		LogoutDropdown.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		logoutOption.click();
		
		Thread.sleep(4000);
		
		LoginPage lp=new LoginPage(getDriver()); 
			
	    String unamelt="DemoUser";
	  
	    String pawslt="123123";
	    
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
	    username.click();
	    Thread.sleep(2000);
		username.clear();
	    Thread.sleep(2000);
	    username.sendKeys(unamelt);
	    getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
		password.click();
		Thread.sleep(2000);
		password.clear();
		Thread.sleep(2000);
		password.sendKeys(pawslt);
		
		
		
		String compname="Account Properties And Customization";
		
		/*String compname="Automation Company";*/
		
		Select oSelect = new Select(companyDropDownList);
		 
		List <WebElement> elementCount = oSelect.getOptions();
		
		int cqSize = elementCount.size();
		 
		int zqSize=cSize+1;
		 
		System.out.println("CompanyDropdownList Count :"+cqSize);
		 
		System.out.println("Company dropdown is :"+ zqSize);
	 
	 
		//Select dropdown= new Select(lp.companyDropDownList);
	    int i;
		  
		//List<WebElement> list = dropdown.getOptions();

		//List<String> text = new ArrayList<>();
		for(i=0; i<elementCount.size(); i++) 
		{
			elementCount.get(i).getText();
			String optionName = elementCount.get(i).getText();
			if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
			{
				System.out.println("q"+elementCount.get(i).getText());
				elementCount.get(i).click();
			}	
		}

	    
	    lp.clickOnSignInBtn();
	    
	    //checkRefershPopOnlogin();
	    
	    //checkPopUpWindow();
	    
	    Thread.sleep(8000);
	          
	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
	   	userNameDisplay.click();
	           	
		String userInfo=userNameDisplay.getText();
		
		System.out.println("User Info : "+userInfo);
		
		System.out.println("User Info Capture Text :"+userNameDisplay.getText());
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogoImg));
		
		companyLogoImg.click();
		
		String getCompanyTxt=companyName.getText();
		String getLoginCompanyName=getCompanyTxt.substring(0, 19);
		System.out.println("company name :"+ getLoginCompanyName);
		companyLogoImg.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dashboard));
		
		String getDashboard=dashboard.getText();
		
		System.out.println(getDashboard);
		
	    
	    String expuserInfo            ="DemoUser";
	    String expLoginCompanyName    ="Account Properties ";
	    String expDashboard			  ="Dashboard";
	   
		
		System.out.println("***********************************checkLogin*********************************");
	    
	    System.out.println("User Info                        : "+userInfo               +"  value expected  "+expuserInfo);
	    System.out.println("Login Company Name               : "+getLoginCompanyName    +"  value expected  "+expLoginCompanyName);
	    System.out.println("Dashboard                        : "+getDashboard           +"  value expected  "+expDashboard);
	   
	  
		if(userInfo.equalsIgnoreCase(expuserInfo) /*&& getLoginCompanyName.equalsIgnoreCase(expLoginCompanyName)*/)
		{	
			return true;
		}	 
		else
		{
			return false;
		}
	 
	}
	
	public static boolean checkEditCreatedUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{

		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		 homeMenu.click();
					
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(securityMenu));
		 securityMenu.click();

	    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserMenu));
	    createUserMenu.click();
	  
	    Thread.sleep(4000);
		 
		 int actUsersCount=createUserSavedUsersList.size();
		 
		 System.out.println(actUsersCount);
		 
		 for (int i = 0; i < actUsersCount; i++) 
		 {
			 String actUser=createUserSavedUsersList.get(i).getText();
			 
			 if (actUser.equalsIgnoreCase("DemoUser")) 
			 {
				 createUserSavedUsersList.get(i).click();
				 
				 Thread.sleep(3000);
				 
				 break;
			 }
		 }
				 Thread.sleep(2000);
				 
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserPasswordTxt));
				 createUserPasswordTxt.click();
				 createUserPasswordTxt.sendKeys(Keys.END);
				 createUserPasswordTxt.sendKeys(Keys.SHIFT, Keys.HOME);
				 createUserPasswordTxt.sendKeys("456456");
				 createUserPasswordTxt.sendKeys(Keys.TAB);
				 
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserConfirmPasswordTxt));
				 createUserConfirmPasswordTxt.click();
				 createUserConfirmPasswordTxt.sendKeys(Keys.END);
				 createUserConfirmPasswordTxt.sendKeys(Keys.SHIFT, Keys.HOME);
				 createUserConfirmPasswordTxt.sendKeys("456456");
				 createUserConfirmPasswordTxt.sendKeys(Keys.TAB);
				 
				 Thread.sleep(2000);
				 
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserNameTxt));
				 createUserNameTxt.click();
				 createUserNameTxt.sendKeys(Keys.END);
				 createUserNameTxt.sendKeys(Keys.SHIFT, Keys.HOME);
				 createUserNameTxt.sendKeys("UCTest");
				 
				 for (int i = 0; i < 5; i++) 
				 {
					 if (validationConfirmationMessage.getText().isEmpty()==false) 
					 {
						checkValidationMessage("");
					 }
				 }
				 
				 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserSaveIcon));
				 createUserSaveIcon.click();
				 
				 String expMessage = "User updated successfully.";
				 String actMessage = checkValidationMessage(expMessage);
				 
				 if (actMessage.equalsIgnoreCase(expMessage)) 
				 {
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserCloseIcon));
					 createUserCloseIcon.click();
					return true;
				 }
				 else 
				 {
					 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserCloseIcon));
					 createUserCloseIcon.click();
					
					 return false;
				 }
		 
	}
	
	
	public static boolean checkDeleteCreatedUser() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		 homeMenu.click();
					
		 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(securityMenu));
		 securityMenu.click();

	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserMenu));
	     createUserMenu.click();
	   
	     Thread.sleep(4000);
		 
		 int actUsersCount=createUserSavedUsersList.size();
		 
		 for (int i = 0; i < actUsersCount; i++) 
		 {
			 String actUser=createUserSavedUsersList.get(i).getText();
			 System.out.println(actUser);
			 
			 if (actUser.equalsIgnoreCase("DemoUser"))
			 {
				 createUserSavedUsersList.get(i).click();
				 
				 Thread.sleep(2000);
				 break;
			 }
		 }
		 
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserDeleteIcon));
		createUserDeleteIcon.click();
		Thread.sleep(2000);
		
		getWaitForAlert();
		
		getAlert().accept();
		Thread.sleep(2000);
		
		String expMessage = "User is deleted successfully";
		String actMessage = checkValidationMessage(expMessage);
		
		if (actMessage.equalsIgnoreCase(expMessage)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserCloseIcon));
			createUserCloseIcon.click();
			
			return true;
		} 
		else 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(createUserCloseIcon));
			createUserCloseIcon.click();
			return false;
		}

	}
	
	
	
	
	
	


	
			
	
	
	
	
	/////////////////////////

	@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_RestrictFormula_textbox']")
	public static WebElement editScreenRestrictFormulaBtn;  

	@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_behaviour']")
	public static WebElement editScreenAddFieldsBehaviourDropdown;

	@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Formula_textbox']")
	public static WebElement  editScreenAddBehaviourformulaTxt;

	@FindBy(xpath="//button[@id='editScreen_FieldsCustomization_Formula_Ok']")
	public static WebElement  editScreenAddBehaviourFormulaokBtn;

	@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_textbox']")
	public static WebElement editScreenPreloadTxt;

	@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_PreLoad_textbox']")
	public static WebElement editScreenRestrictformulaTxt;

	@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_RoundOff']")
	public static WebElement editScreenRoundOffsDropdown;

	@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_RoundOffTo']")
	public static WebElement editScreenRoundOffToTxt;

	@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_RestrictMsg']")
	public static WebElement editScreenRestrictMessageTxt;

	@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_AddToNet']")
	public static WebElement editScreenAddToNetDropdown;

	@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_AddToStock']")
	public static WebElement EditScreenAddToStockDropDown;

	@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_Position']")
	public static WebElement editScreenpositionDropdown;  

	@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Columnwidth']")
	public static WebElement editScreenColumnWidthTxt;  

	@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_FieldDetails']/div[19]/div[1]/div[1]/label/span")
	public static WebElement editScreenValueInBaseCurrencyChkBox;  

	@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_FieldDetails']/div[19]/div[2]/label/span")
	public static WebElement editScreenHideFromSummaryChkBox;  

	@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_FieldDetails']/div[20]/fieldset/legend/label/span")
	public static WebElement editScreenPostToAccountChkBox;  

	@FindBy(xpath="//input[@id='acc1-1']")
	public static WebElement editScreenAccount1Radio;  

	@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_defaultAcc1']")
	public static WebElement editScreenAccount1Txt;  


	//////////
	// Adding fields in the purchase voucher VAT


	@FindBy(xpath="//*[@id='770' and text()='Purchases Voucher VAT']")
	public static WebElement  purchasesVoucherVatBtn;








	public static boolean checkAddingFieldsWithDefaultMinimumAndMaximumValuesInPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		Thread.sleep(3000);
		
		getDriver().navigate().refresh();
		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PreferencesBtn));
		PreferencesBtn.click();
		
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(DocumentCustomizationBtn));
		DocumentCustomizationBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesVoucherVatBtn));
		purchasesVoucherVatBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTabInDC));
		editScreenTabInDC.click();

		Thread.sleep(3000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenaddBtn));
		editScreenaddBtn.click();

		getWaitForAlert();

		String actAlertTxt				=getAlert().getText();
		String expAlertTxt				="This field must be Map in linked vouchers";

		getAlert().accept();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
		editScreenCaptionTxt.sendKeys("Caption_Default_Text");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenDefaultValueTxt));
		editScreenDefaultValueTxt.sendKeys("5");
		editScreenDefaultValueTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenNoOfDecimalsTxt));
		editScreenNoOfDecimalsTxt.sendKeys("2");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenToolTipTxt));
		editScreenToolTipTxt.sendKeys("Default_ToolTipText");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBannerTextTxt));
		editScreenBannerTextTxt.sendKeys("Default_BannerText");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenMinimunValueTxt));
		editScreenMinimunValueTxt.sendKeys("5");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenMaximunValueTxt));
		editScreenMaximunValueTxt.sendKeys("10");



		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenApplyBtn));
		editScreenApplyBtn.click();		



		String expMessage = "Data saved successfully";
		String actMessage = checkValidationMessage(expMessage);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UpdateBtn));
		UpdateBtn.click();		




		if (actMessage.equalsIgnoreCase(expMessage))
		{
			return  true;
		} 
		else 
		{
			return false;

		}
	}


	//for PV VAT


	@FindBy(xpath="//a[@id='61']//span[contains(text(),'Transactions')]")
	public static WebElement  transactionsExpandBtn;

	@FindBy(xpath="//a[@id='2007']//span[contains(text(),'Purchases')]")
	public static WebElement  purchasesExpandBtn;

	@FindBy(xpath="//*[@id='2057']/span")
	public static WebElement  purchasesVoucherVATBtn;


	@FindBy(xpath="//div[@id='id_transaction_homescreen_edit']//span[@class='icon-edit icon-font6 ImagesinArabic']")
	public static WebElement  editBtn;

	@FindBy(xpath="//span[@class='icon-print icon-font6']")
	public static WebElement  printBtn;


	@FindBy(xpath="//span[@class='icon-authorize icon-font6']")
	public static WebElement  authorizeBtn;

	@FindBy(xpath="//span[@class='icon-suspend icon-font6']")
	public static WebElement  suspendBtn;

	@FindBy(xpath="//span[@class='icon-reject2 icon-font6']")
	public static WebElement  rejectBtn;

	@FindBy(xpath="//span[@class='icon-cheque icon-font6']")
	public static WebElement  chequeReturnBtn;

	@FindBy(xpath="//span[@class='icon-printbarcode icon-font6']")
	public static WebElement  printBarCodeBtn;

	@FindBy(xpath="//div[@id='myNavbar']//span[@class='icon-settings icon-font6']")
	public static WebElement  settingsBtn;

	@FindBy(xpath="//div[@id='dvHomeTransClose']//span[@class='icon-close icon-font6']")  
	public static WebElement  homeCloseBtn;











	@FindBy(xpath="//input[@id='id_header_268435470']")
	public static WebElement purchaseVoucherVATPlaceOFSupply;

	@FindBy(xpath="//tbody[@id='id_header_268435470_table_body']/tr/td[2]")
	public static List<WebElement>  placeOFSupplyList;

	@FindBy(xpath="//input[@id='id_header_268435471']")
	public static WebElement  jurisdictionTxtt;


	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[2]")
	public static WebElement  select1stRow_1stColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[3]")
	public static WebElement  select1stRow_2ndColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[4]")
	public static WebElement  select1stRow_3rdColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[5]")
	public static WebElement  select1stRow_4thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[6]")
	public static WebElement  select1stRow_5thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[7]")
	public static WebElement  select1stRow_6thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[8]")
	public static WebElement  select1stRow_7thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[9]")
	public static WebElement  select1stRow_8thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[10]")
	public static WebElement  select1stRow_9thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[11]")
	public static WebElement  select1stRow_10thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[12]")
	public static WebElement  select1stRow_11thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[13]")
	public static WebElement  select1stRow_12thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[14]")
	public static WebElement  select1stRow_13thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[15]")
	public static WebElement  select1stRow_14thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[16]")
	public static WebElement  select1stRow_15thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[17]")
	public static WebElement  select1stRow_16thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[18]")
	public static WebElement  select1stRow_17thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[19]")
	public static WebElement  select1stRow_18thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[20]")
	public static WebElement  select1stRow_19thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[21]")
	public static WebElement  select1stRow_20thColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[22]")
	public static WebElement  select1stRow_21stColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[23]")
	public static WebElement  select1stRow_22ndColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[24]")
	public static WebElement  select1stRow_23rdColumn;

	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[25]")
	public static WebElement  select1stRow_24thColumn;

	@FindBy(xpath="//input[@id='id_body_536870916']")
	public static WebElement  pvWareHouseTxt;




	@FindBy(xpath="//*[@id='id_body_33554540']")
	public static WebElement  enter_CaptionDefaultTxt;

	@FindBy(xpath="//*[@id='id_body_33554541']")
	public static WebElement  enter_addToNetDeductFromStock;


	@FindBy(xpath="//*[@id='id_body_33554542']")
	public static WebElement  enter_AddToNetNotApplicableToStock;

	@FindBy(xpath="//*[@id='id_body_33554543']")
	public static WebElement  enter_DeductAddToNetAddToStock;

	@FindBy(xpath="//*[@id='id_body_33554544']")
	public static WebElement  enter_NotApplicableAddToNetAddToStock;

	@FindBy(xpath="//*[@id='id_body_33554545']")
	public static WebElement  enter_DeductAddToNetDeductAddToStock;

	@FindBy(xpath="//*[@id='id_body_33554546']")
	public static WebElement  enter_NotApplicableAddToNetNotApplicableAddToStock;


	@FindBy(xpath="//*[@id='id_body_27']")
	public static WebElement  enter_RateTxt;

	@FindBy(xpath="//*[@id='id_body_28']")
	public static WebElement  enter_GrossTxt;


	@FindBy(xpath="//*[@id='id_body_33554521']")
	public static WebElement  enter_VATTxt;

	@FindBy(xpath="//*[@id='id_transactionentry_footer_panel_summary_value_net']/span[2]")
	public static WebElement  netvalue;



	@FindBy(xpath="//*[@id='id_Pick']/a/span")
	public static WebElement bellRefPickIcon;

	@FindBy(xpath="//*[@id='id_Ok']/a/span")
	public static WebElement billRefOkBtn;



	public static boolean CheckAllFieldsInPurchaseVoucherVAT() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionsExpandBtn));
		transactionsExpandBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesExpandBtn));
		purchasesExpandBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesVoucherVATBtn));
		purchasesVoucherVATBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("Screen opened");



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(3000);
		vendorAccountTxt.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.END);
		departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		departmentTxt.sendKeys(Keys.SPACE);

		int departmentcount=departmentListCount.size();

		System.err.println(departmentcount);

		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getText();

			if(data.equalsIgnoreCase("Dubai"))
			{
				departmentListCount.get(i).click();

				Thread.sleep(1000);

				if(getIsAlertPresent())
				{
					getAlert().accept();
				}

				break;
			}
		}

		departmentTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherVATPlaceOFSupply));
		purchaseVoucherVATPlaceOFSupply.click();
		purchaseVoucherVATPlaceOFSupply.sendKeys(Keys.END);
		purchaseVoucherVATPlaceOFSupply.sendKeys(Keys.SHIFT,Keys.HOME);
		purchaseVoucherVATPlaceOFSupply.sendKeys(Keys.SPACE);


		int placeOFSupplyListCount=placeOFSupplyList.size();

		System.err.println("placeOFSupplyListCount   : "+placeOFSupplyListCount);

		for(int i=0 ; i < placeOFSupplyListCount ;i++)
		{
			String data=placeOFSupplyList.get(i).getText();

			if(data.equalsIgnoreCase("Abu Dhabi"))
			{
				placeOFSupplyList.get(i).click();

				break;
			}
		}


		Thread.sleep(2000);

		purchaseVoucherVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxtt));
		jurisdictionTxtt.click();
		jurisdictionTxtt.sendKeys(Keys.END);
		jurisdictionTxtt.sendKeys(Keys.SHIFT,Keys.HOME);
		jurisdictionTxtt.sendKeys("DUBAI");
		Thread.sleep(2000);
		jurisdictionTxtt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys("Hyderabad");
		Thread.sleep(3000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(3000);
		enter_ItemTxt.sendKeys(Keys.TAB);


		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		String actDefaultValue =  select1stRow_9thColumn.getText();	
		System.out.println("Actual Default Value:   "+actDefaultValue);
		String expDefaultValue = "5.00";

		select1stRow_9thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_CaptionDefaultTxt));
		enter_CaptionDefaultTxt.sendKeys("15");
		enter_CaptionDefaultTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		String actMaximumValue = select1stRow_9thColumn.getText();	
		String expMaximumValue = "10.00";
		System.out.println("Actual Maximum Value:   "+actMaximumValue);

		select1stRow_9thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_CaptionDefaultTxt));
		enter_CaptionDefaultTxt.sendKeys("0");
		enter_CaptionDefaultTxt.sendKeys(Keys.TAB);
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		String actMinimumValue = select1stRow_9thColumn.getText();
		String expMinimumValue = "5.00";
		System.out.println("Actual Minimum Value:   "+actMinimumValue);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_10thColumn));
		String actAddToNetDeductStock = select1stRow_10thColumn.getText();
		String expAddToNetDeductStock = "5.00";


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		String actAddToNetNotApplicableToStock = select1stRow_11thColumn.getText();
		String expAddToNetNotApplicableToStock = "2.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		String actDeductAddToNetAddToStock= select1stRow_12thColumn.getText();
		String expDeductAddToNetAddToStock = "3.00";



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		String actNotApplicableAddToNetAddToStock= select1stRow_13thColumn.getText();
		String expNotApplicableAddToNetAddToStock = "2.00";



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		String actDeductAddToNetDeductAddToStock= select1stRow_14thColumn.getText();
		String expDeductAddToNetDeductAddToStock = "2.00";



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_15thColumn));
		String actNotApplicableAddToNetNotApplicableAddToStock= select1stRow_15thColumn.getText();
		String expNotApplicableAddToNetNotApplicableAddToStock = "2.00";


		select1stRow_15thColumn.click();
		enter_NotApplicableAddToNetNotApplicableAddToStock.sendKeys(Keys.TAB);

		enter_Quantity.sendKeys("10");
		/*enter_Quantity.sendKeys(Keys.TAB);*/


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(netvalue));
		String actNetValueBeforeAddingRateAndGross=netvalue.getText();
		String expNetValueBeforeAddingRateAndGross = "7.00";

		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
		select1stRow_18thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RateTxt));
		enter_RateTxt.clear();
		enter_RateTxt.sendKeys("10");
		enter_RateTxt.sendKeys(Keys.TAB);

		enter_GrossTxt.click();
		enter_GrossTxt.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_21stColumn));
		select1stRow_21stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_VATTxt));
		enter_VATTxt.click();
		enter_VATTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(netvalue));
		String actNetValueAfterAddingRateAndGross=netvalue.getText();
		String expNetValueAfterAddingRateAndGross = "112.00";

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));
		voucherSaveBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bellRefPickIcon));
		bellRefPickIcon.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		String expSavingMessage1 = "Voucher saved successfully";

		String actSavingMessage = checkValidationMessage(expSavingMessage1);


		Thread.sleep(3000);	

		System.out.println("actual def value: "+actAddToNetDeductStock  +"Expected defualt value: "+expAddToNetDeductStock);
		System.out.println("actual def value: "+actAddToNetNotApplicableToStock  +"Expected defualt value: "+expAddToNetNotApplicableToStock);
		System.out.println("actual def value: "+actDeductAddToNetAddToStock  +"Expected defualt value: "+expDeductAddToNetAddToStock);
		System.out.println("actual def value: "+actNotApplicableAddToNetAddToStock  +"Expected defualt value: "+expNotApplicableAddToNetAddToStock);
		System.out.println("actual def value: "+actDeductAddToNetDeductAddToStock  +"Expected defualt value: "+expDeductAddToNetDeductAddToStock);
		System.out.println("actual def value: "+actNotApplicableAddToNetNotApplicableAddToStock  +"Expected defualt value: "+expNotApplicableAddToNetNotApplicableAddToStock);
		System.out.println("actual def value: "+actNetValueBeforeAddingRateAndGross  +"Expected defualt value: "+expNetValueBeforeAddingRateAndGross);
		System.out.println("actual def value: "+actNetValueAfterAddingRateAndGross  +"Expected defualt value: "+expNetValueAfterAddingRateAndGross);


		if (actDefaultValue.equalsIgnoreCase(expDefaultValue) && actMaximumValue.equalsIgnoreCase(expMaximumValue)
				&& actMinimumValue.equalsIgnoreCase(expMinimumValue) && actAddToNetDeductStock.equalsIgnoreCase(expAddToNetDeductStock)
				&& actAddToNetNotApplicableToStock.equalsIgnoreCase(expAddToNetNotApplicableToStock)
				&& actDeductAddToNetAddToStock.equalsIgnoreCase(expDeductAddToNetAddToStock)
				&& actNotApplicableAddToNetAddToStock.equalsIgnoreCase(expNotApplicableAddToNetAddToStock)
				&& actDeductAddToNetDeductAddToStock.equalsIgnoreCase(expDeductAddToNetDeductAddToStock)
				&& actNotApplicableAddToNetNotApplicableAddToStock.equalsIgnoreCase(expNotApplicableAddToNetNotApplicableAddToStock)
				&& actNetValueBeforeAddingRateAndGross.equalsIgnoreCase(expNetValueBeforeAddingRateAndGross)
				&& actNetValueAfterAddingRateAndGross.equalsIgnoreCase(expNetValueAfterAddingRateAndGross))
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}




	@FindBy(xpath="//*[@id='551']/span")
	public static WebElement StockledgerBtn; 


	@FindBy (xpath="//*[@id='txtsrch-term']")
	public static WebElement accountSearchTextArea;

	@FindBy (xpath="(//*[@id='lblnchecked']/input)[1]")
	public static WebElement accountsFirtCheckbox;

	@FindBy(xpath="//*[@id='81']")
	public static WebElement reportsMenuInFinancials; 


	@FindBy(xpath="//*[@id='500']/span")
	public static WebElement ledgerBtn; 


	@FindBy(xpath="//*[@id='id_mainreportmenuheadings']/ul/li[7]/a/i")
	public static WebElement ledgerOkBtn; 

	@FindBy(xpath="//*[@id='DvHeaderReport_4af20d6b-6ac8-42a9-996e-488869dca826']/div/nav/div/nav/ol/li/a")
	public static WebElement ledgerTitle;


	@FindBy(xpath="//*[@id='rptheading']/div/span[2]")
	public static WebElement stockLedgerTile;

	@FindBy(xpath="//table[@class='CommonReportTable']/tbody/tr[1]/td")
	public static List<WebElement> reportsRow1List;

	@FindBy(xpath="//table[@class='CommonReportTable']/tbody/tr[2]/td")
	public static List<WebElement> reportsRow2List;

	@FindBy(xpath="//table[@class='CommonReportTable']/tbody/tr[3]/td")
	public static List<WebElement> reportsRow3List;

	@FindBy(xpath="//table[@class='CommonReportTable']/tbody/tr[4]/td")
	public static List<WebElement> reportsRow4List;



	public static boolean checkLedgerReportForAddToNetOption() throws InterruptedException
	{
		Thread.sleep(2000);
		getDriver().navigate().refresh();
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));		
		finacinalsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportsMenuInFinancials));		
		reportsMenuInFinancials.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledgerBtn));		
		ledgerBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountSearchTextArea));		
		accountSearchTextArea.sendKeys("Vendor A");
		accountSearchTextArea.sendKeys(Keys.ENTER);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountsFirtCheckbox));		
		accountsFirtCheckbox.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledgerOkBtn));		
		ledgerOkBtn.click();

		Thread.sleep(2000);


		int reportsRow1ListCount = reportsRow1List.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow1ListCount;i++)
		{
			String data = reportsRow1List.get(i).getText();
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = "[Vendor A 033-001]";


		int reportsRow2ListCount = reportsRow2List.size();
		ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
		for(int i=3;i<reportsRow2ListCount;i++)
		{
			String data = reportsRow2List.get(i).getText();
			reportsRow2ListArray.add(data);
		}
		String actRow2List = reportsRow2ListArray.toString();
		String expRow2List = "[STD RATE COGS ACC INV, , 112.00, 112.00, , 7.84, 7.84, , 112.00, 112.00, Indian Rupees]";


		int reportsByWarehouseRow3ListCount = reportsRow3List.size();
		ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
		{
			String data = reportsRow3List.get(i).getText();
			reportsByWarehouseRow3ListArray.add(data);
		}
		String actRow3List = reportsByWarehouseRow3ListArray.toString();
		String expRow3List = "[Total, , , , 112.00, 112.00, , 7.84, 7.84, , 112.00, 112.00, ]";


		System.out.println("ActualRow1List Values   " +actRow1List);
		System.out.println("ExpectedRow1List Values " +expRow1List);

		System.out.println("ActualRow2List Values  " +actRow2List);
		System.out.println("ExpectedRow1List Values" +expRow2List);

		System.out.println("ActualRow3List Values  " +actRow3List);
		System.out.println("ExpectedRow3List Values" +expRow3List);

		if (actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) 
				&& actRow3List.equalsIgnoreCase(expRow3List)) 
		{
			return true;
		}
		else 
		{
			return false;
		}

	}

	@FindBy(xpath="//*[@id='135']/span[1]")
	public static WebElement  inventoryExpandBtn;

	@FindBy(xpath="//*[@id='200']/span")
	public static WebElement  inventoryReportsExpandBtn;


	@FindBy(xpath="//*[@id='137']")
	public static WebElement  inventoryTransactionExpandBtn;

	@FindBy(xpath="//*[@id='139']")
	public static WebElement  inventoryPurchasesBtn;

	@FindBy(xpath="//*[@id='140']")
	public static WebElement  inventorySalesBtn;

	@FindBy(xpath="//*[@id='2033']")
	public static WebElement  stocksBtn;

	@FindBy(xpath="//*[@id='id_mainreportmenuheadings']/ul/li[9]/a/i")
	public static WebElement  stockledgerOkBtn;

	public static boolean checkStockLedgerReportForAddToStockOption() throws InterruptedException
	{

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryExpandBtn));		
		inventoryExpandBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsExpandBtn));		
		inventoryReportsExpandBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(StockledgerBtn));		
		StockledgerBtn.click();

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountSearchTextArea));		
		accountSearchTextArea.sendKeys("STD RATE COGS ITEM");
		accountSearchTextArea.sendKeys(Keys.ENTER);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountsFirtCheckbox));		
		accountsFirtCheckbox.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockledgerOkBtn));	
		stockledgerOkBtn.click();


		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledgerTitle));		
		String actlegerTitleValue =stockLedgerTile.getText();
		System.out.println("Stock ledger title: "+actlegerTitleValue);
		String expLedgerTitleValue = "Stock ledger of STD RATE COGS ITEM STD RATE COGS ITEM";*/


		int reportsByWarehouseRow1ListCount = reportsRow1List.size();
		ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
		{
			String data = reportsRow1List.get(i).getText();
			reportsByWarehouseRow1ListArray.add(data);
		}
		String actRow1List = reportsByWarehouseRow1ListArray.toString();
		String expRow1List = "[STD RATE COGS ITEM STD RATE COGS ITEM]";


		int reportsByWarehouseRow2ListCount = reportsRow2List.size();
		ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
		for(int i=3;i<reportsByWarehouseRow2ListCount;i++)
		{
			String data = reportsRow2List.get(i).getText();
			reportsByWarehouseRow2ListArray.add(data);
		}
		String actRow2List = reportsByWarehouseRow2ListArray.toString();
		String expRow2List = "[120.00, 0.90, , , 120.00, 108.00, , 108.00, 0.90, , , ]";


		int reportsByWarehouseRow3ListCount = reportsRow3List.size();
		ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
		{
			String data = reportsRow3List.get(i).getText();
			reportsByWarehouseRow3ListArray.add(data);
		}
		String actRow3List = reportsByWarehouseRow3ListArray.toString();
		String expRow3List = "[Sub Total, , 120.00, 0.90, , , 120.00, 108.00, , 108.00, 0.90, , , ]";


		int reportsByWarehouseRow4ListCount = reportsRow4List.size();
		ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
		for(int i=1;i<reportsByWarehouseRow4ListCount;i++)
		{
			String data = reportsRow4List.get(i).getText();
			reportsByWarehouseRow4ListArray.add(data);
		}
		String actRow4List = reportsByWarehouseRow4ListArray.toString();
		String expRow4List = "[Grand Total, , 120.00, 0.90, , , 120.00, 108.00, , 108.00, 0.90, , , ]";

		System.out.println("ActualRow1List Values   " +actRow1List);
		System.out.println("ExpectedRow1List Values " +expRow1List);

		System.out.println("ActualRow2List Values  " +actRow2List);
		System.out.println("ExpectedRow1List Values" +expRow2List);

		System.out.println("ActualRow3List Values  " +actRow3List);
		System.out.println("ExpectedRow3List Values" +expRow3List);


		System.out.println("ActualRow4List Values   " +actRow4List);
		System.out.println("ExpectedRow4List Values " +expRow4List);

		if (/*actlegerTitleValue.equalsIgnoreCase(expLedgerTitleValue) && */actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) 
				&& actRow3List.equalsIgnoreCase(expRow3List) &&  actRow4List.equalsIgnoreCase(expRow4List)) 
		{
			return true;
		} 
		else
		{
			return false;
		}

	}

	public static boolean checkAddingFieldWithhAddToNetDeductStock() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenaddBtn));
		editScreenaddBtn.click();

		getWaitForAlert();

		String actAlertTxt				=getAlert().getText();
		String expAlertTxt				="This field must be Map in linked vouchers";

		getAlert().accept();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
		editScreenCaptionTxt.sendKeys("AddToNetDeductFromStock");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenDefaultValueTxt));
		editScreenDefaultValueTxt.sendKeys("5");
		editScreenDefaultValueTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenNoOfDecimalsTxt));
		editScreenNoOfDecimalsTxt.sendKeys("2");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenToolTipTxt));
		editScreenToolTipTxt.sendKeys("Default_ToolTipText");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBannerTextTxt));
		editScreenBannerTextTxt.sendKeys("Default_BannerText");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenMinimunValueTxt));
		editScreenMinimunValueTxt.sendKeys("2");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenMaximunValueTxt));
		editScreenMaximunValueTxt.sendKeys("15");

		Thread.sleep(2000);
		Select sc = new Select(editScreenAddToNetDropdown);
		sc.selectByVisibleText("Add");

		Select sc2 = new Select(EditScreenAddToStockDropDown);
		sc2.selectByVisibleText("Deduct");


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenApplyBtn));
		editScreenApplyBtn.click();		

		String expMessage = "Data saved successfully";
		String actMessage = checkValidationMessage(expMessage);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UpdateBtn));
		UpdateBtn.click();	


		String expMessage1 = "Data saved successfully";
		String actMessage1 = checkValidationMessage(expMessage1);

		if (actMessage.equalsIgnoreCase(expMessage))
		{
			return  true;
		} 
		else 
		{
			return false;

		}
	}


	public static boolean checkAddingFieldWithAddToNetNotApplicableforAddToStock() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenaddBtn));
		editScreenaddBtn.click();

		getWaitForAlert();

		String actAlertTxt				=getAlert().getText();
		String expAlertTxt				="This field must be Map in linked vouchers";

		getAlert().accept();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
		editScreenCaptionTxt.sendKeys("AddToNetNotApplicableToStock");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenDefaultValueTxt));
		editScreenDefaultValueTxt.sendKeys("2");
		editScreenDefaultValueTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenNoOfDecimalsTxt));
		editScreenNoOfDecimalsTxt.sendKeys("2");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenToolTipTxt));
		editScreenToolTipTxt.sendKeys("Default_ToolTipText");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBannerTextTxt));
		editScreenBannerTextTxt.sendKeys("Default_BannerText");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenMinimunValueTxt));
		editScreenMinimunValueTxt.sendKeys("2");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenMaximunValueTxt));
		editScreenMaximunValueTxt.sendKeys("20");

		Thread.sleep(2000);
		Select sc = new Select(editScreenAddToNetDropdown);
		sc.selectByVisibleText("Add");

		Select sc2 = new Select(EditScreenAddToStockDropDown);
		sc2.selectByVisibleText("Not Applicable");


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenApplyBtn));
		editScreenApplyBtn.click();		

		String expMessage = "Data saved successfully";
		String actMessage = checkValidationMessage(expMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UpdateBtn));
		UpdateBtn.click();	

		String expMessage1 = "Data saved successfully";
		String actMessage1 = checkValidationMessage(expMessage);

		if (actMessage.equalsIgnoreCase(expMessage))
		{
			return  true;
		} 
		else 
		{
			return false;

		}
	}

	public static boolean checkAddingFieldsWithDeductAsAddToNetADDAsAddToStockInPvVAT() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{

		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenaddBtn));
		editScreenaddBtn.click();

		getWaitForAlert();

		String actAlertTxt				=getAlert().getText();
		String expAlertTxt				="This field must be Map in linked vouchers";

		getAlert().accept();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
		editScreenCaptionTxt.sendKeys("DeductAsAddToNetAddAsAddToStock");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenDefaultValueTxt));
		editScreenDefaultValueTxt.sendKeys("3");
		editScreenDefaultValueTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenNoOfDecimalsTxt));
		editScreenNoOfDecimalsTxt.sendKeys("2");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenToolTipTxt));
		editScreenToolTipTxt.sendKeys("Default_ToolTipText");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBannerTextTxt));
		editScreenBannerTextTxt.sendKeys("Default_BannerText");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenMinimunValueTxt));
		editScreenMinimunValueTxt.sendKeys("2");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenMaximunValueTxt));
		editScreenMaximunValueTxt.sendKeys("8");

		Thread.sleep(2000);
		Select sc = new Select(editScreenAddToNetDropdown);
		sc.selectByVisibleText("Deduct");

		Select sc2 = new Select(EditScreenAddToStockDropDown);
		sc2.selectByVisibleText("Add");


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenApplyBtn));
		editScreenApplyBtn.click();		

		String expMessage = "Data saved successfully";
		String actMessage = checkValidationMessage(expMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UpdateBtn));
		UpdateBtn.click();		

		String expMessage1 = "Data saved successfully";
		String actMessage1 = checkValidationMessage(expMessage);

		if (actMessage.equalsIgnoreCase(expMessage))
		{
			return  true;
		} 
		else 
		{
			return false;

		}
	}

	public static boolean checkAddingFieldWithNotApplicableAsAddToNetAddAsAddToStock() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenaddBtn));
		editScreenaddBtn.click();

		getWaitForAlert();

		String actAlertTxt				=getAlert().getText();
		String expAlertTxt				="This field must be Map in linked vouchers";

		getAlert().accept();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
		editScreenCaptionTxt.sendKeys("NotApplicableToAddToNetAddToAddToStock");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenDefaultValueTxt));
		editScreenDefaultValueTxt.sendKeys("2");
		editScreenDefaultValueTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenNoOfDecimalsTxt));
		editScreenNoOfDecimalsTxt.sendKeys("2");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenToolTipTxt));
		editScreenToolTipTxt.sendKeys("Default_ToolTipText");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBannerTextTxt));
		editScreenBannerTextTxt.sendKeys("Default_BannerText");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenMinimunValueTxt));
		editScreenMinimunValueTxt.sendKeys("2");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenMaximunValueTxt));
		editScreenMaximunValueTxt.sendKeys("9");

		Thread.sleep(2000);
		Select sc = new Select(editScreenAddToNetDropdown);
		sc.selectByVisibleText("Not Applicable");

		Select sc2 = new Select(EditScreenAddToStockDropDown);
		sc2.selectByVisibleText("Add");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenApplyBtn));
		editScreenApplyBtn.click();		

		String expMessage = "Data saved successfully";
		String actMessage = checkValidationMessage(expMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UpdateBtn));
		UpdateBtn.click();	



		String expMessage1 = "Data saved successfully";
		String actMessage1 = checkValidationMessage(expMessage);

		if (actMessage.equalsIgnoreCase(expMessage))
		{
			return  true;
		} 
		else 
		{
			return false;

		}
	}

	public static boolean checkAddingFieldsWithDeductAsAddToNetDeductasAddToStock() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenaddBtn));
		editScreenaddBtn.click();

		getWaitForAlert();

		String actAlertTxt				=getAlert().getText();
		String expAlertTxt				="This field must be Map in linked vouchers";

		getAlert().accept();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
		editScreenCaptionTxt.sendKeys("DeductAddToNetDeductToAddToStock");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenDefaultValueTxt));
		editScreenDefaultValueTxt.sendKeys("2");
		editScreenDefaultValueTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenNoOfDecimalsTxt));
		editScreenNoOfDecimalsTxt.sendKeys("2");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenToolTipTxt));
		editScreenToolTipTxt.sendKeys("Default_ToolTipText");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBannerTextTxt));
		editScreenBannerTextTxt.sendKeys("Default_BannerText");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenMinimunValueTxt));
		editScreenMinimunValueTxt.sendKeys("2");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenMaximunValueTxt));
		editScreenMaximunValueTxt.sendKeys("9");

		Thread.sleep(2000);
		Select sc = new Select(editScreenAddToNetDropdown);
		sc.selectByVisibleText("Deduct");

		Select sc2 = new Select(EditScreenAddToStockDropDown);
		sc2.selectByVisibleText("Deduct");


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenApplyBtn));
		editScreenApplyBtn.click();		

		String expMessage = "Data saved successfully";
		String actMessage = checkValidationMessage(expMessage);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UpdateBtn));
		UpdateBtn.click();

		String expMessage1 = "Data saved successfully";
		String actMessage1 = checkValidationMessage(expMessage);

		if (actMessage.equalsIgnoreCase(expMessage))
		{
			return  true;
		} 
		else 
		{
			return false;

		}

	}

	public static boolean checkAddingFieldWithNotApplicableAsAddToNetNotApplicableAsAddToStock() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenaddBtn));
		editScreenaddBtn.click();

		getWaitForAlert();

		String actAlertTxt				=getAlert().getText();
		String expAlertTxt				="This field must be Map in linked vouchers";

		getAlert().accept();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
		editScreenCaptionTxt.sendKeys("NotApplicableToAddToNetNotApplicableToAddToStock");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenDefaultValueTxt));
		editScreenDefaultValueTxt.sendKeys("2");
		editScreenDefaultValueTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenNoOfDecimalsTxt));
		editScreenNoOfDecimalsTxt.sendKeys("2");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenToolTipTxt));
		editScreenToolTipTxt.sendKeys("Default_ToolTipText");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBannerTextTxt));
		editScreenBannerTextTxt.sendKeys("Default_BannerText");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenMinimunValueTxt));
		editScreenMinimunValueTxt.sendKeys("2");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenMaximunValueTxt));
		editScreenMaximunValueTxt.sendKeys("9");

		Thread.sleep(2000);
		Select sc = new Select(editScreenAddToNetDropdown);
		sc.selectByVisibleText("Not Applicable");

		Select sc2 = new Select(EditScreenAddToStockDropDown);
		sc2.selectByVisibleText("Not Applicable");


		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenApplyBtn));
		editScreenApplyBtn.click();		

		String expMessage = "Data saved successfully";
		String actMessage = checkValidationMessage(expMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UpdateBtn));
		UpdateBtn.click();

		String expMessage1 = "Data saved successfully";
		String actMessage1 = checkValidationMessage(expMessage);

		if (actMessage.equalsIgnoreCase(expMessage))
		{
			return  true;
		} 
		else 
		{
			return false;

		}	
	}


	public static boolean checkAddingFieldWithRoundOffsAsHighest() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PreferencesBtn));
		PreferencesBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesVoucherVatBtn));
		purchasesVoucherVatBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTabInDC));
		editScreenTabInDC.click();

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenaddBtn));
		editScreenaddBtn.click();

		getWaitForAlert();

		String actAlertTxt				=getAlert().getText();
		String expAlertTxt				="This field must be Map in linked vouchers";

		getAlert().accept();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
		editScreenCaptionTxt.sendKeys("RoundOffTo");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenDefaultValueTxt));
		editScreenDefaultValueTxt.sendKeys("5.4");
		editScreenDefaultValueTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenNoOfDecimalsTxt));
		editScreenNoOfDecimalsTxt.sendKeys("2");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenToolTipTxt));
		editScreenToolTipTxt.sendKeys("Default_ToolTipText");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBannerTextTxt));
		editScreenBannerTextTxt.sendKeys("Default_BannerText");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenRoundOffToTxt));
		editScreenRoundOffToTxt.sendKeys("6");

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenApplyBtn));
		editScreenApplyBtn.click();		

		String expMessage = "Data saved successfully";
		String actMessage = checkValidationMessage(expMessage);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UpdateBtn));
		UpdateBtn.click();	


		if (actMessage.equalsIgnoreCase(expMessage))
		{
			return  true;
		} 
		else 
		{
			return false;

		}
	}


	@FindBy(xpath="//table[@id='editScreen_bodyTable']/tbody/tr/td[1]/span[1]")
	public static List<WebElement> editScreenEditIconList;

	@FindBy(xpath="//table[@id='editScreen_bodyTable']/tbody/tr/td[3]")
	public static List<WebElement> editScreenCaptionList;


	@FindBy(xpath="//td[@id='editScreen_bodyrow_9 _1']/span[@id='editIcon']")
	public static WebElement editBtn_9;

	@FindBy(xpath="//td[@id='editScreen_bodyrow_10 _1']/span[@id='editIcon']")
	public static WebElement editBtn_10;

	@FindBy(xpath="//td[@id='editScreen_bodyrow_11 _1']/span[@id='editIcon']")
	public static WebElement editBtn_11;

	@FindBy(xpath="//td[@id='editScreen_bodyrow_12 _1']/span[@id='editIcon']")
	public static WebElement editBtn_12;

	@FindBy(xpath="//td[@id='editScreen_bodyrow_13 _1']/span[@id='editIcon']")
	public static WebElement editBtn_13;

	@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_FieldDetails']/div[19]/div[2]/label/span")
	public static WebElement hideFromSummaryChkBox;

	@FindBy(xpath="//*[@id='id_transactionentry_summary']//table/tbody/tr/td")
	public static WebElement SummaryExpansionBtn;

	@FindBy(xpath="//div[@id='id_transactionentry_summary_static']//label")
	public static List<WebElement> transactionSummaryList;

	@FindBy(xpath="//thead[@id='id_transaction_entry_detail_table_head']/tr/th/div[1]")
	public static List<WebElement> pvVATHeaderFieldList;

	@FindBy(xpath="//input[@id='searchlayout2']")
	public static WebElement editScreenSearchTxt;  

	@FindBy(xpath="//button[@id='btnEditScreenPrev']")
	public static WebElement editScreenPreviousBtn;  

	@FindBy(xpath="//button[@id='btnEditScreenNext']")
	public static WebElement editScreenNextBtn;  

	@FindBy(xpath="//*[@id='editScreen_tabContent']/label")
	public static WebElement editScreenRatePreloadLabel;

	@FindBy(xpath="//select[@id='cmbBehaviour']")
	public static WebElement editScreenBehaviourDropdown;

	@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_textbox']")
	public static WebElement editScreenQuantityPreloadedTxt;


	@FindBy(xpath="//input[@id='editScreen_qtyPreLoaded_formulaText']")
	public static WebElement  formulaTxt;

	@FindBy(xpath="//div[@id='editScreen_qtyPreLoaded_expandedFormula']")
	public static WebElement  expandeFormula;


	public static boolean checkFieldPositionBQ_AddToNetNotApplicableToStock() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PreferencesBtn));
		PreferencesBtn.click();
		
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesVoucherVatBtn));
		purchasesVoucherVatBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTabInDC));
		editScreenTabInDC.click();

		Thread.sleep(2000);

		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenNextBtn));
		editScreenNextBtn.click();*/

		int captionCount = editScreenCaptionList.size();
		for (int i = 0; i < captionCount; i++)
		{
			String data = editScreenCaptionList.get(i).getText();
			if(data.equalsIgnoreCase("AddToNetNotApplicableToStock"))
			{
				editScreenEditIconList.get(i).click();
				break;

			}
		}


		Thread.sleep(2000);

		Select positionDropdown = new Select(editScreenpositionDropdown);
		positionDropdown.selectByValue("0");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenApplyBtn));
		editScreenApplyBtn.click();		

		String expMessage = "Data saved successfully";
		String actMessage = checkValidationMessage(expMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UpdateBtn));
		UpdateBtn.click();

		String expMessage1 = "Data saved successfully";
		String actMessage1 = checkValidationMessage(expMessage1);

		if (actMessage.equalsIgnoreCase(expMessage))
		{
			return  true;
		} 
		else 
		{
			return false;

		}			
	}

	public static boolean checkFieldPositionBQR_DeductAsAddToNetAddAsAddToStock() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{

		int captionCount = editScreenCaptionList.size();
		for (int i = 0; i < captionCount; i++)
		{
			String data = editScreenCaptionList.get(i).getText();
			if(data.equalsIgnoreCase("DeductAsAddToNetAddAsAddToStock"))
			{
				editScreenEditIconList.get(i).click();
				break;

			}
		}


		Thread.sleep(2000);

		Select positionDropdown = new Select(editScreenpositionDropdown);
		positionDropdown.selectByValue("1");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenApplyBtn));
		editScreenApplyBtn.click();		

		String expMessage = "Data saved successfully";
		String actMessage = checkValidationMessage(expMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UpdateBtn));
		UpdateBtn.click();

		String expMessage1 = "Data saved successfully";
		String actMessage1 = checkValidationMessage(expMessage1);

		if (actMessage.equalsIgnoreCase(expMessage))
		{
			return  true;
		} 
		else 
		{
			return false;

		}	
	}


	public static boolean checkFieldPostionBRG_NotApplicableToAddToNetAddToAddToStock() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		int captionCount = editScreenCaptionList.size();
		for (int i = 0; i < captionCount; i++)
		{
			String data = editScreenCaptionList.get(i).getText();
			if(data.equalsIgnoreCase("NotApplicableToAddToNetAddToAddToStock"))
			{
				editScreenEditIconList.get(i).click();
				break;

			}
		}

		Thread.sleep(2000);

		Select positionDropdown = new Select(editScreenpositionDropdown);
		positionDropdown.selectByValue("2");		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenApplyBtn));
		editScreenApplyBtn.click();		

		String expMessage = "Data saved successfully";
		String actMessage = checkValidationMessage(expMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UpdateBtn));
		UpdateBtn.click();

		String expMessage1 = "Data saved successfully";
		String actMessage1 = checkValidationMessage(expMessage1);

		if (actMessage.equalsIgnoreCase(expMessage))
		{
			return  true;
		} 
		else 
		{
			return false;

		}	
	}


	public static boolean checkFieldPositionAG_DeductAddToNetDeductToAddToStock() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{

		int captionCount = editScreenCaptionList.size();
		for (int i = 0; i < captionCount; i++)
		{
			String data = editScreenCaptionList.get(i).getText();
			if(data.equalsIgnoreCase("DeductAddToNetDeductToAddToStock"))
			{
				editScreenEditIconList.get(i).click();
				break;

			}
		}
		Thread.sleep(2000);

		Select positionDropdown = new Select(editScreenpositionDropdown);
		positionDropdown.selectByValue("3");		

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenApplyBtn));
		editScreenApplyBtn.click();		

		String expMessage = "Data saved successfully";
		String actMessage = checkValidationMessage(expMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UpdateBtn));
		UpdateBtn.click();

		String expMessage1 = "Data saved successfully";
		String actMessage1 = checkValidationMessage(expMessage1);

		if (actMessage.equalsIgnoreCase(expMessage))
		{
			return  true;
		} 
		else 
		{
			return false;

		}	
	}
	public static boolean checkHiddenPropertyForNotApplicableToAddToNetNotApplicableToAddToStockField() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{


		int captionCount = editScreenCaptionList.size();
		for (int i = 0; i < captionCount; i++)
		{
			String data = editScreenCaptionList.get(i).getText();
			if(data.equalsIgnoreCase("NotApplicableToAddToNetNotApplicableToAddToStock"))
			{
				editScreenEditIconList.get(i).click();
				break;

			}
		}
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(hideFromSummaryChkBox));
		hideFromSummaryChkBox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenApplyBtn));
		editScreenApplyBtn.click();		

		String expMessage = "Data saved successfully";
		String actMessage = checkValidationMessage(expMessage);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UpdateBtn));
		UpdateBtn.click();

		String expMessage1 = "Data saved successfully";
		String actMessage1 = checkValidationMessage(expMessage1);

		if (actMessage.equalsIgnoreCase(expMessage))
		{
			return  true;
		} 
		else 
		{
			return false;
		}

	}

	@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_RestrictMsg']")
	public static WebElement editScreenRestrictMessageBtn;  


	@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_RestrictFormula_formulaText']")
	public static WebElement restrictFormulaFrmulaTxtHidden;



	@FindBy(xpath="//tbody[@id='formulaGrideditScreen_FieldsCustomization_RestrictFormula_body']/tr/td[3]")
	public static List<WebElement> editScreenFormulaNameList;

	@FindBy(xpath="//tbody[@id='formulaGrideditScreen_FieldsCustomization_RestrictFormula_body']/tr/td[4]")
	public static List<WebElement> editScreenFormulaVariableList;

	public static boolean checkRestrictMesageAndRestrictFormulaFields() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{

		Thread.sleep(2000);

	/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenPreviousBtn));
		editScreenPreviousBtn.click();
*/
		Thread.sleep(1000);


		int captionCount = editScreenCaptionList.size();
		for (int i = 0; i < captionCount; i++)
		{
			String data = editScreenCaptionList.get(i).getText();
			if(data.equalsIgnoreCase("Caption_Default_Text"))
			{
				editScreenEditIconList.get(i).click();
				break;

			}
		}

		Thread.sleep(2000);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenDefaultValueTxt));
		editScreenDefaultValueTxt.sendKeys("0");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenMinimunValueTxt));
		editScreenMinimunValueTxt.sendKeys("0");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenMaximunValueTxt));
		editScreenMaximunValueTxt.sendKeys("0");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenRestrictFormulaBtn));
		editScreenRestrictFormulaBtn.click();


		String formulaText = null;
		int editScreenFormulaNameListCount = editScreenFormulaNameList.size();
		for(int i=0;i<editScreenFormulaNameListCount;i++)
		{
			String formuladata = editScreenFormulaNameList.get(i).getText();

			if(formuladata.equalsIgnoreCase("Caption_Default_Text Calculated Value"))
			{
				formulaText = editScreenFormulaVariableList.get(i).getText();
				System.out.println("Formula  : "+formulaText);
			}


		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenRestrictFormulaBtn));
		editScreenRestrictFormulaBtn.clear();
		editScreenRestrictFormulaBtn.sendKeys(formulaText+"<5");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenRestrictMessageBtn));
		editScreenRestrictMessageBtn.sendKeys("Field value cannot be less than 5");

		Select positionDropdown = new Select(editScreenpositionDropdown);
		positionDropdown.selectByValue("0");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenApplyBtn));
		editScreenApplyBtn.click();		

		String expMessage = "Data saved successfully";
		String actMessage = checkValidationMessage(expMessage);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UpdateBtn));
		UpdateBtn.click();	

		if (actMessage.equalsIgnoreCase(expMessage))
		{
			return  true;
		} 
		else 
		{
			return false;

		}
	}




	public static boolean checkFieldsPositionAndHiddenFieldInPvVAT() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionsExpandBtn));
		transactionsExpandBtn.click();

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesExpandBtn));
		purchasesExpandBtn.click();

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesVoucherVATBtn));
		purchasesVoucherVATBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("screen opened");

		ArrayList<String> headerList = new ArrayList<String>();

		int pvVATHeaderCount = pvVATHeaderFieldList.size();
		for (int i = 0; i < pvVATHeaderCount; i++)
		{
			/*((JavascriptExecutor) getDriver()).executeScript("arguments[0].scrollIntoView(true);", pvVATHeaderFieldList.get(i));
			 */
			String data = pvVATHeaderFieldList.get(i).getText();
			System.err.println(i+". "+data);
			headerList.add(data);
		}

		String actHeaderList = headerList.toString();
		String expHeaderList = "[Warehouse, Item, Tax Code, Purchase Account, Units, RD, Avg Rate, Avg Rate(O), Caption_Default_Text, AddToNetDeductFromStock, AddToNetNotApplicableToStock, NotApplicableToAddToNetNotApplicableToAddToStock, Quantity, L-Purchases Orders, DeductAsAddToNetAddAsAddToStock, Rate, NotApplicableToAddToNetAddToAddToStock, Gross, Discount, VAT, Taxable, DeductAddToNetDeductToAddToStock, Batch, Bins, Expiry Date, RMA, Remarks]";

		System.out.println(actHeaderList);
		System.out.println(expHeaderList);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SummaryExpansionBtn));
		SummaryExpansionBtn.click();

		boolean footer = true;

		int summaryCount = transactionSummaryList.size();

		for (int i = 0; i < summaryCount; i++)
		{
			String data = transactionSummaryList.get(i).getText();
			System.out.println("Summary data " +data);

			if (data.equalsIgnoreCase("NotApplicableToAddToNetNotApplicableToAddToStock :")) 
			{
				footer = false;
				break;
			}
		}

		System.out.println("NotApplicableToAddToNetNotApplicableToAddToStock is Hidden  : "+footer);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(3000);
		vendorAccountTxt.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.END);
		departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		departmentTxt.sendKeys(Keys.SPACE);

		int departmentcount=departmentListCount.size();

		System.err.println(departmentcount);

		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getText();

			if(data.equalsIgnoreCase("Dubai"))
			{
				departmentListCount.get(i).click();

				Thread.sleep(1000);

				if(getIsAlertPresent())
				{
					getAlert().accept();
				}

				break;
			}
		}

		departmentTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherVATPlaceOFSupply));
		purchaseVoucherVATPlaceOFSupply.click();
		purchaseVoucherVATPlaceOFSupply.sendKeys(Keys.END);
		purchaseVoucherVATPlaceOFSupply.sendKeys(Keys.SHIFT,Keys.HOME);
		purchaseVoucherVATPlaceOFSupply.sendKeys(Keys.SPACE);


		int placeOFSupplyListCount=placeOFSupplyList.size();

		System.err.println("placeOFSupplyListCount   : "+placeOFSupplyListCount);

		for(int i=0 ; i < placeOFSupplyListCount ;i++)
		{
			String data=placeOFSupplyList.get(i).getText();

			if(data.equalsIgnoreCase("Abu Dhabi"))
			{
				placeOFSupplyList.get(i).click();

				break;
			}
		}


		Thread.sleep(2000);

		purchaseVoucherVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxtt));
		jurisdictionTxtt.click();
		jurisdictionTxtt.sendKeys(Keys.END);
		jurisdictionTxtt.sendKeys(Keys.SHIFT,Keys.HOME);
		jurisdictionTxtt.sendKeys("DUBAI");
		Thread.sleep(2000);
		jurisdictionTxtt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys("Hyderabad");
		Thread.sleep(3000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(3000);
		enter_ItemTxt.sendKeys(Keys.TAB);


		Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		select1stRow_5thColumn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_CaptionDefaultTxt));
		enter_CaptionDefaultTxt.sendKeys("3");
		enter_CaptionDefaultTxt.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		boolean actValue = select1stRow_9thColumn.getText().isEmpty();
		Boolean expValue = true;


		String expMessage = "Field value cannot be less than 5";
		String actMessage= checkValidationMessage(expMessage);

		if (actHeaderList.equalsIgnoreCase(expHeaderList) && footer==true && actMessage.equalsIgnoreCase(expMessage)
				&& actValue == expValue )
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}


	@FindBy(xpath="//a[contains(text(),'Properties')]")
	public static WebElement editScreenPropertiesTab;  

	@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_Properties']/div[1]/label/span")
	public static WebElement editScreenauditTrailChkBox;  

	@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_Properties']/div[2]/label/span")
	public static WebElement editScreencantExportChkBox;  

	@FindBy(xpath="//*[@id='dvEditScreenPropCannotImport']/label/span")
	public static WebElement editScreencantImportChkbox; 

	@FindBy(xpath="//*[@id='dvEditScreenPropHidden']/label/span")
	public static WebElement editScreenhiddenChkbox;  

	@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_chkMandatory']//following-sibling::span")
	public static WebElement editScreenmandatorychkBox; 

	@FindBy(xpath="//*[@id='editScreen_FieldsCustomization_Properties']/div[6]/label/span")
	public static WebElement editScreennotAvailableForReportsChkBox;  

	@FindBy(xpath="//*[@id='dvReadonlyPropHidden']/label/span")
	public static WebElement editScreenreadOnlyChkBox;  
	///////////PV VAT Properties 


	public static boolean checkAudiTrailPropertyForCaption_Default_Text() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesVoucherVatBtn));
		purchasesVoucherVatBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTabInDC));
		editScreenTabInDC.click();

		Thread.sleep(2000);


		int captionCount = editScreenCaptionList.size();
		for (int i = 0; i < captionCount; i++)
		{
			String data = editScreenCaptionList.get(i).getText();
			if(data.equalsIgnoreCase("Caption_Default_Text"))
			{
				editScreenEditIconList.get(i).click();
				break;

			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenPropertiesTab));
		editScreenPropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenauditTrailChkBox));
		editScreenauditTrailChkBox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenApplyBtn));
		editScreenApplyBtn.click();		

		String expMessage = "Data saved successfully";
		String actMessage = checkValidationMessage(expMessage);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UpdateBtn));
		UpdateBtn.click();	

		if (actMessage.equalsIgnoreCase(expMessage))
		{
			return  true;
		} 
		else 
		{
			return false;

		}
	}


	public static boolean checkCannotExportPropertyForAddToNetDeductFromStock() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(2000);


		int captionCount = editScreenCaptionList.size();
		for (int i = 0; i < captionCount; i++)
		{
			String data = editScreenCaptionList.get(i).getText();
			if(data.equalsIgnoreCase("AddToNetDeductFromStock"))
			{
				editScreenEditIconList.get(i).click();
				break;

			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenPropertiesTab));
		editScreenPropertiesTab.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreencantExportChkBox));
		editScreencantExportChkBox.click();
		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenApplyBtn));
		editScreenApplyBtn.click();		

		String expMessage = "Data saved successfully";
		String actMessage = checkValidationMessage(expMessage);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UpdateBtn));
		UpdateBtn.click();	

		if (actMessage.equalsIgnoreCase(expMessage))
		{
			return  true;
		} 
		else 
		{
			return false;

		}
	}

	public static boolean checkCannotImportPropertyForAddToNetNotApplicableToStockField() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(2000);


		int captionCount = editScreenCaptionList.size();
		for (int i = 0; i < captionCount; i++)
		{
			String data = editScreenCaptionList.get(i).getText();
			if(data.equalsIgnoreCase("AddToNetNotApplicableToStock"))
			{
				editScreenEditIconList.get(i).click();
				break;

			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenPropertiesTab));
		editScreenPropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreencantImportChkbox));
		editScreencantImportChkbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenApplyBtn));
		editScreenApplyBtn.click();		

		String expMessage = "Data saved successfully";
		String actMessage = checkValidationMessage(expMessage);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UpdateBtn));
		UpdateBtn.click();	

		if (actMessage.equalsIgnoreCase(expMessage))
		{
			return  true;
		} 
		else 
		{
			return false;

		}
	}
	public static boolean checkHiddenPropertyForDeductAsAddToNetAddAsAddToStock() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsmenuBtn));
		settingsmenuBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
		ConfigureTransactionBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentCustomization45Btn));
		documentCustomization45Btn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesVoucherVatBtn));
		purchasesVoucherVatBtn.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTabInDC));
		editScreenTabInDC.click();

		Thread.sleep(2000);

		
		Thread.sleep(2000);

		int captionCount = editScreenCaptionList.size();
		for (int i = 0; i < captionCount; i++)
		{
			String data = editScreenCaptionList.get(i).getText();
			if(data.equalsIgnoreCase("DeductAsAddToNetAddAsAddToStock"))
			{
				editScreenEditIconList.get(i).click();
				break;

			}
		}

		Thread.sleep(4000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenPropertiesTab));
		editScreenPropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenhiddenChkbox));
		editScreenhiddenChkbox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenApplyBtn));
		editScreenApplyBtn.click();		

		String expMessage = "Data saved successfully";
		String actMessage = checkValidationMessage(expMessage);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UpdateBtn));
		UpdateBtn.click();	

		if (actMessage.equalsIgnoreCase(expMessage))
		{
			return  true;
		} 
		else 
		{
			return false;

		}


	}

	public static boolean checkMandatoryPropertyForNotApplicableToAddToNetAddToAddToStock() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{

		Thread.sleep(2000);
		int captionCount = editScreenCaptionList.size();
		for (int i = 0; i < captionCount; i++)
		{
			String data = editScreenCaptionList.get(i).getText();
			if(data.equalsIgnoreCase("NotApplicableToAddToNetAddToAddToStock"))
			{
				editScreenEditIconList.get(i).click();
				break;

			}
		}


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenDefaultValueTxt));
		editScreenDefaultValueTxt.clear();
		editScreenDefaultValueTxt.sendKeys(" ");
		editScreenDefaultValueTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenNoOfDecimalsTxt));
		editScreenNoOfDecimalsTxt.sendKeys(" ");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenToolTipTxt));
		editScreenToolTipTxt.sendKeys("");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenBannerTextTxt));
		editScreenBannerTextTxt.sendKeys("");


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenMinimunValueTxt));
		editScreenMinimunValueTxt.clear();
		editScreenMinimunValueTxt.sendKeys(" ");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenMaximunValueTxt));
		editScreenMaximunValueTxt.clear();
		editScreenMaximunValueTxt.sendKeys(" ");

		Select sc =new Select(editScreenpositionDropdown);
		sc.selectByValue("3");

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenPropertiesTab));
		editScreenPropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenmandatorychkBox));
		editScreenmandatorychkBox.click();

		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenApplyBtn));
		editScreenApplyBtn.click();	
		Thread.sleep(2000);

		String expMessage = "Data saved successfully";
		String actMessage = checkValidationMessage(expMessage);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UpdateBtn));
		UpdateBtn.click();	

		if (actMessage.equalsIgnoreCase(expMessage))
		{
			return  true;
		} 
		else 
		{
			return false;

		}
	}

	public static boolean checkReadOnlyPropertyForNotApplicableToAddToNetNotApplicableToAddToStock() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{	

		Thread.sleep(3000);
		int captionCount = editScreenCaptionList.size();
		for (int i = 0; i < captionCount; i++)
		{
			String data = editScreenCaptionList.get(i).getText();
			if(data.equalsIgnoreCase("NotApplicableToAddToNetNotApplicableToAddToStock"))
			{
				editScreenEditIconList.get(i).click();
				break;

			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenPropertiesTab));
		editScreenPropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenreadOnlyChkBox));
		editScreenreadOnlyChkBox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenApplyBtn));
		editScreenApplyBtn.click();		

		String expMessage = "Data saved successfully";
		String actMessage = checkValidationMessage(expMessage);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UpdateBtn));
		UpdateBtn.click();	

		if (actMessage.equalsIgnoreCase(expMessage))
		{
			return  true;
		} 
		else 
		{
			return false;

		}

	}

	public static boolean checkNotAvailableForReportsForDeductAddToNetDeductToAddToStock() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		int captionCount = editScreenCaptionList.size();
		for (int i = 0; i < captionCount; i++)
		{
			String data = editScreenCaptionList.get(i).getText();
			if(data.equalsIgnoreCase("DeductAddToNetDeductToAddToStock"))
			{
				editScreenEditIconList.get(i).click();
				break;

			}
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenPropertiesTab));
		editScreenPropertiesTab.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreennotAvailableForReportsChkBox));
		editScreennotAvailableForReportsChkBox.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenApplyBtn));
		editScreenApplyBtn.click();		

		String expMessage = "Data saved successfully";
		String actMessage = checkValidationMessage(expMessage);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(UpdateBtn));
		UpdateBtn.click();	

		if (actMessage.equalsIgnoreCase(expMessage))
		{
			return  true;
		} 
		else 
		{
			return false;

		}

	}

	public static boolean checkAddedPropertiesForAllFieldsInPvVAT() throws EncryptedDocumentException, InvalidFormatException, InterruptedException, IOException
	{
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionsExpandBtn));
		transactionsExpandBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesExpandBtn));
		purchasesExpandBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesVoucherVATBtn));
		purchasesVoucherVATBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
		newBtn.click();

		checkValidationMessage("screen opened");


		//validating hidden property

		ArrayList<String> headerList = new ArrayList<String>();

		int pvVATHeaderCount = pvVATHeaderFieldList.size();
		for (int i = 0; i < pvVATHeaderCount; i++)
		{	
			Thread.sleep(3000);
			((JavascriptExecutor) getDriver()).executeScript("arguments[0].scrollIntoView(true);", pvVATHeaderFieldList.get(i));

			String data = pvVATHeaderFieldList.get(i).getText();
			System.err.println(i+". "+data);
			headerList.add(data);
		}

		String actHeaderList = headerList.toString();
		String expHeaderList = "[Warehouse, Item, Tax Code, Purchase Account, Units, RD, Avg Rate, Avg Rate(O), Caption_Default_Text, AddToNetDeductFromStock, AddToNetNotApplicableToStock, NotApplicableToAddToNetNotApplicableToAddToStock, Quantity, L-Purchases Orders, , Rate, Gross, Discount, VAT, Taxable, NotApplicableToAddToNetAddToAddToStock, DeductAddToNetDeductToAddToStock, Batch, Bins, Expiry Date, RMA, Remarks]";

		System.out.println(actHeaderList);
		System.out.println(expHeaderList);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SummaryExpansionBtn));
		SummaryExpansionBtn.click();

		boolean footer = true;

		int summaryCount = transactionSummaryList.size();

		for (int i = 0; i < summaryCount; i++)
		{
			String data = transactionSummaryList.get(i).getText();
			System.out.println("Summary data " +data);

			if (data.equalsIgnoreCase("DeductAsAddToNetAddAsAddToStock :")) 
			{
				footer = false;
				break;
			}
		}


		System.out.println("DeductAsAddToNetAddAsAddToStock is Hidden  : "+footer);

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SummaryExpansionBtn));
		SummaryExpansionBtn.click();


		//Mandatory validation

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		vendorAccountTxt.sendKeys("Vendor A");
		Thread.sleep(3000);
		vendorAccountTxt.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		departmentTxt.click();
		departmentTxt.sendKeys(Keys.END);
		departmentTxt.sendKeys(Keys.SHIFT,Keys.HOME);
		departmentTxt.sendKeys(Keys.SPACE);

		int departmentcount=departmentListCount.size();

		System.err.println(departmentcount);

		for(int i=0 ; i < departmentcount ;i++)
		{
			String data=departmentListCount.get(i).getText();

			if(data.equalsIgnoreCase("Dubai"))
			{
				departmentListCount.get(i).click();

				Thread.sleep(1000);

				if(getIsAlertPresent())
				{
					getAlert().accept();
				}

				break;
			}
		}

		departmentTxt.sendKeys(Keys.TAB);	

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVoucherVATPlaceOFSupply));
		purchaseVoucherVATPlaceOFSupply.click();
		purchaseVoucherVATPlaceOFSupply.sendKeys(Keys.END);
		purchaseVoucherVATPlaceOFSupply.sendKeys(Keys.SHIFT,Keys.HOME);
		purchaseVoucherVATPlaceOFSupply.sendKeys(Keys.SPACE);


		int placeOFSupplyListCount=placeOFSupplyList.size();

		System.err.println("placeOFSupplyListCount   : "+placeOFSupplyListCount);

		for(int i=0 ; i < placeOFSupplyListCount ;i++)
		{
			String data=placeOFSupplyList.get(i).getText();

			if(data.equalsIgnoreCase("Abu Dhabi"))
			{
				placeOFSupplyList.get(i).click();

				break;
			}
		}


		Thread.sleep(2000);

		purchaseVoucherVATPlaceOFSupply.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxtt));
		jurisdictionTxtt.click();
		jurisdictionTxtt.sendKeys(Keys.END);
		jurisdictionTxtt.sendKeys(Keys.SHIFT,Keys.HOME);
		jurisdictionTxtt.sendKeys("DUBAI");
		Thread.sleep(2000);
		jurisdictionTxtt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		select1stRow_1stColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWareHouseTxt));
		pvWareHouseTxt.sendKeys("Hyderabad");
		Thread.sleep(3000);
		pvWareHouseTxt.sendKeys(Keys.TAB);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
		enter_ItemTxt.sendKeys("STD RATE COGS ITEM");
		Thread.sleep(3000);
		enter_ItemTxt.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		select1stRow_9thColumn.click();
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_CaptionDefaultTxt));
		enter_CaptionDefaultTxt.sendKeys("15");
		enter_CaptionDefaultTxt.sendKeys(Keys.TAB);

		Thread.sleep(2000);

		//Validating read only property
		boolean actReadOnlyDisplay = enter_NotApplicableAddToNetNotApplicableAddToStock.isDisplayed();
		boolean expReadOnlyDisplay = false;
		System.out.println("Actual Read only: "+actReadOnlyDisplay);

		boolean actReadOnlyEnabled = enter_NotApplicableAddToNetNotApplicableAddToStock.isDisplayed();
		boolean expReadOnlyEnabled = false;
		System.out.println("Actual Read only: "+actReadOnlyEnabled);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
		select1stRow_13thColumn.click();


		enter_Quantity.sendKeys("10");
		enter_Quantity.sendKeys(Keys.TAB);



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RateTxt));
		enter_RateTxt.clear();
		enter_RateTxt.sendKeys("10");
		enter_RateTxt.sendKeys(Keys.TAB);

		enter_GrossTxt.click();
		enter_GrossTxt.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));
		voucherSaveBtn.click();

		String expMessage = "Provide data for mandatory fields NotApplicableToAddToNetAddToAddToStock";

		String actMessage = checkValidationMessage(expMessage);



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_21stColumn));
		select1stRow_21stColumn.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_NotApplicableAddToNetAddToStock));
		enter_NotApplicableAddToNetAddToStock.click();
		enter_NotApplicableAddToNetAddToStock.sendKeys("2");
		enter_NotApplicableAddToNetAddToStock.sendKeys(Keys.TAB);



		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherSaveBtn));
		voucherSaveBtn.click();


		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bellRefPickIcon));
		bellRefPickIcon.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(billRefOkBtn));
		billRefOkBtn.click();

		String expMessage1 = "Voucher saved successfully";

		String actMessage1 = checkValidationMessage(expMessage);



		if (actHeaderList.equalsIgnoreCase(expHeaderList) && footer==true 
				&& actMessage.equalsIgnoreCase(expMessage) 
				&& actReadOnlyDisplay == expReadOnlyDisplay && actReadOnlyEnabled == expReadOnlyEnabled)
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}

	@FindBy(xpath="(//span[@class='theme_button_color']/i[@class='icon-font6 icon-custamize'])[2]")
	public static WebElement ledgerCustomizeBtn;


	@FindBy(xpath="//*[@id='id_Trans_spanPlus']")
	public static WebElement ledgerTransactionExpandBtn;

	@FindBy(xpath="//*[@id='rd_customization_tree2']/span/span/i")
	public static WebElement ledgerExtraFieldExpandBtn;


	@FindBy(xpath="//ul[@data-text = 'show']//li")
	public static List<WebElement> extraFieldsList;


	public static boolean checkNotAvailableForReportsForDeductAddToNetDeductToAddToStockInLedger() throws InterruptedException
	{
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finacinalsMenu));
		finacinalsMenu.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportsMenuInFinancials));
		reportsMenuInFinancials.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledgerBtn));
		ledgerBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountSearchTextArea));
		accountSearchTextArea.sendKeys("STD RATE COGS ACC INV");
		accountSearchTextArea.sendKeys(Keys.ENTER);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountsFirtCheckbox));
		accountsFirtCheckbox.click();

		Thread.sleep(2000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledgerOkBtn));
		ledgerOkBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledgerTitle));
		String actledgerTitle = ledgerTitle.getText();
		String expLedgerTitle = "Ledger  of STD RATE COGS ACC INV STD RATE COGS ACC INV";

		System.out.println("LedgerTitle : "+actledgerTitle);

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledgerCustomizeBtn));
		ledgerCustomizeBtn.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledgerTransactionExpandBtn));
		ledgerTransactionExpandBtn.click();

		Thread.sleep(3000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledgerExtraFieldExpandBtn));
		ledgerExtraFieldExpandBtn.click();

		int listCount = extraFieldsList.size();
		boolean field=true;

		ArrayList<String> fieldsList = new ArrayList<String>();

		for (int i = 0; i < listCount; i++)
		{
			String data = extraFieldsList.get(i).getText();
			fieldsList.add(data);
			if(data.equalsIgnoreCase("DeductAddToNetDeductToAddToStock"))     
			{
				field = false;
				break;
			}
		}


		System.out.println("FieldList: "+fieldsList);

		if (actledgerTitle.equalsIgnoreCase(expLedgerTitle) && field == true)
		{
			return true;

		} 
		else
		{
			return false;

		}

	}

	//*[@id="oTransImportVouchers"]
	@FindBy(xpath="//*[@id='oTransImportVouchers']")
	public static WebElement voucherTypeComboBox;





	//Home Menu


	//Utilities Menu		
	@FindBy (xpath="//*[@id='20']/span")
	public static WebElement utilities;



	@FindBy (xpath="//input[@id='oTransImportVouchers']")
	public static WebElement transImpVoucherTyeDrpdwn;

	@FindBy (xpath="//*[@id='btnTrnsImpBrowse']")
	public static WebElement transImpFileNameBtn;

	@FindBy (xpath="//input[@id='txtTrnsImpFile']")
	public static WebElement transImpFileNameTxt;

	@FindBy (xpath="//select[@id='ddlDAccInATrnsTagTo']")
	public static WebElement transImpAccInTransTaggedDrpdwn;

	@FindBy (xpath="//select[@id='ddlDProInATrnsTagTo']")
	public static WebElement transImpItemInTransTaggedDrpdwn;

	@FindBy (xpath="//select[@id='ddlTagsInTrnsTagTo']")
	public static WebElement transImpTransInTaggedDrpdwn;

	@FindBy (xpath="//*[@id='RestoreControls']/ul/li/div[1]")
	public static WebElement TransImpSaveTempleteBtn;

	@FindBy (xpath="//*[@id='RestoreControls']/ul/li/div[2]")
	public static WebElement transImpImportBtn;

	@FindBy (xpath="//*[@id='RestoreControls']/ul/li/div[3]")
	public static WebElement transImpCloseBtn;

	@FindBy (xpath="//*[@id='grdTransactionImport_body']/tr/td[2]")
	public static List<WebElement> transImpGridFocusFieldColList;


	@FindBy (xpath="//*[@id='grdTransactionImport_body']/tr/td[3]")
	public static List<WebElement> transImpGridDataBaseFieldColList;

	@FindBy (xpath="//*[@id='grdTransactionImport_body']/tr[4]/td[3]")
	public static WebElement transImpgrid4RowCol3;

	@FindBy (xpath="//*[@id='ddlDatabaseField']")
	public static WebElement gridDataBaseList;



	@FindBy (xpath="//*[@id='grdTransactionImport_body']/tr[5]/td[3]")
	public static WebElement transImpgrid5RowCol3;


	@FindBy (xpath="//*[@id='grdTransactionImport_body']/tr[13]/td[3]")
	public static WebElement transImpgrid13RowCol3;


	@FindBy (xpath="//*[@id='grdTransactionImport_body']/tr[14]/td[3]")
	public static WebElement transImpgrid14RowCol3;



	@FindBy (xpath="//*[@id='128']/span")
	public static WebElement transactionImport;
	public static boolean checkCannotImportPropertyForAddToNetNotApplicableToStock() throws IOException, InterruptedException
	{
		Thread.sleep(4000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
		homeMenu.click();

		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(utilities));
		utilities.click();


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionImport));
		transactionImport.click();

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherTypeComboBox));
		voucherTypeComboBox.click();
		voucherTypeComboBox.sendKeys("Purchases Voucher VAT");
		Thread.sleep(2000);
		voucherTypeComboBox.sendKeys(Keys.TAB);


		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transImpFileNameBtn));
		transImpFileNameBtn.click();

		Thread.sleep(5000);

		Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\importPvVAT.exe");

		Thread.sleep(5000);

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transImpImportBtn));
		transImpImportBtn.click();

		if (true)
		{
			return true;
		} 
		else
		{
			return false;
		}	
	}


	public AccountMasterPage(WebDriver driver)
	{
		PageFactory.initElements(driver, this);

	}

}
